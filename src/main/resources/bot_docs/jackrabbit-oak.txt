# --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/.asf.yaml # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # https://cwiki.apache.org/confluence/x/7guybw notifications: commits: oak-commits@jackrabbit.apache.org issues: oak-dev@jackrabbit.apache.org pullrequests: oak-dev@jackrabbit.apache.org jobs: oak-dev@jackrabbit.apache.org discussions: oak-dev@jackrabbit.apache.org github: description: "apache jackrabbit oak" homepage: "https://jackrabbit.apache.org/oak/" labels: - java - jackrabbit - jcr - repository - database autolink_jira: - oak - jcr - jcrvlt - sling - felix # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/check_staged_release.sh # --- #!/bin/sh # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. staging=${1} download=${2:-/tmp/oak-staging} staging_repo="https://repository.apache.org/content/repositories/orgapachejackrabbit-${staging}/org/apache/jackrabbit/" mkdir ${download} 2>/dev/null [ -z "${staging}" -o ! -d "${download}" ] echo "usage: check_staged_release.sh <staging-number> [temp-directory]" exit fi [ ! -e "${download}/${staging}" ] echo "################################################################################" echo " download staged repository " echo "################################################################################" wget --progress=bar -e "robots=off" --wait 1 -r -np "--reject=html,txt" "--follow-tags=" \ -p "${download}/${staging}" -nh "--cut-dirs=3" \ "${staging_repo}" else echo "################################################################################" echo " using existing staged repository " echo "################################################################################" echo "${download}/${staging}" fi echo "################################################################################" echo " check signatures digests " echo "################################################################################" `find "${download}/${staging}" -type f | grep -v '\.\(asc\|sha1\|md5\)$'` f=`echo $i | sed 's/\.asc$//'` echo "$f" gpg --verify $f.asc 2>/dev/null [ "$?" = "0" ]; chksum="good"; else chksum="bad!!!!!!!!"; fi [ ! -f "$f.asc" ]; chksum="----"; fi echo "gpg: ${chksum}" tp md5 sha1 [ ! -f "$f.$tp" ] chksum="----" else a="`cat $f.$tp 2>/dev/null`" b="`openssl $tp < $f 2>/dev/null | sed 's/.*= *//' `" [ "$a" = "$b" ]; chksum="good (`cat $f.$tp`)"; else chksum="bad!! : $a equal $b"; fi fi echo "$tp : ${chksum}" done done [ -z "${chksum}" ]; echo "warning: files found!"; fi echo "################################################################################" # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/release-notes.txt # --- release notes -- apache jackrabbit oak -- version 1.64.0 introduction ------------ jackrabbit oak scalable, high-performance hierarchical content repository designed use foundation modern world-class web sites demanding content applications. apache jackrabbit oak 1.64.0 incremental feature release based compatible earlier stable jackrabbit oak 1.x releases. release considered stable targeted production use. oak 1.64.0 compiles tests successfully java 17, javadocs generation fails java 17 (but works expected java 11). oak effort part apache jackrabbit project. apache jackrabbit project apache software foundation. changes oak 1.64.0 --------------------- technical task [oak-6768] - convert oak-remote osgi r7 annotations [oak-6774] - convert oak-upgrade osgi r7 annotations [oak-10786] - oak-lucene: use copy lucene-core 4.7.2 source code [oak-10787] - oak-lucene: backport fix lucene-core vulnerability bug [oak-10647] - documentnodestore: journal update needs success check [oak-10719] - oak-lucene uses lucene version throw stackoverflowexception [oak-10756] - orderablenodestest.childordercleanupfeaturetoggletest fails -dnsfixtures=document_ns [oak-10767] - oak-it-osgi unnecessarily deploys commons-collections test environment [oak-10775] - leaseupdatesockettimeoutit still wants mongo:4.2 image [oak-10782] - oak-search-elastic: query getsize() lock writes called update [oak-10788] - indexing job downloader: shutdown gracefully threads case failure [oak-10800] - dictionarycompoundwordtokenfilter supported elastic [oak-10814] - tar file recovery still fails snfe cases. improvement [oak-10760] - oak-core check namespace registry consistency startup [oak-10762] - oak-search-elastic: similarity queries produce relevant results uses similartags [oak-10771] - add disk cache size stats issue warning evicted segment zero length [oak-10778] - indexing job: support parallel download mongodb two connections pipelined strategy [oak-10783] - versionableeditor: misleading warn message creating version history [oak-10784] - o.a.j.o.plugins.migration.version.versionableeditor create version storage node, needed [oak-10795] - indexing job: eliminate unnecessary intermediate object creation transform stage [oak-10796] - avoid creation intermediate stringbuilder jsopbuilder [oak-10804] - indexing job: optimize check hidden nodes [oak-10808] - pipelinedmongoconnectionfailureit fail mongo available [oak-10810] - remove redundant call stringcache.get path.fromstring() [oak-10813] - improve performance oak-mongo.js function remove/list nodes task [oak-10579] - bump elasticsearch version 8.11.3 [oak-10596] - improve test coverage o.a.j.o.namepath.jcrpathparser [oak-10694] - remove oak-search-mt [oak-10730] - log mongoexception previously swallowed [oak-10752] - update tomcat jdbc dependency 9.0.87 [oak-10754] - webapp: update tomcat dependency 9.0.87 [oak-10755] - commons: deprecate use slf4j.event.level systempropertysupplier api (and make 'internal') [oak-10757] - documentrdbfixture support feature toggle ft_nococleanup_oak-10660 [oak-10766] - make lease timeout configurable specific async lanes indexing [oak-10768] - query-spi: deprecate use slf4j.event.level queryindex.indexplan [oak-10769] - bump elasticsearch version 8.13.2 / lucene 9.10.0 [oak-10770] - azure identity runtime dependency resolution oak-segment-azure [oak-10773] - luceneindexlookuputil opens index node actually needed [oak-10774] - remove oak-search-mt module jenkinsfile [oak-10776] - incremental ffs filter changes paths excluded pipelinedmongocustomexcludedpaths [oak-10777] - oak-lucene: add test coverage stack overflow based long complex regexp using jcr lucene native query [oak-10785] - update maven-shade-plugin version 3.5.3 [oak-10793] - update logback version 1.2.13 [oak-10797] - update oak trunk oak 1.22 jackrabbit 2.20.16 [oak-10799] - update (shaded) guava 33.2.0 [oak-10815] - update jacoco plugin 0.8.12 [oak-10816] - update spotbugs plugin 4.8.5.0 [oak-10819] - examples: update jetty-maven-plugin 11.0.21 [oak-10820] - webapp: update tomcat dependency 9.0.89 documentation [oak-10772] - broken links authentication documentation addition above-mentioned changes, release contains changes previous release. detailed information changes oak releases, please see oak issue tracker https://issues.apache.org/jira/browse/oak release contents ---------------- release consists single source archive packaged zip file. archive unpacked jar tool jdk installation. see readme.md file instructions build release. source archive accompanied sha512 checksums pgp signature use verify authenticity download. public key used pgp signature found https://www.apache.org/dist/jackrabbit/keys. apache jackrabbit oak --------------------------- jackrabbit oak scalable, high-performance hierarchical content repository designed use foundation modern world-class web sites demanding content applications. oak effort part apache jackrabbit project. apache jackrabbit project apache software foundation. information, visit http://jackrabbit.apache.org/oak apache software foundation ------------------------------------ established 1999, apache software foundation provides organizational, legal, financial support 140 freely-available, collaboratively-developed open source projects. pragmatic apache license enables individual commercial users easily deploy apache software; foundation's intellectual property framework limits legal exposure 3,800+ contributors. information, visit http://www.apache.org/ # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/readme.md # --- jackrabbit oak - next generation content repository ======================================================= jackrabbit oak scalable, high-performance hierarchical content repository designed use foundation modern world-class web sites demanding content applications. oak effort part apache jackrabbit project. apache jackrabbit project apache software foundation. getting started --------------- get started oak, build latest sources maven 3 java 11 (or higher) like this: mvn clean install enable integration tests, including jcr tck, use: mvn clean install -pintegrationtesting committing changes submitting patch, please make sure integration testing build passes without errors. like, enable integration tests default setting `oak_integration_testing` environment variable. mongodb integration ------------------- parts oak build expects mongodb instance available testing. default mongodb instance running localhost expected, relevant tests simply skipped instance found. also configure build use custom mongodb settings following properties (shown default values): -dmongo.host=127.0.0.1 -dmongo.port=27017 -dmongo.db=mongomkdb -dmongo.db2=mongomkdb2 note configured test databases *dropped* test cases. components ---------- build consists following main components: - oak-parent - parent pom - oak-doc - oak documentation - oak-commons - shared utility code - [oak-core][1] - oak repository api implementation - oak-jcr - jcr binding oak repository - oak-sling - integration apache sling - oak-solr-core - apache solr indexing search - oak-solr-embedded - apache solr embedded solr instance - oak-solr-remote - apache solr remote (http) solr instance - oak-http - http binding oak - oak-lucene - lucene-based query index - oak-run - runnable jar packaging - oak-pojosr - integration pojosr - oak-segment-tar - tarmk api implementation - oak-upgrade - tooling upgrading jackrabbit repositories oak - oak-it - integration tests - oak-it/osgi - integration tests osgi - [oak-exercise][2] - oak training material [1]: oak-api/readme.md [2]: oak-exercise/readme.md archive ------- following components moved jackrabbit attic: - oak-mk-api - microkernel api (_deprecated_, see oak-2701) - oak-mk - microkernel implementation (see oak-2702) - oak-mk-remote - microkernel remoting (see oak-2693) - oak-it/mk - integration tests microkernel license ------- (see [license.txt](license.txt) full license details) collective work: copyright 2014 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/notice.txt # --- apache jackrabbit oak copyright 2014 apache software foundation product includes software developed apache software foundation (http://www.apache.org/). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/license.txt # --- apache license version 2.0, january 2004 http://www.apache.org/licenses/ terms conditions use, reproduction, distribution 1. definitions. "license" shall mean terms conditions use, reproduction, distribution defined sections 1 9 document. "licensor" shall mean copyright owner entity authorized copyright owner granting license. "legal entity" shall mean union acting entity entities control, controlled by, common control entity. purposes definition, "control" means (i) power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. "you" (or "your") shall mean individual legal entity exercising permissions granted license. "source" form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. "object" form shall mean form resulting mechanical transformation translation source form, including limited compiled object code, generated documentation, conversions media types. "work" shall mean work authorship, whether source object form, made available license, indicated copyright notice included attached work (an example provided appendix below). "derivative works" shall mean work, whether source object form, based (or derived from) work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes license, derivative works shall include works remain separable from, merely link (or bind name) interfaces of, work derivative works thereof. "contribution" shall mean work authorship, including original version work modifications additions work derivative works thereof, intentionally submitted licensor inclusion work copyright owner individual legal entity authorized submit behalf copyright owner. purposes definition, "submitted" means form electronic, verbal, written communication sent licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed by, behalf of, licensor purpose discussing improving work, excluding communication conspicuously marked otherwise designated writing copyright owner "not contribution." "contributor" shall mean licensor individual legal entity behalf contribution received licensor subsequently incorporated within work. 2. grant copyright license. subject terms conditions license, contributor hereby grants perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, distribute work derivative works source object form. 3. grant patent license. subject terms conditions license, contributor hereby grants perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer work, license applies patent claims licensable contributor necessarily infringed contribution(s) alone combination contribution(s) work contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging work contribution incorporated within work constitutes direct contributory patent infringement, patent licenses granted license work shall terminate date litigation filed. 4. redistribution. may reproduce distribute copies work derivative works thereof medium, without modifications, source object form, provided meet following conditions: (a) must give recipients work derivative works copy license; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, source form derivative works distribute, copyright, patent, trademark, attribution notices source form work, excluding notices pertain part derivative works; (d) work includes "notice" text file part distribution, derivative works distribute must include readable copy attribution notices contained within notice file, excluding notices pertain part derivative works, least one following places: within notice text file distributed part derivative works; within source form documentation, provided along derivative works; or, within display generated derivative works, wherever third-party notices normally appear. contents notice file informational purposes modify license. may add attribution notices within derivative works distribute, alongside addendum notice text work, provided additional attribution notices cannot construed modifying license. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, derivative works whole, provided use, reproduction, distribution work otherwise complies conditions stated license. 5. submission contributions. unless explicitly state otherwise, contribution intentionally submitted inclusion work licensor shall terms conditions license, without additional terms conditions. notwithstanding above, nothing herein shall supersede modify terms separate license agreement may executed licensor regarding contributions. 6. trademarks. license grant permission use trade names, trademarks, service marks, product names licensor, except required reasonable customary use describing origin work reproducing content notice file. 7. disclaimer warranty. unless required applicable law agreed writing, licensor provides work (and contributor provides contributions) "as is" basis, without warranties conditions kind, either express implied, including, without limitation, warranties conditions title, non-infringement, merchantability, fitness particular purpose. solely responsible determining appropriateness using redistributing work assume risks associated exercise permissions license. 8. limitation liability. event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (such deliberate grossly negligent acts) agreed writing, shall contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result license use inability use work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even contributor advised possibility damages. 9. accepting warranty additional liability. redistributing work derivative works thereof, may choose offer, charge fee for, acceptance support, warranty, indemnity, liability obligations and/or rights consistent license. however, accepting obligations, may act behalf sole responsibility, behalf contributor, agree indemnify, defend, hold contributor harmless liability incurred by, claims asserted against, contributor reason accepting warranty additional liability. end terms conditions appendix: apply apache license work. apply apache license work, attach following boilerplate notice, fields enclosed brackets "[]" replaced identifying information. (don't include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included "printed page" copyright notice easier identification within third-party archives. copyright [yyyy] [name copyright owner] licensed apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-http/readme.md # --- oak http binding ================ simple javascript- browser-friendly http binding oak. makes possible access modify content oak repository remotely via http protocol. easiest way try binding start in-memory repository using `oak-run` jar: $ java -jar oak-run/target/oak-run-*.jar resulting repository made available http://localhost:8080/. following examples use httpie client perform simple crud operations. username password (by default `admin` `admin`) specified `~/.netrc` file included command lines. $ http -j -b localhost:8080 { "jcr:primarytype": "rep:root", "jcr:system": {}, "oak:index": {}, "rep:security": {} } add modify content posting json: $ http -j -b localhost:8080/test \ jcr\\:primarytype=oak:unstructured foo=abc bar:=123 { "bar": "123", "foo": "abc", "jcr:primarytype": "oak:unstructured" } `jcr:primarytype` property needs currently included avoid jcr constraint violations. intention automatically infer value explicitly included. note also first colon needs escaped command line prevent httpie interpreting argument extra http header. posted content stored repository accessible: $ http -j -b localhost:8080 { "jcr:primarytype": "rep:root", "jcr:system": {}, "oak:index": {}, "rep:security": {}, "test": {} } $ http -j -b localhost:8080/test { "bar": "123", "foo": "abc", "jcr:primarytype": "oak:unstructured" } modify content posting data url: $ http -j -b localhost:8080/test \ foo=xyz child:='{"jcr:primarytype": "oak:unstructured"}' { "bar": "123", "child": {}, "foo": "xyz", "jcr:primarytype": "nt:unstructured" } $ http -j -b localhost:8080/test/child { "jcr:primarytype": "oak:unstructured" } finally, content removed either posting null value using delete: $ http -j -b localhost:8080/test bar:=null child:=null { "foo": "xyz", "jcr:primarytype": "nt:unstructured" } $ http -j -h delete localhost:8080/test http/1.1 200 ok license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-it-osgi/readme.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> oak integration tests osgi deployments == modules validates basic oak functionality osgi environment. oak modules test picked reactor build. instead, read local repository copied well-known location using maven-assembly-plugin. order test change made different module, would need to: * run `mvn install` changed module * run `mvn assembly:single` module * re-run test(s) module # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-it-osgi/src/test/resources/org/apache/jackrabbit/oak/osgi/test.txt # --- sample document # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-jackrabbit-api/readme.md # --- oak jackrabbit api ================== component contains interface extensions apache jackrabbit jackrabbit oak support addition standard jcr api. use interfaces access implementation-specific functionality. (copied original jackrabbit project, see oak-8339 details) license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-jackrabbit-api/src/main/javadoc/org/apache/jackrabbit/api/package.html # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <body> contains set interfaces form jackrabbit-specific extensions jcr api </body> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-segment-azure/start-azurite.sh # --- #!/bin/bash docker run -e executable=blob --rm -t -p 10000:10000 trekawek/azurite # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-shaded-guava/readme.md # --- oak shaded guava ================ warning: oak-internal use only! component contains shaded copy google guava library. license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/test/resources/org/apache/jackrabbit/oak/plugins/index/lucene/luceneindexmbeanimpltest-expected-string-field.txt # --- 20 (total field string) 2 value-9 2 value-8 2 value-7 2 value-6 2 value-5 2 value-4 2 value-3 2 value-2 2 value-1 2 value-0 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/test/resources/org/apache/jackrabbit/oak/plugins/index/lucene/luceneindexmbeanimpltest-expected-int-field.txt # --- 160 (total field int) 20 0 20 0 20 0 20 0 20 0 20 0 20 0 2 9 2 8 2 7 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/test/resources/org/apache/jackrabbit/oak/plugins/index/lucene/luceneindexmbeanimpltest-expected-long-field.txt # --- 320 (total field long) 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 20 0 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/test/resources/org/apache/jackrabbit/oak/jcr/query/test.txt # --- test jackrabbit full text indexing. following unique token included search index file indexed: ae502dbea2c411debd340ad156d89593 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/test/resources/org/apache/jackrabbit/oak/query/sql1.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks. # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii character # sql-1 query (nt:unstructured needs escaped sql-2) sql1 select [rep:spellcheck()] nt:base [jcr:path] = '/' spellcheck('jackrabit') jackrabbit, /, 1.0 sql1 select prop1 nt:unstructured prop1 null order prop1 asc sql1 select excerpt(.) nt:resource contains(., 'jackrabbit') sql1 select * nt:base jcr:path like '/testroot/%' birth > timestamp '1976-01-01t00:00:00.000+01:00' sql1 select * nt:base jcr:path like '/testroot/%' value like 'foo\_bar' escape '\' sql1 select * nt:unstructured "jcr:path" = '/testroot/foo' contains(., 'fox') sql1 select * nt:unstructured "jcr:path" like '/testroot/%' contains(., 'fox test') # supported currently # sql1 select [jcr:path], [jcr:score], * [nt:base] # (0 null) isdescendantnode('/testroot') # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/package.html # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html><body>top-level package.</body></html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> codecs api: api customization encoding structure index. <p> codec api allows customise way following pieces index information stored: <ul> <li>postings lists - see {@link org.apache.lucene.codecs.postingsformat}</li> <li>docvalues - see {@link org.apache.lucene.codecs.docvaluesformat}</li> <li>stored fields - see {@link org.apache.lucene.codecs.storedfieldsformat}</li> <li>term vectors - see {@link org.apache.lucene.codecs.termvectorsformat}</li> <li>fieldinfos - see {@link org.apache.lucene.codecs.fieldinfosformat}</li> <li>segmentinfo - see {@link org.apache.lucene.codecs.segmentinfoformat}</li> <li>norms - see {@link org.apache.lucene.codecs.normsformat}</li> <li>live documents - see {@link org.apache.lucene.codecs.livedocsformat}</li> </ul> </p> concrete implementations beyond lucene's official index format, see <a href="{@docroot}/../codecs/overview-summary.html">codecs module</a>. <p> codecs identified name java service provider interface. create codec, extend {@link org.apache.lucene.codecs.codec} pass new codec's name super() constructor: <pre class="prettyprint"> public class mycodec extends codec { public mycodec() { super("mycodecname"); } ... } </pre> need register codec class {@link java.util.serviceloader serviceloader} find it, including meta-inf/services/org.apache.lucene.codecs.codec file classpath contains package-qualified name codec. </p> <p> want customise {@link org.apache.lucene.codecs.postingsformat}, use different postings formats different fields, register custom postings format way (in meta-inf/services/org.apache.lucene.codecs.postingsformat), extend default {@link org.apache.lucene.codecs.lucene46.lucene46codec} override {@link org.apache.lucene.codecs.lucene46.lucene46codec#getpostingsformatforfield(string)} return custom postings format. </p> <p> similarly, want customise {@link org.apache.lucene.codecs.docvaluesformat} per-field, look {@link org.apache.lucene.codecs.lucene46.lucene46codec#getdocvaluesformatforfield(string)}. </p> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/lucene40/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> lucene 4.0 file format. <h1>apache lucene - index file formats</h1> <div> <ul> <li><a href="#introduction">introduction</a></li> <li><a href="#definitions">definitions</a> <ul> <li><a href="#inverted_indexing">inverted indexing</a></li> <li><a href="#types_of_fields">types fields</a></li> <li><a href="#segments">segments</a></li> <li><a href="#document_numbers">document numbers</a></li> </ul> </li> <li><a href="#overview">index structure overview</a></li> <li><a href="#file_naming">file naming</a></li> <li><a href="#file-names">summary file extensions</a></li> <ul> <li><a href="#lock_file">lock file</a></li> <li><a href="#history">history</a></li> <li><a href="#limitations">limitations</a></li> </ul> </ul> </div> <a name="introduction"></a> <h2>introduction</h2> <div> <p>this document defines index file formats used version lucene. using different version lucene, please consult copy <code>docs/</code> distributed version using.</p> <p>apache lucene written java, several efforts underway write <a href="http://wiki.apache.org/lucene-java/luceneimplementations">versions lucene programming languages</a>. versions remain compatible apache lucene, language-independent definition lucene index format required. document thus attempts provide complete independent definition apache lucene file formats.</p> <p>as lucene evolves, document evolve. versions lucene different programming languages endeavor agree file formats, generate new versions document.</p> </div> <a name="definitions" id="definitions"></a> <h2>definitions</h2> <div> <p>the fundamental concepts lucene index, document, field term.</p> <p>an index contains sequence documents.</p> <ul> <li>a document sequence fields.</li> <li>a field named sequence terms.</li> <li>a term sequence bytes.</li> </ul> <p>the sequence bytes two different fields considered different term. thus terms represented pair: string naming field, bytes within field.</p> <a name="inverted_indexing"></a> <h3>inverted indexing</h3> <p>the index stores statistics terms order make term-based search efficient. lucene's index falls family indexes known <i>inverted index.</i> list, term, documents contain it. inverse natural relationship, documents list terms.</p> <a name="types_of_fields"></a> <h3>types fields</h3> <p>in lucene, fields may <i>stored</i>, case text stored index literally, non-inverted manner. fields inverted called <i>indexed</i>. field may stored indexed.</p> <p>the text field may <i>tokenized</i> terms indexed, text field may used literally term indexed. fields tokenized, sometimes useful certain identifier fields indexed literally.</p> <p>see {@link org.apache.lucene.document.field field} java docs information fields.</p> <a name="segments" id="segments"></a> <h3>segments</h3> <p>lucene indexes may composed multiple sub-indexes, <i>segments</i>. segment fully independent index, could searched separately. indexes evolve by:</p> <ol> <li>creating new segments newly added documents.</li> <li>merging existing segments.</li> </ol> <p>searches may involve multiple segments and/or multiple indexes, index potentially composed set segments.</p> <a name="document_numbers"></a> <h3>document numbers</h3> <p>internally, lucene refers documents integer <i>document number</i>. first document added index numbered zero, subsequent document added gets number one greater previous.</p> <p>note document's number may change, caution taken storing numbers outside lucene. particular, numbers may change following situations:</p> <ul> <li> <p>the numbers stored segment unique within segment, must converted used larger context. standard technique allocate segment range values, based range numbers used segment. convert document number segment external value, segment's <i>base</i> document number added. convert external value back segment-specific value, segment identified range external value in, segment's base value subtracted. example two five document segments might combined, first segment base value zero, second five. document three second segment would external value eight.</p> </li> <li> <p>when documents deleted, gaps created numbering. eventually removed index evolves merging. deleted documents dropped segments merged. freshly-merged segment thus gaps numbering.</p> </li> </ul> </div> <a name="overview" id="overview"></a> <h2>index structure overview</h2> <div> <p>each segment index maintains following:</p> <ul> <li> {@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}. contains metadata segment, number documents, files uses, </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40fieldinfosformat field names}. contains set field names used index. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40storedfieldsformat stored field values}. contains, document, list attribute-value pairs, attributes field names. used store auxiliary information document, title, url, identifier access database. set stored fields returned hit searching. keyed document number. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40postingsformat term dictionary}. dictionary containing terms used indexed fields documents. dictionary also contains number documents contain term, pointers term's frequency proximity data. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40postingsformat term frequency data}. term dictionary, numbers documents contain term, frequency term document, unless frequencies omitted (indexoptions.docs_only) </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40postingsformat term proximity data}. term dictionary, positions term occurs document. note exist fields documents omit position data. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40normsformat normalization factors}. field document, value stored multiplied score hits field. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40termvectorsformat term vectors}. field document, term vector (sometimes called document vector) may stored. term vector consists term text term frequency. add term vectors index see {@link org.apache.lucene.document.field field} constructors </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40docvaluesformat per-document values}. like stored values, also keyed document number, generally intended loaded main memory fast access. whereas stored values generally intended summary results searches, per-document values useful things like scoring factors. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}. optional file indicating documents deleted. </li> </ul> <p>details provided linked pages.</p> </div> <a name="file_naming"></a> <h2>file naming</h2> <div> <p>all files belonging segment name varying extensions. extensions correspond different file formats described below. using compound file format (default 1.4 greater) files (except segment info file, lock file, deleted documents file) collapsed single .cfs file (see details)</p> <p>typically, segments index stored single directory, although required.</p> <p>as version 2.1 (lock-less commits), file names never re-used (there one exception, "segments.gen", see below). is, file saved directory given never used filename. achieved using simple generations approach. example, first segments file segments_1, segments_2, etc. generation sequential long integer represented alpha-numeric (base 36) form.</p> </div> <a name="file-names" id="file-names"></a> <h2>summary file extensions</h2> <div> <p>the following table summarizes names extensions files lucene:</p> <table cellspacing="1" cellpadding="4"> <tr> <th>name</th> <th>extension</th> <th>brief description</th> </tr> <tr> <td>{@link org.apache.lucene.index.segmentinfos segments file}</td> <td>segments.gen, segments_n</td> <td>stores information commit point</td> </tr> <tr> <td><a href="#lock_file">lock file</a></td> <td>write.lock</td> <td>the write lock prevents multiple indexwriters writing file.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}</td> <td>.si</td> <td>stores metadata segment</td> </tr> <tr> <td>{@link org.apache.lucene.store.compoundfiledirectory compound file}</td> <td>.cfs, .cfe</td> <td>an optional "virtual" file consisting index files systems frequently run file handles.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40fieldinfosformat fields}</td> <td>.fnm</td> <td>stores information fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40storedfieldsformat field index}</td> <td>.fdx</td> <td>contains pointers field data</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40storedfieldsformat field data}</td> <td>.fdt</td> <td>the stored fields documents</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40postingsformat term dictionary}</td> <td>.tim</td> <td>the term dictionary, stores term info</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40postingsformat term index}</td> <td>.tip</td> <td>the index term dictionary</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40postingsformat frequencies}</td> <td>.frq</td> <td>contains list docs contain term along frequency</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40postingsformat positions}</td> <td>.prx</td> <td>stores position information term occurs index</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40normsformat norms}</td> <td>.nrm.cfs, .nrm.cfe</td> <td>encodes length boost factors docs fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40docvaluesformat per-document values}</td> <td>.dv.cfs, .dv.cfe</td> <td>encodes additional scoring factors per-document information.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40termvectorsformat term vector index}</td> <td>.tvx</td> <td>stores offset document data file</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40termvectorsformat term vector documents}</td> <td>.tvd</td> <td>contains information document term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40termvectorsformat term vector fields}</td> <td>.tvf</td> <td>the field level info term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}</td> <td>.del</td> <td>info files deleted</td> </tr> </table> </div> <a name="lock_file" id="lock_file"></a> <h2>lock file</h2> write lock, stored index directory default, named "write.lock". lock directory different index directory write lock named "xxxx-write.lock" xxxx unique prefix derived full path index directory. file present, writer currently modifying index (adding removing documents). lock file ensures one writer modifying index time.</p> <a name="history"></a> <h2>history</h2> <p>compatibility notes provided document, describing file formats changed prior versions:</p> <ul> <li>in version 2.1, file format changed allow lock-less commits (ie, commit lock). change fully backwards compatible: open pre-2.1 index searching adding/deleting docs. new segments file saved (committed), written new file format (meaning specific "upgrade" process needed). note commit occurred, pre-2.1 lucene able read index.</li> <li>in version 2.3, file format changed allow segments share single set doc store (vectors &amp; stored fields) files. allows faster indexing certain cases. change fully backwards compatible (in way lock-less commits change 2.1).</li> <li>in version 2.4, strings written true utf-8 byte sequence, java's modified utf-8. see <a href="http://issues.apache.org/jira/browse/lucene-510"> lucene-510</a> details.</li> <li>in version 2.9, optional opaque map&lt;string,string&gt; commituserdata may passed indexwriter's commit methods (and later retrieved), recorded segments_n file. see <a href="http://issues.apache.org/jira/browse/lucene-1382"> lucene-1382</a> details. also, diagnostics added segment written recording details written (due flush, merge; os/jre used; etc.). see issue <a href="http://issues.apache.org/jira/browse/lucene-1654">lucene-1654</a> details.</li> <li>in version 3.0, compressed fields longer written index (they still read, merge new segment write them, uncompressed). see issue <a href="http://issues.apache.org/jira/browse/lucene-1960">lucene-1960</a> details.</li> <li>in version 3.1, segments records code version created them. see <a href="http://issues.apache.org/jira/browse/lucene-2720">lucene-2720</a> details. additionally segments track explicitly whether term vectors. see <a href="http://issues.apache.org/jira/browse/lucene-2811">lucene-2811</a> details.</li> <li>in version 3.2, numeric fields written natively stored fields file, previously stored text format only.</li> <li>in version 3.4, fields omit position data still indexing term frequencies.</li> <li>in version 4.0, format inverted index became extensible via {@link org.apache.lucene.codecs.codec codec} api. fast per-document storage ({@code docvalues}) introduced. normalization factors need longer single byte, {@link org.apache.lucene.index.numericdocvalues numericdocvalues}. terms need unicode strings, byte sequence. term offsets optionally indexed postings lists. payloads stored term vectors.</li> </ul> <a name="limitations" id="limitations"></a> <h2>limitations</h2> <div> <p>lucene uses java <code>int</code> refer document numbers, index file format uses <code>int32</code> on-disk store document numbers. limitation index file format current implementation. eventually replaced either <code>uint64</code> values, better yet, {@link org.apache.lucene.store.dataoutput#writevint vint} values limit.</p> </div> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/lucene41/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> lucene 4.1 file format. <h1>apache lucene - index file formats</h1> <div> <ul> <li><a href="#introduction">introduction</a></li> <li><a href="#definitions">definitions</a> <ul> <li><a href="#inverted_indexing">inverted indexing</a></li> <li><a href="#types_of_fields">types fields</a></li> <li><a href="#segments">segments</a></li> <li><a href="#document_numbers">document numbers</a></li> </ul> </li> <li><a href="#overview">index structure overview</a></li> <li><a href="#file_naming">file naming</a></li> <li><a href="#file-names">summary file extensions</a></li> <ul> <li><a href="#lock_file">lock file</a></li> <li><a href="#history">history</a></li> <li><a href="#limitations">limitations</a></li> </ul> </ul> </div> <a name="introduction"></a> <h2>introduction</h2> <div> <p>this document defines index file formats used version lucene. using different version lucene, please consult copy <code>docs/</code> distributed version using.</p> <p>apache lucene written java, several efforts underway write <a href="http://wiki.apache.org/lucene-java/luceneimplementations">versions lucene programming languages</a>. versions remain compatible apache lucene, language-independent definition lucene index format required. document thus attempts provide complete independent definition apache lucene file formats.</p> <p>as lucene evolves, document evolve. versions lucene different programming languages endeavor agree file formats, generate new versions document.</p> </div> <a name="definitions" id="definitions"></a> <h2>definitions</h2> <div> <p>the fundamental concepts lucene index, document, field term.</p> <p>an index contains sequence documents.</p> <ul> <li>a document sequence fields.</li> <li>a field named sequence terms.</li> <li>a term sequence bytes.</li> </ul> <p>the sequence bytes two different fields considered different term. thus terms represented pair: string naming field, bytes within field.</p> <a name="inverted_indexing"></a> <h3>inverted indexing</h3> <p>the index stores statistics terms order make term-based search efficient. lucene's index falls family indexes known <i>inverted index.</i> list, term, documents contain it. inverse natural relationship, documents list terms.</p> <a name="types_of_fields"></a> <h3>types fields</h3> <p>in lucene, fields may <i>stored</i>, case text stored index literally, non-inverted manner. fields inverted called <i>indexed</i>. field may stored indexed.</p> <p>the text field may <i>tokenized</i> terms indexed, text field may used literally term indexed. fields tokenized, sometimes useful certain identifier fields indexed literally.</p> <p>see {@link org.apache.lucene.document.field field} java docs information fields.</p> <a name="segments" id="segments"></a> <h3>segments</h3> <p>lucene indexes may composed multiple sub-indexes, <i>segments</i>. segment fully independent index, could searched separately. indexes evolve by:</p> <ol> <li>creating new segments newly added documents.</li> <li>merging existing segments.</li> </ol> <p>searches may involve multiple segments and/or multiple indexes, index potentially composed set segments.</p> <a name="document_numbers"></a> <h3>document numbers</h3> <p>internally, lucene refers documents integer <i>document number</i>. first document added index numbered zero, subsequent document added gets number one greater previous.</p> <p>note document's number may change, caution taken storing numbers outside lucene. particular, numbers may change following situations:</p> <ul> <li> <p>the numbers stored segment unique within segment, must converted used larger context. standard technique allocate segment range values, based range numbers used segment. convert document number segment external value, segment's <i>base</i> document number added. convert external value back segment-specific value, segment identified range external value in, segment's base value subtracted. example two five document segments might combined, first segment base value zero, second five. document three second segment would external value eight.</p> </li> <li> <p>when documents deleted, gaps created numbering. eventually removed index evolves merging. deleted documents dropped segments merged. freshly-merged segment thus gaps numbering.</p> </li> </ul> </div> <a name="overview" id="overview"></a> <h2>index structure overview</h2> <div> <p>each segment index maintains following:</p> <ul> <li> {@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}. contains metadata segment, number documents, files uses, </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40fieldinfosformat field names}. contains set field names used index. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat stored field values}. contains, document, list attribute-value pairs, attributes field names. used store auxiliary information document, title, url, identifier access database. set stored fields returned hit searching. keyed document number. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term dictionary}. dictionary containing terms used indexed fields documents. dictionary also contains number documents contain term, pointers term's frequency proximity data. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term frequency data}. term dictionary, numbers documents contain term, frequency term document, unless frequencies omitted (indexoptions.docs_only) </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term proximity data}. term dictionary, positions term occurs document. note exist fields documents omit position data. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40normsformat normalization factors}. field document, value stored multiplied score hits field. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40termvectorsformat term vectors}. field document, term vector (sometimes called document vector) may stored. term vector consists term text term frequency. add term vectors index see {@link org.apache.lucene.document.field field} constructors </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40docvaluesformat per-document values}. like stored values, also keyed document number, generally intended loaded main memory fast access. whereas stored values generally intended summary results searches, per-document values useful things like scoring factors. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}. optional file indicating documents deleted. </li> </ul> <p>details provided linked pages.</p> </div> <a name="file_naming"></a> <h2>file naming</h2> <div> <p>all files belonging segment name varying extensions. extensions correspond different file formats described below. using compound file format (default 1.4 greater) files (except segment info file, lock file, deleted documents file) collapsed single .cfs file (see details)</p> <p>typically, segments index stored single directory, although required.</p> <p>as version 2.1 (lock-less commits), file names never re-used (there one exception, "segments.gen", see below). is, file saved directory given never used filename. achieved using simple generations approach. example, first segments file segments_1, segments_2, etc. generation sequential long integer represented alpha-numeric (base 36) form.</p> </div> <a name="file-names" id="file-names"></a> <h2>summary file extensions</h2> <div> <p>the following table summarizes names extensions files lucene:</p> <table cellspacing="1" cellpadding="4"> <tr> <th>name</th> <th>extension</th> <th>brief description</th> </tr> <tr> <td>{@link org.apache.lucene.index.segmentinfos segments file}</td> <td>segments.gen, segments_n</td> <td>stores information commit point</td> </tr> <tr> <td><a href="#lock_file">lock file</a></td> <td>write.lock</td> <td>the write lock prevents multiple indexwriters writing file.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}</td> <td>.si</td> <td>stores metadata segment</td> </tr> <tr> <td>{@link org.apache.lucene.store.compoundfiledirectory compound file}</td> <td>.cfs, .cfe</td> <td>an optional "virtual" file consisting index files systems frequently run file handles.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40fieldinfosformat fields}</td> <td>.fnm</td> <td>stores information fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat field index}</td> <td>.fdx</td> <td>contains pointers field data</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat field data}</td> <td>.fdt</td> <td>the stored fields documents</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term dictionary}</td> <td>.tim</td> <td>the term dictionary, stores term info</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term index}</td> <td>.tip</td> <td>the index term dictionary</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat frequencies}</td> <td>.doc</td> <td>contains list docs contain term along frequency</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat positions}</td> <td>.pos</td> <td>stores position information term occurs index</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat payloads}</td> <td>.pay</td> <td>stores additional per-position metadata information character offsets user payloads</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40normsformat norms}</td> <td>.nrm.cfs, .nrm.cfe</td> <td>encodes length boost factors docs fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40docvaluesformat per-document values}</td> <td>.dv.cfs, .dv.cfe</td> <td>encodes additional scoring factors per-document information.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40termvectorsformat term vector index}</td> <td>.tvx</td> <td>stores offset document data file</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40termvectorsformat term vector documents}</td> <td>.tvd</td> <td>contains information document term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40termvectorsformat term vector fields}</td> <td>.tvf</td> <td>the field level info term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}</td> <td>.del</td> <td>info files deleted</td> </tr> </table> </div> <a name="lock_file" id="lock_file"></a> <h2>lock file</h2> write lock, stored index directory default, named "write.lock". lock directory different index directory write lock named "xxxx-write.lock" xxxx unique prefix derived full path index directory. file present, writer currently modifying index (adding removing documents). lock file ensures one writer modifying index time.</p> <a name="history"></a> <h2>history</h2> <p>compatibility notes provided document, describing file formats changed prior versions:</p> <ul> <li>in version 2.1, file format changed allow lock-less commits (ie, commit lock). change fully backwards compatible: open pre-2.1 index searching adding/deleting docs. new segments file saved (committed), written new file format (meaning specific "upgrade" process needed). note commit occurred, pre-2.1 lucene able read index.</li> <li>in version 2.3, file format changed allow segments share single set doc store (vectors &amp; stored fields) files. allows faster indexing certain cases. change fully backwards compatible (in way lock-less commits change 2.1).</li> <li>in version 2.4, strings written true utf-8 byte sequence, java's modified utf-8. see <a href="http://issues.apache.org/jira/browse/lucene-510"> lucene-510</a> details.</li> <li>in version 2.9, optional opaque map&lt;string,string&gt; commituserdata may passed indexwriter's commit methods (and later retrieved), recorded segments_n file. see <a href="http://issues.apache.org/jira/browse/lucene-1382"> lucene-1382</a> details. also, diagnostics added segment written recording details written (due flush, merge; os/jre used; etc.). see issue <a href="http://issues.apache.org/jira/browse/lucene-1654">lucene-1654</a> details.</li> <li>in version 3.0, compressed fields longer written index (they still read, merge new segment write them, uncompressed). see issue <a href="http://issues.apache.org/jira/browse/lucene-1960">lucene-1960</a> details.</li> <li>in version 3.1, segments records code version created them. see <a href="http://issues.apache.org/jira/browse/lucene-2720">lucene-2720</a> details. additionally segments track explicitly whether term vectors. see <a href="http://issues.apache.org/jira/browse/lucene-2811">lucene-2811</a> details.</li> <li>in version 3.2, numeric fields written natively stored fields file, previously stored text format only.</li> <li>in version 3.4, fields omit position data still indexing term frequencies.</li> <li>in version 4.0, format inverted index became extensible via {@link org.apache.lucene.codecs.codec codec} api. fast per-document storage ({@code docvalues}) introduced. normalization factors need longer single byte, {@link org.apache.lucene.index.numericdocvalues numericdocvalues}. terms need unicode strings, byte sequence. term offsets optionally indexed postings lists. payloads stored term vectors.</li> <li>in version 4.1, format postings list changed use either compression variable-byte encoding, depending upon frequency term. terms appearing changed inline directly term dictionary. stored fields compressed default. </li> </ul> <a name="limitations" id="limitations"></a> <h2>limitations</h2> <div> <p>lucene uses java <code>int</code> refer document numbers, index file format uses <code>int32</code> on-disk store document numbers. limitation index file format current implementation. eventually replaced either <code>uint64</code> values, better yet, {@link org.apache.lucene.store.dataoutput#writevint vint} values limit.</p> </div> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/lucene46/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> lucene 4.6 file format. <h1>apache lucene - index file formats</h1> <div> <ul> <li><a href="#introduction">introduction</a></li> <li><a href="#definitions">definitions</a> <ul> <li><a href="#inverted_indexing">inverted indexing</a></li> <li><a href="#types_of_fields">types fields</a></li> <li><a href="#segments">segments</a></li> <li><a href="#document_numbers">document numbers</a></li> </ul> </li> <li><a href="#overview">index structure overview</a></li> <li><a href="#file_naming">file naming</a></li> <li><a href="#file-names">summary file extensions</a></li> <ul> <li><a href="#lock_file">lock file</a></li> <li><a href="#history">history</a></li> <li><a href="#limitations">limitations</a></li> </ul> </ul> </div> <a name="introduction"></a> <h2>introduction</h2> <div> <p>this document defines index file formats used version lucene. using different version lucene, please consult copy <code>docs/</code> distributed version using.</p> <p>apache lucene written java, several efforts underway write <a href="http://wiki.apache.org/lucene-java/luceneimplementations">versions lucene programming languages</a>. versions remain compatible apache lucene, language-independent definition lucene index format required. document thus attempts provide complete independent definition apache lucene file formats.</p> <p>as lucene evolves, document evolve. versions lucene different programming languages endeavor agree file formats, generate new versions document.</p> </div> <a name="definitions" id="definitions"></a> <h2>definitions</h2> <div> <p>the fundamental concepts lucene index, document, field term.</p> <p>an index contains sequence documents.</p> <ul> <li>a document sequence fields.</li> <li>a field named sequence terms.</li> <li>a term sequence bytes.</li> </ul> <p>the sequence bytes two different fields considered different term. thus terms represented pair: string naming field, bytes within field.</p> <a name="inverted_indexing"></a> <h3>inverted indexing</h3> <p>the index stores statistics terms order make term-based search efficient. lucene's index falls family indexes known <i>inverted index.</i> list, term, documents contain it. inverse natural relationship, documents list terms.</p> <a name="types_of_fields"></a> <h3>types fields</h3> <p>in lucene, fields may <i>stored</i>, case text stored index literally, non-inverted manner. fields inverted called <i>indexed</i>. field may stored indexed.</p> <p>the text field may <i>tokenized</i> terms indexed, text field may used literally term indexed. fields tokenized, sometimes useful certain identifier fields indexed literally.</p> <p>see {@link org.apache.lucene.document.field field} java docs information fields.</p> <a name="segments" id="segments"></a> <h3>segments</h3> <p>lucene indexes may composed multiple sub-indexes, <i>segments</i>. segment fully independent index, could searched separately. indexes evolve by:</p> <ol> <li>creating new segments newly added documents.</li> <li>merging existing segments.</li> </ol> <p>searches may involve multiple segments and/or multiple indexes, index potentially composed set segments.</p> <a name="document_numbers"></a> <h3>document numbers</h3> <p>internally, lucene refers documents integer <i>document number</i>. first document added index numbered zero, subsequent document added gets number one greater previous.</p> <p>note document's number may change, caution taken storing numbers outside lucene. particular, numbers may change following situations:</p> <ul> <li> <p>the numbers stored segment unique within segment, must converted used larger context. standard technique allocate segment range values, based range numbers used segment. convert document number segment external value, segment's <i>base</i> document number added. convert external value back segment-specific value, segment identified range external value in, segment's base value subtracted. example two five document segments might combined, first segment base value zero, second five. document three second segment would external value eight.</p> </li> <li> <p>when documents deleted, gaps created numbering. eventually removed index evolves merging. deleted documents dropped segments merged. freshly-merged segment thus gaps numbering.</p> </li> </ul> </div> <a name="overview" id="overview"></a> <h2>index structure overview</h2> <div> <p>each segment index maintains following:</p> <ul> <li> {@link org.apache.lucene.codecs.lucene46.lucene46segmentinfoformat segment info}. contains metadata segment, number documents, files uses, </li> <li> {@link org.apache.lucene.codecs.lucene46.lucene46fieldinfosformat field names}. contains set field names used index. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat stored field values}. contains, document, list attribute-value pairs, attributes field names. used store auxiliary information document, title, url, identifier access database. set stored fields returned hit searching. keyed document number. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term dictionary}. dictionary containing terms used indexed fields documents. dictionary also contains number documents contain term, pointers term's frequency proximity data. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term frequency data}. term dictionary, numbers documents contain term, frequency term document, unless frequencies omitted (indexoptions.docs_only) </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term proximity data}. term dictionary, positions term occurs document. note exist fields documents omit position data. </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42normsformat normalization factors}. field document, value stored multiplied score hits field. </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vectors}. field document, term vector (sometimes called document vector) may stored. term vector consists term text term frequency. add term vectors index see {@link org.apache.lucene.document.field field} constructors </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42docvaluesformat per-document values}. like stored values, also keyed document number, generally intended loaded main memory fast access. whereas stored values generally intended summary results searches, per-document values useful things like scoring factors. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}. optional file indicating documents deleted. </li> </ul> <p>details provided linked pages.</p> </div> <a name="file_naming"></a> <h2>file naming</h2> <div> <p>all files belonging segment name varying extensions. extensions correspond different file formats described below. using compound file format (default 1.4 greater) files (except segment info file, lock file, deleted documents file) collapsed single .cfs file (see details)</p> <p>typically, segments index stored single directory, although required.</p> <p>as version 2.1 (lock-less commits), file names never re-used (there one exception, "segments.gen", see below). is, file saved directory given never used filename. achieved using simple generations approach. example, first segments file segments_1, segments_2, etc. generation sequential long integer represented alpha-numeric (base 36) form.</p> </div> <a name="file-names" id="file-names"></a> <h2>summary file extensions</h2> <div> <p>the following table summarizes names extensions files lucene:</p> <table cellspacing="1" cellpadding="4"> <tr> <th>name</th> <th>extension</th> <th>brief description</th> </tr> <tr> <td>{@link org.apache.lucene.index.segmentinfos segments file}</td> <td>segments.gen, segments_n</td> <td>stores information commit point</td> </tr> <tr> <td><a href="#lock_file">lock file</a></td> <td>write.lock</td> <td>the write lock prevents multiple indexwriters writing file.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}</td> <td>.si</td> <td>stores metadata segment</td> </tr> <tr> <td>{@link org.apache.lucene.store.compoundfiledirectory compound file}</td> <td>.cfs, .cfe</td> <td>an optional "virtual" file consisting index files systems frequently run file handles.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene46.lucene46fieldinfosformat fields}</td> <td>.fnm</td> <td>stores information fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat field index}</td> <td>.fdx</td> <td>contains pointers field data</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat field data}</td> <td>.fdt</td> <td>the stored fields documents</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term dictionary}</td> <td>.tim</td> <td>the term dictionary, stores term info</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term index}</td> <td>.tip</td> <td>the index term dictionary</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat frequencies}</td> <td>.doc</td> <td>contains list docs contain term along frequency</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat positions}</td> <td>.pos</td> <td>stores position information term occurs index</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat payloads}</td> <td>.pay</td> <td>stores additional per-position metadata information character offsets user payloads</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42normsformat norms}</td> <td>.nvd, .nvm</td> <td>encodes length boost factors docs fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42docvaluesformat per-document values}</td> <td>.dvd, .dvm</td> <td>encodes additional scoring factors per-document information.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector index}</td> <td>.tvx</td> <td>stores offset document data file</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector documents}</td> <td>.tvd</td> <td>contains information document term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector fields}</td> <td>.tvf</td> <td>the field level info term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}</td> <td>.del</td> <td>info files deleted</td> </tr> </table> </div> <a name="lock_file" id="lock_file"></a> <h2>lock file</h2> write lock, stored index directory default, named "write.lock". lock directory different index directory write lock named "xxxx-write.lock" xxxx unique prefix derived full path index directory. file present, writer currently modifying index (adding removing documents). lock file ensures one writer modifying index time.</p> <a name="history"></a> <h2>history</h2> <p>compatibility notes provided document, describing file formats changed prior versions:</p> <ul> <li>in version 2.1, file format changed allow lock-less commits (ie, commit lock). change fully backwards compatible: open pre-2.1 index searching adding/deleting docs. new segments file saved (committed), written new file format (meaning specific "upgrade" process needed). note commit occurred, pre-2.1 lucene able read index.</li> <li>in version 2.3, file format changed allow segments share single set doc store (vectors &amp; stored fields) files. allows faster indexing certain cases. change fully backwards compatible (in way lock-less commits change 2.1).</li> <li>in version 2.4, strings written true utf-8 byte sequence, java's modified utf-8. see <a href="http://issues.apache.org/jira/browse/lucene-510"> lucene-510</a> details.</li> <li>in version 2.9, optional opaque map&lt;string,string&gt; commituserdata may passed indexwriter's commit methods (and later retrieved), recorded segments_n file. see <a href="http://issues.apache.org/jira/browse/lucene-1382"> lucene-1382</a> details. also, diagnostics added segment written recording details written (due flush, merge; os/jre used; etc.). see issue <a href="http://issues.apache.org/jira/browse/lucene-1654">lucene-1654</a> details.</li> <li>in version 3.0, compressed fields longer written index (they still read, merge new segment write them, uncompressed). see issue <a href="http://issues.apache.org/jira/browse/lucene-1960">lucene-1960</a> details.</li> <li>in version 3.1, segments records code version created them. see <a href="http://issues.apache.org/jira/browse/lucene-2720">lucene-2720</a> details. additionally segments track explicitly whether term vectors. see <a href="http://issues.apache.org/jira/browse/lucene-2811">lucene-2811</a> details.</li> <li>in version 3.2, numeric fields written natively stored fields file, previously stored text format only.</li> <li>in version 3.4, fields omit position data still indexing term frequencies.</li> <li>in version 4.0, format inverted index became extensible via {@link org.apache.lucene.codecs.codec codec} api. fast per-document storage ({@code docvalues}) introduced. normalization factors need longer single byte, {@link org.apache.lucene.index.numericdocvalues numericdocvalues}. terms need unicode strings, byte sequence. term offsets optionally indexed postings lists. payloads stored term vectors.</li> <li>in version 4.1, format postings list changed use either compression variable-byte encoding, depending upon frequency term. terms appearing changed inline directly term dictionary. stored fields compressed default. </li> <li>in version 4.2, term vectors compressed default. docvalues new multi-valued type (sortedset), used faceting/grouping/joining multi-valued fields.</li> <li>in version 4.5, docvalues extended explicitly represent missing values.</li> <li>in version 4.6, fieldinfos extended support per-field docvalues generation, allow updating numericdocvalues fields.</li> </ul> <a name="limitations" id="limitations"></a> <h2>limitations</h2> <div> <p>lucene uses java <code>int</code> refer document numbers, index file format uses <code>int32</code> on-disk store document numbers. limitation index file format current implementation. eventually replaced either <code>uint64</code> values, better yet, {@link org.apache.lucene.store.dataoutput#writevint vint} values limit.</p> </div> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/compressing/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> storedfieldsformat allows cross-document cross-field compression stored fields. </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/perfield/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> postings format delegate different formats per-field. </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/lucene3x/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> codec support lucene 3.x indexes (readonly) </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/lucene45/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> lucene 4.5 file format. <h1>apache lucene - index file formats</h1> <div> <ul> <li><a href="#introduction">introduction</a></li> <li><a href="#definitions">definitions</a> <ul> <li><a href="#inverted_indexing">inverted indexing</a></li> <li><a href="#types_of_fields">types fields</a></li> <li><a href="#segments">segments</a></li> <li><a href="#document_numbers">document numbers</a></li> </ul> </li> <li><a href="#overview">index structure overview</a></li> <li><a href="#file_naming">file naming</a></li> <li><a href="#file-names">summary file extensions</a></li> <ul> <li><a href="#lock_file">lock file</a></li> <li><a href="#history">history</a></li> <li><a href="#limitations">limitations</a></li> </ul> </ul> </div> <a name="introduction"></a> <h2>introduction</h2> <div> <p>this document defines index file formats used version lucene. using different version lucene, please consult copy <code>docs/</code> distributed version using.</p> <p>apache lucene written java, several efforts underway write <a href="http://wiki.apache.org/lucene-java/luceneimplementations">versions lucene programming languages</a>. versions remain compatible apache lucene, language-independent definition lucene index format required. document thus attempts provide complete independent definition apache lucene file formats.</p> <p>as lucene evolves, document evolve. versions lucene different programming languages endeavor agree file formats, generate new versions document.</p> </div> <a name="definitions" id="definitions"></a> <h2>definitions</h2> <div> <p>the fundamental concepts lucene index, document, field term.</p> <p>an index contains sequence documents.</p> <ul> <li>a document sequence fields.</li> <li>a field named sequence terms.</li> <li>a term sequence bytes.</li> </ul> <p>the sequence bytes two different fields considered different term. thus terms represented pair: string naming field, bytes within field.</p> <a name="inverted_indexing"></a> <h3>inverted indexing</h3> <p>the index stores statistics terms order make term-based search efficient. lucene's index falls family indexes known <i>inverted index.</i> list, term, documents contain it. inverse natural relationship, documents list terms.</p> <a name="types_of_fields"></a> <h3>types fields</h3> <p>in lucene, fields may <i>stored</i>, case text stored index literally, non-inverted manner. fields inverted called <i>indexed</i>. field may stored indexed.</p> <p>the text field may <i>tokenized</i> terms indexed, text field may used literally term indexed. fields tokenized, sometimes useful certain identifier fields indexed literally.</p> <p>see {@link org.apache.lucene.document.field field} java docs information fields.</p> <a name="segments" id="segments"></a> <h3>segments</h3> <p>lucene indexes may composed multiple sub-indexes, <i>segments</i>. segment fully independent index, could searched separately. indexes evolve by:</p> <ol> <li>creating new segments newly added documents.</li> <li>merging existing segments.</li> </ol> <p>searches may involve multiple segments and/or multiple indexes, index potentially composed set segments.</p> <a name="document_numbers"></a> <h3>document numbers</h3> <p>internally, lucene refers documents integer <i>document number</i>. first document added index numbered zero, subsequent document added gets number one greater previous.</p> <p>note document's number may change, caution taken storing numbers outside lucene. particular, numbers may change following situations:</p> <ul> <li> <p>the numbers stored segment unique within segment, must converted used larger context. standard technique allocate segment range values, based range numbers used segment. convert document number segment external value, segment's <i>base</i> document number added. convert external value back segment-specific value, segment identified range external value in, segment's base value subtracted. example two five document segments might combined, first segment base value zero, second five. document three second segment would external value eight.</p> </li> <li> <p>when documents deleted, gaps created numbering. eventually removed index evolves merging. deleted documents dropped segments merged. freshly-merged segment thus gaps numbering.</p> </li> </ul> </div> <a name="overview" id="overview"></a> <h2>index structure overview</h2> <div> <p>each segment index maintains following:</p> <ul> <li> {@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}. contains metadata segment, number documents, files uses, </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42fieldinfosformat field names}. contains set field names used index. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat stored field values}. contains, document, list attribute-value pairs, attributes field names. used store auxiliary information document, title, url, identifier access database. set stored fields returned hit searching. keyed document number. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term dictionary}. dictionary containing terms used indexed fields documents. dictionary also contains number documents contain term, pointers term's frequency proximity data. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term frequency data}. term dictionary, numbers documents contain term, frequency term document, unless frequencies omitted (indexoptions.docs_only) </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term proximity data}. term dictionary, positions term occurs document. note exist fields documents omit position data. </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42normsformat normalization factors}. field document, value stored multiplied score hits field. </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vectors}. field document, term vector (sometimes called document vector) may stored. term vector consists term text term frequency. add term vectors index see {@link org.apache.lucene.document.field field} constructors </li> <li> {@link org.apache.lucene.codecs.lucene45.lucene45docvaluesformat per-document values}. like stored values, also keyed document number, generally intended loaded main memory fast access. whereas stored values generally intended summary results searches, per-document values useful things like scoring factors. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}. optional file indicating documents deleted. </li> </ul> <p>details provided linked pages.</p> </div> <a name="file_naming"></a> <h2>file naming</h2> <div> <p>all files belonging segment name varying extensions. extensions correspond different file formats described below. using compound file format (default 1.4 greater) files (except segment info file, lock file, deleted documents file) collapsed single .cfs file (see details)</p> <p>typically, segments index stored single directory, although required.</p> <p>as version 2.1 (lock-less commits), file names never re-used (there one exception, "segments.gen", see below). is, file saved directory given never used filename. achieved using simple generations approach. example, first segments file segments_1, segments_2, etc. generation sequential long integer represented alpha-numeric (base 36) form.</p> </div> <a name="file-names" id="file-names"></a> <h2>summary file extensions</h2> <div> <p>the following table summarizes names extensions files lucene:</p> <table cellspacing="1" cellpadding="4"> <tr> <th>name</th> <th>extension</th> <th>brief description</th> </tr> <tr> <td>{@link org.apache.lucene.index.segmentinfos segments file}</td> <td>segments.gen, segments_n</td> <td>stores information commit point</td> </tr> <tr> <td><a href="#lock_file">lock file</a></td> <td>write.lock</td> <td>the write lock prevents multiple indexwriters writing file.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}</td> <td>.si</td> <td>stores metadata segment</td> </tr> <tr> <td>{@link org.apache.lucene.store.compoundfiledirectory compound file}</td> <td>.cfs, .cfe</td> <td>an optional "virtual" file consisting index files systems frequently run file handles.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42fieldinfosformat fields}</td> <td>.fnm</td> <td>stores information fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat field index}</td> <td>.fdx</td> <td>contains pointers field data</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat field data}</td> <td>.fdt</td> <td>the stored fields documents</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term dictionary}</td> <td>.tim</td> <td>the term dictionary, stores term info</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term index}</td> <td>.tip</td> <td>the index term dictionary</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat frequencies}</td> <td>.doc</td> <td>contains list docs contain term along frequency</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat positions}</td> <td>.pos</td> <td>stores position information term occurs index</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat payloads}</td> <td>.pay</td> <td>stores additional per-position metadata information character offsets user payloads</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42normsformat norms}</td> <td>.nvd, .nvm</td> <td>encodes length boost factors docs fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene45.lucene45docvaluesformat per-document values}</td> <td>.dvd, .dvm</td> <td>encodes additional scoring factors per-document information.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector index}</td> <td>.tvx</td> <td>stores offset document data file</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector documents}</td> <td>.tvd</td> <td>contains information document term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector fields}</td> <td>.tvf</td> <td>the field level info term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}</td> <td>.del</td> <td>info files deleted</td> </tr> </table> </div> <a name="lock_file" id="lock_file"></a> <h2>lock file</h2> write lock, stored index directory default, named "write.lock". lock directory different index directory write lock named "xxxx-write.lock" xxxx unique prefix derived full path index directory. file present, writer currently modifying index (adding removing documents). lock file ensures one writer modifying index time.</p> <a name="history"></a> <h2>history</h2> <p>compatibility notes provided document, describing file formats changed prior versions:</p> <ul> <li>in version 2.1, file format changed allow lock-less commits (ie, commit lock). change fully backwards compatible: open pre-2.1 index searching adding/deleting docs. new segments file saved (committed), written new file format (meaning specific "upgrade" process needed). note commit occurred, pre-2.1 lucene able read index.</li> <li>in version 2.3, file format changed allow segments share single set doc store (vectors &amp; stored fields) files. allows faster indexing certain cases. change fully backwards compatible (in way lock-less commits change 2.1).</li> <li>in version 2.4, strings written true utf-8 byte sequence, java's modified utf-8. see <a href="http://issues.apache.org/jira/browse/lucene-510"> lucene-510</a> details.</li> <li>in version 2.9, optional opaque map&lt;string,string&gt; commituserdata may passed indexwriter's commit methods (and later retrieved), recorded segments_n file. see <a href="http://issues.apache.org/jira/browse/lucene-1382"> lucene-1382</a> details. also, diagnostics added segment written recording details written (due flush, merge; os/jre used; etc.). see issue <a href="http://issues.apache.org/jira/browse/lucene-1654">lucene-1654</a> details.</li> <li>in version 3.0, compressed fields longer written index (they still read, merge new segment write them, uncompressed). see issue <a href="http://issues.apache.org/jira/browse/lucene-1960">lucene-1960</a> details.</li> <li>in version 3.1, segments records code version created them. see <a href="http://issues.apache.org/jira/browse/lucene-2720">lucene-2720</a> details. additionally segments track explicitly whether term vectors. see <a href="http://issues.apache.org/jira/browse/lucene-2811">lucene-2811</a> details.</li> <li>in version 3.2, numeric fields written natively stored fields file, previously stored text format only.</li> <li>in version 3.4, fields omit position data still indexing term frequencies.</li> <li>in version 4.0, format inverted index became extensible via {@link org.apache.lucene.codecs.codec codec} api. fast per-document storage ({@code docvalues}) introduced. normalization factors need longer single byte, {@link org.apache.lucene.index.numericdocvalues numericdocvalues}. terms need unicode strings, byte sequence. term offsets optionally indexed postings lists. payloads stored term vectors.</li> <li>in version 4.1, format postings list changed use either compression variable-byte encoding, depending upon frequency term. terms appearing changed inline directly term dictionary. stored fields compressed default. </li> <li>in version 4.2, term vectors compressed default. docvalues new multi-valued type (sortedset), used faceting/grouping/joining multi-valued fields.</li> <li>in version 4.5, docvalues extended explicitly represent missing values.</li> </ul> <a name="limitations" id="limitations"></a> <h2>limitations</h2> <div> <p>lucene uses java <code>int</code> refer document numbers, index file format uses <code>int32</code> on-disk store document numbers. limitation index file format current implementation. eventually replaced either <code>uint64</code> values, better yet, {@link org.apache.lucene.store.dataoutput#writevint vint} values limit.</p> </div> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/codecs/lucene42/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> lucene 4.2 file format. <h1>apache lucene - index file formats</h1> <div> <ul> <li><a href="#introduction">introduction</a></li> <li><a href="#definitions">definitions</a> <ul> <li><a href="#inverted_indexing">inverted indexing</a></li> <li><a href="#types_of_fields">types fields</a></li> <li><a href="#segments">segments</a></li> <li><a href="#document_numbers">document numbers</a></li> </ul> </li> <li><a href="#overview">index structure overview</a></li> <li><a href="#file_naming">file naming</a></li> <li><a href="#file-names">summary file extensions</a></li> <ul> <li><a href="#lock_file">lock file</a></li> <li><a href="#history">history</a></li> <li><a href="#limitations">limitations</a></li> </ul> </ul> </div> <a name="introduction"></a> <h2>introduction</h2> <div> <p>this document defines index file formats used version lucene. using different version lucene, please consult copy <code>docs/</code> distributed version using.</p> <p>apache lucene written java, several efforts underway write <a href="http://wiki.apache.org/lucene-java/luceneimplementations">versions lucene programming languages</a>. versions remain compatible apache lucene, language-independent definition lucene index format required. document thus attempts provide complete independent definition apache lucene file formats.</p> <p>as lucene evolves, document evolve. versions lucene different programming languages endeavor agree file formats, generate new versions document.</p> </div> <a name="definitions" id="definitions"></a> <h2>definitions</h2> <div> <p>the fundamental concepts lucene index, document, field term.</p> <p>an index contains sequence documents.</p> <ul> <li>a document sequence fields.</li> <li>a field named sequence terms.</li> <li>a term sequence bytes.</li> </ul> <p>the sequence bytes two different fields considered different term. thus terms represented pair: string naming field, bytes within field.</p> <a name="inverted_indexing"></a> <h3>inverted indexing</h3> <p>the index stores statistics terms order make term-based search efficient. lucene's index falls family indexes known <i>inverted index.</i> list, term, documents contain it. inverse natural relationship, documents list terms.</p> <a name="types_of_fields"></a> <h3>types fields</h3> <p>in lucene, fields may <i>stored</i>, case text stored index literally, non-inverted manner. fields inverted called <i>indexed</i>. field may stored indexed.</p> <p>the text field may <i>tokenized</i> terms indexed, text field may used literally term indexed. fields tokenized, sometimes useful certain identifier fields indexed literally.</p> <p>see {@link org.apache.lucene.document.field field} java docs information fields.</p> <a name="segments" id="segments"></a> <h3>segments</h3> <p>lucene indexes may composed multiple sub-indexes, <i>segments</i>. segment fully independent index, could searched separately. indexes evolve by:</p> <ol> <li>creating new segments newly added documents.</li> <li>merging existing segments.</li> </ol> <p>searches may involve multiple segments and/or multiple indexes, index potentially composed set segments.</p> <a name="document_numbers"></a> <h3>document numbers</h3> <p>internally, lucene refers documents integer <i>document number</i>. first document added index numbered zero, subsequent document added gets number one greater previous.</p> <p>note document's number may change, caution taken storing numbers outside lucene. particular, numbers may change following situations:</p> <ul> <li> <p>the numbers stored segment unique within segment, must converted used larger context. standard technique allocate segment range values, based range numbers used segment. convert document number segment external value, segment's <i>base</i> document number added. convert external value back segment-specific value, segment identified range external value in, segment's base value subtracted. example two five document segments might combined, first segment base value zero, second five. document three second segment would external value eight.</p> </li> <li> <p>when documents deleted, gaps created numbering. eventually removed index evolves merging. deleted documents dropped segments merged. freshly-merged segment thus gaps numbering.</p> </li> </ul> </div> <a name="overview" id="overview"></a> <h2>index structure overview</h2> <div> <p>each segment index maintains following:</p> <ul> <li> {@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}. contains metadata segment, number documents, files uses, </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42fieldinfosformat field names}. contains set field names used index. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat stored field values}. contains, document, list attribute-value pairs, attributes field names. used store auxiliary information document, title, url, identifier access database. set stored fields returned hit searching. keyed document number. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term dictionary}. dictionary containing terms used indexed fields documents. dictionary also contains number documents contain term, pointers term's frequency proximity data. </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term frequency data}. term dictionary, numbers documents contain term, frequency term document, unless frequencies omitted (indexoptions.docs_only) </li> <li> {@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term proximity data}. term dictionary, positions term occurs document. note exist fields documents omit position data. </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42normsformat normalization factors}. field document, value stored multiplied score hits field. </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vectors}. field document, term vector (sometimes called document vector) may stored. term vector consists term text term frequency. add term vectors index see {@link org.apache.lucene.document.field field} constructors </li> <li> {@link org.apache.lucene.codecs.lucene42.lucene42docvaluesformat per-document values}. like stored values, also keyed document number, generally intended loaded main memory fast access. whereas stored values generally intended summary results searches, per-document values useful things like scoring factors. </li> <li> {@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}. optional file indicating documents deleted. </li> </ul> <p>details provided linked pages.</p> </div> <a name="file_naming"></a> <h2>file naming</h2> <div> <p>all files belonging segment name varying extensions. extensions correspond different file formats described below. using compound file format (default 1.4 greater) files (except segment info file, lock file, deleted documents file) collapsed single .cfs file (see details)</p> <p>typically, segments index stored single directory, although required.</p> <p>as version 2.1 (lock-less commits), file names never re-used (there one exception, "segments.gen", see below). is, file saved directory given never used filename. achieved using simple generations approach. example, first segments file segments_1, segments_2, etc. generation sequential long integer represented alpha-numeric (base 36) form.</p> </div> <a name="file-names" id="file-names"></a> <h2>summary file extensions</h2> <div> <p>the following table summarizes names extensions files lucene:</p> <table cellspacing="1" cellpadding="4"> <tr> <th>name</th> <th>extension</th> <th>brief description</th> </tr> <tr> <td>{@link org.apache.lucene.index.segmentinfos segments file}</td> <td>segments.gen, segments_n</td> <td>stores information commit point</td> </tr> <tr> <td><a href="#lock_file">lock file</a></td> <td>write.lock</td> <td>the write lock prevents multiple indexwriters writing file.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40segmentinfoformat segment info}</td> <td>.si</td> <td>stores metadata segment</td> </tr> <tr> <td>{@link org.apache.lucene.store.compoundfiledirectory compound file}</td> <td>.cfs, .cfe</td> <td>an optional "virtual" file consisting index files systems frequently run file handles.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42fieldinfosformat fields}</td> <td>.fnm</td> <td>stores information fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat field index}</td> <td>.fdx</td> <td>contains pointers field data</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41storedfieldsformat field data}</td> <td>.fdt</td> <td>the stored fields documents</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term dictionary}</td> <td>.tim</td> <td>the term dictionary, stores term info</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat term index}</td> <td>.tip</td> <td>the index term dictionary</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat frequencies}</td> <td>.doc</td> <td>contains list docs contain term along frequency</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat positions}</td> <td>.pos</td> <td>stores position information term occurs index</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene41.lucene41postingsformat payloads}</td> <td>.pay</td> <td>stores additional per-position metadata information character offsets user payloads</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42normsformat norms}</td> <td>.nvd, .nvm</td> <td>encodes length boost factors docs fields</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42docvaluesformat per-document values}</td> <td>.dvd, .dvm</td> <td>encodes additional scoring factors per-document information.</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector index}</td> <td>.tvx</td> <td>stores offset document data file</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector documents}</td> <td>.tvd</td> <td>contains information document term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene42.lucene42termvectorsformat term vector fields}</td> <td>.tvf</td> <td>the field level info term vectors</td> </tr> <tr> <td>{@link org.apache.lucene.codecs.lucene40.lucene40livedocsformat deleted documents}</td> <td>.del</td> <td>info files deleted</td> </tr> </table> </div> <a name="lock_file" id="lock_file"></a> <h2>lock file</h2> write lock, stored index directory default, named "write.lock". lock directory different index directory write lock named "xxxx-write.lock" xxxx unique prefix derived full path index directory. file present, writer currently modifying index (adding removing documents). lock file ensures one writer modifying index time.</p> <a name="history"></a> <h2>history</h2> <p>compatibility notes provided document, describing file formats changed prior versions:</p> <ul> <li>in version 2.1, file format changed allow lock-less commits (ie, commit lock). change fully backwards compatible: open pre-2.1 index searching adding/deleting docs. new segments file saved (committed), written new file format (meaning specific "upgrade" process needed). note commit occurred, pre-2.1 lucene able read index.</li> <li>in version 2.3, file format changed allow segments share single set doc store (vectors &amp; stored fields) files. allows faster indexing certain cases. change fully backwards compatible (in way lock-less commits change 2.1).</li> <li>in version 2.4, strings written true utf-8 byte sequence, java's modified utf-8. see <a href="http://issues.apache.org/jira/browse/lucene-510"> lucene-510</a> details.</li> <li>in version 2.9, optional opaque map&lt;string,string&gt; commituserdata may passed indexwriter's commit methods (and later retrieved), recorded segments_n file. see <a href="http://issues.apache.org/jira/browse/lucene-1382"> lucene-1382</a> details. also, diagnostics added segment written recording details written (due flush, merge; os/jre used; etc.). see issue <a href="http://issues.apache.org/jira/browse/lucene-1654">lucene-1654</a> details.</li> <li>in version 3.0, compressed fields longer written index (they still read, merge new segment write them, uncompressed). see issue <a href="http://issues.apache.org/jira/browse/lucene-1960">lucene-1960</a> details.</li> <li>in version 3.1, segments records code version created them. see <a href="http://issues.apache.org/jira/browse/lucene-2720">lucene-2720</a> details. additionally segments track explicitly whether term vectors. see <a href="http://issues.apache.org/jira/browse/lucene-2811">lucene-2811</a> details.</li> <li>in version 3.2, numeric fields written natively stored fields file, previously stored text format only.</li> <li>in version 3.4, fields omit position data still indexing term frequencies.</li> <li>in version 4.0, format inverted index became extensible via {@link org.apache.lucene.codecs.codec codec} api. fast per-document storage ({@code docvalues}) introduced. normalization factors need longer single byte, {@link org.apache.lucene.index.numericdocvalues numericdocvalues}. terms need unicode strings, byte sequence. term offsets optionally indexed postings lists. payloads stored term vectors.</li> <li>in version 4.1, format postings list changed use either compression variable-byte encoding, depending upon frequency term. terms appearing changed inline directly term dictionary. stored fields compressed default. </li> <li>in version 4.2, term vectors compressed default. docvalues new multi-valued type (sortedset), used faceting/grouping/joining multi-valued fields.</li> </ul> <a name="limitations" id="limitations"></a> <h2>limitations</h2> <div> <p>lucene uses java <code>int</code> refer document numbers, index file format uses <code>int32</code> on-disk store document numbers. limitation index file format current implementation. eventually replaced either <code>uint64</code> values, better yet, {@link org.apache.lucene.store.dataoutput#writevint vint} values limit.</p> </div> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/analysis/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> <p>api code convert text indexable/searchable tokens. covers {@link org.apache.lucene.analysis.analyzer} related classes.</p> <h2>parsing? tokenization? analysis!</h2> <p> lucene, indexing search library, accepts plain text input. <p> <h2>parsing</h2> <p> applications build search capabilities upon lucene may support documents various formats &ndash; html, xml, pdf, word &ndash; name few. lucene care <i>parsing</i> document formats, responsibility application using lucene use appropriate <i>parser</i> convert original format plain text passing plain text lucene. <p> <h2>tokenization</h2> <p> plain text passed lucene indexing goes process generally called tokenization. tokenization process breaking input text small indexing elements &ndash; tokens. way input text broken tokens heavily influences people able search text. instance, sentences beginnings endings identified provide accurate phrase proximity searches (though sentence identification provided lucene). <p> cases simply breaking input text tokens enough &ndash; deeper <i>analysis</i> may needed. lucene includes pre- post-tokenization analysis facilities. </p> <p> pre-tokenization analysis include (but limited to) stripping html markup, transforming removing text matching arbitrary patterns sets fixed strings. </p> <p> many post-tokenization steps done, including (but limited to): </p> <ul> <li><a href="http://en.wikipedia.org/wiki/stemming">stemming</a> &ndash; replacing words stems. instance english stemming "bikes" replaced "bike"; query "bike" find documents containing "bike" containing "bikes". </li> <li><a href="http://en.wikipedia.org/wiki/stop_words">stop words filtering</a> &ndash; common words like "the", "and" "a" rarely add value search. removing shrinks index size increases performance. may also reduce "noise" actually improve search quality. </li> <li><a href="http://en.wikipedia.org/wiki/text_normalization">text normalization</a> &ndash; stripping accents character markings make better searching. </li> <li><a href="http://en.wikipedia.org/wiki/synonym">synonym expansion</a> &ndash; adding synonyms token position current word mean better matching users search words synonym set. </li> </ul> <p> <h2>core analysis</h2> <p> analysis package provides mechanism convert strings readers tokens indexed lucene. four main classes package analysis processes derived. are: </p> <ul> <li> {@link org.apache.lucene.analysis.analyzer} &ndash; analyzer responsible building {@link org.apache.lucene.analysis.tokenstream} consumed indexing searching processes. see information implementing analyzer. </li> <li> charfilter &ndash; charfilter extends {@link java.io.reader} perform pre-tokenization substitutions, deletions, and/or insertions input reader's text, providing corrected character offsets account modifications. capability allows highlighting function original text indexed tokens created charfilter-modified text offsets original text. tokenizers' constructors reset() methods accept charfilter. charfilters may chained perform multiple pre-tokenization modifications. </li> <li> {@link org.apache.lucene.analysis.tokenizer} &ndash; tokenizer {@link org.apache.lucene.analysis.tokenstream} responsible breaking incoming text tokens. cases, analyzer use tokenizer first step analysis process. however, modify text prior tokenization, use charstream subclass (see above). </li> <li> {@link org.apache.lucene.analysis.tokenfilter} &ndash; tokenfilter also {@link org.apache.lucene.analysis.tokenstream} responsible modifying tokens created tokenizer. common modifications performed tokenfilter are: deletion, stemming, synonym injection, casing. analyzers require tokenfilters. </li> </ul> <h2>hints, tips traps</h2> <p> synergy {@link org.apache.lucene.analysis.analyzer} {@link org.apache.lucene.analysis.tokenizer} sometimes confusing. ease confusion, clarifications: </p> <ul> <li> {@link org.apache.lucene.analysis.analyzer} responsible entire task <u>creating</u> tokens input text, {@link org.apache.lucene.analysis.tokenizer} responsible <u>breaking</u> input text tokens. likely, tokens created {@link org.apache.lucene.analysis.tokenizer} would modified even omitted {@link org.apache.lucene.analysis.analyzer} (via one {@link org.apache.lucene.analysis.tokenfilter}s) returned. </li> <li> {@link org.apache.lucene.analysis.tokenizer} {@link org.apache.lucene.analysis.tokenstream}, {@link org.apache.lucene.analysis.analyzer} not. </li> <li> {@link org.apache.lucene.analysis.analyzer} "field aware", {@link org.apache.lucene.analysis.tokenizer} not. </li> </ul> <p> lucene java provides number analysis capabilities, commonly used one standardanalyzer. many applications long industrious life nothing standardanalyzer. however, classes/packages worth mentioning: </p> <ol> <li> perfieldanalyzerwrapper &ndash; analyzers perform operation {@link org.apache.lucene.document.field}s. perfieldanalyzerwrapper used associate different analyzer different {@link org.apache.lucene.document.field}s. </li> <li> analysis library located root lucene distribution number different analyzer implementations solve variety different problems related searching. many analyzers designed analyze non-english languages. </li> <li> variety tokenizer tokenfilter implementations package. take look around, chances someone implemented need. </li> </ol> <p> analysis one main causes performance degradation indexing. simply put, analyze slower indexing (in cases). perhaps application would fine using simple whitespacetokenizer combined stopfilter. benchmark/ library useful testing speed analysis process. </p> <h2>invoking analyzer</h2> <p> applications usually invoke analysis &ndash; lucene them: </p> <ul> <li> indexing, consequence {@link org.apache.lucene.index.indexwriter#adddocument(iterable) adddocument(doc)}, analyzer effect indexing invoked indexed field added document. </li> <li> search, queryparser may invoke analyzer parsing. note queries, analysis take place, e.g. wildcard queries. </li> </ul> <p> however application might invoke analysis text testing purpose, something like: </p> <pre class="prettyprint" id="analysis-workflow"> version matchversion = version.lucene_xy; // substitute desired lucene version xy analyzer analyzer = new standardanalyzer(matchversion); // analyzer tokenstream ts = analyzer.tokenstream("myfield", new stringreader("some text goes here")); offsetattribute offsetatt = ts.addattribute(offsetattribute.class); try { ts.reset(); // resets stream beginning. (required) (ts.incrementtoken()) { // use {@link org.apache.lucene.util.attributesource#reflectasstring(boolean)} // token stream debugging. system.out.println("token: " + ts.reflectasstring(true)); system.out.println("token start offset: " + offsetatt.startoffset()); system.out.println(" token end offset: " + offsetatt.endoffset()); } ts.end(); // perform end-of-stream operations, e.g. set final offset. } finally { ts.close(); // release resources associated stream. } </pre> <h2>indexing analysis vs. search analysis</h2> <p> selecting "correct" analyzer crucial search quality, also affect indexing search performance. "correct" analyzer differs applications. lucene java's wiki page <a href="http://wiki.apache.org/lucene-java/analysisparalysis">analysisparalysis</a> provides data "analyzing analyzer". rules thumb: <ol> <li>test test test... (did say test?)</li> <li>beware analysis &ndash; might hurt indexing performance.</li> <li>start analyzer indexing search, otherwise searches would find supposed to...</li> <li>in cases different analyzer required indexing search, instance: <ul> <li>certain searches require stop words filtered. (i.e. filtered indexing.)</li> <li>query expansion synonyms, acronyms, auto spell correction, etc.</li> </ul> might sometimes require modified analyzer &ndash; see next section that. </li> </ol> </p> <h2>implementing analyzer</h2> <p> creating analyzer straightforward. analyzer wrap existing analysis components &mdash; charfilter(s) <i>(optional)</i>, tokenizer, tokenfilter(s) <i>(optional)</i> &mdash; components create, combination existing newly created components. pursuing approach, may find worthwhile explore <a href="{@docroot}/../analyzers-common/overview-summary.html">analyzers-common</a> library and/or ask <a href="http://lucene.apache.org/core/discussion.html" >java-user@lucene.apache.org mailing list</a> first see need already exists. still committed creating analyzer, look source code one many samples located package. </p> <p> following sections discuss aspects implementing analyzer. </p> <h3>field section boundaries</h3> <p> {@link org.apache.lucene.document.document#add(org.apache.lucene.index.indexablefield) document.add(field)} called multiple times field name, could say call creates new section field document. fact, separate call {@link org.apache.lucene.analysis.analyzer#tokenstream(java.lang.string, java.io.reader) tokenstream(field,reader)} would take place called "sections". however, default analyzer behavior treat sections one large section. allows phrase search proximity search seamlessly cross boundaries "sections". words, certain field "f" added like this: </p> <pre class="prettyprint"> document.add(new field("f","first ends",...); document.add(new field("f","starts two",...); indexwriter.adddocument(document); </pre> <p> then, phrase search "ends starts" would find document. desired, behavior modified introducing "position gap" consecutive field "sections", simply overriding {@link org.apache.lucene.analysis.analyzer#getpositionincrementgap(java.lang.string) analyzer.getpositionincrementgap(fieldname)}: </p> <pre class="prettyprint"> version matchversion = version.lucene_xy; // substitute desired lucene version xy analyzer myanalyzer = new standardanalyzer(matchversion) { public int getpositionincrementgap(string fieldname) { return 10; } }; </pre> <h3>token position increments</h3> <p> default, tokens created analyzers tokenizers {@link org.apache.lucene.analysis.tokenattributes.positionincrementattribute#getpositionincrement() position increment} one. means position stored token index would one previous token. recall phrase proximity searches rely position info. </p> <p> selected analyzer filters stop words "is" "the", document containing string "blue sky", tokens "blue", "sky" indexed, position("sky") = 3 + position("blue"). now, phrase query "blue sky" would find document, analyzer filters stop words query. phrase query "blue sky" would find document position increment "blue" "sky" 1. </p> <p> behavior fit application needs, query parser needs configured take position increments account generating phrase queries. </p> <p> note stopfilter must increment position increment order generate corrupt tokenstream graphs. logic used stopfilter increment positions filtering tokens: </p> <pre class="prettyprint"> public tokenstream tokenstream(final string fieldname, reader reader) { final tokenstream ts = someanalyzer.tokenstream(fieldname, reader); tokenstream res = new tokenstream() { chartermattribute termatt = addattribute(chartermattribute.class); positionincrementattribute posincratt = addattribute(positionincrementattribute.class); public boolean incrementtoken() throws ioexception { int extraincrement = 0; (true) { boolean hasnext = ts.incrementtoken(); (hasnext) { (stopwords.contains(termatt.tostring())) { extraincrement += posincratt.getpositionincrement(); // filter word continue; } (extraincrement>0) { posincratt.setpositionincrement(posincratt.getpositionincrement()+extraincrement); } } return hasnext; } } }; return res; } </pre> <p> use cases modifying position increments are: </p> <ol> <li>inhibiting phrase proximity matches sentence boundaries &ndash; this, tokenizer identifies new sentence add 1 position increment first token new sentence.</li> <li>injecting synonyms &ndash; here, synonyms token added token, position increment set 0. result, synonyms token would considered appear exactly position token, would seen phrase proximity searches.</li> </ol> <h3>token position length</h3> <p> default, tokens created analyzers tokenizers {@link org.apache.lucene.analysis.tokenattributes.positionlengthattribute#getpositionlength() position length} one. means token occupies single position. attribute indexed thus taken account positional queries, used eg. suggesters. </p> <p> main use case positions lengths multi-word synonyms. single-word synonyms, setting position increment 0 enough denote fact two words synonyms, example: </p> <table> <tr><td>term</td><td>red</td><td>magenta</td></tr> <tr><td>position increment</td><td>1</td><td>0</td></tr> </table> <p> given position(magenta) = 0 + position(red), position, anything working analyzers return exact result replace "magenta" "red" input. however, multi-word synonyms tricky. let's say want build tokenstream "ibm" synonym "internal business machines". position increments enough anymore: </p> <table> <tr><td>term</td><td>ibm</td><td>international</td><td>business</td><td>machines</td></tr> <tr><td>position increment</td><td>1</td><td>0</td><td>1</td><td>1</td></tr> </table> <p> problem token stream "ibm" position "international" although synonym "international business machines" whole. setting position increment "business" "machines" 0 help would mean "international" synonym "business". way solve issue make "ibm" span across 3 positions, position lengths come rescue. </p> <table> <tr><td>term</td><td>ibm</td><td>international</td><td>business</td><td>machines</td></tr> <tr><td>position increment</td><td>1</td><td>0</td><td>1</td><td>1</td></tr> <tr><td>position length</td><td>3</td><td>1</td><td>1</td><td>1</td></tr> </table> <p> new attribute makes clear "ibm" "international business machines" start end positions. </p> <a name="corrupt" /> <h3>how write corrupt token streams</h3> <p> rules observe writing custom tokenizers tokenfilters: </p> <ul> <li>the first position increment must &gt; 0.</li> <li>positions must go backward.</li> <li>tokens start position must start offset.</li> <li>tokens end position (taking account position length) must end offset.</li> <li>tokenizers must call {@link org.apache.lucene.util.attributesource#clearattributes()} incrementtoken().</li> <li>tokenizers must override {@link org.apache.lucene.analysis.tokenstream#end()}, pass final offset (the total number input characters processed) parameters {@link org.apache.lucene.analysis.tokenattributes.offsetattribute#setoffset(int, int)}.</li> </ul> <p> although rules might seem easy follow, problems quickly happen chaining badly implemented filters play positions offsets, synonym n-grams filters. good practices writing correct filters: </p> <ul> <li>token filters modify offsets. feel filter would need modify offsets, probably implemented tokenizer.</li> <li>token filters insert positions. filter needs add tokens, position increment 0.</li> <li>when add tokens, token filters call {@link org.apache.lucene.util.attributesource#clearattributes()} first.</li> <li>when remove tokens, token filters increment position increment following token.</li> <li>token filters preserve position lengths.</li> </ul> <h2>tokenstream api</h2> <p> "flexible indexing" summarizes effort making lucene indexer pluggable extensible custom index formats. fully customizable indexer means users able store custom data structures disk. therefore api necessary transport custom types data documents indexer. </p> <h3>attribute attributesource</h3> <p> classes {@link org.apache.lucene.util.attribute} {@link org.apache.lucene.util.attributesource} serve basis upon analysis elements "flexible indexing" implemented. attribute holds particular piece information text token. example, {@link org.apache.lucene.analysis.tokenattributes.chartermattribute} contains term text token, {@link org.apache.lucene.analysis.tokenattributes.offsetattribute} contains start end character offsets token. attributesource collection attributes restriction: may one instance attribute type. tokenstream extends attributesource, means one add attributes tokenstream. since tokenfilter extends tokenstream, filters also attributesources. </p> <p> lucene provides seven attributes box: </p> <table rules="all" frame="box" cellpadding="3"> <tr> <td>{@link org.apache.lucene.analysis.tokenattributes.chartermattribute}</td> <td> term text token. implements {@link java.lang.charsequence} (providing methods length() charat(), allowing e.g. direct use regular expression {@link java.util.regex.matcher}s) {@link java.lang.appendable} (allowing term text appended to.) </td> </tr> <tr> <td>{@link org.apache.lucene.analysis.tokenattributes.offsetattribute}</td> <td>the start end offset token characters.</td> </tr> <tr> <td>{@link org.apache.lucene.analysis.tokenattributes.positionincrementattribute}</td> <td>see detailed information position increment.</td> </tr> <tr> <td>{@link org.apache.lucene.analysis.tokenattributes.positionlengthattribute}</td> <td>the number positions occupied token.</td> </tr> <tr> <td>{@link org.apache.lucene.analysis.tokenattributes.payloadattribute}</td> <td>the payload token optionally have.</td> </tr> <tr> <td>{@link org.apache.lucene.analysis.tokenattributes.typeattribute}</td> <td>the type token. default 'word'.</td> </tr> <tr> <td>{@link org.apache.lucene.analysis.tokenattributes.flagsattribute}</td> <td>optional flags token have.</td> </tr> <tr> <td>{@link org.apache.lucene.analysis.tokenattributes.keywordattribute}</td> <td> keyword-aware tokenstreams/-filters skip modification tokens return true attribute's iskeyword() method. </td> </tr> </table> <h3>more requirements analysis component classes</h3> due historical development api, perhaps less obvious requirements implement analysis components classes. <h4 id="analysis-lifetime">token stream lifetime</h4> code fragment <a href="#analysis-workflow">analysis workflow protocol</a> shows token stream obtained, used, left garbage. however, mean components token stream will, fact, discarded. default opposite. {@link org.apache.lucene.analysis.analyzer} applies reuse strategy tokenizer token filters. reuse them. new input, calls {@link org.apache.lucene.analysis.tokenizer#setreader(java.io.reader)} set input. components must prepared scenario, described below. <h4>tokenizer</h4> <ul> <li> create tokenizer class extending {@link org.apache.lucene.analysis.tokenizer}. </li> <li> tokenizer must <strong>never</strong> make direct use {@link java.io.reader} supplied constructor(s). (a future release apache lucene may remove reader parameters tokenizer constructors.) {@link org.apache.lucene.analysis.tokenizer} wraps reader object helps enforce applications comply <a href="#analysis-workflow">analysis workflow</a>. thus, class reference input via protected 'input' field tokenizer. </li> <li> tokenizer <strong>must</strong> override {@link org.apache.lucene.analysis.tokenstream#end()}. implementation <strong>must</strong> call <code>super.end()</code>. must set correct final offset offset attribute, finish attributes reflect end stream. </li> <li> tokenizer overrides {@link org.apache.lucene.analysis.tokenstream#reset()} {@link org.apache.lucene.analysis.tokenstream#close()}, <strong>must</strong> call corresponding superclass method. </li> </ul> <h4>token filter</h4> create token filter class extending {@link org.apache.lucene.analysis.tokenfilter}. token filter overrides {@link org.apache.lucene.analysis.tokenstream#reset()}, {@link org.apache.lucene.analysis.tokenstream#end()} {@link org.apache.lucene.analysis.tokenstream#close()}, <strong>must</strong> call corresponding superclass method. <h4>creating delegates</h4> forwarding classes (those extend {@link org.apache.lucene.analysis.tokenizer} delegate selected logic another tokenizer) must also set reader delegate overridden {@link org.apache.lucene.analysis.tokenizer#reset()} method, e.g.: <pre class="prettyprint"> public class forwardingtokenizer extends tokenizer { private tokenizer delegate; ... {@literal @override} public void reset() { super.reset(); delegate.setreader(this.input); delegate.reset(); } } </pre> <h3>testing analysis component</h3> <p> lucene-test-framework component defines <a href="{@docroot}/../test-framework/org/apache/lucene/analysis/basetokenstreamtestcase.html">basetokenstreamtestcase</a>. extending class, create junit tests validate analyzer and/or analysis components correctly implement protocol. checkrandomdata methods class particularly effective flushing errors. </p> <h3>using tokenstream api</h3> important things know order use new api efficiently summarized here. may want walk example first come back section afterwards. <ol><li> please keep mind attributesource one instance particular attribute. furthermore, chain tokenstream multiple tokenfilters used, tokenfilters chain share attributes tokenstream. </li> <br> <li> attribute instances reused tokens document. thus, tokenstream/-filter needs update appropriate attribute(s) incrementtoken(). consumer, commonly lucene indexer, consumes data attributes calls incrementtoken() returns false, indicates end stream reached. means call incrementtoken() tokenstream/-filter safely overwrite data attribute instances. </li> <br> <li> performance reasons tokenstream/-filter add/get attributes instantiation; i.e., create attribute constructor store references instance variable. using instance variable instead calling addattribute()/getattribute() incrementtoken() avoid attribute lookups every token document. </li> <br> <li> methods attributesource idempotent, means calling multiple times always yields result. especially important know addattribute(). method takes <b>type</b> (<code>class</code>) attribute argument returns <b>instance</b>. attribute type previously added, already existing instance returned, otherwise new instance created returned. therefore tokenstreams/-filters safely call addattribute() attribute type multiple times. even consumers tokenstreams normally call addattribute() instead getattribute(), would fail tokenstream attribute (getattribute() would throw illegalargumentexception, attribute missing). advanced code could simply check hasattribute(), tokenstream it, may conditionally leave processing extra performance. </li></ol> <h3>example</h3> <p> example create whitespacetokenizer use lengthfilter suppress words two fewer characters. lengthfilter part lucene core implementation explained illustrate usage tokenstream api. </p> <p> develop custom attribute, partofspeechattribute, add another filter chain utilizes new custom attribute, call partofspeechtaggingfilter. </p> <h4>whitespace tokenization</h4> <pre class="prettyprint"> public class myanalyzer extends analyzer { private version matchversion; public myanalyzer(version matchversion) { this.matchversion = matchversion; } {@literal @override} protected tokenstreamcomponents createcomponents(string fieldname, reader reader) { return new tokenstreamcomponents(new whitespacetokenizer(matchversion, reader)); } public static void main(string[] args) throws ioexception { // text tokenize final string text = "this demo tokenstream api"; version matchversion = version.lucene_xy; // substitute desired lucene version xy myanalyzer analyzer = new myanalyzer(matchversion); tokenstream stream = analyzer.tokenstream("field", new stringreader(text)); // get chartermattribute tokenstream chartermattribute termatt = stream.addattribute(chartermattribute.class); try { stream.reset(); // print tokens stream exhausted (stream.incrementtoken()) { system.out.println(termatt.tostring()); } stream.end(); } finally { stream.close(); } } } </pre> easy example simple white space tokenization performed. main() loop consumes stream prints term text tokens accessing chartermattribute whitespacetokenizer provides. output: <pre> demo new tokenstream api </pre> <h4>adding lengthfilter</h4> want suppress tokens 2 less characters. easily adding lengthfilter chain. <code>createcomponents()</code> method analyzer needs changed: <pre class="prettyprint"> {@literal @override} protected tokenstreamcomponents createcomponents(string fieldname, reader reader) { final tokenizer source = new whitespacetokenizer(matchversion, reader); tokenstream result = new lengthfilter(true, source, 3, integer.max_value); return new tokenstreamcomponents(source, result); } </pre> note words 3 characters contained output: <pre> demo new tokenstream api </pre> let's take look lengthfilter implemented: <pre class="prettyprint"> public final class lengthfilter extends filteringtokenfilter { private final int min; private final int max; private final chartermattribute termatt = addattribute(chartermattribute.class); /** * create new lengthfilter. filter tokens whose * chartermattribute either short * (&lt; min) long (&gt; max). * @param version lucene match version * @param tokenstream consume * @param min minimum length * @param max maximum length */ public lengthfilter(version version, tokenstream in, int min, int max) { super(version, in); this.min = min; this.max = max; } {@literal @override} public boolean accept() { final int len = termatt.length(); return (len &gt;= min &amp;&amp; len <= max); } } </pre> <p> lengthfilter, chartermattribute added stored instance variable <code>termatt</code>. remember single instance chartermattribute chain, example <code>addattribute()</code> call lengthfilter returns chartermattribute whitespacetokenizer already added. </p> <p> tokens retrieved input stream filteringtokenfilter's <code>incrementtoken()</code> method (see below), calls lengthfilter's <code>accept()</code> method. looking term text chartermattribute, length term determined tokens either short long skipped. note <code>accept()</code> efficiently access instance variable; attribute lookup necessary. true consumer, simply use local references attributes. </p> <p> lengthfilter extends filteringtokenfilter: </p> <pre class="prettyprint"> public abstract class filteringtokenfilter extends tokenfilter { private final positionincrementattribute posincratt = addattribute(positionincrementattribute.class); /** * create new filteringtokenfilter. * @param tokenstream consume */ public filteringtokenfilter(version version, tokenstream in) { super(in); } /** override method return current input token returned incrementtoken. */ protected abstract boolean accept() throws ioexception; {@literal @override} public final boolean incrementtoken() throws ioexception { int skippedpositions = 0; (input.incrementtoken()) { (accept()) { (skippedpositions != 0) { posincratt.setpositionincrement(posincratt.getpositionincrement() + skippedpositions); } return true; } skippedpositions += posincratt.getpositionincrement(); } // reached eos -- return false return false; } {@literal @override} public void reset() throws ioexception { super.reset(); } } </pre> <h4>adding custom attribute</h4> we're going implement custom attribute part-of-speech tagging call consequently <code>partofspeechattribute</code>. first need define interface new attribute: <pre class="prettyprint"> public interface partofspeechattribute extends attribute { public static enum partofspeech { noun, verb, adjective, adverb, pronoun, preposition, conjunction, article, unknown } public void setpartofspeech(partofspeech pos); public partofspeech getpartofspeech(); } </pre> <p> also need write implementing class. name class important here: default, lucene checks class name attribute suffix 'impl'. example, would consequently call implementing class <code>partofspeechattributeimpl</code>. </p> <p> usual behavior. however, also expert-api allows changing naming conventions: {@link org.apache.lucene.util.attributesource.attributefactory}. factory accepts attribute interface argument returns actual instance. implement factory need change default behavior. </p> <p> actual class implements new attribute. notice class extend {@link org.apache.lucene.util.attributeimpl}: </p> <pre class="prettyprint"> public final class partofspeechattributeimpl extends attributeimpl implements partofspeechattribute { private partofspeech pos = partofspeech.unknown; public void setpartofspeech(partofspeech pos) { this.pos = pos; } public partofspeech getpartofspeech() { return pos; } {@literal @override} public void clear() { pos = partofspeech.unknown; } {@literal @override} public void copyto(attributeimpl target) { ((partofspeechattribute) target).setpartofspeech(pos); } } </pre> <p> simple attribute implementation single variable stores part-of-speech token. extends <code>attributeimpl</code> class therefore implements abstract methods <code>clear()</code> <code>copyto()</code>. need tokenfilter set new partofspeechattribute token. example show naive filter tags every word leading upper-case letter 'noun' words 'unknown'. </p> <pre class="prettyprint"> public static class partofspeechtaggingfilter extends tokenfilter { partofspeechattribute posatt = addattribute(partofspeechattribute.class); chartermattribute termatt = addattribute(chartermattribute.class); protected partofspeechtaggingfilter(tokenstream input) { super(input); } public boolean incrementtoken() throws ioexception { (!input.incrementtoken()) {return false;} posatt.setpartofspeech(determinepos(termatt.buffer(), 0, termatt.length())); return true; } // determine part speech given term protected partofspeech determinepos(char[] term, int offset, int length) { // naive implementation tags every uppercased word noun (length > 0 && character.isuppercase(term[0])) { return partofspeech.noun; } return partofspeech.unknown; } } </pre> <p> like lengthfilter, new filter stores references attributes needs instance variables. notice need pass interface new attribute instantiating correct class automatically taken care of. </p> <p>now need add filter chain myanalyzer:</p> <pre class="prettyprint"> {@literal @override} protected tokenstreamcomponents createcomponents(string fieldname, reader reader) { final tokenizer source = new whitespacetokenizer(matchversion, reader); tokenstream result = new lengthfilter(true, source, 3, integer.max_value); result = new partofspeechtaggingfilter(result); return new tokenstreamcomponents(source, result); } </pre> let's look output: <pre> demo new tokenstream api </pre> apparently changed, shows adding custom attribute tokenstream/filter chain affect existing consumers, simply know new attribute. let's change consumer make use new partofspeechattribute print out: <pre class="prettyprint"> public static void main(string[] args) throws ioexception { // text tokenize final string text = "this demo tokenstream api"; myanalyzer analyzer = new myanalyzer(); tokenstream stream = analyzer.tokenstream("field", new stringreader(text)); // get chartermattribute tokenstream chartermattribute termatt = stream.addattribute(chartermattribute.class); // get partofspeechattribute tokenstream partofspeechattribute posatt = stream.addattribute(partofspeechattribute.class); try { stream.reset(); // print tokens stream exhausted (stream.incrementtoken()) { system.out.println(termatt.tostring() + ": " + posatt.getpartofspeech()); } stream.end(); } finally { stream.close(); } } </pre> change made get partofspeechattribute tokenstream print contents loop consumes stream. new output: <pre> this: noun demo: unknown the: unknown new: unknown tokenstream: noun api: noun </pre> word followed assigned partofspeech tag. course naive part-of-speech tagging. word 'this' even tagged noun; spelled capitalized first word sentence. actually good opportunity exercise. practice usage new api reader could write attribute tokenfilter specify word first token sentence not. partofspeechtaggingfilter make use knowledge tag capitalized words nouns first word sentence (we know, still correct behavior, hey, good exercise). small hint, new attribute class could begin: <pre class="prettyprint"> public class firsttokenofsentenceattributeimpl extends attributeimpl implements firsttokenofsentenceattribute { private boolean firsttoken; public void setfirsttoken(boolean firsttoken) { this.firsttoken = firsttoken; } public boolean getfirsttoken() { return firsttoken; } {@literal @override} public void clear() { firsttoken = false; } ... </pre> <h4>adding charfilter chain</h4> analyzers take java {@link java.io.reader}s input. course wrap readers {@link java.io.filterreader}s manipulate content, would big disadvantage character offsets might inconsistent original text. <p> {@link org.apache.lucene.analysis.charfilter} designed allow pre-process input like filterreader would, also preserve original offsets associated characters. way mechanisms like highlighting still work correctly. charfilters chained. <p> example: <pre class="prettyprint"> public class myanalyzer extends analyzer { {@literal @override} protected tokenstreamcomponents createcomponents(string fieldname, reader reader) { return new tokenstreamcomponents(new mytokenizer(reader)); } {@literal @override} protected reader initreader(string fieldname, reader reader) { // wrap reader charfilter chain. return new secondcharfilter(new firstcharfilter(reader)); } } </pre> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/analysis/tokenattributes/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> general-purpose attributes text analysis. </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> utility classes. </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/mutable/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> comparable object wrappers </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/packed/package.html # --- <!doctype html public "-//w3c//dtd html 3.2 final//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head></head> <body bgcolor="white"> <h2>packed integer arrays streams.</h2> <p> packed package provides <ul> <li>sequential random access capable arrays positive longs,</li> <li>routines efficient serialization deserialization streams packed integers.</li> </ul> implementations provide different trade-offs memory usage access speed. standard usage scenario replacing large int long arrays order reduce memory footprint. </p><p> main access point {@link org.apache.lucene.util.packed.packedints} factory. </p> <h3>in-memory structures</h3> <ul> <li><b>{@link org.apache.lucene.util.packed.packedints.mutable}</b><ul> <li>only supports positive longs.</li> <li>requires number bits per value known advance.</li> <li>random-access writing reading.</li> </ul></li> <li><b>{@link org.apache.lucene.util.packed.growablewriter}</b><ul> <li>same packedints.mutable grows number bits per values needed.</li> <li>useful build packedints.mutable read-once stream longs.</li> </ul></li> <li><b>{@link org.apache.lucene.util.packed.pagedgrowablewriter}</b><ul> <li>slices data fixed-size blocks stored growablewriters.</li> <li>supports 2b values.</li> <li>you use appending(delta)packedlongbuffer instead need random write access.</li> </ul></li> <li><b>{@link org.apache.lucene.util.packed.appendingdeltapackedlongbuffer}</b><ul> <li>can store sequence longs.</li> <li>compression good values close other.</li> <li>supports random reads, sequential writes.</li> <li>can address 2^42 values.</li> </ul></li> <li><b>{@link org.apache.lucene.util.packed.appendingpackedlongbuffer}</b><ul> <li>same appendingdeltapackedlongbuffer assumes values 0-based.</li> </ul></li> <li><b>{@link org.apache.lucene.util.packed.monotonicappendinglongbuffer}</b><ul> <li>same appendingdeltapackedlongbuffer except compression good stream succession affine functions.</li> </ul></li> </ul> <h3>disk-based structures</h3> <ul> <li><b>{@link org.apache.lucene.util.packed.packedints.writer}, {@link org.apache.lucene.util.packed.packedints.reader}, {@link org.apache.lucene.util.packed.packedints.readeriterator}</b><ul> <li>only supports positive longs.</li> <li>requires number bits per value known advance.</li> <li>supports fast sequential access low memory footprint readeriterator random-access either loading values memory leaving disk reader.</li> </ul></li> <li><b>{@link org.apache.lucene.util.packed.blockpackedwriter}, {@link org.apache.lucene.util.packed.blockpackedreader}, {@link org.apache.lucene.util.packed.blockpackedreaderiterator}</b><ul> <li>splits stream fixed-size blocks.</li> <li>compression good values close other.</li> <li>can address 2b * blocksize values.</li> </ul></li> <li><b>{@link org.apache.lucene.util.packed.monotonicblockpackedwriter}, {@link org.apache.lucene.util.packed.monotonicblockpackedreader}</b><ul> <li>same non-monotonic variants except compression good stream succession affine functions.</li> <li>the reason sequential access need sequential access, rather delta-encode use blockpackedwriter.</li> </ul></li> <li><b>{@link org.apache.lucene.util.packed.packeddataoutput}, {@link org.apache.lucene.util.packed.packeddatainput}</b><ul> <li>writes sequences longs long use number bits.</li> </ul></li> </ul> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/packed/gen_packed64singleblock.py # --- #! /usr/bin/env python # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. supported_bits_per_value = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 16, 21, 32] header="""// file automatically generated, edit package org.apache.lucene.util.packed; /* * licensed apache software foundation (asf) one * contributor license agreements. see notice file distributed * work additional information regarding copyright ownership. asf * licenses file apache license, version 2.0 (the * "license"); may use file except compliance license. * may obtain copy license * * http://www.apache.org/licenses/license-2.0 * * unless required applicable law agreed writing, software * distributed license distributed "as is" basis, without * warranties conditions kind, either express implied. see * license specific language governing permissions limitations * license. */ import java.io.ioexception; import java.util.arrays; import org.apache.lucene.store.datainput; import org.apache.lucene.util.ramusageestimator; /** * class similar {@link packed64} except trades space * speed ensuring single block needs read/written order * read/write value. */ abstract class packed64singleblock extends packedints.mutableimpl { public static final int max_supported_bits_per_value = %d; private static final int[] supported_bits_per_value = new int[] {%s}; public static boolean issupported(int bitspervalue) { return arrays.binarysearch(supported_bits_per_value, bitspervalue) >= 0; } private static int requiredcapacity(int valuecount, int valuesperblock) { return valuecount / valuesperblock + (valuecount %% valuesperblock == 0 ? 0 : 1); } final long[] blocks; packed64singleblock(int valuecount, int bitspervalue) { super(valuecount, bitspervalue); assert issupported(bitspervalue); final int valuesperblock = 64 / bitspervalue; blocks = new long[requiredcapacity(valuecount, valuesperblock)]; } @override public void clear() { arrays.fill(blocks, 0l); } @override public long rambytesused() { return ramusageestimator.alignobjectsize( ramusageestimator.num_bytes_object_header + 2 * ramusageestimator.num_bytes_int // valuecount,bitspervalue + ramusageestimator.num_bytes_object_ref) // blocks ref + ramusageestimator.sizeof(blocks); } @override public int get(int index, long[] arr, int off, int len) { assert len > 0 : "len must > 0 (got " + len + ")"; assert index >= 0 && index < valuecount; len = math.min(len, valuecount - index); assert + len <= arr.length; final int originalindex = index; // go next block boundary final int valuesperblock = 64 / bitspervalue; final int offsetinblock = index %% valuesperblock; (offsetinblock != 0) { (int = offsetinblock; < valuesperblock && len > 0; ++i) { arr[off++] = get(index++); --len; } (len == 0) { return index - originalindex; } } // bulk get assert index %% valuesperblock == 0; final packedints.decoder decoder = bulkoperation.of(packedints.format.packed_single_block, bitspervalue); assert decoder.longblockcount() == 1; assert decoder.longvaluecount() == valuesperblock; final int blockindex = index / valuesperblock; final int nblocks = (index + len) / valuesperblock - blockindex; decoder.decode(blocks, blockindex, arr, off, nblocks); final int diff = nblocks * valuesperblock; index += diff; len -= diff; (index > originalindex) { // stay block boundary return index - originalindex; } else { // progress far => already block boundary full block // get assert index == originalindex; return super.get(index, arr, off, len); } } @override public int set(int index, long[] arr, int off, int len) { assert len > 0 : "len must > 0 (got " + len + ")"; assert index >= 0 && index < valuecount; len = math.min(len, valuecount - index); assert + len <= arr.length; final int originalindex = index; // go next block boundary final int valuesperblock = 64 / bitspervalue; final int offsetinblock = index %% valuesperblock; (offsetinblock != 0) { (int = offsetinblock; < valuesperblock && len > 0; ++i) { set(index++, arr[off++]); --len; } (len == 0) { return index - originalindex; } } // bulk set assert index %% valuesperblock == 0; final bulkoperation op = bulkoperation.of(packedints.format.packed_single_block, bitspervalue); assert op.longblockcount() == 1; assert op.longvaluecount() == valuesperblock; final int blockindex = index / valuesperblock; final int nblocks = (index + len) / valuesperblock - blockindex; op.encode(arr, off, blocks, blockindex, nblocks); final int diff = nblocks * valuesperblock; index += diff; len -= diff; (index > originalindex) { // stay block boundary return index - originalindex; } else { // progress far => already block boundary full block // set assert index == originalindex; return super.set(index, arr, off, len); } } @override public void fill(int fromindex, int toindex, long val) { assert fromindex >= 0; assert fromindex <= toindex; assert packedints.bitsrequired(val) <= bitspervalue; final int valuesperblock = 64 / bitspervalue; (toindex - fromindex <= valuesperblock << 1) { // needs least one full block set block // approach worth trying super.fill(fromindex, toindex, val); return; } // set values naively next block start int fromoffsetinblock = fromindex %% valuesperblock; (fromoffsetinblock != 0) { (int = fromoffsetinblock; < valuesperblock; ++i) { set(fromindex++, val); } assert fromindex %% valuesperblock == 0; } // bulk set inner blocks final int fromblock = fromindex / valuesperblock; final int toblock = toindex / valuesperblock; assert fromblock * valuesperblock == fromindex; long blockvalue = 0l; (int = 0; < valuesperblock; ++i) { blockvalue = blockvalue | (val << (i * bitspervalue)); } arrays.fill(blocks, fromblock, toblock, blockvalue); // fill gap (int = valuesperblock * toblock; < toindex; ++i) { set(i, val); } } @override protected packedints.format getformat() { return packedints.format.packed_single_block; } @override public string tostring() { return getclass().getsimplename() + "(bitspervalue=" + bitspervalue + ", size=" + size() + ", elements.length=" + blocks.length + ")"; } public static packed64singleblock create(datainput in, int valuecount, int bitspervalue) throws ioexception { packed64singleblock reader = create(valuecount, bitspervalue); (int = 0; < reader.blocks.length; ++i) { reader.blocks[i] = in.readlong(); } return reader; } """ %(supported_bits_per_value[-1], ", ".join(map(str, supported_bits_per_value))) footer = "}" __name__ == '__main__': f = open("packed64singleblock.java", 'w') f.write(header) f.write(" public static packed64singleblock create(int valuecount, int bitspervalue) {\n") f.write(" switch (bitspervalue) {\n") bpv supported_bits_per_value: f.write(" case %d:\n" %bpv) f.write(" return new packed64singleblock%d(valuecount);\n" %bpv) f.write(" default:\n") f.write(" throw new illegalargumentexception(\"unsupported number bits per value: \" + %d);\n" %bpv) f.write(" }\n") f.write(" }\n\n") bpv supported_bits_per_value: log_2 = 0 (1 << log_2) < bpv: log_2 = log_2 + 1 (1 << log_2) != bpv: log_2 = none f.write(" static class packed64singleblock%d extends packed64singleblock {\n\n" %bpv) f.write(" packed64singleblock%d(int valuecount) {\n" %bpv) f.write(" super(valuecount, %d);\n" %bpv) f.write(" }\n\n") f.write(" @override\n") f.write(" public long get(int index) {\n") log_2 none: f.write(" final int = index >>> %d;\n" %(6 - log_2)) f.write(" final int b = index & %d;\n" %((1 << (6 - log_2)) - 1)) f.write(" final int shift = b << %d;\n" %log_2) else: f.write(" final int = index / %d;\n" %(64 / bpv)) f.write(" final int b = index %% %d;\n" %(64 / bpv)) f.write(" final int shift = b * %d;\n" %bpv) f.write(" return (blocks[o] >>> shift) & %dl;\n" %((1 << bpv) - 1)) f.write(" }\n\n") f.write(" @override\n") f.write(" public void set(int index, long value) {\n") log_2 none: f.write(" final int = index >>> %d;\n" %(6 - log_2)) f.write(" final int b = index & %d;\n" %((1 << (6 - log_2)) - 1)) f.write(" final int shift = b << %d;\n" %log_2) else: f.write(" final int = index / %d;\n" %(64 / bpv)) f.write(" final int b = index %% %d;\n" %(64 / bpv)) f.write(" final int shift = b * %d;\n" %bpv) f.write(" blocks[o] = (blocks[o] & ~(%dl << shift)) | (value << shift);\n" % ((1 << bpv) - 1)) f.write(" }\n\n") f.write(" }\n\n") f.write(footer) f.close() # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/packed/gen_direct.py # --- #! /usr/bin/env python # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. header="""// file automatically generated, edit package org.apache.lucene.util.packed; /* * licensed apache software foundation (asf) one * contributor license agreements. see notice file distributed * work additional information regarding copyright ownership. * asf licenses file apache license, version 2.0 * (the "license"); may use file except compliance * license. may obtain copy license * * http://www.apache.org/licenses/license-2.0 * * unless required applicable law agreed writing, software * distributed license distributed "as is" basis, * without warranties conditions kind, either express implied. * see license specific language governing permissions * limitations license. */ import org.apache.lucene.store.datainput; import org.apache.lucene.util.ramusageestimator; import java.io.ioexception; import java.util.arrays; """ types = {8: "byte", 16: "short", 32: "int", 64: "long"} masks = {8: " & 0xffl", 16: " & 0xffffl", 32: " & 0xffffffffl", 64: ""} casts = {8: "(byte) ", 16: "(short) ", 32: "(int) ", 64: ""} __name__ == '__main__': bpv types.keys(): type f = open("direct%d.java" %bpv, 'w') f.write(header) f.write("""/** * direct wrapping %d-bits values backing array. * @lucene.internal */\n""" %bpv) f.write("final class direct%d extends packedints.mutableimpl {\n" %bpv) f.write(" final %s[] values;\n\n" %types[bpv]) f.write(" direct%d(int valuecount) {\n" %bpv) f.write(" super(valuecount, %d);\n" %bpv) f.write(" values = new %s[valuecount];\n" %types[bpv]) f.write(" }\n\n") f.write(" direct%d(int packedintsversion, datainput in, int valuecount) throws ioexception {\n" %bpv) f.write(" this(valuecount);\n") bpv == 8: f.write(" in.readbytes(values, 0, valuecount);\n") else: f.write(" (int = 0; < valuecount; ++i) {\n") f.write(" values[i] = in.read%s();\n" %types[bpv].title()) f.write(" }\n") bpv != 64: f.write(" // packed ints always byte-aligned\n") f.write(" final int remaining = (int) (packedints.format.packed.bytecount(packedintsversion, valuecount, %d) - %dl * valuecount);\n" %(bpv, bpv / 8)) f.write(" (int = 0; < remaining; ++i) {\n") f.write(" in.readbyte();\n") f.write(" }\n") f.write(" }\n") f.write(""" @override public long get(final int index) { return values[index]%s; } @override public void set(final int index, final long value) { values[index] = %s(value); } @override public long rambytesused() { return ramusageestimator.alignobjectsize( ramusageestimator.num_bytes_object_header + 2 * ramusageestimator.num_bytes_int // valuecount,bitspervalue + ramusageestimator.num_bytes_object_ref) // values ref + ramusageestimator.sizeof(values); } @override public void clear() { arrays.fill(values, %s0l); } @override public object getarray() { return values; } @override public boolean hasarray() { return true; } """ %(masks[bpv], casts[bpv], casts[bpv])) bpv == 64: f.write(""" @override public int get(int index, long[] arr, int off, int len) { assert len > 0 : "len must > 0 (got " + len + ")"; assert index >= 0 && index < valuecount; assert + len <= arr.length; final int gets = math.min(valuecount - index, len); system.arraycopy(values, index, arr, off, gets); return gets; } @override public int set(int index, long[] arr, int off, int len) { assert len > 0 : "len must > 0 (got " + len + ")"; assert index >= 0 && index < valuecount; assert + len <= arr.length; final int sets = math.min(valuecount - index, len); system.arraycopy(arr, off, values, index, sets); return sets; } @override public void fill(int fromindex, int toindex, long val) { arrays.fill(values, fromindex, toindex, val); } """) else: f.write(""" @override public int get(int index, long[] arr, int off, int len) { assert len > 0 : "len must > 0 (got " + len + ")"; assert index >= 0 && index < valuecount; assert + len <= arr.length; final int gets = math.min(valuecount - index, len); (int = index, = off, end = index + gets; < end; ++i, ++o) { arr[o] = values[i]%s; } return gets; } @override public int set(int index, long[] arr, int off, int len) { assert len > 0 : "len must > 0 (got " + len + ")"; assert index >= 0 && index < valuecount; assert + len <= arr.length; final int sets = math.min(valuecount - index, len); (int = index, = off, end = index + sets; < end; ++i, ++o) { values[i] = %sarr[o]; } return sets; } @override public void fill(int fromindex, int toindex, long val) { assert val == (val%s); arrays.fill(values, fromindex, toindex, %sval); } """ %(masks[bpv], casts[bpv], masks[bpv], casts[bpv])) f.write("}\n") f.close() # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/packed/gen_bulkoperation.py # --- #! /usr/bin/env python # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. fractions import gcd """code generation bulk operations""" max_specialized_bits_per_value = 24; packed_64_single_block_bpv = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 16, 21, 32] output_file = "bulkoperation.java" header = """// file automatically generated, edit package org.apache.lucene.util.packed; /* * licensed apache software foundation (asf) one * contributor license agreements. see notice file distributed * work additional information regarding copyright ownership. * asf licenses file apache license, version 2.0 * (the "license"); may use file except compliance * license. may obtain copy license * * http://www.apache.org/licenses/license-2.0 * * unless required applicable law agreed writing, software * distributed license distributed "as is" basis, * without warranties conditions kind, either express implied. * see license specific language governing permissions * limitations license. */ """ footer=""" protected int writelong(long block, byte[] blocks, int blocksoffset) { (int j = 1; j <= 8; ++j) { blocks[blocksoffset++] = (byte) (block >>> (64 - (j << 3))); } return blocksoffset; } /** * every number bits per value, minimum number * blocks (b) / values (v) need write order reach next block * boundary: * - 16 bits per value -> b=2, v=1 * - 24 bits per value -> b=3, v=1 * - 50 bits per value -> b=25, v=4 * - 63 bits per value -> b=63, v=8 * - ... * * bulk read consists copying <code>iterations*v</code> values * contained <code>iterations*b</code> blocks <code>long[]</code> * (higher values <code>iterations</code> likely yield better * throughput) => requires n * (b + 8v) bytes memory. * * method computes <code>iterations</code> * <code>rambudget / (b + 8v)</code> (since long 8 bytes). */ public final int computeiterations(int valuecount, int rambudget) { final int iterations = rambudget / (byteblockcount() + 8 * bytevaluecount()); (iterations == 0) { // least 1 return 1; } else ((iterations - 1) * bytevaluecount() >= valuecount) { // allocate size reader return (int) math.ceil((double) valuecount / bytevaluecount()); } else { return iterations; } } } """ def is_power_of_two(n): return n & (n - 1) == 0 def casts(typ): cast_start = "(%s) (" %typ cast_end = ")" typ == "long": cast_start = "" cast_end = "" return cast_start, cast_end def hexnolsuffix(n): # 32 bit python values > (1 << 31)-1 l appended hex function: = hex(n) s.endswith('l'): = s[:-1] return def masks(bits): bits == 64: return "", "" return "(", " & %sl)" %(hexnolsuffix((1 << bits) - 1)) def get_type(bits): bits == 8: return "byte" elif bits == 16: return "short" elif bits == 32: return "int" elif bits == 64: return "long" else: assert false def block_value_count(bpv, bits=64): blocks = bpv values = blocks * bits / bpv blocks % 2 == 0 values % 2 == 0: blocks /= 2 values /= 2 assert values * bpv == bits * blocks, "%d values, %d blocks, %d bits per value" %(values, blocks, bpv) return (blocks, values) def packed64(bpv, f): mask = (1 << bpv) - 1 f.write("\n") f.write(" public bulkoperationpacked%d() {\n" %bpv) f.write(" super(%d);\n" %bpv) f.write(" }\n\n") bpv == 64: f.write(""" @override public void decode(long[] blocks, int blocksoffset, long[] values, int valuesoffset, int iterations) { system.arraycopy(blocks, blocksoffset, values, valuesoffset, valuecount() * iterations); } @override public void decode(long[] blocks, int blocksoffset, int[] values, int valuesoffset, int iterations) { throw new unsupportedoperationexception(); } @override public void decode(byte[] blocks, int blocksoffset, int[] values, int valuesoffset, int iterations) { throw new unsupportedoperationexception(); } @override public void decode(byte[] blocks, int blocksoffset, long[] values, int valuesoffset, int iterations) { longbuffer.wrap(values, valuesoffset, iterations * valuecount()).put(bytebuffer.wrap(blocks, blocksoffset, 8 * iterations * blockcount()).aslongbuffer()); } """) else: p64_decode(bpv, f, 32) p64_decode(bpv, f, 64) def p64_decode(bpv, f, bits): blocks, values = block_value_count(bpv) typ = get_type(bits) cast_start, cast_end = casts(typ) f.write(" @override\n") f.write(" public void decode(long[] blocks, int blocksoffset, %s[] values, int valuesoffset, int iterations) {\n" %typ) bits < bpv: f.write(" throw new unsupportedoperationexception();\n") else: f.write(" (int = 0; < iterations; ++i) {\n") mask = (1 << bpv) - 1 is_power_of_two(bpv): f.write(" final long block = blocks[blocksoffset++];\n") f.write(" (int shift = %d; shift >= 0; shift -= %d) {\n" %(64 - bpv, bpv)) f.write(" values[valuesoffset++] = %s(block >>> shift) & %d%s;\n" %(cast_start, mask, cast_end)) f.write(" }\n") else: xrange(0, values): block_offset = * bpv / 64 bit_offset = (i * bpv) % 64 bit_offset == 0: # start block f.write(" final long block%d = blocks[blocksoffset++];\n" %block_offset); f.write(" values[valuesoffset++] = %sblock%d >>> %d%s;\n" %(cast_start, block_offset, 64 - bpv, cast_end)) elif bit_offset + bpv == 64: # end block f.write(" values[valuesoffset++] = %sblock%d & %dl%s;\n" %(cast_start, block_offset, mask, cast_end)) elif bit_offset + bpv < 64: # middle block f.write(" values[valuesoffset++] = %s(block%d >>> %d) & %dl%s;\n" %(cast_start, block_offset, 64 - bit_offset - bpv, mask, cast_end)) else: # value spans across 2 blocks mask1 = (1 << (64 - bit_offset)) -1 shift1 = bit_offset + bpv - 64 shift2 = 64 - shift1 f.write(" final long block%d = blocks[blocksoffset++];\n" %(block_offset + 1)); f.write(" values[valuesoffset++] = %s((block%d & %dl) << %d) | (block%d >>> %d)%s;\n" %(cast_start, block_offset, mask1, shift1, block_offset + 1, shift2, cast_end)) f.write(" }\n") f.write(" }\n\n") byte_blocks, byte_values = block_value_count(bpv, 8) f.write(" @override\n") f.write(" public void decode(byte[] blocks, int blocksoffset, %s[] values, int valuesoffset, int iterations) {\n" %typ) bits < bpv: f.write(" throw new unsupportedoperationexception();\n") else: is_power_of_two(bpv) bpv < 8: f.write(" (int j = 0; j < iterations; ++j) {\n") f.write(" final byte block = blocks[blocksoffset++];\n") shift xrange(8 - bpv, 0, -bpv): f.write(" values[valuesoffset++] = (block >>> %d) & %d;\n" %(shift, mask)) f.write(" values[valuesoffset++] = block & %d;\n" %mask) f.write(" }\n") elif bpv == 8: f.write(" (int j = 0; j < iterations; ++j) {\n") f.write(" values[valuesoffset++] = blocks[blocksoffset++] & 0xff;\n") f.write(" }\n") elif is_power_of_two(bpv) bpv > 8: f.write(" (int j = 0; j < iterations; ++j) {\n") = bits <= 32 "0xff" "0xffl" f.write(" values[valuesoffset++] =") xrange(bpv / 8 - 1): f.write(" ((blocks[blocksoffset++] & %s) << %d) |" %(m, bpv - 8)) f.write(" (blocks[blocksoffset++] & %s);\n" %m) f.write(" }\n") else: f.write(" (int = 0; < iterations; ++i) {\n") xrange(0, byte_values): byte_start = * bpv / 8 bit_start = (i * bpv) % 8 byte_end = ((i + 1) * bpv - 1) / 8 bit_end = ((i + 1) * bpv - 1) % 8 shift = lambda b: 8 * (byte_end - b - 1) + 1 + bit_end bit_start == 0: f.write(" final %s byte%d = blocks[blocksoffset++] & 0xff;\n" %(typ, byte_start)) b xrange(byte_start + 1, byte_end + 1): f.write(" final %s byte%d = blocks[blocksoffset++] & 0xff;\n" %(typ, b)) f.write(" values[valuesoffset++] =") byte_start == byte_end: bit_start == 0: bit_end == 7: f.write(" byte%d" %byte_start) else: f.write(" byte%d >>> %d" %(byte_start, 7 - bit_end)) else: bit_end == 7: f.write(" byte%d & %d" %(byte_start, 2 ** (8 - bit_start) - 1)) else: f.write(" (byte%d >>> %d) & %d" %(byte_start, 7 - bit_end, 2 ** (bit_end - bit_start + 1) - 1)) else: bit_start == 0: f.write(" (byte%d << %d)" %(byte_start, shift(byte_start))) else: f.write(" ((byte%d & %d) << %d)" %(byte_start, 2 ** (8 - bit_start) - 1, shift(byte_start))) b xrange(byte_start + 1, byte_end): f.write(" | (byte%d << %d)" %(b, shift(b))) bit_end == 7: f.write(" | byte%d" %byte_end) else: f.write(" | (byte%d >>> %d)" %(byte_end, 7 - bit_end)) f.write(";\n") f.write(" }\n") f.write(" }\n\n") __name__ == '__main__': f = open(output_file, 'w') f.write(header) f.write('\n') f.write('''/** * efficient sequential read/write packed integers. */\n''') f.write('abstract class bulkoperation implements packedints.decoder, packedints.encoder {\n') f.write(' private static final bulkoperation[] packedbulkops = new bulkoperation[] {\n') bpv xrange(1, 65): bpv > max_specialized_bits_per_value: f.write(' new bulkoperationpacked(%d),\n' % bpv) continue f2 = open('bulkoperationpacked%d.java' % bpv, 'w') f2.write(header) bpv == 64: f2.write('import java.nio.longbuffer;\n') f2.write('import java.nio.bytebuffer;\n') f2.write('\n') f2.write('''/** * efficient sequential read/write packed integers. */\n''') f2.write('final class bulkoperationpacked%d extends bulkoperationpacked {\n' % bpv) packed64(bpv, f2) f2.write('}\n') f2.close() f.write(' new bulkoperationpacked%d(),\n' % bpv) f.write(' };\n') f.write('\n') f.write(' // note: sparse (some entries null):\n') f.write(' private static final bulkoperation[] packedsingleblockbulkops = new bulkoperation[] {\n') bpv xrange(1, max(packed_64_single_block_bpv)+1): bpv packed_64_single_block_bpv: f.write(' new bulkoperationpackedsingleblock(%d),\n' % bpv) else: f.write(' null,\n') f.write(' };\n') f.write('\n') f.write("\n") f.write(" public static bulkoperation of(packedints.format format, int bitspervalue) {\n") f.write(" switch (format) {\n") f.write(" case packed:\n") f.write(" assert packedbulkops[bitspervalue - 1] != null;\n") f.write(" return packedbulkops[bitspervalue - 1];\n") f.write(" case packed_single_block:\n") f.write(" assert packedsingleblockbulkops[bitspervalue - 1] != null;\n") f.write(" return packedsingleblockbulkops[bitspervalue - 1];\n") f.write(" default:\n") f.write(" throw new assertionerror();\n") f.write(" }\n") f.write(" }\n") f.write(footer) f.close() # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/packed/gen_packedthreeblocks.py # --- #! /usr/bin/env python # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. header="""// file automatically generated, edit package org.apache.lucene.util.packed; /* * licensed apache software foundation (asf) one * contributor license agreements. see notice file distributed * work additional information regarding copyright ownership. * asf licenses file apache license, version 2.0 * (the "license"); may use file except compliance * license. may obtain copy license * * http://www.apache.org/licenses/license-2.0 * * unless required applicable law agreed writing, software * distributed license distributed "as is" basis, * without warranties conditions kind, either express implied. * see license specific language governing permissions * limitations license. */ import org.apache.lucene.store.datainput; import org.apache.lucene.util.ramusageestimator; import java.io.ioexception; import java.util.arrays; """ types = {8: "byte", 16: "short"} masks = {8: " & 0xffl", 16: " & 0xffffl", 32: " & 0xffffffffl", 64: ""} casts = {8: "(byte) ", 16: "(short) ", 32: "(int) ", 64: ""} __name__ == '__main__': bpv types.keys(): type f = open("packed%dthreeblocks.java" %bpv, 'w') f.write(header) f.write("""/** * packs integers 3 %ss (%d bits per value). * @lucene.internal */\n""" %(types[bpv], bpv*3)) f.write("final class packed%dthreeblocks extends packedints.mutableimpl {\n" %bpv) f.write(" final %s[] blocks;\n\n" %types[bpv]) f.write(" public static final int max_size = integer.max_value / 3;\n\n") f.write(" packed%dthreeblocks(int valuecount) {\n" %bpv) f.write(" super(valuecount, %d);\n" %(bpv*3)) f.write(" (valuecount > max_size) {\n") f.write(" throw new arrayindexoutofboundsexception(\"max_size exceeded\");\n") f.write(" }\n") f.write(" blocks = new %s[valuecount * 3];\n" %types[bpv]) f.write(" }\n\n") f.write(" packed%dthreeblocks(int packedintsversion, datainput in, int valuecount) throws ioexception {\n" %bpv) f.write(" this(valuecount);\n") bpv == 8: f.write(" in.readbytes(blocks, 0, 3 * valuecount);\n") else: f.write(" (int = 0; < 3 * valuecount; ++i) {\n") f.write(" blocks[i] = in.read%s();\n" %types[bpv].title()) f.write(" }\n") f.write(" // packed ints always byte-aligned\n") f.write(" final int remaining = (int) (packedints.format.packed.bytecount(packedintsversion, valuecount, %d) - 3l * valuecount * %d);\n" %(3 * bpv, bpv / 8)) f.write(" (int = 0; < remaining; ++i) {\n") f.write(" in.readbyte();\n") f.write(" }\n") f.write(" }\n") f.write(""" @override public long get(int index) { final int = index * 3; return (blocks[o]%s) << %d | (blocks[o+1]%s) << %d | (blocks[o+2]%s); } @override public int get(int index, long[] arr, int off, int len) { assert len > 0 : "len must > 0 (got " + len + ")"; assert index >= 0 && index < valuecount; assert + len <= arr.length; final int gets = math.min(valuecount - index, len); (int = index * 3, end = (index + gets) * 3; < end; i+=3) { arr[off++] = (blocks[i]%s) << %d | (blocks[i+1]%s) << %d | (blocks[i+2]%s); } return gets; } @override public void set(int index, long value) { final int = index * 3; blocks[o] = %s(value >>> %d); blocks[o+1] = %s(value >>> %d); blocks[o+2] = %svalue; } @override public int set(int index, long[] arr, int off, int len) { assert len > 0 : "len must > 0 (got " + len + ")"; assert index >= 0 && index < valuecount; assert + len <= arr.length; final int sets = math.min(valuecount - index, len); (int = off, = index * 3, end = + sets; < end; ++i) { final long value = arr[i]; blocks[o++] = %s(value >>> %d); blocks[o++] = %s(value >>> %d); blocks[o++] = %svalue; } return sets; } @override public void fill(int fromindex, int toindex, long val) { final %s block1 = %s(val >>> %d); final %s block2 = %s(val >>> %d); final %s block3 = %sval; (int = fromindex * 3, end = toindex * 3; < end; += 3) { blocks[i] = block1; blocks[i+1] = block2; blocks[i+2] = block3; } } @override public void clear() { arrays.fill(blocks, %s0); } @override public long rambytesused() { return ramusageestimator.alignobjectsize( ramusageestimator.num_bytes_object_header + 2 * ramusageestimator.num_bytes_int // valuecount,bitspervalue + ramusageestimator.num_bytes_object_ref) // blocks ref + ramusageestimator.sizeof(blocks); } @override public string tostring() { return getclass().getsimplename() + "(bitspervalue=" + bitspervalue + ", size=" + size() + ", elements.length=" + blocks.length + ")"; } } """ %(masks[bpv], 2*bpv, masks[bpv], bpv, masks[bpv], masks[bpv], 2*bpv, masks[bpv], bpv, masks[bpv], casts[bpv], 2*bpv, casts[bpv], bpv, casts[bpv], casts[bpv], 2*bpv, casts[bpv], bpv, casts[bpv], types[bpv], casts[bpv], 2*bpv, types[bpv], casts[bpv], bpv, types[bpv], casts[bpv], casts[bpv])) f.close() # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/automaton/utf32toutf8.py # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. import types import os import sys import random max_unicode = 0x10ffff # todo # - could minimal # - eg bracket lands utf8 boundary, like 3 - 2047 -- share two * edges # - also 3 2048 3 65536 -- * red path, # masks[0] bottom 1-bit # masks[1] bottom 2-bits # ... utf8ranges = [(0, 127), (128, 2047), (2048, 65535), (65536, 1114111)] typetocolor = {'startend': 'purple', 'start': 'blue', 'end': 'red'} class fsa: def __init__(self): # maps fromnode -> (startutf8, endutf8, endnode) self.states = {} self.nodeupto = 0 def run(self, bytes): state = self.start b bytes: found = false oldstate = state label, s, e, n self.states[state][1:]: b >= b <= e: found: raise runtimeerror('state %s ambiguous output byte %s' % (oldstate, b)) state = n found = true found: return -1 return state def addedge(self, n1, n2, v1, v2, label): """ adds edge n1-n2, utf8 byte range v1-v2. """ assert n1 self.states assert type(v1) types.inttype assert type(v2) types.inttype self.states[n1].append((label, v1, v2, n2)) def addnode(self, label=none): try: self.states[self.nodeupto] = [label] return self.nodeupto finally: self.nodeupto += 1 def todot(self, label): __l = [] w = __l.append endnode = startnode = none id, details self.states.items(): name = details[0] name == 'end': endnode = id elif name == 'start': startnode = id w('digraph %s {' % label) w(' rankdir=lr;') w(' size="8,5";') w(' node [color=white label=""]; ns;') w(' node [color=black];') w(' node [shape=doublecircle, label=""]; n%s [label="%s"];' % (endnode, endnode)) w(' node [shape=circle];') w(' n%s [label="%s"];' % (startnode, startnode)) w(' ns -> n%s;' % startnode) id, details self.states.items(): edges = details[1:] w(' n%s [label="%s"];' % (id, id)) type, s, e, dest edges: c = typetocolor.get(type, 'black') type == 'all*': # special case -- matches utf8 byte point label = '*' elif == e: label = '%s' % binary(s) else: label = '%s-%s' % (binary(s), binary(e)) w(' n%s -> n%s [label="%s" color="%s"];' % (id, dest, label, c)) name == 'end': endnode = id elif name == 'start': startnode = id w('}') return '\n'.join(__l) def topng(self, label, pngout): open('tmp.dot', 'wb').write(self.todot(label)) os.system('dot -tpng tmp.dot -o %s' % pngout): raise runtimeexception('dot failed') masks = [] v = 2 range(32): masks.append(v-1) v *= 2 def binary(x): x == 0: return '00000000' l = [] x > 0: x & 1 == 1: l.append('1') else: l.append('0') x = x >> 1 # big endian! l.reverse() l2 = [] len(l) > 0: = ''.join(l[-8:]) len(s) < 8: = '0'*(8-len(s)) + l2.append(s) del l[-8:] return ' '.join(l2) def getutf8rest(code, numbytes): l = [] range(numbytes): l.append((128 | (code & masks[5]), 6)) code = code >> 6 l.reverse() return tuple(l) def toutf8(code): # code = unicode code point assert code >= 0 assert code <= max_unicode code < 128: # 0xxxxxxx bytes = ((code, 7),) elif code < 2048: # 110yyyxx 10xxxxxx byte1 = (6 << 5) | (code >> 6) bytes = ((byte1, 5),) + getutf8rest(code, 1) elif code < 65536: # 1110yyyy 10yyyyxx 10xxxxxx len = 3 byte1 = (14 << 4) | (code >> 12) bytes = ((byte1, 4),) + getutf8rest(code, 2) else: # 11110zzz 10zzyyyy 10yyyyxx 10xxxxxx len = 4 byte1 = (30 << 3) | (code >> 18) bytes = ((byte1, 3),) + getutf8rest(code, 3) return bytes def all(fsa, startnode, endnode, startcode, endcode, left): len(left) == 0: fsa.addedge(startnode, endnode, startcode, endcode, 'all') else: lastn = fsa.addnode() fsa.addedge(startnode, lastn, startcode, endcode, 'all') len(left) > 1: n = fsa.addnode() fsa.addedge(lastn, n, 128, 191, 'all*') left = left[1:] lastn = n fsa.addedge(lastn, endnode, 128, 191, 'all*') def start(fsa, startnode, endnode, utf8, doall): len(utf8) == 1: fsa.addedge(startnode, endnode, utf8[0][0], utf8[0][0] | masks[utf8[0][1]-1], 'start') else: n = fsa.addnode() fsa.addedge(startnode, n, utf8[0][0], utf8[0][0], 'start') start(fsa, n, endnode, utf8[1:], true) end = utf8[0][0] | masks[utf8[0][1]-1] doall utf8[0][0] != end: all(fsa, startnode, endnode, utf8[0][0]+1, end, utf8[1:]) def end(fsa, startnode, endnode, utf8, doall): len(utf8) == 1: fsa.addedge(startnode, endnode, utf8[0][0] & ~masks[utf8[0][1]-1], utf8[0][0], 'end') else: utf8[0][1] == 5: # special case -- avoid created unused edges (utf8 accept certain byte sequences): start = 194 else: start = utf8[0][0] & (~masks[utf8[0][1]-1]) doall utf8[0][0] != start: all(fsa, startnode, endnode, start, utf8[0][0]-1, utf8[1:]) n = fsa.addnode() fsa.addedge(startnode, n, utf8[0][0], utf8[0][0], 'end') end(fsa, n, endnode, utf8[1:], true) def build(fsa, startnode, endnode, startutf8, endutf8): # break start, middle, end: startutf8[0][0] == endutf8[0][0]: # degen case: lead byte: len(startutf8) == 1 len(endutf8) == 1: fsa.addedge(startnode, endnode, startutf8[0][0], endutf8[0][0], 'startend') return else: assert len(startutf8) != 1 assert len(endutf8) != 1 n = fsa.addnode() # single value edge fsa.addedge(startnode, n, startutf8[0][0], startutf8[0][0], 'single') build(fsa, n, endnode, startutf8[1:], endutf8[1:]) elif len(startutf8) == len(endutf8): len(startutf8) == 1: fsa.addedge(startnode, endnode, startutf8[0][0], endutf8[0][0], 'startend') else: start(fsa, startnode, endnode, startutf8, false) endutf8[0][0] - startutf8[0][0] > 1: all(fsa, startnode, endnode, startutf8[0][0]+1, endutf8[0][0]-1, startutf8[1:]) end(fsa, startnode, endnode, endutf8, false) else: # start start(fsa, startnode, endnode, startutf8, true) # possibly middle bytecount = 1+len(startutf8) bytecount < len(endutf8): = toutf8(utf8ranges[bytecount-1][0]) e = toutf8(utf8ranges[bytecount-1][1]) all(fsa, startnode, endnode, s[0][0], e[0][0], s[1:]) bytecount += 1 # end end(fsa, startnode, endnode, endutf8, true) def main(): len(sys.argv) (3, 4): print print 'usage: python %s startutf32 endutf32 [testcode]' % sys.argv[0] print sys.exit(1) utf32start = int(sys.argv[1]) utf32end = int(sys.argv[2]) utf32start > utf32end: print 'error: start must <= end' sys.exit(1) fsa = fsa() fsa.start = fsa.addnode('start') fsa.end = fsa.addnode('end') print 's=%s' % ' '.join([binary(x[0]) x toutf8(utf32start)]) print 'e=%s' % ' '.join([binary(x[0]) x toutf8(utf32end)]) len(sys.argv) == 4: print 't=%s [%s]' % \ (' '.join([binary(x[0]) x toutf8(int(sys.argv[3]))]), ' '.join(['%2x' % x[0] x toutf8(int(sys.argv[3]))])) build(fsa, fsa.start, fsa.end, toutf8(utf32start), toutf8(utf32end)) fsa.topng('test', '/tmp/outpy.png') print 'saved /tmp/outpy.png...' test(fsa, utf32start, utf32end, 100000); def test(fsa, utf32start, utf32end, count): # verify correct ints accepted range(count): r = random.randint(utf32start, utf32end) dest = fsa.run([tup[0] tup toutf8(r)]) dest != fsa.end: print 'failed: valid %s (%s) accepted' % (r, ' '.join([binary(x[0]) x toutf8(r)])) return false invalidrange = max_unicode - (utf32end - utf32start + 1) invalidrange >= 0: # verify invalid ints accepted range(count): r = random.randint(0, invalidrange-1) r >= utf32start: r = utf32end + 1 + r - utf32start dest = fsa.run([tup[0] tup toutf8(r)]) dest != -1: print 'failed: invalid %s (%s) accepted' % (r, ' '.join([binary(x[0]) x toutf8(r)])) return false return true def stress(): print 'testing...' iter = 0 true: iter % 10 == 0: print '%s...' % iter iter += 1 v1 = random.randint(0, max_unicode) v2 = random.randint(0, max_unicode) v2 < v1: v1, v2 = v2, v1 utf32start = v1 utf32end = v2 fsa = fsa() fsa.start = fsa.addnode('start') fsa.end = fsa.addnode('end') build(fsa, fsa.start, fsa.end, toutf8(utf32start), toutf8(utf32end)) test(fsa, utf32start, utf32end, 10000): print 'failed utf32start=%s utf32end=%s' % (utf32start, utf32end) __name__ == '__main__': len(sys.argv) > 1: main() else: stress() # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/automaton/createlevautomata.py # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # note, file known work rev 120 moman # repository (http://bitbucket.org/jpbarrette/moman/overview) # # see also: http://sites.google.com/site/rrettesite/moman import math import os import sys #sys.path.insert(0, 'moman/finenight/python') sys.path.insert(0, '../../../../../../../../build/core/moman/finenight/python') try: possiblestates import gentransitions except importerror: finenight.possiblestates import gentransitions mode = 'array' packed = true word = 64 log2_word = int(math.log(word)/math.log(2)) #mode = 'switch' class lineoutput: def __init__(self, indent=''): self.l = [] self._indent = self.startindent = indent self.incomment = false def __call__(self, s, indent=0): s.find('}') != -1: assert self._indent != self.startindent self._indent = self._indent[:-2] indent != 0: indent0 = ' ' * (len(self._indent)/2+indent) else: indent0 = self._indent s.find('/*') != -1: s.find('*/') == -1: self.incomment = true elif s.find('*/') != -1: self.incomment = true self.incomment: self.l.append(indent0 + s) else: self.l.append(indent0 + s.lstrip()) self.incomment = self.incomment s.find('*/') == -1 s.find('{') != -1: self._indent += ' ' def __str__(self): true: assert self._indent == self.startindent, 'indent %d vs start indent %d' % \ (len(self._indent), len(self.startindent)) return '\n'.join(self.l) def indent(self): self._indent += ' ' def outdent(self): assert self._indent != self.startindent self._indent = self._indent[:-2] def charvarnumber(charvar): """ maps binary number (eg [1, 0, 1]) decimal value (5). """ p = 1 sum = 0 downto = len(charvar)-1 downto >= 0: sum += p * int(charvar[downto]) p *= 2 downto -= 1 return sum def main(): len(sys.argv) != 3: print print 'usage: python -u %s n <true/false>' % sys.argv[0] print print 'note: resulting .java file created current working dir!' print sys.exit(1) n = int(sys.argv[1]) transpose = (sys.argv[2] == "true") tables = gentransitions(n, transpose) statemap = {} # init null state statemap['[]'] = -1 # init start state statemap['[(0, 0)]'] = 0 w = lineoutput() w('package org.apache.lucene.util.automaton;') w('') w('/*') w(' * licensed apache software foundation (asf) one more') w(' * contributor license agreements. see notice file distributed with') w(' * work additional information regarding copyright ownership.') w(' * asf licenses file apache license, version 2.0') w(' * (the "license"); may use file except compliance with') w(' * license. may obtain copy license at') w(' *') w(' * http://www.apache.org/licenses/license-2.0') w(' *') w(' * unless required applicable law agreed writing, software') w(' * distributed license distributed "as is" basis,') w(' * without warranties conditions kind, either express implied.') w(' * see license specific language governing permissions and') w(' * limitations license.') w(' */') w('') w('// following code generated moman/finenight pkg') w('// package available mit license, see notice.txt') w('// details.') w('') w('import org.apache.lucene.util.automaton.levenshteinautomata.parametricdescription;') w('') transpose: w('/** parametric description generating levenshtein automaton degree %s, ' % n) w(' transpositions primitive edits */') classname = 'lev%dtparametricdescription' % n else: w('/** parametric description generating levenshtein automaton degree %s */' % n) classname = 'lev%dparametricdescription' % n w('class %s extends parametricdescription {' % classname) w('') w('@override') w('int transition(int absstate, int position, int vector) {') w(' // null absstate never passed in') w(' assert absstate != -1;') w('') w(' // decode absstate -> state, offset') w(' int state = absstate/(w+1);') w(' int offset = absstate%(w+1);') w(' assert offset >= 0;') w('') machines = [] i, map enumerate(tables): == 0: w('if (position == w) {') elif == len(tables)-1: w('} else {') else: w('} else (position == w-%d) {' % i) != 0 mode == 'switch': w('switch(vector) {') l = map.items() l.sort() numcasespervector = none numvectors = len(l) mode == 'array': tostatearray = [] tooffsetincrarray = [] charvar, states l: # somehow string: charvar = eval(charvar) != 0 mode == 'switch': w('case %s: // <%s>' % (charvarnumber(charvar), ','.join([str(x) x charvar]))) w.indent() l = states.items() byfromstate = {} # first pass assign states byaction = {} s, (tos, offset) l: state = str(s) tostate = str(tos) state statemap: statemap[state] = len(statemap)-1 tostate statemap: statemap[tostate] = len(statemap)-1 byfromstate[statemap[state]] = (1+statemap[tostate], offset) fromstatedesc = s[1:len(s)-1] tostatedesc = ', '.join([str(x) x tos]) tup = (statemap[tostate], tostatedesc, offset) tup byaction: byaction[tup] = [] byaction[tup].append((fromstatedesc, statemap[state])) numcasespervector none: numcasespervector = len(l) else: # require uniform... empirically seems be! assert numcasespervector == len(l) mode == 'array': range(numcasespervector): tostate, offsetincr = byfromstate[s] tostatearray.append(tostate) tooffsetincrarray.append(offsetincr) else: # render switches w('switch(state) { // %s cases' % len(l)) (tostate, tostatedesc, offset), lx byaction.items(): fromstatedesc, fromstate lx: w('case %s: // %s' % (fromstate, fromstatedesc)) w.indent() w(' state = %s; // %s' % (tostate, tostatedesc)) offset > 0: w(' offset += %s;' % offset) w('break;') w.outdent() w('}') != 0: w('break;') w.outdent() mode == 'array': # strangely state come wildly bounds.... w(' (state < %d) {' % numcasespervector) w(' final int loc = vector * %d + state;' % numcasespervector) packed: w(' offset += unpack(offsetincrs%d, loc, nbitsoffset%d);' % (i, i)) w(' state = unpack(tostates%d, loc, nbitsstates%d)-1;' % (i, i)) else: w(' offset += offsetincrs%d[loc];' % i) w(' state = tostates%d[loc]-1;' % i) w(' }') elif != 0: w('}') machines.append((tostatearray, tooffsetincrarray, numcasespervector, numvectors)) # ends switch statement machine w('}') w('') w(' (state == -1) {') w(' // null state') w(' return -1;') w(' } else {') w(' // translate back abs') w(' return state*(w+1)+offset;') w(' }') # ends transition method w('}') subs = [] mode == 'array': w.indent() i, (tostatearray, tooffsetincrsarray, numcasespervector, numvectors) enumerate(machines): w('') w.outdent() w('// %d vectors; %d states per vector; array length = %d' % \ (numvectors, numcasespervector, numvectors*numcasespervector)) w.indent() packed: # pack python l, nbits = pack(tostatearray) subs.append(('nbitsstates%d' % i, str(nbits))) w(' private final static long[] tostates%d = new long[] /*%d bits per value */ %s;' % \ (i, nbits, renderlist([hex(long(x)) x l]))) l, nbits = pack(tooffsetincrsarray) subs.append(('nbitsoffset%d' % i, str(nbits))) w(' private final static long[] offsetincrs%d = new long[] /*%d bits per value */ %s;' % \ (i, nbits, renderlist([hex(long(x)) x l]))) else: w(' private final static int[] tostates%d = new int[] %s;' % \ (i, renderlist([str(x) x tostatearray]))) w(' private final static int[] offsetincrs%d = new int[] %s;' % \ (i, renderlist([str(x) x tostatearray]))) w.outdent() statemap2 = dict([[v,k] k,v statemap.items()]) w('') w('// state map') sum = 0 minerrors = [] xrange(len(statemap2)-1): w('// %s -> %s' % (i, statemap2[i])) # replace t-notation relevant st = statemap2[i].replace('t', '') v = eval(st) minerror = min([-i+e i, e v]) c = len(v) sum += c minerrors.append(minerror) w('') w.indent() #w('private final static int[] minerrors = new int[] {%s};' % ','.join([str(x) x minerrors])) w.outdent() w('') w(' public %s(int w) {' % classname) w(' super(w, %d, new int[] {%s});' % (n, ','.join([str(x) x minerrors])), indent=1) w(' }') 0: w('') w('@override') w('public int size() { // move up?') w(' return %d*(w+1);' % (len(statemap2)-1)) w('}') w('') w('@override') w('public int getposition(int absstate) { // move up?') w(' return absstate % (w+1);') w('}') w('') w('@override') w('public boolean isaccept(int absstate) { // move up?') w(' // decode absstate -> state, offset') w(' int state = absstate/(w+1);') w(' (true || state < minerrors.length) {') w(' int offset = absstate%(w+1);') w(' assert offset >= 0;') w(' return w - offset + minerrors[state] <= %d;' % n) w(' } else {') w(' return false;') w(' }') w('}') mode == 'array' packed: # moved super class false: w('') v = 2 l = [] range(63): l.append(hex(v-1)) v *= 2 w('private final static long[] masks = new long[] {%s};' % ','.join(l), indent=1) w('') # unpack java w('private int unpack(long[] data, int index, int bitspervalue) {') w(' final long bitloc = bitspervalue * index;') w(' final int dataloc = (int) (bitloc >> %d);' % log2_word) w(' final int bitstart = (int) (bitloc & %d);' % (word-1)) w(' //system.out.println("index=" + index + " dataloc=" + dataloc + " bitstart=" + bitstart + " bitsperv=" + bitspervalue);') w(' (bitstart + bitspervalue <= %d) {' % word) w(' // split') w(' return (int) ((data[dataloc] >> bitstart) & masks[bitspervalue-1]);') w(' } else {') w(' // split') w(' final int part = %d-bitstart;' % word) w(' return (int) (((data[dataloc] >> bitstart) & masks[part-1]) +') w(' ((data[1+dataloc] & masks[bitspervalue-part-1]) << part));', indent=1) w(' }') w('}') # class w('}') w('') fileout = '%s.java' % classname = str(w) sub, repl subs: = s.replace(sub, repl) open(fileout, 'wb').write(s) print 'wrote %s [%d lines; %.1f kb]' % \ (fileout, len(w.l), os.path.getsize(fileout)/1024.) def renderlist(l): lx = [' '] xrange(len(l)): > 0: lx.append(',') % 4 == 0: lx.append('\n ') lx.append(l[i]) return '{\n%s\n }' % ''.join(lx) masks = [] v = 2 xrange(63): masks.append(v-1) v *= 2 # packs longs; returns long[], numbits def pack(l): maxv = max(l) bitspervalue = max(1, int(math.ceil(math.log(maxv+1)/math.log(2.0)))) bitsleft = word pendingvalue = 0 packed = [] xrange(len(l)): v = l[i] pendingvalue > 0: bitsused = math.ceil(math.log(pendingvalue)/math.log(2.0)) assert bitsused <= (word-bitsleft), 'bitsleft=%s (%s-%s=%s) bitsused=%s' % (bitsleft, word, bitsleft, word-bitsleft, bitsused) bitsleft >= bitspervalue: pendingvalue += v << (word-bitsleft) bitsleft -= bitspervalue bitsleft == 0: packed.append(pendingvalue) bitsleft = word pendingvalue = 0 else: # split # bottom bitsleft go current word: pendingvalue += (v & masks[bitsleft-1]) << (word-bitsleft) packed.append(pendingvalue) pendingvalue = v >> bitsleft bitsleft = word - (bitspervalue-bitsleft) bitsleft < word: packed.append(pendingvalue) # verify(l, packed, bitspervalue) return packed, bitspervalue def verify(data, packeddata, bitspervalue): range(len(data)): assert data[i] == unpack(packeddata, i, bitspervalue) def unpack(data, index, bitspervalue): bitloc = bitspervalue * index dataloc = int(bitloc >> log2_word) bitstart = int(bitloc & (word-1)) bitstart + bitspervalue <= word: # split return int(((data[dataloc] >> bitstart) & masks[bitspervalue-1])) else: # split part = word-bitstart; return int((((data[dataloc] >> bitstart) & masks[part-1]) + ((data[1+dataloc] & masks[bitspervalue-part-1]) << part))) __name__ == '__main__': __debug__: print print 'error: please run without -o' print sys.exit(1) main() # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/automaton/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- dk.brics.automaton copyright (c) 2001-2009 anders moeller rights reserved. redistribution use source binary forms, without modification, permitted provided following conditions met: 1. redistributions source code must retain copyright notice, list conditions following disclaimer. 2. redistributions binary form must reproduce copyright notice, list conditions following disclaimer documentation and/or materials provided distribution. 3. name author may used endorse promote products derived software without specific prior written permission. software provided author ``as is'' express implied warranties, including, limited to, implied warranties merchantability fitness particular purpose disclaimed. event shall author liable direct, indirect, incidental, special, exemplary, consequential damages (including, limited to, procurement substitute goods services; loss use, data, profits; business interruption) however caused theory liability, whether contract, strict liability, tort (including negligence otherwise) arising way use software, even advised possibility damage. --> <html> <body> finite-state automaton regular expressions. <p> package contains full dfa/nfa implementation unicode alphabet support standard (and number non-standard) regular expression operations. <p> commonly used functionality located classes <tt>{@link org.apache.lucene.util.automaton.automaton}</tt> <tt>{@link org.apache.lucene.util.automaton.regexp}</tt>. <p> information, go package home page <tt><a href="http://www.brics.dk/automaton/" target="_top">http://www.brics.dk/automaton/</a></tt>. @lucene.experimental </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/util/fst/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> finite state transducers <p> package implements <a href="http://en.wikipedia.org/wiki/finite_state_transducer"> finite state transducers</a> following characteristics: <ul> <li>fast low memory overhead construction minimal fst (but inputs must provided sorted order)</li> <li>low object overhead quick deserialization (byte[] representation)</li> <li>optional two-pass compression: {@link org.apache.lucene.util.fst.fst#pack fst.pack()}</li> <li>{@link org.apache.lucene.util.fst.util#getbyoutput lookup-by-output} outputs sorted order (e.g., ordinals file pointers)</li> <li>pluggable {@link org.apache.lucene.util.fst.outputs outputs} representation</li> <li>{@link org.apache.lucene.util.fst.util#shortestpaths n-shortest-paths} search weight</li> <li>enumerators ({@link org.apache.lucene.util.fst.intsreffstenum intsref} {@link org.apache.lucene.util.fst.bytesreffstenum bytesref}) behave like {@link java.util.sortedmap sortedmap} iterators </ul> <p> fst construction example: <pre class="prettyprint"> // input values (keys). must provided builder unicode sorted order! string inputvalues[] = {"cat", "dog", "dogs"}; long outputvalues[] = {5, 7, 12}; positiveintoutputs outputs = positiveintoutputs.getsingleton(); builder&lt;long&gt; builder = new builder&lt;long&gt;(input_type.byte1, outputs); bytesref scratchbytes = new bytesref(); intsref scratchints = new intsref(); (int = 0; &lt; inputvalues.length; i++) { scratchbytes.copychars(inputvalues[i]); builder.add(util.tointsref(scratchbytes, scratchints), outputvalues[i]); } fst&lt;long&gt; fst = builder.finish(); </pre> retrieval key: <pre class="prettyprint"> long value = util.get(fst, new bytesref("dog")); system.out.println(value); // 7 </pre> retrieval value: <pre class="prettyprint"> // works outputs also sorted order intsref key = util.getbyoutput(fst, 12); system.out.println(util.tobytesref(key, scratchbytes).utf8tostring()); // dogs </pre> iterate key-value pairs sorted order: <pre class="prettyprint"> // like termsenum, also supports seeking (advance) bytesreffstenum&lt;long&gt; iterator = new bytesreffstenum&lt;long&gt;(fst); (iterator.next() != null) { inputoutput&lt;long&gt; mapentry = iterator.current(); system.out.println(mapentry.input.utf8tostring()); system.out.println(mapentry.output); } </pre> n-shortest paths weight: <pre class="prettyprint"> comparator&lt;long&gt; comparator = new comparator&lt;long&gt;() { public int compare(long left, long right) { return left.compareto(right); } }; arc&lt;long&gt; firstarc = fst.getfirstarc(new arc&lt;long&gt;()); minresult&lt;long&gt; paths[] = util.shortestpaths(fst, firstarc, comparator, 2); system.out.println(util.tobytesref(paths[0].input, scratchbytes).utf8tostring()); // cat system.out.println(paths[0].output); // 5 system.out.println(util.tobytesref(paths[1].input, scratchbytes).utf8tostring()); // dog system.out.println(paths[1].output); // 7 </pre> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/document/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> <p>the logical representation {@link org.apache.lucene.document.document} indexing searching.</p> <p>the document package provides user level logical representation content indexed searched. package also provides utilities working {@link org.apache.lucene.document.document}s {@link org.apache.lucene.index.indexablefield}s.</p> <h2>document indexablefield</h2> <p>a {@link org.apache.lucene.document.document} collection {@link org.apache.lucene.index.indexablefield}s. {@link org.apache.lucene.index.indexablefield} logical representation user's content needs indexed stored. {@link org.apache.lucene.index.indexablefield}s number properties tell lucene treat content (like indexed, tokenized, stored, etc.) see {@link org.apache.lucene.document.field} implementation {@link org.apache.lucene.index.indexablefield} specifics properties. </p> <p>note: common refer {@link org.apache.lucene.document.document}s {@link org.apache.lucene.document.field}s, even though technically {@link org.apache.lucene.index.indexablefield}s.</p> <h2>working documents</h2> <p>first foremost, {@link org.apache.lucene.document.document} something created user application. job create documents based content files working application (word, txt, pdf, excel format.) done completely you. said, many tools available projects make process taking file converting lucene {@link org.apache.lucene.document.document}. </p> <p>the {@link org.apache.lucene.document.datetools} utility class make dates times searchable (remember, lucene searches text). {@link org.apache.lucene.document.intfield}, {@link org.apache.lucene.document.longfield}, {@link org.apache.lucene.document.floatfield} {@link org.apache.lucene.document.doublefield} special helper class simplify indexing numeric values (and also dates) fast range range queries {@link org.apache.lucene.search.numericrangequery} (using special sortable string representation numeric values).</p> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/search/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> code search indices. <h2>table contents</h2> <p> <ol> <li><a href="#search">search basics</a></li> <li><a href="#query">the query classes</a></li> <li><a href="#scoring">scoring: introduction</a></li> <li><a href="#scoringbasics">scoring: basics</a></li> <li><a href="#changingscoring">changing scoring</a></li> <li><a href="#algorithm">appendix: search algorithm</a></li> </ol> </p> <a name="search"></a> <h2>search basics</h2> <p> lucene offers wide variety {@link org.apache.lucene.search.query} implementations, package, subpackages ({@link org.apache.lucene.search.spans spans}, {@link org.apache.lucene.search.payloads payloads}), <a href="{@docroot}/../queries/overview-summary.html">queries module</a>. implementations combined wide variety ways provide complex querying capabilities along information matches took place document collection. <a href="#query">query classes</a> section highlights important query classes. details implementing query class, see <a href="#customqueriesexpert">custom queries -- expert level</a> below. </p> <p> perform search, applications usually call {@link org.apache.lucene.search.indexsearcher#search(query,int)} {@link org.apache.lucene.search.indexsearcher#search(query,filter,int)}. </p> <p> query created submitted {@link org.apache.lucene.search.indexsearcher indexsearcher}, scoring process begins. infrastructure setup, control finally passes {@link org.apache.lucene.search.weight weight} implementation {@link org.apache.lucene.search.scorer scorer} instances. see <a href="#algorithm">algorithm</a> section notes process. </p> <!-- fill --> <!-- todo: page over-links things many times --> </p> <a name="query"></a> <h2>query classes</h2> <h4> {@link org.apache.lucene.search.termquery termquery} </h4> <p>of various implementations {@link org.apache.lucene.search.query query}, {@link org.apache.lucene.search.termquery termquery} easiest understand often used applications. {@link org.apache.lucene.search.termquery termquery} matches documents contain specified {@link org.apache.lucene.index.term term}, word occurs certain {@link org.apache.lucene.document.field field}. thus, {@link org.apache.lucene.search.termquery termquery} identifies scores {@link org.apache.lucene.document.document document}s {@link org.apache.lucene.document.field field} specified string it. constructing {@link org.apache.lucene.search.termquery termquery} simple as: <pre class="prettyprint"> termquery tq = new termquery(new term("fieldname", "term")); </pre>in example, {@link org.apache.lucene.search.query query} identifies {@link org.apache.lucene.document.document document}s {@link org.apache.lucene.document.field field} named <tt>"fieldname"</tt> containing word <tt>"term"</tt>. </p> <h4> {@link org.apache.lucene.search.booleanquery booleanquery} </h4> <p>things start get interesting one combines multiple {@link org.apache.lucene.search.termquery termquery} instances {@link org.apache.lucene.search.booleanquery booleanquery}. {@link org.apache.lucene.search.booleanquery booleanquery} contains multiple {@link org.apache.lucene.search.booleanclause booleanclause}s, clause contains sub-query ({@link org.apache.lucene.search.query query} instance) operator (from {@link org.apache.lucene.search.booleanclause.occur booleanclause.occur}) describing sub-query combined clauses: <ol> <li><p>{@link org.apache.lucene.search.booleanclause.occur#should should} &mdash; use operator clause occur result set, required. query made clauses, every document result set matches least one clauses.</p></li> <li><p>{@link org.apache.lucene.search.booleanclause.occur#must must} &mdash; use operator clause required occur result set. every document result set match clauses.</p></li> <li><p>{@link org.apache.lucene.search.booleanclause.occur#must_not must not} &mdash; use operator clause must occur result set. document result set match clauses.</p></li> </ol> boolean queries constructed adding two {@link org.apache.lucene.search.booleanclause booleanclause} instances. many clauses added, {@link org.apache.lucene.search.booleanquery.toomanyclauses toomanyclauses} exception thrown searching. often occurs {@link org.apache.lucene.search.query query} rewritten {@link org.apache.lucene.search.booleanquery booleanquery} many {@link org.apache.lucene.search.termquery termquery} clauses, example {@link org.apache.lucene.search.wildcardquery wildcardquery}. default setting maximum number clauses 1024, changed via static method {@link org.apache.lucene.search.booleanquery#setmaxclausecount(int)}. </p> <h4>phrases</h4> <p>another common search find documents containing certain phrases. handled three different ways: <ol> <li> <p>{@link org.apache.lucene.search.phrasequery phrasequery} &mdash; matches sequence {@link org.apache.lucene.index.term term}s. {@link org.apache.lucene.search.phrasequery phrasequery} uses slop factor determine many positions may occur two terms phrase still considered match. slop 0 default, meaning phrase must match exactly.</p> </li> <li> <p>{@link org.apache.lucene.search.multiphrasequery multiphrasequery} &mdash; general form phrasequery accepts multiple terms position phrase. example, used perform phrase queries also incorporate synonyms. </li> <li> <p>{@link org.apache.lucene.search.spans.spannearquery spannearquery} &mdash; matches sequence {@link org.apache.lucene.search.spans.spanquery spanquery} instances. {@link org.apache.lucene.search.spans.spannearquery spannearquery} allows much complicated phrase queries since constructed {@link org.apache.lucene.search.spans.spanquery spanquery} instances, instead {@link org.apache.lucene.search.termquery termquery} instances.</p> </li> </ol> </p> <h4> {@link org.apache.lucene.search.termrangequery termrangequery} </h4> <p>the {@link org.apache.lucene.search.termrangequery termrangequery} matches documents occur exclusive range lower {@link org.apache.lucene.index.term term} upper {@link org.apache.lucene.index.term term} according {@link org.apache.lucene.index.termsenum#getcomparator termsenum.getcomparator()}. intended numerical ranges; use {@link org.apache.lucene.search.numericrangequery numericrangequery} instead. example, one could find documents terms beginning letters <tt>a</tt> <tt>c</tt>. </p> <h4> {@link org.apache.lucene.search.numericrangequery numericrangequery} </h4> <p>the {@link org.apache.lucene.search.numericrangequery numericrangequery} matches documents occur numeric range. numericrangequery work, must index values using one numeric fields ({@link org.apache.lucene.document.intfield intfield}, {@link org.apache.lucene.document.longfield longfield}, {@link org.apache.lucene.document.floatfield floatfield}, {@link org.apache.lucene.document.doublefield doublefield}). </p> <h4> {@link org.apache.lucene.search.prefixquery prefixquery}, {@link org.apache.lucene.search.wildcardquery wildcardquery}, {@link org.apache.lucene.search.regexpquery regexpquery} </h4> <p>while {@link org.apache.lucene.search.prefixquery prefixquery} different implementation, essentially special case {@link org.apache.lucene.search.wildcardquery wildcardquery}. {@link org.apache.lucene.search.prefixquery prefixquery} allows application identify documents terms begin certain string. {@link org.apache.lucene.search.wildcardquery wildcardquery} generalizes allowing use <tt>*</tt> (matches 0 characters) <tt>?</tt> (matches exactly one character) wildcards. note {@link org.apache.lucene.search.wildcardquery wildcardquery} quite slow. also note {@link org.apache.lucene.search.wildcardquery wildcardquery} start <tt>*</tt> <tt>?</tt>, extremely slow. queryparsers may allow default, provide <code>setallowleadingwildcard</code> method remove protection. {@link org.apache.lucene.search.regexpquery regexpquery} even general wildcardquery, allowing application identify documents terms match regular expression pattern. </p> <h4> {@link org.apache.lucene.search.fuzzyquery fuzzyquery} </h4> <p>a {@link org.apache.lucene.search.fuzzyquery fuzzyquery} matches documents contain terms similar specified term. similarity determined using <a href="http://en.wikipedia.org/wiki/levenshtein">levenshtein (edit) distance</a>. type query useful accounting spelling variations collection. </p> <a name="scoring"></a> <h2>scoring &mdash; introduction</h2> <p>lucene scoring heart love lucene. blazingly fast hides almost complexity user. nutshell, works. least, is, work, work one would expect work. left digging lucene internals asking help <a href="mailto:java-user@lucene.apache.org">java-user@lucene.apache.org</a> figure document five query terms scores lower different document one query terms. </p> <p>while document answer specific scoring issues, will, hopefully, point places help figure <i>what</i> <i>why</i> lucene scoring. </p> <p>lucene scoring supports number pluggable information retrieval <a href="http://en.wikipedia.org/wiki/information_retrieval#model_types">models</a>, including: <ul> <li><a href="http://en.wikipedia.org/wiki/vector_space_model">vector space model (vsm)</a></li> <li><a href="http://en.wikipedia.org/wiki/probabilistic_relevance_model">probablistic models</a> <a href="http://en.wikipedia.org/wiki/probabilistic_relevance_model_(bm25)">okapi bm25</a> <a href="http://en.wikipedia.org/wiki/divergence-from-randomness_model">dfr</a></li> <li><a href="http://en.wikipedia.org/wiki/language_model">language models</a></li> </ul> models plugged via {@link org.apache.lucene.search.similarities similarity api}, offer extension hooks parameters tuning. general, lucene first finds documents need scored based boolean logic query specification, ranks subset matching documents via retrieval model. valuable references vsm ir general refer <a href="http://wiki.apache.org/lucene-java/informationretrieval">lucene wiki ir references</a>. </p> <p>the rest document cover <a href="#scoringbasics">scoring basics</a> explain change {@link org.apache.lucene.search.similarities.similarity similarity}. next, cover ways customize lucene internals <a href="#customqueriesexpert">custom queries -- expert level</a>, gives details implementing {@link org.apache.lucene.search.query query} class related functionality. finally, finish reference material <a href="#algorithm">appendix</a>. </p> <a name="scoringbasics"></a> <h2>scoring &mdash; basics</h2> <p>scoring much dependent way documents indexed, important understand indexing. (see <a href="{@docroot}/overview-summary.html#overview_description">lucene overview</a> continuing section) sure use useful {@link org.apache.lucene.search.indexsearcher#explain(org.apache.lucene.search.query, int) indexsearcher.explain(query, doc)} understand score certain matching document computed. <p>generally, query determines documents match (a binary decision), similarity determines assign scores matching documents. </p> <h4>fields documents</h4> <p>in lucene, objects scoring {@link org.apache.lucene.document.document document}s. document collection {@link org.apache.lucene.document.field field}s. field {@link org.apache.lucene.document.fieldtype semantics} created stored ({@link org.apache.lucene.document.fieldtype#tokenized() tokenized}, {@link org.apache.lucene.document.fieldtype#stored() stored}, etc). important note lucene scoring works fields combines results return documents. important two documents exact content, one content two fields one field may return different scores query due length normalization. </p> <h4>score boosting</h4> <p>lucene allows influencing search results "boosting" different times: <ul> <li><b>index-time boost</b> calling {@link org.apache.lucene.document.field#setboost(float) field.setboost()} document added index.</li> <li><b>query-time boost</b> setting boost query clause, calling {@link org.apache.lucene.search.query#setboost(float) query.setboost()}.</li> </ul> </p> <p>indexing time boosts pre-processed storage efficiency written storage field follows: <ul> <li>all boosts field (i.e. boosts field name doc) multiplied.</li> <li>the boost encoded normalization value similarity object index-time: {@link org.apache.lucene.search.similarities.similarity#computenorm computenorm()}. actual encoding depends upon similarity implementation, note use lossy encoding (such multiplying boost document length similar, packed single byte!).</li> <li>decoding index-time normalization values integration document's score also performed search time similarity.</li> </ul> </p> <a name="changingscoring"></a> <h2>changing scoring &mdash; similarity</h2> <p> changing {@link org.apache.lucene.search.similarities.similarity similarity} easy way influence scoring, done index-time {@link org.apache.lucene.index.indexwriterconfig#setsimilarity(org.apache.lucene.search.similarities.similarity) indexwriterconfig.setsimilarity(similarity)} query-time {@link org.apache.lucene.search.indexsearcher#setsimilarity(org.apache.lucene.search.similarities.similarity) indexsearcher.setsimilarity(similarity)}. sure use similarity query-time index-time (so norms encoded/decoded correctly); lucene makes effort verify this. </p> <p> influence scoring configuring different built-in similarity implementation, tweaking parameters, subclassing override behavior. implementations also offer modular api extend plugging different component (e.g. term frequency normalizer). </p> <p> finally, extend low level {@link org.apache.lucene.search.similarities.similarity similarity} directly implement new retrieval model, use external scoring factors particular application. example, custom similarity access per-document values via {@link org.apache.lucene.search.fieldcache fieldcache} {@link org.apache.lucene.index.numericdocvalues} integrate score. </p> <p> see {@link org.apache.lucene.search.similarities} package documentation information built-in available scoring models extending changing similarity. </p> <a name="customqueriesexpert"></a> <h2>custom queries &mdash; expert level</h2> <p>custom queries expert level task, tread carefully prepared share code want help. </p> <p>with warning way, possible change lot similarity comes matching scoring lucene. lucene's search complex mechanism grounded <span>three main classes</span>: <ol> <li> {@link org.apache.lucene.search.query query} &mdash; abstract object representation user's information need.</li> <li> {@link org.apache.lucene.search.weight weight} &mdash; internal interface representation user's query, query objects may reused. global (across segments index) generally require global statistics (such docfreq given term across segments).</li> <li> {@link org.apache.lucene.search.scorer scorer} &mdash; abstract class containing common functionality scoring. provides scoring explanation capabilities. created per-segment.</li> </ol> details classes, children, found subsections below. </p> <h4>the query class</h4> <p>in sense, {@link org.apache.lucene.search.query query} class begins. without query, would nothing score. furthermore, query class catalyst scoring classes often responsible creating coordinating functionality them. {@link org.apache.lucene.search.query query} class several methods important derived classes: <ol> <li>{@link org.apache.lucene.search.query#createweight(indexsearcher) createweight(indexsearcher searcher)} &mdash; {@link org.apache.lucene.search.weight weight} internal representation query, query implementation must provide implementation weight. see subsection <a href="#weightclass">the weight interface</a> details implementing weight interface.</li> <li>{@link org.apache.lucene.search.query#rewrite(indexreader) rewrite(indexreader reader)} &mdash; rewrites queries primitive queries. primitive queries are: {@link org.apache.lucene.search.termquery termquery}, {@link org.apache.lucene.search.booleanquery booleanquery}, <span >and queries implement {@link org.apache.lucene.search.query#createweight(indexsearcher) createweight(indexsearcher searcher)}</span></li> </ol> </p> <a name="weightclass"></a> <h4>the weight interface</h4> <p>the {@link org.apache.lucene.search.weight weight} interface provides internal representation query reused. {@link org.apache.lucene.search.indexsearcher indexsearcher} dependent state stored weight implementation, query class. interface defines five methods must implemented: <ol> <li> {@link org.apache.lucene.search.weight#getquery getquery()} &mdash; pointer query weight represents.</li> <li> {@link org.apache.lucene.search.weight#getvaluefornormalization() getvaluefornormalization()} &mdash; weight return floating point value indicate magnitude query normalization. typically weight termweight scores via {@link org.apache.lucene.search.similarities.similarity similarity} defer similarity's implementation: {@link org.apache.lucene.search.similarities.similarity.simweight#getvaluefornormalization simweight#getvaluefornormalization()}. example, {@link org.apache.lucene.search.similarities.tfidfsimilarity lucene's classic vector-space formula}, implemented sum squared weights: <code>(idf * boost)<sup>2</sup></code></li> <li> {@link org.apache.lucene.search.weight#normalize(float,float) normalize(float norm, float toplevelboost)} &mdash; performs query normalization: <ul> <li><code>toplevelboost</code>: query-boost factor wrapping queries multiplied every document's score. example, termquery wrapped within booleanquery boost <code>5</code> would receive value time. allows termquery (the leaf node case) compute up-front single time (e.g. multiplying idf), rather every document.</li> <li><code>norm</code>: passes normalization factor may allow comparing scores queries.</li> </ul> typically weight termweight scores via {@link org.apache.lucene.search.similarities.similarity similarity} defer similarity's implementation: {@link org.apache.lucene.search.similarities.similarity.simweight#normalize simweight#normalize(float,float)}.</li> <li> {@link org.apache.lucene.search.weight#scorer(org.apache.lucene.index.atomicreadercontext, boolean, boolean, org.apache.lucene.util.bits) scorer(atomicreadercontext context, boolean scoresdocsinorder, boolean topscorer, bits acceptdocs)} &mdash; construct new {@link org.apache.lucene.search.scorer scorer} weight. see <a href="#scorerclass">the scorer class</a> help defining scorer. name implies, scorer responsible actual scoring documents given query. </li> <li> {@link org.apache.lucene.search.weight#explain(org.apache.lucene.index.atomicreadercontext, int) explain(atomicreadercontext context, int doc)} &mdash; provide means explaining given document scored way was. typically weight termweight scores via {@link org.apache.lucene.search.similarities.similarity similarity} make use similarity's implementation: {@link org.apache.lucene.search.similarities.similarity.simscorer#explain(int, explanation) simscorer#explain(int doc, explanation freq)}. </li> </li> </ol> </p> <a name="scorerclass"></a> <h4>the scorer class</h4> <p>the {@link org.apache.lucene.search.scorer scorer} abstract class provides common scoring functionality scorer implementations heart lucene scoring process. scorer defines following abstract (some yet abstract, future versions considered now) methods must implemented (some inherited {@link org.apache.lucene.search.docidsetiterator docidsetiterator}): <ol> <li> {@link org.apache.lucene.search.scorer#nextdoc nextdoc()} &mdash; advances next document matches query, returning true another document matches.</li> <li> {@link org.apache.lucene.search.scorer#docid docid()} &mdash; returns id {@link org.apache.lucene.document.document document} contains match. </li> <li> {@link org.apache.lucene.search.scorer#score score()} &mdash; return score current document. value determined appropriate way application. instance, {@link org.apache.lucene.search.termscorer termscorer} simply defers configured similarity: {@link org.apache.lucene.search.similarities.similarity.simscorer#score(int, float) simscorer.score(int doc, float freq)}. </li> <li> {@link org.apache.lucene.search.scorer#freq freq()} &mdash; returns number matches current document. value determined appropriate way application. instance, {@link org.apache.lucene.search.termscorer termscorer} simply defers term frequency inverted index: {@link org.apache.lucene.index.docsenum#freq docsenum.freq()}. </li> <li> {@link org.apache.lucene.search.scorer#advance advance()} &mdash; skip ahead document matches document whose id greater equal passed value. many instances, advance implemented efficiently simply looping matching documents target document identified. </li> <li> {@link org.apache.lucene.search.scorer#getchildren getchildren()} &mdash; returns child subscorers underneath scorer. allows users navigate scorer hierarchy receive fine-grained details scoring process. </li> </ol> </p> <h4>why would want add query?</h4> <p>in nutshell, want add custom query implementation think lucene's appropriate task want do. might cutting edge research need information back lucene (similar doug adding spanquery functionality).</p> <!-- todo: integrate better, better served intro appendix --> <a name="algorithm"></a> <h2>appendix: search algorithm</h2> <p>this section mostly notes stepping scoring process serves fertilizer earlier sections.</p> <p>in typical search application, {@link org.apache.lucene.search.query query} passed {@link org.apache.lucene.search.indexsearcher indexsearcher}, beginning scoring process.</p> <p>once inside indexsearcher, {@link org.apache.lucene.search.collector collector} used scoring sorting search results. important objects involved search: <ol> <li>the {@link org.apache.lucene.search.weight weight} object query. weight object internal representation query allows query reused indexsearcher.</li> <li>the indexsearcher initiated call.</li> <li>a {@link org.apache.lucene.search.filter filter} limiting result set. note, filter may null.</li> <li>a {@link org.apache.lucene.search.sort sort} object specifying sort results standard score-based sort method desired.</li> </ol> </p> <p>assuming sorting (since sorting affect raw lucene score), call one search methods indexsearcher, passing {@link org.apache.lucene.search.weight weight} object created {@link org.apache.lucene.search.indexsearcher#createnormalizedweight(org.apache.lucene.search.query) indexsearcher.createnormalizedweight(query)}, {@link org.apache.lucene.search.filter filter} number results want. method returns {@link org.apache.lucene.search.topdocs topdocs} object, internal collection search results. indexsearcher creates {@link org.apache.lucene.search.topscoredoccollector topscoredoccollector} passes along weight, filter another expert search method (for {@link org.apache.lucene.search.collector collector} mechanism, see {@link org.apache.lucene.search.indexsearcher indexsearcher}). topscoredoccollector uses {@link org.apache.lucene.util.priorityqueue priorityqueue} collect top results search. </p> <p>if filter used, initial setup done determine docs include. otherwise, ask weight {@link org.apache.lucene.search.scorer scorer} {@link org.apache.lucene.index.indexreader indexreader} segment proceed calling {@link org.apache.lucene.search.scorer#score(org.apache.lucene.search.collector) scorer.score()}. </p> <p>at last, actually going score documents. score method takes collector (most likely topscoredoccollector topfieldcollector) business.of course, things get involved. {@link org.apache.lucene.search.scorer scorer} returned {@link org.apache.lucene.search.weight weight} object depends type query submitted. real world applications multiple query terms, {@link org.apache.lucene.search.scorer scorer} going <code>booleanscorer2</code> created {@link org.apache.lucene.search.booleanquery.booleanweight booleanweight} (see section <a href="#customqueriesexpert">custom queries</a> info changing this). </p> <p>assuming booleanscorer2, first initialize coordinator, used apply coord() factor. get internal scorer based required, optional prohibited parts query. using internal scorer, booleanscorer2 proceeds loop based {@link org.apache.lucene.search.scorer#nextdoc scorer.nextdoc()} method. nextdoc() method advances next document matching query. abstract method scorer class thus overridden derived implementations. simple query internal scorer likely disjunctionsumscorer, essentially combines scorers sub scorers or'd terms.</p> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/search/similarities/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> package contains various ranking models used lucene. abstract class {@link org.apache.lucene.search.similarities.similarity} serves base ranking functions. searching, users employ models already implemented create extending one classes package. <h2>table contents</h2> <p> <ol> <li><a href="#sims">summary ranking methods</a></li> <li><a href="#changingsimilarity">changing similarity</a></li> </ol> </p> <a name="sims"></a> <h2>summary ranking methods</h2> <p>{@link org.apache.lucene.search.similarities.defaultsimilarity} original lucene scoring function. based highly optimized <a href="http://en.wikipedia.org/wiki/vector_space_model">vector space model</a>. information, see {@link org.apache.lucene.search.similarities.tfidfsimilarity}.</p> <p>{@link org.apache.lucene.search.similarities.bm25similarity} optimized implementation successful okapi bm25 model.</p> <p>{@link org.apache.lucene.search.similarities.similaritybase} provides basic implementation similarity contract exposes highly simplified interface, makes ideal starting point new ranking functions. lucene ships following methods built {@link org.apache.lucene.search.similarities.similaritybase}: <a name="framework"></a> <ul> <li>amati rijsbergen's {@linkplain org.apache.lucene.search.similarities.dfrsimilarity dfr} framework;</li> <li>clinchant gaussier's {@linkplain org.apache.lucene.search.similarities.ibsimilarity information-based models} ir;</li> <li>the implementation two {@linkplain org.apache.lucene.search.similarities.lmsimilarity language models} zhai lafferty's paper.</li> </ul> since {@link org.apache.lucene.search.similarities.similaritybase} optimized extent {@link org.apache.lucene.search.similarities.defaultsimilarity} {@link org.apache.lucene.search.similarities.bm25similarity}, difference performance expected using methods listed above. however, optimizations always implemented subclasses; see <a href="#changingsimilarity">below</a>.</p> <a name="changingsimilarity"></a> <h2>changing similarity</h2> <p>chances available similarities sufficient searching needs. however, applications may necessary customize <a href="similarity.html">similarity</a> implementation. instance, applications need distinguish shorter longer documents (see <a href="http://www.gossamer-threads.com/lists/lucene/java-user/38967#38967">a "fair" similarity</a>).</p> <p>to change {@link org.apache.lucene.search.similarities.similarity}, one must indexing searching, changes must happen either actions take place. although theory nothing stopping changing mid-stream, well-defined going happen. </p> <p>to make change, implement {@link org.apache.lucene.search.similarities.similarity} (likely want simply subclass existing method, {@link org.apache.lucene.search.similarities.defaultsimilarity} descendant {@link org.apache.lucene.search.similarities.similaritybase}), register new class calling {@link org.apache.lucene.index.indexwriterconfig#setsimilarity(similarity)} indexing {@link org.apache.lucene.search.indexsearcher#setsimilarity(similarity)} searching. </p> <h3>extending {@linkplain org.apache.lucene.search.similarities.similaritybase}</h3> <p> easiest way quickly implement new ranking method extend {@link org.apache.lucene.search.similarities.similaritybase}, provides basic implementations low level . subclasses required implement {@link org.apache.lucene.search.similarities.similaritybase#score(basicstats, float, float)} {@link org.apache.lucene.search.similarities.similaritybase#tostring()} methods.</p> <p>another option extend one <a href="#framework">frameworks</a> based {@link org.apache.lucene.search.similarities.similaritybase}. similarities implemented modularly, e.g. {@link org.apache.lucene.search.similarities.dfrsimilarity} delegates computation three parts formula classes {@link org.apache.lucene.search.similarities.basicmodel}, {@link org.apache.lucene.search.similarities.aftereffect} {@link org.apache.lucene.search.similarities.normalization}. instead subclassing similarity, one simply introduce new basic model tell {@link org.apache.lucene.search.similarities.dfrsimilarity} use it.</p> <h3>changing {@linkplain org.apache.lucene.search.similarities.defaultsimilarity}</h3> <p> interested use cases changing similarity, see lucene users's mailing list <a href="http://www.nabble.com/overriding-similarity-tf2128934.html">overriding similarity</a>. summary, use cases: <ol> <li><p>the <code>sweetspotsimilarity</code> <code>org.apache.lucene.misc</code> gives small increases frequency increases small amount greater increases hit "sweet spot", i.e. think frequency terms significant.</p></li> <li><p>overriding tf &mdash; applications, matter score document long matching term occurs. cases people overridden similarity return 1 tf() method.</p></li> <li><p>changing length normalization &mdash; overriding {@link org.apache.lucene.search.similarities.similarity#computenorm(fieldinvertstate state)}, possible discount length field contributes score. {@link org.apache.lucene.search.similarities.defaultsimilarity}, lengthnorm = 1 / (numterms field)^0.5, one changes 1 / (numterms field), fields treated <a href="http://www.gossamer-threads.com/lists/lucene/java-user/38967#38967">"fairly"</a>.</p></li> </ol> general, chris hostetter sums best saying (from <a href="http://www.gossamer-threads.com/lists/lucene/java-user/39125#39125">the lucene users's mailing list</a>): <blockquote>[one would override similarity in] ... situation know data "text" situation *might* make sense override similarity method.</blockquote> </p> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/search/spans/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head></head> <body> calculus spans. <p>a span <code>&lt;doc,startposition,endposition&gt;</code> tuple.</p> <p>the following span query operators implemented: <ul> <li>a {@link org.apache.lucene.search.spans.spantermquery spantermquery} matches spans containing particular {@link org.apache.lucene.index.term term}.</li> <li> {@link org.apache.lucene.search.spans.spannearquery spannearquery} matches spans occur near one another, used implement things like phrase search (when constructed {@link org.apache.lucene.search.spans.spantermquery}s) inter-phrase proximity (when constructed {@link org.apache.lucene.search.spans.spannearquery}s).</li> <li>a {@link org.apache.lucene.search.spans.spanorquery spanorquery} merges spans number {@link org.apache.lucene.search.spans.spanquery}s.</li> <li>a {@link org.apache.lucene.search.spans.spannotquery spannotquery} removes spans matching one {@link org.apache.lucene.search.spans.spanquery spanquery} overlap (or comes near) another. used, e.g., implement within-paragraph search.</li> <li>a {@link org.apache.lucene.search.spans.spanfirstquery spanfirstquery} matches spans matching <code>q</code> whose end position less <code>n</code>. used constrain matches first part document.</li> <li>a {@link org.apache.lucene.search.spans.spanpositionrangequery spanpositionrangequery} general form spanfirstquery constrain matches arbitrary portions document.</li> </ul> cases, output spans minimally inclusive. words, span formed matching span x starts lesser two starts ends greater two ends. </p> <p>for example, span query matches "john kerry" within ten words "george bush" within first 100 words document could constructed with: <pre class="prettyprint"> spanquery john = new spantermquery(new term("content", "john")); spanquery kerry = new spantermquery(new term("content", "kerry")); spanquery george = new spantermquery(new term("content", "george")); spanquery bush = new spantermquery(new term("content", "bush")); spanquery johnkerry = new spannearquery(new spanquery[] {john, kerry}, 0, true); spanquery georgebush = new spannearquery(new spanquery[] {george, bush}, 0, true); spanquery johnkerryneargeorgebush = new spannearquery(new spanquery[] {johnkerry, georgebush}, 10, false); spanquery johnkerryneargeorgebushatstart = new spanfirstquery(johnkerryneargeorgebush, 100); </pre> <p>span queries may freely intermixed lucene queries. so, example, query restricted documents also use word "iraq" with: <pre class="prettyprint"> query query = new booleanquery(); query.add(johnkerryneargeorgebushatstart, true, false); query.add(new termquery("content", "iraq"), true, false); </pre> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/search/payloads/package.html # --- <html> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <head> <title>org.apache.lucene.search.payloads</title> </head> <body> payloads package provides query mechanisms finding using payloads. <p> following query implementations provided: <ol> <li>{@link org.apache.lucene.search.payloads.payloadtermquery payloadtermquery} -- boost term's score based value payload located term.</li> <li>{@link org.apache.lucene.search.payloads.payloadnearquery payloadnearquery} -- {@link org.apache.lucene.search.spans.spannearquery spannearquery} factors value payloads located positions spans occur.</li> </ol> </p> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/index/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> code maintain access indices. <!-- todo: add indexwriter, indexwriterconfig, docvalues, etc etc --> <h2>table contents</h2> <p> <ol> <li><a href="#postings">postings apis</a> <ul> <li><a href="#fields">fields</a></li> <li><a href="#terms">terms</a></li> <li><a href="#documents">documents</a></li> <li><a href="#positions">positions</a></li> </ul> </li> <li><a href="#stats">index statistics</a> <ul> <li><a href="#termstats">term-level</a></li> <li><a href="#fieldstats">field-level</a></li> <li><a href="#segmentstats">segment-level</a></li> <li><a href="#documentstats">document-level</a></li> </ul> </li> </ol> </p> <a name="postings"></a> <h2>postings apis</h2> <a name="fields"></a> <h4> fields </h4> <p> {@link org.apache.lucene.index.fields} initial entry point postings apis, obtained several ways: <pre class="prettyprint"> // access indexed fields index segment fields fields = reader.fields(); // access term vector fields specified document fields fields = reader.gettermvectors(docid); </pre> fields implements java's iterable interface, easy enumerate list fields: <pre class="prettyprint"> // enumerate list fields (string field : fields) { // access terms field terms terms = fields.terms(field); } </pre> </p> <a name="terms"></a> <h4> terms </h4> <p> {@link org.apache.lucene.index.terms} represents collection terms within field, exposes metadata <a href="#fieldstats">statistics</a>, api enumeration. <pre class="prettyprint"> // metadata field system.out.println("positions? " + terms.haspositions()); system.out.println("offsets? " + terms.hasoffsets()); system.out.println("payloads? " + terms.haspayloads()); // iterate terms termsenum termsenum = terms.iterator(null); bytesref term = null; ((term = termsenum.next()) != null) { dosomethingwith(termsenum.term()); } </pre> {@link org.apache.lucene.index.termsenum} provides iterator list terms within field, <a href="#termstats">statistics</a> term, methods access term's <a href="#documents">documents</a> <a href="#positions">positions</a>. <pre class="prettyprint"> // seek specific term boolean found = termsenum.seekexact(new bytesref("foobar")); (found) { // get document frequency system.out.println(termsenum.docfreq()); // enumerate documents docsenum docs = termsenum.docs(null, null); // enumerate documents positions docsandpositionsenum docsandpositions = termsenum.docsandpositions(null, null); } </pre> </p> <a name="documents"></a> <h4> documents </h4> <p> {@link org.apache.lucene.index.docsenum} extension {@link org.apache.lucene.search.docidsetiterator}that iterates list documents term, along term frequency within document. <pre class="prettyprint"> int docid; ((docid = docsenum.nextdoc()) != docidsetiterator.no_more_docs) { system.out.println(docid); system.out.println(docsenum.freq()); } </pre> </p> <a name="positions"></a> <h4> positions </h4> <p> {@link org.apache.lucene.index.docsandpositionsenum} extension {@link org.apache.lucene.index.docsenum} additionally allows iteration positions term occurred within document, additional per-position information (offsets payload) <pre class="prettyprint"> int docid; ((docid = docsandpositionsenum.nextdoc()) != docidsetiterator.no_more_docs) { system.out.println(docid); int freq = docsandpositionsenum.freq(); (int = 0; < freq; i++) { system.out.println(docsandpositionsenum.nextposition()); system.out.println(docsandpositionsenum.startoffset()); system.out.println(docsandpositionsenum.endoffset()); system.out.println(docsandpositionsenum.getpayload()); } } </pre> </p> <a name="stats"></a> <h2>index statistics</h2> <a name="termstats"></a> <h4> term statistics </h4> <p> <ul> <li>{@link org.apache.lucene.index.termsenum#docfreq}: returns number documents contain least one occurrence term. statistic always available indexed term. note also count deleted documents, segments merged statistic updated deleted documents merged away. <li>{@link org.apache.lucene.index.termsenum#totaltermfreq}: returns number occurrences term across documents. note statistic unavailable (returns <code>-1</code>) term frequencies omitted index ({@link org.apache.lucene.index.fieldinfo.indexoptions#docs_only docs_only}) field. like docfreq(), also count occurrences appear deleted documents. </ul> </p> <a name="fieldstats"></a> <h4> field statistics </h4> <p> <ul> <li>{@link org.apache.lucene.index.terms#size}: returns number unique terms field. statistic may unavailable (returns <code>-1</code>) terms implementations {@link org.apache.lucene.index.multiterms}, cannot efficiently computed. note count also includes terms appear deleted documents: segments merged terms also merged away statistic updated. <li>{@link org.apache.lucene.index.terms#getdoccount}: returns number documents contain least one occurrence term field. thought field-level docfreq(). like docfreq() also count deleted documents. <li>{@link org.apache.lucene.index.terms#getsumdocfreq}: returns number postings (term-document mappings inverted index) field. thought sum {@link org.apache.lucene.index.termsenum#docfreq} across terms field, like docfreq() also count postings appear deleted documents. <li>{@link org.apache.lucene.index.terms#getsumtotaltermfreq}: returns number tokens field. thought sum {@link org.apache.lucene.index.termsenum#totaltermfreq} across terms field, like totaltermfreq() also count occurrences appear deleted documents, unavailable (returns <code>-1</code>) term frequencies omitted index ({@link org.apache.lucene.index.fieldinfo.indexoptions#docs_only docs_only}) field. </ul> </p> <a name="segmentstats"></a> <h4> segment statistics </h4> <p> <ul> <li>{@link org.apache.lucene.index.indexreader#maxdoc}: returns number documents (including deleted documents) index. <li>{@link org.apache.lucene.index.indexreader#numdocs}: returns number live documents (excluding deleted documents) index. <li>{@link org.apache.lucene.index.indexreader#numdeleteddocs}: returns number deleted documents index. <li>{@link org.apache.lucene.index.fields#size}: returns number indexed fields. <li>{@link org.apache.lucene.index.fields#getuniquetermcount}: returns number indexed terms, sum {@link org.apache.lucene.index.terms#size} across fields. </ul> </p> <a name="documentstats"></a> <h4> document statistics </h4> <p> document statistics available indexing process indexed field: typically {@link org.apache.lucene.search.similarities.similarity} implementation store values (possibly lossy way), normalization value document {@link org.apache.lucene.search.similarities.similarity#computenorm} method. </p> <p> <ul> <li>{@link org.apache.lucene.index.fieldinvertstate#getlength}: returns number tokens field document. note number times {@link org.apache.lucene.analysis.tokenstream#incrementtoken} returned true, unrelated values {@link org.apache.lucene.analysis.tokenattributes.positionincrementattribute}. <li>{@link org.apache.lucene.index.fieldinvertstate#getnumoverlap}: returns number tokens field document position increment zero. used compute document length discounts artificial tokens synonyms. <li>{@link org.apache.lucene.index.fieldinvertstate#getposition}: returns accumulated position value field document: computed values {@link org.apache.lucene.analysis.tokenattributes.positionincrementattribute} including {@link org.apache.lucene.analysis.analyzer#getpositionincrementgap}s across multivalued fields. <li>{@link org.apache.lucene.index.fieldinvertstate#getoffset}: returns total character offset value field document: computed values {@link org.apache.lucene.analysis.tokenattributes.offsetattribute} returned {@link org.apache.lucene.analysis.tokenstream#end}, including {@link org.apache.lucene.analysis.analyzer#getoffsetgap}s across multivalued fields. <li>{@link org.apache.lucene.index.fieldinvertstate#getuniquetermcount}: returns number unique terms encountered field document. <li>{@link org.apache.lucene.index.fieldinvertstate#getmaxtermfrequency}: returns maximum frequency across unique terms encountered field document. </ul> </p> <p> additional user-supplied statistics added document docvalues fields accessed via {@link org.apache.lucene.index.atomicreader#getnumericdocvalues}. </p> <p> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-lucene/src/main/java/org/apache/lucene/store/package.html # --- <!doctype html public "-//w3c//dtd html 4.0 transitional//en"> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <meta http-equiv="content-type" content="text/html; charset=iso-8859-1"> </head> <body> binary i/o api, used index data. </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-blob/readme.md # --- oak blob ======== module providing interfaces reading writing large binaries from/to content repository. addition provides common base functionality blob store implementations. license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-segment-tar/release-howto.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> *note*: information file outdated since [oak-5007](https://issues.apache.org/jira/browse/oak-5007) aligned module's release cycle rest oak. *todo*: remove update file clarified release modalities segment tar wrt. oak 1.8 # release howto howto explains release oak segment tar. describe steps required release version `$version`, assuming latest released version `$prev` next `$next`. ## vote 1. execute `mvn release:prepare`. 2. execute `mvn release:perform`. 3. close staged maven repository. 1. log https://repository.apache.org. 2. click "staging repositories". 3. click repository. 4. click "close". 4. start vote oak-dev. see vote template below. 5. wait 72 hours. vote successful least three +1 number -1 less number +1. ## successful vote 1. close vote oak-dev. see results template below. 2. copy artifacts release repository. 1. execute `check_staged_release.sh` script already. 2. move temporary folder created script artifacts are. 3. execute `svn import https://dist.apache.org/repos/dist/release/jackrabbit/oak/oak-segment-tar/$version`. 3. delete old release. 1. execute `svn rm https://dist.apache.org/repos/dist/release/jackrabbit/oak/oak-segment-tar/$prev`. 4. release staged maven repository. 1. log https://repository.apache.org. 2. click "staging repositories". 3. click repository. 4. click "release". 5. release version jira. 1. go https://issues.apache.org/jira/plugins/servlet/project-config/oak/versions. 2. create version $next already exist. 3. move mouse $version version. 4. click gear icon. 5. click release. 6. select "move issues version:". 7. select version $next dropdown box. 8. enter release date. release date day vote ended. ## unsuccessful vote 1. remove release tag subversion. 1. execute `svn rm http://svn.apache.org/repos/asf/jackrabbit/oak/tags/oak-segment-tar-$version`. 2. drop staged maven repository. 1. log https://repository.apache.org. 2. click "staging repositories". 3. click repository. 4. click "drop". 3. rollback version information `pom.xml`. ## vote template substitute following information body mail: - number fixed closed issues. - url version jira. - number staging repository. information function released version, manually entered every release. ``` subject: [vote] release apache jackrabbit oak segment tar version $version hi, solved 5 issues release: https://issues.apache.org/jira/browse/oak/fixforversion/12337966 still outstanding issues: https://issues.apache.org/jira/browse/oak/component/12329487 staging repository: https://repository.apache.org/content/repositories/orgapachejackrabbit-1162 use unix script download release verify signatures: http://svn.apache.org/repos/asf/jackrabbit/oak/trunk/check_staged_release.sh usage: sh check_staged_release.sh 1162 /tmp/oak-staging please vote approve release: [ ] +1 approve release [ ] 0 care [ ] -1 release, ... majority vote open least 72 hours. ``` ## result template ``` [result][vote] release apache jackrabbit oak segment tar version $version hi, vote passes follows: +1 first voter +1 second voter +1 third voter thanks voting. i'll push release out. ``` # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/setup.txt # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> == mongodb cluster setup == script create mongodb cluster 3 shards: === stop ./mongo --port=27017 use admin db.shutdownserver() exit ./mongo --port=10001 use admin db.shutdownserver() exit ./mongo --port=10002 use admin db.shutdownserver() exit ./mongo --port=10003 use admin db.shutdownserver() exit ./mongo --port=20001 use admin db.shutdownserver() exit ps -ef | grep mongo === clean, init, start rm -rf db mkdir db mkdir db/shard1 mkdir db/shard2 mkdir db/shard3 mkdir db/config ./mongod --shardsvr --port=10001 --dbpath db/shard1 --fork --logpath db/shard1.log ./mongod --shardsvr --port=10002 --dbpath db/shard2 --fork --logpath db/shard2.log ./mongod --shardsvr --port=10003 --dbpath db/shard3 --fork --logpath db/shard3.log ./mongod --configsvr --port 20001 --dbpath=db/config --fork --logpath db/config.log ./mongos --port 27017 --configdb localhost:20001 --fork --logpath db/mongos.log ./mongo --host localhost --port 27017 sh.addshard("localhost:10001") sh.addshard("localhost:10002") sh.addshard("localhost:10003") use mongomkdb db.createcollection("nodes") db.createcollection("blobs") sh.enablesharding("mongomkdb") sh.shardcollection("mongomkdb.nodes", { "_id": 1 }, true) sh.shardcollection("mongomkdb.blobs", { "_id": 1 }, true) exit === one rm -rf db mkdir db ./mongod --dbpath db --port 27017 === display sharding status: du -h . ./mongo --host localhost --port 27017 db.printshardingstatus() exit === testing local replica set # within mongodb directory: cd <mongodb/bin> # create replica set 2 replicas 1 arbiter: # see also http://docs.mongodb.org/manual/tutorial/deploy-replica-set/ killall mongod rm -rf db1; mkdir db1 rm -rf db2; mkdir db2 rm -rf db3; mkdir db3 ./mongod --replset test --dbpath db1 --port 27017 > db1/log.txt & ./mongod --replset test --dbpath db2 --port 27018 > db2/log.txt & ./mongod --replset test --dbpath db3 --port 27019 > db3/log.txt & ! nc -vz localhost 27017; sleep 1; done ! nc -vz localhost 27018; sleep 1; done ! nc -vz localhost 27019; sleep 1; done ./mongo --eval "rs.initiate({_id:'test', members:[ \ {_id:0, host:'localhost:27017'}, \ {_id:1, host:'localhost:27018'}, \ {_id:2, host:'localhost:27019', arbiteronly:true}, \ ]});" # display configuration: ./mongo rs.config() # display processes: ps -ef | grep "./mongod " # kill one port 27017: ps -l | grep "mongod" | grep "port 27017" | awk '{print $2}' | xargs kill -9 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/readme.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> oak documentation ================= oak documentation lives markdown files `src/site/markdown` easy view e.g. github. alternatively maven site plugin used build deploy web site follows: reactor mvn clean install -pdoc -pl :oak-doc-railroad-macro # oak-doc requires installed locally module released mvn clean -pdoc clean existing site, mvn site -pdoc build site **without** javadoc, optionally mvn site -pjavadoc -pl '!oak-shaded-guava,!oak-upgrade,!oak-benchmarks,!oak-search-elastic,!oak-benchmarks-lucene,!oak-benchmarks-solr,!oak-benchmarks-elastic,!oak-run-elastic' add javadoc. mvn site -pdoc,javadoc -pl '!oak-shaded-guava,!oak-upgrade,!oak-benchmarks,!oak-search-elastic,!oak-benchmarks-lucene,!oak-benchmarks-solr,!oak-benchmarks-elastic,!oak-run-elastic' generate **both** site javadocs. review site `oak-doc/target/site`. (note module exclusions javadoc build needed conflicting versions dependencies, trying build "aggregate" api docs; see oak-10500 details.) deploy site `http://jackrabbit.apache.org/oak/docs/` using mvn site-deploy -pdoc finally review site `http://jackrabbit.apache.org/oak/docs/index.html`. skip final commit deploy phase specify `-dscmpublish.skipcheckin=true`. review pending changes `oak-doc/target/scmpublish-checkout` follow `svn commit` manually. *note*: `mvn clean` needs run separate command otherwise generating javadocs would work correctly due issues module ordering. every committer able deploy site. fiddling credentials needed since deployment done via svn commit `https://svn.apache.org/repos/asf/jackrabbit/site/live/oak/docs`. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/dev_getting_started.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> getting started --------------- many parts oak still construction, may bit difficult find way around codebase. [readme files](https://github.com/apache/jackrabbit-oak/blob/trunk/readme.md), documentation, [oak mailing list](http://oak.markmail.org/) archives good places start learning oak. also [jackrabbit 3 wiki page](https://jackrabbit.apache.org/archive/wiki/jcr/jackrabbit-3_115513423.html), mostly outdated though consulted historical research. get started developing oak, clone [git repository](https://github.com/apache/jackrabbit-oak), fork [github](https://github.com/apache/jackrabbit-oak). build latest sources maven 3 java 8 (or higher) like this: mvn clean install enable integration tests, including jcr tck, use: mvn clean install -pintegrationtesting committing changes submitting patch, please make sure integration testing build passes without errors. like, enable integration tests default setting `oak_integration_testing` environment variable. please also refer documentation [developing git](./developing-with-git.html) [testing using different nodestore fixtures](./testing.html). mongodb integration ------------------- parts oak build expects mongodb instance available testing. default mongodb instance running localhost expected, relevant tests simply skipped instance found. also configure build use custom mongodb settings following properties (shown default values): -dmongo.host=127.0.0.1 -dmongo.port=27017 -dmongo.db=mongomkdb -dmongo.db2=mongomkdb2 note configured test databases *dropped* test cases. components ---------- build consists following components: - oak-parent - parent pom - oak-doc - oak documentation - oak-commons - shared utility code - [oak-api][1] - oak repository api - oak-core - oak repository implementation - oak-core-spi - oak repository extensions - oak-jcr - jcr binding oak repository - oak-solr-core - apache solr indexing search - oak-solr-osgi - oak-lucene - lucene-based query index - oak-auth-external - external authentication support - oak-auth-ldap - ldap implementation external authentication - oak-authorization-cug - authorization model closed user groups (cug) - oak-blob - oak blob store api - oak-blob-plugins - oak blob : extensions base implementations - oak-blob-cloud - s3 cloud blob store implementation - oak-blob-cloud-azure - azure cloud blob store implementation - oak-store-spi - oak nodestore commit spi - oak-segment-tar - tarmk api nodestore implementation - oak-store-document - oak documentnodestore implementation mongodb rdb - oak-store-composite - compositenodestore implementation - oak-upgrade - tooling upgrading jackrabbit repositories oak sidegrading oak oak - oak-run - runnable jar packaging - oak-run-commons - utilities shared oak-run oak-benchmarks - oak-benchmarks - benchmark tests - oak-it - integration tests - oak-it-osgi - integration tests osgi - oak-http - http binding oak - oak-pojosr - [oak-exercise][3] - oak training material - oak-examples - oak examples (webapp standalone) archive ------- following components moved jackrabbit attic: - oak-mk-api - microkernel api (_deprecated_, oak-2701) - oak-mk - microkernel implementation (see oak-2702) - oak-mk-remote - microkernel remoting (see [oak-2693][2]) - oak-it/mk - integration tests microkernel - oak-remote - oak remote api (see oak-7035) [1]: https://github.com/apache/jackrabbit-oak/blob/trunk/oak-core/readme.md [2]: https://issues.apache.org/jira/browse/oak-2693 [3]: https://github.com/apache/jackrabbit-oak/blob/trunk/oak-exercise/readme.md # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/license.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # license jackrabbit oak parts licensed according terms listed [apache license, version 2.0](http://www.apache.org/licenses/license-2.0.html). information regarding licensing apache software refer apache software foundation [licensing information](http://www.apache.org/licenses/). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/construct.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # repository construction oak comes simple flexible mechanism constructing content repositories use embedded deployments test cases. article describes mechanism. deployments managed environments like osgi use native construction/configuration mechanism environment. first, construct repository instance. `oak` `jcr` classes support `with()` methods, easily extend repository custom functionality like. construct in-memory repository, use: repository repo = new jcr(new oak()).createrepository(); use tar file based segment nodestore backend, use: filestore fs = filestorebuilder.filestorebuilder(new file("repository")).build(); segmentnodestore ns = segmentnodestorebuilders.builder(fs).build(); repository repo = new jcr(new oak(ns)).createrepository(); use mongodb backend, use: db db = new mongoclient("127.0.0.1", 27017).getdb("test2"); documentnodestore ns = new documentmk.builder(). setmongodb(db).getnodestore(); repository repo = new jcr(new oak(ns)).createrepository(); login repository work (using default username/password combination), use: session session = repo.login( new simplecredentials("admin", "admin".tochararray())); node root = session.getrootnode(); (root.hasnode("hello")) { node hello = root.getnode("hello"); long count = hello.getproperty("count").getlong(); hello.setproperty("count", count + 1); system.out.println("found hello node, count = " + count); } else { system.out.println("creating hello node"); root.addnode("hello").setproperty("count", 1); } session.save(); logout close backend store, use: session.logout(); // depending nodestore implementation either: // close filestore fs.close(); // close documentnodestore ns.dispose(); # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/articles.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # articles page contains links latest articles presentations jackrabbit oak. meant entry point newcommer jackrabbit oak * valentin olteanu, michael duerig, [tarmk: facts figures](https://adapt.to/2017/en/schedule/tarmk--facts-and-figures.html) * michael duerig, [into tar pit: tarmk deep dive](https://adapt.to/2016/en/schedule/into-the-tar-pit--a-tarmk-deep-dive.html) (september 2016) adaptto() 2016 * michael duerig, [avoiding dealing conflicting updates oak](https://adapt.to/2015/en/schedule/avoiding-and-dealing-with-conflicting-updates-in-oak.html) (september 2015) adaptto() 2015 * davide giannella, [scaling query oak](https://adapt.to/2015/en/schedule/scaling-the-query-with-oak.html) (september 2015) adaptto() 2015 * tommaso teofili, [scaling search oak solr](https://adapt.to/2013/en/schedule/09_scalingsearch.html) (september 2013) adaptto() 2013 * michael marth, [oak: introduction users](https://adapt.to/2013/en/schedule/03_oakintro.html) (september 2013) adaptto() 2013 * tommaso teofili [oak / solr integration](https://adapt.to/2012/en/schedule/oak-solr-integration.html) (september 2012) adaptto() 2012 * michael duerig, jukka zitting [apache jackrabbit oak](https://adapt.to/2012/en/schedule/apache-jackrabbit-oak.html) (september 2012) adaptto() 2012 * [jcr jackrabbit related links](http://jackrabbit.apache.org/jcr/articles.html) * [oak, architecture apache jackrabbit 3](http://www.slideshare.net/jukka/oak-the-architecture-of-apache-jackrabbit-3). * [oak, architecture new repository](http://www.slideshare.net/michaeldrig/oak-39377061) ## references following links also useful search information documented current docs * [oak jira](https://issues.apache.org/jira/browse/oak), specifically [oak-14] (https://issues.apache.org/jira/browse/oak-14), lists known backward compatibility issues, * [oak development list](http://jackrabbit.markmail.org/search/+list:org.apache.jackrabbit.oak-dev), * [readme files](https://github.com/apache/jackrabbit-oak/blob/trunk/readme.md) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/diagnostic-builds.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # cutting diagnostic builds cutting diagnostic build, process want deliver one oak bundles, let's say `oak-core` specific environment order assess whether actually solves issues. aiming eventually produce bundle format of, example, `oak-core-1.0.22-r2707077`. let's see examples. we'll consider case **branches** **trunk**. ## trunk want produce diagnostic build `oak-core` oak **1.16.0**. means currently `pom.xml` version `<version>1.16-snapshot</version>`. ### version shall use? open git working directory trunk issue $ git pull $ git rev-parse --short head see something like 9c7d7bf569 short git hash recent commit. means produce bundle version `1.15-r9c7d7bf569`. **note produced version lower official release working on. 1.15 vs 1.16.0** **note use '-r' (uppercase) instead '-r' (lowercase) lower '-snapshot'. otherwise result troubles trying apply '-snapshot' version top internal build** doubt versioning osgi maven behave look [versionatorr app](http://versionatorr.appspot.com/). want diagnostic build **always less than** oak version fix going released. ## branches want produce diagnostic build `oak-core` oak **1.0.23**. means currently `pom.xml` version `<version>1.0.23-snapshot</version>`. ### version shall use? open git working directory relevant branch (in example 1.0) issue $ git pull $ git rev-parse --short head see something like 9c7d7bf569 short git hash recent commit branch. means produce bundle version `1.0.22-r9c7d7bf569`. **note produced version lower official release working on. 1.0.22 vs 1.0.23** **note use '-r' (uppercase) instead '-r' (lowercase) lower '-snapshot'. otherwise result troubles trying apply '-snapshot' version top internal build** doubt versioning osgi maven behave look [versionatorr app](http://versionatorr.appspot.com/). want diagnostic build **always less than** oak version fix going released. ## branches trunk (same process) ### changing version poms. now. examples either want produce `1.0.22-r9c7d7bf569`` `1.15-r9c7d7bf569`. sake simplicity we'll detail `1.0.22-r9c7d7bf569` case. `1.15-r9c7d7bf569` simply change version. go `oak-parent` issue following maven command. oak-parent$ mvn versions:set -dnewversion=1.0.22-r9c7d7bf569 may encounter following exception. simply ignore it. nothing went wrong. java.io.filenotfoundexception: .../oak-parent/oak-parent (no file directory) ### building release build release usual jackrabbit-oak$ mvn clean install full oak build version `1.0.22-r9c7d7bf569`. go `oak-core/target` take produced jar. ### re-setting working directory want commit changes git reset branch original state jackrabbit-oak$ mvn versions:revert # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/attribution.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### supporting software attribution developers use various tools assist work, [intellij idea](http://www.jetbrains.com/idea/opensource/) [eclipse](http://www.eclipse.org/). tools require attribution, ([yourkit java profiler](http://www.yourkit.com/)). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/osgi_config.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # repository osgi configuration oak comes simple mechanism constructing content repositories use embedded deployments test cases. details regarding provided part [repository construction](construct.html). used osgi environment various oak components configured using osgi configuration support. depending component configuration modified runtime needs specified initial system setup. static configuration : configuration settings cannot changed repository initialized. example choosing `datastore` specifying path user home. properties changed system initialized. dynamic configuration : configuration settings like thread pool size, cache size etc changed runtime initial system setup osgi configuration referred via pid i.e. persistent identifier. sections provide details around various pid used oak ### nodestore #### segmentnodestore section describes configuration segment node store, implementation node store saves repository data disk. first configurations, identified `org.apache.jackrabbit.oak.segment.segmentnodestoreservice`, refers implementation provided `oak-segment-tar` bundle. implementation newest actively maintained one, used unless legacy use case needs supported. second last configuration, identified `org.apache.jackrabbit.oak.plugins.segment.segmentnodestoreservice`, refers old implementation node store provided `oak-segment` bundle. implementation deprecated removed oak 1.8. receive improvements used new projects. ##### <a name="config-segmentnodestoreservice"></a> org.apache.jackrabbit.oak.segment.segmentnodestoreservice repository.home (string) - repository : path file system repository data stored. segment store persists data subdirectory `repository.home` named `segmentstore`. provided path relative absolute. relative path provided, handled according definition relative path specified `java.io.file`. placeholders kind path supported. tarmk.mode (string) - 64 : architecture model. assume two values, `32` `64`. property set `64`, data files used segment store memory-mapped. value instruct segment store use memory-mapped files. tarmk.size (int) - 256 : maximum size tar files disk mb. segmentcache.size (int) - 256 : maximum size segment cache mb. segment cache keeps subset segments memory avoids performing i/o operations segments used. stringcache.size (int) - 256 : maximum size strings cache mb. string cache keeps subset string records memory avoids performing i/o operations strings used. templatecache.size (int) - 256 : maximum size template cache mb. template cache keeps subset template records memory avoids performing i/o operations templates used. stringdeduplicationcache.size (int) - 15000 : maximum size string deduplication cache number items. string deduplication cache tracks string records across different gc generations. avoids duplicating string record current gc generation already duplicated past. templatededuplicationcache.size (int) - 3000 : maximum size template deduplication cache number items. template deduplication cache tracks template records across different gc generations. avoids duplicating template record current gc generation already duplicated past. nodededuplicationcache.size (int) - 1048576 : maximum size node deduplication cache number items. node deduplication cache tracks node records across different gc generations. avoids duplicating node record current generation already duplicated past. pausecompaction (boolean) - false : determines online compaction executed. property `true`, estimation compaction phases online compaction process executed. compaction.retrycount (int) - 5 : number commit attempts online compaction process try giving up. property determines many times online compaction process try merge compacted repository state user-generated state produced commits executed concurrently compaction. compaction.force.timeout (int) - 60 : amount time online compaction process allowed exclusively lock store, seconds. property set positive value, compaction process fails commit compacted state concurrently commits, acquire exclusive lock node store. exclusive lock prevents commits completion, giving compaction process possibility commit compacted state. property determines long compaction process allowed use node store exclusive mode. property set zero negative value, compaction process acquire exclusive lock node store give many concurrent commits detected. compaction.sizedeltaestimation (long) - 10737418240 : increase size node store (in bytes) since last successful compaction trigger another execution compaction phase. compaction.disableestimation (boolean) - false : disables estimation phase online compaction process. property set `true`, estimation phase compaction process never run, compaction always triggered amount garbage node store. compaction.retainedgenerations (int) - 2 : number generations retain node store. oak 1.8 option deprecated. value defaults `2` cannot changed user. compaction.memorythreshold (int) - 15 : percentage heap memory always free compaction runs. available heap memory falls specified percentage, compaction started aborted already running. compaction.progresslog (long) - -1 : enables compaction progress logging set compacted nodes. value `-1` disables log. standby (boolean) - false : determines node store supposed used standby mode. customblobstore (boolean) - false : determines node store supposed use custom blob store. property `true`, data store blob store needs configured segment store pick (see below). property `false`, binaries stored segment store. repository.backup.dir (string) : path file system backups node store stored. defaults subdirectory `repository.home` named `segmentstore-backup`. relative path provided, handled according definition relative path specified `java.io.file`. placeholders kind path supported. ##### org.apache.jackrabbit.oak.plugins.segment.segmentnodestoreservice **this configuration deprecated removed oak 1.8. belongs legacy node store implementation provided oak-segment bundle. implementation used anymore. instead, rely node store implementation provided oak-segment-tar bundle, whose configuration described above.** repository.home (string) - tarmk : path file system repository data stored. segment store persists data subdirectory `repository.home` named `segmentstore`. provided path relative absolute. relative path provided, handled according definition relative path specified `java.io.file`. placeholders kind path supported. tarmk.mode (string) - 64 : architecture model. assume two values, `32` `64`. property set `64`, data files used segment store memory-mapped. value instruct segment store use memory-mapped files. tarmk.size (int) - 256 : maximum file size (in mb). cache (int) - 256 : size segment cache mb. compaction.clonebinaries (boolean) - false : determines binaries cloned performing online compaction. compaction.cleanup (string) - clean_old : determines in-memory references persisted data might influence outcome online compaction. assume values `clean_all`, `clean_old` `clean_none`. property `clean_all`, every memory reference ignored. property `clean_old`, memory references newer certain timestamp considered (see `compaction.cleanup.timestamp`). property `clean_none`, data pointed in-memory reference cleaned up. compaction.cleanup.timestamp (long) - 36000000 : expiry time in-memory references ms. `clean_old` used value `compaction.cleanup` property, every piece data pointed reference newer time interval considered eligible compaction. compaction.memorythreshold (byte) - 5 : multiplier help estimating amount memory needed compaction. setting property `0` indirectly skips compaction enough memory available. compaction.gainthreshold (byte) - 10. : percentage, expressed integer `0` `100`, representing expected gain online compaction. amount garbage equals greater percentage total disk space occupied node store, compaction run. setting property `0` negative value indirectly disables estimation phase online compaction process. pausecompaction (boolean) - true : determines online compaction executed. property `true`, estimation compaction phases online compaction process executed. compaction.retrycount (int) - 5 : number commit attempts online compaction process try giving up. defaults `5`. property determines many times online compaction process try merge compacted repository state user-generated state produced commits executed concurrently compaction. compaction.forceafterfail (boolean) - false : determines online compaction force commit certain amount attempts. compaction.lockwaittime (int) - 60 : determines long (in seconds) online compaction use node store exclusive mode. defaults `60`. value determines validity exclusive lock node store acquired online compaction process forcing commit. persistcompactionmap (boolean) - true : determines compaction map persisted disk. standby (boolean) - false : determines node store started standby mode. secondary (boolean) - false : determines node store started secondary store. customblobstore (boolean) - false : determines node store supposed use custom blob store. property `true`, data store blob store needs configured segment store pick (see below). property `false`, binaries stored segment store. blobgcmaxageinsecs (long) - 86400 : blob garbage collector (gc) logic would consider blobs gc accessed recently (currenttime - lastmodifiedtime > blobgcmaxageinsecs). example, per default, blobs created 24 hours past would considered gc. strongly advised set property low value say minutes set hour minimum. ensure nodestore(s) time flush internal data structures persistence references recently added blobs accounted. blobtracksnapshotintervalinsecs (long) - 43200 : blob ids cached/tracked locally synchronized datastore interval. additions deletions visible cluster nodes repositories connected shared datstore this. less blobgcmaxageinsecs parameter frequency blob gc. see [blob tracker][blobtracker]. <a name="document-node-store"></a> #### documentnodestore _pid `org.apache.jackrabbit.oak.plugins.document.documentnodestoreservice`_ name | default | description | since -----|---------|-------------|------ mongouri | mongodb://localhost:27017 | specifies [mongouri][1] required connect mongo database | 1.0 db | oak | name database mongo | 1.0 socketkeepalive | true (was 'false' 1.10) | enables socket keep-alive mongodb connections | 1.8.0, 1.6.2, 1.4.16 cache | 256 | cache size mb. distributed among various caches used documentnodestore | 1.0 customblobstore | false | boolean value indicating custom `blobstore` use. | 1.0 maxreplicationlaginsecs | 21600 (6 hours) | determines duration beyond safely assumed state secondary would consistent primary safe read them. (see [oak-1645][oak-1645]) | 1.0.2 blobgcmaxageinsecs | 86400 (24 hrs) | blob garbage collector (gc) logic would consider blobs gc accessed recently (currenttime - lastmodifiedtime > blobgcmaxageinsecs). example per default blobs created 24 hrs ago would considered gc. strongly advised set property low value say minutes set hour minimum. ensure nodestore(s) time flush internal data structures persistence references recently added blobs accounted. | 1.0 versiongcmaxageinsecs | 86400 (24 hrs) | oak uses mvcc model store data. update node results new version getting created. duration controls much old revision data kept. example node deleted time t1 content would marked deleted revision t1 content would removed. revision gc run content would removed (currenttime -t1 > versiongcmaxageinsecs) | 1.0 versiongcexpression | "" | cron expression defines revision gc scheduled. configuration entry left empty, default behaviour depends `documentstoretype`. `mongo` default schedule run every five seconds (also known continuous revision garbage collection). `rdb` default scheduled gc. must enabled explicitly cron expression. e.g. following expression triggers gc run every night 2 am: `0 0 2 * * ?`. | 1.7.11 versiongctimelimitinsecs | 10800 | revision gc run canceled number seconds. default three hours. | 1.7.11 journalgcmaxage | 86400000 (24 hrs, 6 hrs 1.7.4) | journal entries older `journalgcmaxage` removed journal garbage collector. maximum age specified milliseconds. | 1.0.19, 1.2.3, 1.4 journalgcinterval | 300000 (5 min) | interval milliseconds journal garbage collector removes old journal entries. | 1.0.19, 1.2.3, 1.4 blobcachesize | 16 (mb) | documentnodestore running mongo use `mongoblobstore` default unless custom `blobstore` configured. scenario size memory cache frequently used blobs configured via `blobcachesize`. | 1.0 persistentcache | "cache,binary=0" (prior 1.6, persistent cache disabled default) | [persistent cache][persistent-cache], stored local file system. | 1.0.8 persistentcacheincludes | \["/"\] | list paths defining subtrees cached. | 1.8.0 <a name="cache-allocation"></a> nodecachepercentage | 35 (was 25 1.5.14) | percentage `cache` allocated `nodecache`. see [caching][doc-cache] | 1.0.12 prevdoccachepercentage | 4 | percentage `cache` allocated `prevdoccache`. see [caching][doc-cache] | 1.3.15 childrencachepercentage | 15 (was 10 1.5.14) | percentage `cache` allocated `childrencache`. see [caching][doc-cache] | 1.0.12 diffcachepercentage | 30 (was 5 1.5.14) | percentage `cache` allocated `diffcache`. see [caching][doc-cache] | 1.0.12 docchildrencachepercentage | 0 (was 3 1.5.6) | percentage `cache` allocated `docchildrencache`. see [caching][doc-cache] (removed since 1.5.6) | 1.0.12 cachesegmentcount | 16 | number segments lirs cache | 1.0.15, 1.2.3, 1.3.0 cachestackmovedistance | 16 | delay move entries head queue lirs cache | 1.0.15, 1.2.3, 1.3.0 shareddsrepoid | "" | custom shareddatastore repositoryid. used custom blobstore configured. unique among repositories sharing datastore. | 1.2.11 blobtracksnapshotintervalinsecs | 43200 (12 hrs) | blob ids cached/tracked locally synchronized datastore interval. additions deletions visible cluster nodes repositories connected shared datstore this. less blobgcmaxageinsecs parameter frequency blob gc. see [blob tracker][blobtracker]. | 1.5.6 updatelimit | 100000 | number updates kept memory changes written branch documentstore | 1.7.0 leasecheckmode | strict | lease check mode. `strict` default stop documentnodestore soon lease expires. `lenient` give background lease update chance renew lease even lease expired. mode recommended development, e.g. debugging application lease may expire jvm stopped breakpoint. | 1.9.6 documentstoretype | mongo | set "rdb" `rdbdocumentstore`; require configured sling datasource called `oak`. | 1.0 example config file `mongodocumentstore`: mongouri=mongodb://localhost:27017 db=oak example config file `rdbdocumentstore`: documentstoretype=rdb datasource.target=(datasource.name=oak) ##### mongo configuration configuration related mongo specified via [mongo uri][1] * **authentication** - username password specified part uri e.g. following connects logs admin database user sysop password moon: mongodb://sysop:moon@localhost * **read preferences write concern** - also spcified part mongo uri. refer [read preference write concern](./nodestore/documentmk.html#rw-preference) section details. e.g. following would set _readpreference_ _secondary_ prefer replica tag _dc:ny,rack:1_. would also specify write timeout 10 sec mongodb://db1.example.net,db2.example.com?readpreference=secondary&readpreferencetags=dc:ny,rack:1&readpreferencetags=dc:ny&readpreferencetags=&w=1&wtimeoutms=10000 one also specify connection pool size, socket timeout etc. complete details various possible option refer [mongo uri][1] ##### rdb configuration service operates jdbc `datasource`. configuration happens osgi service provides data source, instance [sling datasource provider](https://sling.apache.org/documentation/bundles/datasource-providers.html). <a name="config-blobstore"></a> ### configuring datastore/blobstore blobstores used store binary content. support jackrabbit 2 `datastore` also provided via `datastoreblobstore` wrapper. use specific blobstore implementation following two steps need performed 1. configure nodestore - nodestore config need modified enable use custom blobstore via setting `customblobstore` true 2. configure blobstore - create config required blobstore using pid blobstore. refer [config steps apache sling](#config-sling) example configure `filedatastore` `documentnodestore` #### jackrabbit 2 - filedatastore jackrabbit 2 [filedatastore][2] configured via following _pid_ _pid `org.apache.jackrabbit.oak.plugins.blob.datastore.filedatastore`_ path : default - specified : path directory files would stored. minrecordlength : default - 100 : size bytes. binary content less `minrecordlength` would inlined i.e. data store id data itself). maxcachedbinarysize : default - 17408 (17 kb) : size bytes. binaries size less equal size would stored memory cache cachesizeinmb : default - 16 : size mb. memory cache storing small files whose size less `maxcachedbinarysize`. helps better performance lots small binaries accessed frequently. cachesize : default - 0 : size bytes filedatastore cache. cache enabled cachesize > 0. default disabled. cachepath : default - ${home.dir}/repository/datastore : path local file system cache #### jackrabbit 2 - s3datastore _pid `org.apache.jackrabbit.oak.plugins.blob.datastore.s3datastore`_ accesskey : aws access key used accessing s3 bucket. required iam roles configured. secretkey : aws secret key used accessing s3 bucket. required iam roles configured. s3bucket/container : default - `us-standard` : s3 bucket name used storing binaries/blobs. s3region : region s3 bucket located created present. s3endpoint : s3 rest api endpoint. help reduce latency redirection standard endpoint different region configured. connectiontimeout : s3 connection timeout. see [aws s3 documentation](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/section-client-configuration.html). sockettimeout : s3 socket timeout. see [aws s3 documentation](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/section-client-configuration.html). maxconnections : maximum connections s3. see [aws s3 documentation](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/section-client-configuration.html). maxerrorretry : max error retries. see [aws s3 documentation](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/section-client-configuration.html). maxcachedbinarysize : default - 17408 (17 kb) : size bytes. binaries size less equal size would stored memory cache cachesizeinmb : default - 16 : size mb. memory cache storing small files whose size less `maxcachedbinarysize`. helps better performance lots small binaries accessed frequently. #### oak - shareds3datastore (oak 1.2.x & oak 1.4.x) supports shared s3 datastore _pid `org.apache.jackrabbit.oak.plugins.blob.datastore.shareds3datastore`_ maxcachedbinarysize : default - 17408 (17 kb) : size bytes. binaries size less equal size would stored memory cache cachesizeinmb : default - 16 : size mb. memory cache storing small files whose size less `maxcachedbinarysize`. helps better performance lots small binaries accessed frequently. #### oak - abstractsharedcachingdatastore (oak 1.6.x) data stores enable local file system caching following parameters * _pid `org.apache.jackrabbit.oak.plugins.blob.datastore.shareds3datastore`_ * _pid `org.apache.jackrabbit.oak.plugins.blob.datastore.s3datastore`_ * _pid `org.apache.jackrabbit.oak.plugins.blob.datastore.filedatastore`_ * _pid `org.apache.jackrabbit.oak.plugins.blob.datastore.azuredatastore`_ path : local file system path used cache binaries stage binaries asynchronous uploads. cachesize : default - 68719476736 : size bytes datastore cache. cache disabled cachesize <= 0. stagingsplitpercentage : default - 10 : percentage cache earmarked asynchronous upload staging. rest would used caching downloaded files. uploadthreads : default - 10 : number background threads used asynchronous uploads. stagingpurgeinterval : default - 300 : interval seconds background purge job clean uploaded entries upload staging cache. stagingretryinterval : default - 600 : interval seconds background retry job retrying previously failed asynchronous uploads. ### system properties framework properties following properties supported oak. grouped two parts _stable_ _experimental_. stable properties would supported future version experimental properties would _might_ supported future versions #### stable oak.mongo.uri : type - system property framework property : specifies [mongouri][1] required connect mongo database oak.mongo.db : type - system property framework property : name database mongo #### experimental ### configuration steps apache sling osgi configuration admin service defines mechanism passing configuration settings osgi bundle. configuration registered osgi system varies depending application. <a name="config-sling"></a> example configure `documentnodestore` use `filedatastore` apache sling 1. create config file name _org.apache.jackrabbit.oak.plugins.document.documentnodestoreservice.cfg_ _${sling.home}/install_ folder content #mongo server details mongouri=mongodb://localhost:27017 #name mongo database use db=aem-author #store binaries custom blobstore e.g. filedatastore customblobstore=true 2. create config file name _org.apache.jackrabbit.oak.plugins.blob.datastore.filedatastore.cfg_ _${sling.home}/install_ folder content #the minimum size object stored data store. minrecordlength=4096 #path datastore path=./sling/repository/datastore #cache storing small binaries in-memory cachesizeinmb=128 #### framework properties vs osgi configuration osgi components read config data two sources. 1. configurationadmin - configured via placing *.cfg files _${sling.home}/install_ folder. also modified runtime via felix webconsole typically available http://localhost:8080/system/console 2. framework properties - osgi framework configured start framework properties. properties cannot changed runtime. apache sling specified _${sling.home}/sling.properties_ _${sling.home}/conf/sling.properties_ oak config properties also read _framework properties_. value specified config file framework properties framework property takes precedence. example default sling sets **repository.home** _${sling.home}/repository_. value need specified config files [1]: http://docs.mongodb.org/manual/reference/connection-string/ [2]: http://jackrabbit.apache.org/api/2.4/org/apache/jackrabbit/core/data/filedatastore.html [oak-1645]: https://issues.apache.org/jira/browse/oak-1645 [doc-cache]: ./nodestore/documentmk.html#cache [persistent-cache]: ./nodestore/persistent-cache.html [blobtracker]: ./plugins/blobstore.html#blobid-tracker # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/faq.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # frequently asked questions (faqs) <!-- macro{toc} --> ## get warning "traversed 1000 nodes ...", mean? might missing index. see [query engine](query.html). ## get warning "attempt perform ... another thread concurrently ...", wrong? accessing `session` instance concurrently multiple threads. session instances [not thread safe](dos_and_donts.html#anti_pattern:_concurrent_session_access). enabling `debug` logging `sessiondelegate` provides stack traces sessions involved. *note*: used debugging major impact system performance. ## repository size disk growing beyond control (segmentnodestore) need setup regular job [compacting segments](nodestore/segmentmk.html#segment_compaction). ## debug merge conflict errors debugging merge conflict errors possible enabling `debug` logs `org.apache.jackrabbit.oak.plugins.commit.mergingnodestatediff` `org.apache.jackrabbit.oak.plugins.commit.conflictvalidator`. option available via [oak-3057](https://issues.apache.org/jira/browse/oak-3057) since oak 1.0.17, 1.2.3, 1.3.3. ## questions external authentication see dedicated [faq](security/authentication/external/faq.html) ## question listed search [oak dev list](http://jackrabbit.markmail.org/search/+list:org.apache.jackrabbit.oak-dev) [oak issue tracker](https://issues.apache.org/jira/browse/oak). still can't find answer ask [the list](participating.html). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/branching.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # branching following quick reminder branching stable release. based 1.8 branching, fix commands needed. details option please refer [official documentation](http://maven.apache.org/maven-release/maven-release-plugin/branch-mojo.html). ## 1. test command locally $ mvn release:branch -dbranchname=1.8 \ -dbranchbase=https://svn.apache.org/repos/asf/jackrabbit/oak/branches \ -dupdatebranchversions=true -dreleaseversion=1.8.0-snapshot \ -ddryrun=true prompted next trunk version. example: `1.10-snapshot`. check following files contains right versions pom.xml.branch # 1.8.0-snapshot pom.xml.next # 1.10-snapshot pom.xml.releasebackup # 1.8-snapshot ## 2. revert local changes bunch files locally committed git. clean situation clean everything $ git clean -f ## 3. actual branching re-execute first command **without** `-ddryrun=true` $ mvn release:branch -dbranchname=1.8 \ -dbranchbase=https://svn.apache.org/repos/asf/jackrabbit/oak/branches \ -dupdatebranchversions=true -dreleaseversion=1.8.0-snapshot \ checkout branch proceed release normal. ## 4. final checks leftovers `release:branch` leave behind `oak-doc`'s pom. manually update version referring new `oak-parent`. see [r1820738](http://svn.apache.org/r1820738) example. ## references - http://maven.apache.org/maven-release/maven-release-plugin/branch-mojo.html - http://maven.apache.org/maven-release/maven-release-plugin/examples/branch.html - http://jackrabbit.apache.org/jcr/creating-releases.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/constraints.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # constraints ## item names jcr specification already restricts go "local" part item name - see [jcr v2.0 specification, section 3.2](https://s.apache.org/jcr-2.0-spec/3_repository_model.html#3.2%20names). particular: - characters allowed xml forbidden names well; affects control characters plus unpaired surrogates; see [extensible markup language (xml) 1.0 (fifth edition), section 2.2](https://www.w3.org/tr/xml/#nt-char). - furthermore, names `.` `..` used. - finally, characters `/`, `:`, `[`, `]`, `|`, `*` forbidden. these, [jcr v2.0 specification, section 3.2.5.4](https://s.apache.org/jcr-2.0-spec/3_repository_model.html#3.2.5.4%20exposing%20non-jcr%20names) proposes mapping "private-use" code points. top that, oak implements several *additional* restrictions (as per [jcr v2.0 specification, section 3.2.4](https://s.apache.org/jcr-2.0-spec/3_repository_model.html#3.2.4%20naming%20restrictions)): - space character (u+0020) disallowed beginning end (local) name (see [jcr v2.0 specification, section 5.2.2.1](https://s.apache.org/jcr-2.0-spec/5_reading.html#5.2.2.1%20name%20patterns) motivation). - ascii whitespace characters (cr, lf, tab) always disallowed (before oak 1.10, disallowed, see [oak-4857](https://issues.apache.org/jira/browse/oak-4857)). finally, chosen persistence implementation might restrict node names even further. see [node name length limit](./differences.md#node-name-length-limit). namespace prefix `rep` (`internal`) valid uri therefore use qualified names expanded names ([jcr v2.0 specification, section 3.2.5](https://s.apache.org/jcr-2.0-spec/3_repository_model.html#3.2.5%20lexical%20form%20of%20jcr%20names)) addressing items namespace([oak-74](https://issues.apache.org/jira/browse/oak-74)). ## invalid java strings due way java represents characters strings, every string valid sequence unicode code points. *two* characters needed represent unicode "supplementary characters". "surrogate" characters appear well formed pair, java string serialized sequence unicode characters, byte sequence (using utf-8 character encoding). system behaviour strings currently undefined. means might get rejected, might get accepted information lost stored, might stored retrieved faithfully. see [oak-5505](https://issues.apache.org/jira/browse/oak-5506) fur information. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/migration.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # repository migration oak offers tools used migrate old, jackrabbit 2 repository also copy content oak instances. `oak-upgrade` swiss army knife copying content virtually repositories. hand, `splitblobstore` allows copy binaries gradually, one blob store another, without long repository downtime. ## offline migration using oak-upgrade ![oak-upgrade chart](img/migration-general.png) `oak-upgrade` module allows upgrade classic jackrabbit 2.0 repository oak node store also sidegrade one nodestore type another. besides number features useful everyday system maintenance: * copying selcted subtree one repository another, * precise control version histories migration, * migrating binaries one blobstore another. ### sidegrade `oak-upgrade` module creates executable jar file. invoked like this: java -jar oak-upgrade-*.jar [options] source destination `source` `destination` node store paths/uris. following node stores supported: * `segmentnodestore` - use path `repository` directory, * old `segmentnodestore` (oak < 1.6) - use `segment-old:` prefix path `repository` directory, * `documentnodestore` mongodb - `mongodb://host:port/database`, * `documentnodestore` rdb - `jdbc:...`. requires passing user password separate parameters. following parameters used jdbc node store: * source database: `--src-password=... --src-user=...` * desination database: `--user=... --password=...` examples: java -jar oak-upgrade-*.jar \ path/to/the/repository \ mongodb://localhost:27017/oak java -jar oak-upgrade-*.jar \ --user=sa --password=sa \ mongodb://localhost:27017/oak \ jdbc:h2:path/to/repo ### upgrade order upgrade jackrabbit 2 repository new node store, pass path `repository` directory `source` parameter. optionally, may also pass path `repository.xml` file separate parameter. examples: java -jar oak-upgrade-*.jar \ path/to/the/jr2/repository \ path/to/repository.xml \ path/to/the/new/repository java -jar oak-upgrade-*.jar \ path/to/the/jr2/repository \ mongodb://localhost:27017/oak ### migrating blob store default, `oak-upgrade` copies binary references, need reuse blob/data store new repository. however, also possible migrate binaries well using `--copy-binaries` parameter. following migration paths possible binaries. *internal* means binaries stored inside segment document node store: | | internal | fileblobstore | filedatastore | s3 | | :-----------: | :------: | :-----------: | :-----------: | :--------------------: | | internal | yes | yes | yes | yes | | fileblobstore | yes | yes | yes | yes | | filedatastore | yes | yes | yes | yes (not recommended) | | s3 | yes | yes | yes | yes | s3datastore take care migration automatically, need use oak-upgrade <br/> storage might simple cloned without using oak2oak following parameters used define source destination blob stores: | blob store type | source parameter | destination | | :-------------: | :----------------------------------------: | :--------------------------------: | | fileblobstore | `--src-fileblobstore=...` | `--fileblobstore=...` | | filedatastore | `--src-datastore=...` | `--datastore=...` | | s3 | `--src-s3config=... --src-s3datastore=...` | `--s3config=... --s3datastore=...` | use `--copy-binaries` parameter instruct `oak-upgrade` copy binaries. example: java -jar oak-upgrade-*.jar \ --copy-binaries \ --src-datastore=/old/repository/datastore \ --fileblobstore=/new/repository/datastore \ /old/repository \ /new/repository #### s3 configuration using s3datastore source destination binaries requires passing two arguments: `s3datastore` `s3config`. first one point datastore directory (eg. `crx-quickstart/repository/datastore`). second used define `org.apache.jackrabbit.oak.plugins.blob.datastore.s3datastore.cfg` configuration file path. file following format: accesskey=... secretkey=... s3bucket=... s3region=eu-west-1 s3endpoint=s3-eu-west-1.amazonaws.com connectiontimeout=120000 sockettimeout=120000 maxconnections=40 writethreads=30 maxerrorretry=10 region endpoints please visit [amazon documentation](http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region). alternativly `*.config` file format, described [apache sling website](https://sling.apache.org/documentation/bundles/configuration-installer-factory.html#configuration-files), used may convenient re-using existing osgi configuration files. ### migrating subtree ![--include-paths chart](img/migration-paths.png) possible define list content subtrees include exclude migration. default, whole repository gets copied. order copy subtree, use `--include-paths`. example, following command copy `/content/site` `/content/other_site` subtrees: java -jar oak-upgrade-*.jar \ --include-paths=/content/site,/content/other_site \ /old/repository \ /new/repository may also exclude specific paths copied. following command copy whole content without `/content/redundant_site`: java -jar oak-upgrade-*.jar \ --exclude-paths=/content/redundant_site \ /old/repository \ /new/repository default, source repository replaces destination repository (if there's one). instance, first example `/content/site` node already exists destination repository, it'll removed replaced source node. also possible merge content source repository `--merge-paths`: java -jar oak-upgrade-*.jar \ --include-paths=/content/site \ --merge-paths=/content/site \ /old/repository \ /new/repository please notice last example necessary narrow migration scope using `--include-paths` parameter. merge might fail `oakconstraint0030` message already existing node renamed source destination repository. observed nodes uuid property. merging node would copied destination repository already contains node different name uuid. ### version history copying ![version copy chart](img/migration-version.png) default, whole version storage migrated. includes referenced version histories (their versionable node still exists repository) orphaned ones (their versionable node longer exists). `oak-upgrade` allows skip orphaned version histories make migration faster destination repository smaller. also possible define maximum age version histories (both referenced orphaned) copied. two parameters: `--copy-orphaned-versions` `--copy-versions`. accepts boolean values `yyyy-mm-dd` date. examples: # copy referenced versions java -jar oak-upgrade-*.jar \ --copy-orphaned-versions=false \ /old/repository /new/repository # copy versions java -jar oak-upgrade-*.jar \ --copy-versions=false \ /old/repository /new/repository # copy referenced versions created 2010 # orphaned version created 2011 java -jar oak-upgrade-*.jar \ --copy-versions=2010-01-01 \ --copy-orphaned-versions=2011-01-01 \ /old/repository /new/repository ### incremental migration existing repository passed destination, diff source destination migrated. allows migrate content iterations. instance, following case possible: 1. migrate large repository week go-live 2. run migration every night (only recent changes copied) 3. run migration one final time go-live ### interrupting migration migration might stop time using `^c`. resume migration running command used start it. ### custom initializers commit hooks possible inject custom logic upgrade process, implementing [`repositoryinitializer`](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/spi/lifecycle/repositoryinitializer.html) [`commithook`](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/spi/commit/commithook.html). order that, create new maven project, appropriate implementation. create following file: src/main/resources/meta-inf/services/org.apache.jackrabbit.oak.spi.commit.commithook file contain one line - name class `coomithook` implementation. build project attach jar oak-upgrade class path: java -cp my-commit-hook.jar:oak-upgrade-*.jar org.apache.jackrabbit.oak.upgrade.cli.oakupgrade [normal oak-upgrade parameters] custom `repositoryinitializer` injected similar way. ### parameters full list supported parameters displayed using `--help` switch. ### checkpoints migration migrating old segmentmk repository (pre-oak 1.6) new segmentmk (oak >= 1.6), checkpoints migrated well. allows avoid reindexing oak run first time new repository. however, checkpoints migrated following cases: * custom include-, exclude- merge- paths specified * binaries copied references, source datastore specified two different checkpoints contains different binary path. second case oak-upgrade emits following warning breaks: checkpoints copied, external datastore specified. result full repository reindexing first start. use --skip-checkpoints force migration see https://jackrabbit.apache.org/oak/docs/migration.html#checkpoints_migration info. easiest way fix issue specifying source datastore command line options (eg. `--src-datastore` `--src-s3datastore`). warning may also ignored, case repository fully reindexed first startup. may long process, especially big instance. repository usable reindexing process done. use `--skip-checkpoints` option suppress warning. ## online blob migration splitblobstore oak offers one way migrate blob store, without turning instance (a restarts might required, migration process done normal repository operation). `splitblobstore` implementation, takes two blob stores: old (already existing) new (empty) one. configuring oak use it, write requests proxied new repository. read requests uses old new repository, depending blob id (`splitblobstore` saves new blob ids). besides new blob store implementation, process (controlled jmx) migrates binaries stores. binaries migrated, `splitblobstore` disabled well old store. #### requirements * osgi-based oak installation (eg. sling aem). #### enabling splitblobstore - external blob store case steps followed migration `fileblobstore`, `filedatastore` `s3datastore`. 1. add `split.blobstore=old` osgi property source blob store. 2. configure destination blob store add `split.blobstore=new` property osgi configuration. 3. create configuration `org.apache.jackrabbit.oak.spi.blob.osgi.splitblobstoreservice`. split.old.blobstore.type=internal # optional: repository.home=crx-quickstart/repository * directory used save `migrated_blobs.txt` file. 4. restart instance #### enabling splitblobstore - internal blob store case steps followed migration `mongoblobstore` blobs embedded `segmentnodestore`. 1. configure destination blob store add `split.blobstore=new` property osgi configuration. 2. create configuration `org.apache.jackrabbit.oak.spi.blob.osgi.splitblobstoreservice`. # use document segment, depending nodestore type: split.old.blobstore.type=segment # optional: repository.home=crx-quickstart/repository * directory used save migrated_blobs.txt file. 4. restart instance starting instance, `splitblobstoreservice` wait blob stores `split.blobstore` properties (the `old` `new`) available. bound `splitblobstore` registered osgi. hand, `nodestoreservice` ignore blob stores configured `split.blobstore` property wait `splitblobstore` available. point, new blobs saved new blob store. binaries old blob store available read. `split.blobstore` property support added `fileblobstore`, `abstractdatastoreservice` (handling jackrabbit data stores), `documentnodestoreservice` `segmentnodestoreservice`. #### migration 1. find `blobmigration` jmx bean felix console. 2. run `startblobmigration(false)` operation migration stopped using `stopblobmigration()` resumed `startblobmigration(true)`. current stats available via jmx well: * last processed path, * number migrated nodes. #### switching new blob store migration finished, possible completely switch new blob store: 1. remove configuration old blob store. 2. remove configuration `splitblobstoreservice` 3. remove `split.blobstore=new` osgi property new blob store, find `nodestoreservice`. 4. restart instance, jcr sessions bound old nodestate. migration complete! # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/testing.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> testing using different nodestore fixtures --------------- jackrabbit oak unit integration tests run using different fixtures represent configurations nodestore underlying storage content repository. ensures fixed environment tests run results consistent repeatable across different runs. default fixture used running `mvn clean install` `segment_tar` uses segmentnodestore local storage tar files. run tests using different fixture, use following command: `mvn clean install -dfixture=<fixture>`. also update `pom.xml` file use different fixture updating `fixture` property `oak-parent/pom.xml` file. want run using multiple fixtures, provide space separated list fixtures. possible fixtures used: - `segment_tar` - uses segmentnodestore local storage tar files. - `segment_aws` - uses segmentnodestore aws backend. - `segment_azure` - uses segmentnodestore azure backend. - `document_ns` - uses documentnodestore mongodb underlying storage engine. requires running instance mongodb. - `document_rdb` - uses documentnodestore relational databases postgresql, mysql underlying storage engine. - `document_mem` - uses documentnodestore in-memory backend. used running tests require persistence. - `memory_ns` - uses memorynodestore in-memory backend lightweight documentnodestore feature-rich. - `composite_segment` - uses compositenodestore allows combining multiple underlying segment stores single logical repository. useful scenarios different parts content tree different storage requirements. example, frequently accessed content stored high-performance segment store, less frequently accessed content stored cost-effective storage backend. - `composite_mem` - uses compositenodestore setup combining multiple in-memory node stores. - `cow_document` - uses cownodestore setup changes stored volatile storage. note [jenkins job](https://github.com/apache/jackrabbit-oak/blob/trunk/jenkinsfile) run part ci flow use `segment_tar` `document_ns` fixtures run tests. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/oakathons.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # oakathons oak developers hold fairly regular oak meetups called "oakathons." community-driven meetups open anyone working oak attend, either person remotely via videoconference. oakathons follow loose, community-driven schedules evolve real time address needs group. ## purpose oakathons serve three primary purposes hold equal importance: * conduct "state project" review, discuss major oak components strategic direction. * provide time space free-form, synchronized discussions issues important key project components well issues impacting whole project. * hack oak - trying experiments, implementing new features, fixing bugs, collaborating others efforts. prior oakathon attempt identify clear outcomes, technical accomplishments discussion results, intend accomplish. ## cadence oakathons take place roughly every three months - roughly every march, june, september, december. generally held adobe office basel, switzerland unless otherwise specified. oakathons take place four days, monday thursday, friday optional extra day. prior beginning oakathon, initial schedule announced oak-dev@. usually consists starting time first day. rest schedule evolves throughout week. ## planning planning oakathon follows: * pmc determines specific date next oakathon. done usually six twelve weeks advance selected date, allow opportunity remote attendees wish attend obtain travel budget make appropriate plans. * issue created oak issue tracker gather input feedback proposed discussion topics projects. * upcoming oakathon announced public mailing list (oak-dev@). * proposals discussion topics projects oakathon continue collected oakathon issue oakathon begins - sometimes even oakathon itself. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/clustering.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### clustering clustering currently supported mongodb rdbms storage subsystems. use clustering, simply connect multiple oak instances backend storage. mongodb rdbms storage subsystems internally use cluster mechanism. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/participating.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # participating ## mailing lists best place oak-related discussions [oak-dev@](mailto:oak-dev@jackrabbit.apache.org) mailing list. subscribe, send message [oak-dev-subscribe@](mailto:oak-dev-subscribe@jackrabbit.apache.org). details related various mailing list look http://jackrabbit.apache.org/mailing-lists.html. ## issue tracking use [oak issue tracker](https://issues.apache.org/jira/browse/oak) submit issues, comments patches. subscribe issue notifications, send message [oak-issues@](mailto:oak-issues-subscribe@jackrabbit.apache.org). - "trunk": done ticket, set "resolved" set "fix version" next unreleased version. workflow allow re-opening closed ticket, close tickets public release made change. happens, ticket always re-opened work happen. - maintenance branch (currently 1.22): re-use existing jira ticket add "fix version" (unless backport complex). - add "affects version" "fix version" applicable (but otherwise). - careful include sensitive information (be descriptions, attachments, log files). - feel free comment ticket worked on. eg mention work starts certain branch b, pr ready review, merged. make easier others follow. ## source code latest oak sources available [github](https://github.com/apache/jackrabbit-oak). subscribe commit notifications, send message [oak-commits@](mailto:oak-commits-subscribe@jackrabbit.apache.org). ### making changes generally follow [ctr](https://www.apache.org/foundation/glossary.html#committhenreview) policy. however individual committer pro-actively ask review patch oak-dev@ even call [rtc](https://www.apache.org/foundation/glossary.html#reviewthencommit). #### api changes use maven "baseline" plugin maintain semantic versioning information packages. asks version bump, make sure implications fully understood. asks *major* version bump, implies new version incompatible previous releases. happen rare circumstances; doubt, reviewed experienced committers. #### new dependencies introduction new dependencies discussed [oak-dev@](mailto:oak-dev@jackrabbit.apache.org) first; important license compatible apache's, stable follow principle [semantic versioning](https://semver.org/). #### backports special care taken backports maintenance branches, particular public api affected. back ports bear certain risk introducing regressions otherwise stable branches. back ported change carefully evaluated potential impact, risk possible mitigation. responsibility committer asses ask advice reviewing oak-dev@ uncertain. whether using rtc ctr committer. #### pull requests (prs) - minimize prs; modify whitespace/coding style except needed. makes much easier review, also minimizes confusion using "git blame". - structure tickets/prs things separated (that useful backports reverts). - test cases (when there's immediate fix, create ticket pr test mark "ignored", pointing actual issue). - prs contain multiple commits general "squashed merged". - new files added, make sure proper license (in doubt, run build "-prat"). - merging pr consider deleting branch unless kept. #### commits - always reference oak ticket commit/pr (this include jira id correct format, e.g. "oak-10881" instead "oak 10881"). - avoid committing unfinished stuff; particular release approaching (see [unreleased](https://issues.apache.org/jira/projects/oak?selecteditem=com.atlassian.jira.jira-projects-plugin%3arelease-page&status=unreleased)). - force-pushing problematic cause issues others working branch break review comments made individual lines. ### coding style - please avoid wildcard imports. - general consistent style code modified. - avoid tabs, non-ascii characters, trailing whitespace. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/roadmap.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> roadmap ======= release model ------------- following release oak 1.10 started make (even-numbered) stable releases directly [trunk](https://github.com/apache/jackrabbit-oak/tree/trunk/): * [download](https://jackrabbit.apache.org/jcr/downloads.html#latest) starting 1.50.0, require java 11. maintenance branches -------------------- currently support one maintenance branch: * [oak 1.22](https://github.com/apache/jackrabbit-oak/tree/1.22/) ([download](https://jackrabbit.apache.org/jcr/downloads.html#oak1.22)) - java 8 java 13 end life ----------- following branches reached "end life": * [oak 1.10](https://github.com/apache/jackrabbit-oak/tree/1.10/) * [oak 1.8](https://github.com/apache/jackrabbit-oak/tree/1.8/) * [oak 1.6](https://github.com/apache/jackrabbit-oak/tree/1.6/) * [oak 1.4](https://github.com/apache/jackrabbit-oak/tree/1.4/) * [oak 1.2](https://github.com/apache/jackrabbit-oak/tree/1.2/) * [oak 1.0](https://github.com/apache/jackrabbit-oak/tree/1.0/) history ------- ~~~ 2014-12 +---------------------------------------------------------------\ 1.0 2015-12 +------------------------------------------------------\ 1.2 | 1.0.25 2016-12 +---------------------------------------------\ 1.4 | 1.2.22 | 1.0.35 2017-12 +------------------------------------\ 1.6 | 1.4.18 | 1.2.27 | 1.0.39 min jdk 8 -> 2018-03 +---------------------------\ 1.8 | 1.6.1 | 1.4.21 | 1.2.29 | 1.0.42 2018-06 | | 1.8.4 | 1.6.12 | 1.4.22 | | 2018-09 | | 1.8.8 | 1.6.14 | 1.4.23 | 1.2.30 | 2018-12 | | 1.8.10 | 1.6.15 | | | 2019-03 +------------------\ 1.10 | 1.8.13 | 1.6.16 | 1.4.24 | 1.2.31 \ eol 2019-06 | | 1.10.3 | 1.8.14 | 1.6.17 | | 2019-09 | | 1.10.5 | 1.8.17 | | | 2019-12 | | 1.10.7 | 1.8.18 | 1.6.18 | | 2020-01 +--------\ 1.22 | 1.10.8 | 1.8.19 | 1.6.19 | 1.4.25 | jdk 14 comp -> 2020-03 +-+ 1.26 | 1.22.2 | 1.10.8 | 1.8.21 | 1.6.20 | 1.4.26 | 2020-06 +-+ 1.30 | 1.22.3 \ eol | 1.8.22 | | | 2020-09 +-+ 1.34 | 1.22.4 | 1.8.23 | | | 2020-12 +-+ 1.36 | 1.22.5 | 1.8.24 | | \ eol 2021-03 +-+ 1.38 | 1.22.6 | | | 2021-06 +-+ 1.40 | 1.22.7 | | 1.6.21 \ eol 2021-09 | | 1.22.8 | | 2021-12 | | 1.22.9 | 1.8.25 | 1.6.22 2022-03 +-+ 1.42 | 1.22.11 | 1.8.26 | 1.6.23 2022-06 | | \eol \ eol 2022-09 +-+ 1.44 | 1.22.12 2022-12 +-+ 1.46 | 1.22.13 min jdk 11 -> 2023-03 +-+ 1.50 | 1.22.14 2023-06 +-+ 1.52 | 1.22.15 guava shaded -> 2023-09 +-+ 1.56 | 1.22.17 2023-12 +-+ 1.60 | ~~~ comments left side refer backwards-incompatible changes, which, default, ported maintenance branches. "jdk 14 comp" refers issue [oak-7358](https://issues.apache.org/jira/browse/oak-7358), necessary keep compatiblity jdk 14. "guava shaded" refers issue [oak-10323](https://issues.apache.org/jira/browse/oak-10323), necessary remove api usages guava library (oak internally uses shaded copy guava, visible oak apis anymore). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/index.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> jackrabbit oak - next generation content repository ======================================================= jackrabbit oak effort implement scalable performant hierarchical content repository use foundation modern world-class web sites demanding content applications. oak effort part [apache jackrabbit project](http://jackrabbit.apache.org/). apache jackrabbit project [apache software foundation](http://www.apache.org/). oak ------- jackrabbit 2.x solid feature-rich content repository works well especially needs traditional web sites integrated content management applications. however, trends user expectations (especially personalized, interactive collaborative content), application architectures (distributed, loosely coupled, multi-platform solutions lots data) hardware design (horizontal rather vertical scaling) rendered original jackrabbit design decisions (which date back almost decade) obsolete easy way incrementally update design. jackrabbit oak aims implement scalable performant hierarchical content repository use foundation modern world-class web sites demanding content applications. repository implement standards like jcr, webdav cmis, easily accessible various platforms, especially javascript clients running modern browser environments. implementation provide out-of-the-box functionality typical nosql databases achieving comparable levels scalability performance. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/known_issues.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> known issues ============ known issues listed apache [jira](https://issues.apache.org/jira/browse/oak). changes respect jackrabbit-core collected [oak-14] (https://issues.apache.org/jira/browse/oak-14) sub-tasks. * workspace operations: * cross workspace operations implemented yet see [oak-118](https://issues.apache.org/jira/browse/oak-118) * workspace management (creating/deleting workspaces) implemented yet see [oak-118](https://issues.apache.org/jira/browse/oak-118) * observation queues handling * excessively large commit rate, observation queues fill prevented queue hits certain threshold and/or limit would result local events reported external event [oak-2683][oak-2683] * changing observation listener's filter: * prefiltering observation queues means observation listener's filter changed, new filter fully applied newly added changes observation queues. changes potentially still queue gone old prefilter new (post-)filter. [oak-5208] [oak-300]: https://issues.apache.org/jira/browse/oak-300 [oak-2683]: https://issues.apache.org/jira/browse/oak-2683 [oak-5208]: https://issues.apache.org/jira/browse/oak-5208 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/dos_and_donts.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # best practices using jackrabbit oak <!-- macro{toc} --> ## session management ### session refresh behavior oak based mvcc model session starts snapshot view repository. concurrent changes sessions *are visible* session gets refreshed. session refreshed either explicitly calling ``refresh()`` method implicitly direct-to-workspace methods auto-refresh mode. also observation event delivery causes session refreshed. default auto-refresh mode automatically refreshes sessions idle one second, also possible explicitly set auto-refresh parameters. typical approach would long-lived admin sessions set auto-refresh mode keep session always date latest changes repository. ### pattern: one session one request/operation one key patterns targeted oak web application serves http requests. recommended way handle cases use separate session http request, never refresh session. ### anti pattern: concurrent session access oak designed virtually lock free long sessions shared across threads. access session instance concurrently multiple threads. oak protect internal data structures becoming corrupted make guarantees beyond that. particular violating clients might suffer lock contentions deadlocks. oak detects concurrent write access session log warning. concurrent read access warning logged `debug` level enabled `org.apache.jackrabbit.oak.jcr.delegate.sessiondelegate`. case stack trace session involved also logged. efficiency reasons stack trace logged `debug` level enabled. ## content modelling ### large number direct child node oak scales large number direct child nodes node long *not* orderable. orderable child nodes oak keeps order internal property, lead performance degradation list grows large. scenarios oak provides ``oak:unstructured`` node type, equivalent ``nt:unstructured`` except orderable. ### large multi value property using nodes large multi value property would scale well. depending nodestore might hit size limit restriction also. e.g. documentmk mvp would stored backing document mongo 16mb limit. efficient alternatives large mvps include: * store list values binary property * use [propertysequence](https://jackrabbit.apache.org/api/trunk/org/apache/jackrabbit/commons/flat/propertysequence.html) available jackrabbit-commons (jcr-2688) ### inlining large binaries `blobstore` provide option inline small binary content part node property itself. example `filedatastore` supports `minrecordlength` property. set say 4096 binary size less 4kb would stored part node data blobstore. recommended set high value depending implementation might hit limit causing commit fail. e.g. segmentnodestore enforces limit 8k inlined binary value. would also lead repository growth default binaries stored blobstore deduplicated. ### creating files default node type provided jcr 1.0 model file structure using `nt:file` add `jcr:content` child type `nt:resource`, makes content referenceable. file need referenceable recommended use node type `oak:resource` instead add mixin type `mix:referenceble` upon demand (see [oak-4567](https://issues.apache.org/jira/browse/oak-4567)) ## hierarchy operations ### tree traversal explained [understanding node state model](https://jackrabbit.apache.org/oak/docs/architecture/nodestate.html), oak stores content tree hierarchy. considering that, traversing path access parent child nodes, even though equivalent operations, preferable use jcr node api instead session api. reason behind session api uses absolute path, get desired parent child node, ancestor nodes traversed reaching target node. traversal ancestor node includes building node state associating treepermission (check [permission evaluation detail](https://jackrabbit.apache.org/oak/docs/security/permission/evaluation.html)), needed using node api relative paths. ``` node c = session.getnode("/a/b/c"); node = null; // get child node = session.getnode("/a/b/c/d"); = c.getnode("d"); // preferred way fetch child node // get parent node c = session.getnode("/a/b/c"); c = d.getparent(); // preferred way fetch parent node ``` ## security - [best practices authorization](security/authorization/bestpractices.html) - [best practices external authentication](security/authentication/external/bestpractices.html) ## misc ### use thread.interrupt() `thread.interrupt()` severely impact even stop repository. reason oak internally uses various classes `nio` package implement `interruptiblechannel`, [asynchronously closed](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/channels/interruptiblechannel.html) receiving `interruptedexception` blocked io. see [oak-2609](https://issues.apache.org/jira/browse/oak-2609). ### avoid minimize conflicts reduce possiblity errors like `oakstate0001: unresolved conflicts ...`: 1. make sure always release session calling session.logout(). possible, avoid long-running sessions. required (e.g. observation) make sure always call session.refresh(false) applying changes session.refresh(true) saving changes. 2. enable debug level `org.apache.jackrabbit.oak.plugins.commit.mergingnodestatediff` `org.apache.jackrabbit.oak.plugins.commit.conflictvalidator` loggers want information circumstances conflict happened point time. 3. write conflict handler add configuring oak whiteboard instances. know (i.e. know resolve conflict one possible situations). default, [annotatingconflicthandler](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/commit/annotatingconflicthandler.html) instance discard changes commit fail. persisting changes fails conflict cannot lose them, refactor code retry called session.refresh(false). check source code [jcrlastmodifiedconflicthandler](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/commit/jcrlastmodifiedconflicthandler.html) example conflict handler. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/developing-with-git.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # developing git oak code base backed git. remote repository [asf gitbox](https://gitbox.apache.org/repos/asf/jackrabbit-oak.git) [github](https://github.com/apache/jackrabbit-oak). *committers* [write access gitbox](https://infra.apache.org/git-primer.html) requires apache ldap credentials via https basic authentication. write access github need link accounts via [gitbox account linking utility](https://gitbox.apache.org/setup/). github recommended work [ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh) instead https authentication. *non-committers* recommended use forked github repository create pr branches there. details <https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/use_getting_started.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # runnable jar oak comes [runnable jar](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-run/readme.md), contains everything need simple oak installation. # using oak project use oak project simply add dependency `org.apache.jackrabbit:oak-jcr:1.0.0` `javax.jcr:jcr:2.0`: <dependency> <groupid>org.apache.jackrabbit</groupid> <artifactid>oak-jcr</artifactid> <version>1.0.0</version> </dependency> <dependency> <groupid>javax.jcr</groupid> <artifactid>jcr</artifactid> <version>2.0</version> </dependency> oak simple mechanisms constructing configuring content repositories use embedded deployments test cases: * [repository construction](construct.html) * [configuring oak](osgi_config.html) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/jsop-diff.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> *note:* algorithms turns sufficient. edit script following case incomplete. given constructed empty tree = +/s:{} +/t:{} obtain = +/s/a:{} >/s:/t/s running algorithm result edit script which, applied s, create child node a. i.e. result >/s:/t/s * * * algorithm creating edit scripts (in jsop format) two trees. see [this github repository](https://github.com/mduerig/json-diff) proof concept implementation [the related discussion oak-dev@](http://markmail.org/message/lbc3rx2p3sssvqj5) // global variable holding jsop journal difftree returns. jsop = "" /* create jsop journal, applied tree transform tree t. */ difftrees(s, t) { // create location (trash) temporarily hold removed nodes. // necessary since (or child nodes thereof) might still // needed move operations occurring later differencing process. x = s.addnode(createuniquename) // main differencing process starts roots trees // progresses recursively level level. diffnodes(x, s, t) // remove trash location content jsop += "-" + x.path } /* recursively create jsop operations differences children trees t. tree x serves trash. */ diffnode(x, s, t) { deleted = s.childnames \ t.childnames // set difference added = t.childnames \ s.childnames // need take care deleted nodes first order avoid // name clashes adding new nodes later. (d : deleted) { = s.child(d) // deleted nodes moved trash. op = ">" + t.path + ":" + x.path + "/" + createuniquename jsop += op s.apply(op) // transform according single op } (a : added) { = t.child(a) // assume detect copied node know source node (iscopied(t)) { op = "*" + t.sourcenode.path + ":" + t.path } // assume detect moved node know source node else (ismoved(t)) { op = ">" + t.sourcenode.path + ":" + t.path } // added node else { op = "+" + t.path } jsop += op s.apply(op) // transform according single op } // assert s.childnames == t.childnames (c : t.childnames) { diffnode(x, s.child(c), t.child(c)) } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/downloads.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> downloads ========= latest oak sources available cloning [github](https://github.com/apache/jackrabbit-oak). see jackrabbit [downloads](http://jackrabbit.apache.org/downloads.html) page stable releases. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/release-schedule.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # releases ## schedule *aim* keeping frequency releases. however dates may slip according needs - trunk: every 8 weeks (~6 / year) - 1.22: every 13 weeks (~4 / year) ## strategies full discussion around topics see [oak-dev archives](https://lists.apache.org/thread.html/9a7c0e2fdfab5deb051fbd99add6c2b7109d750805b6182138eece55@%3coak-dev.jackrabbit.apache.org%3e). - trunk considered stable - releases trunk existing branches - previous release trunk automatically deprecated ## branching branching happen specific circumstances. as, limited to: - incompatible api changes - incompatible jvm changes - updates dependencies breaks backward compatibility short: probably always around non-backward-compatible changes anyhow cases branching automatic discussed pmcs best course actions. alternatives may different way implement something breaking. ## version numbers - released versions format `major.minor.patch` where, rule thumb increase major incompatible api changes minor new backwards-compatible functionality patch backwards-compatible bug fixes. - we'll keep even/odd schema - new official release always even: 1.12.0, 1.14.0, 1.16.0, ..., 1.124.0 - release always patch number (the last part) `.0`. ease osgi deployments. - diagnostic builds cut odd version `-rxxx` `1.15-r12345`. - case branching increased part always patch so: `1.16.0`, `1.16.1`, `1.16.2`, etc. - case branching diagnostic build follow current pattern: `1.16.5-r12345` # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/differences.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # differences jackrabbit 2 <!-- macro{toc} --> ## backward compatibility oak implements jcr api expect applications work box. however, oak code base rewrite scratch therefore differs jackrabbit 2 aspects. obscure parts jcr (yet) implemented. encounter problem running application oak, please cross check jackrabbit 2 reporting issue oak. ## reporting issues encounter problem functionality missing oak behave expected please check whether [known change behaviour](https://issues.apache.org/jira/browse/oak-14) [known issue](https://issues.apache.org/jira/browse/oak). doubt ask [oak dev list] (http://oak.markmail.org/). otherwise create [new issue](https://issues.apache.org/jira/browse/oak). ## notable changes section gives brief overview notable changes oak respect jackrabbit 2. changes generally caused overall design decisions carefully considering benefits versus potential backward compatibility issues. ### names unicode string values limitations described [constraints](./constraints.html). #### node name length limit document storage backend limit 150 utf-8 bytes length node names mongodb 4.0 earlier. starting oak 1.44 mongodb 4.2, limitation removed. limit still exists running oak document storage backend using rdbms. see also [oak-2644](https://issues.apache.org/jira/browse/oak-2644) [oak-9757](https://issues.apache.org/jira/browse/oak-9757). ### session state refresh behaviour jackrabbit 2 sessions always reflects latest state repository. oak session reflects stable view repository time session acquired ([mvcc model] (http://en.wikipedia.org/wiki/mvcc)). fundamental design aspect achieving distributed nature oak repository. rarely encountered side effect sessions expose [write skew](architecture/transactional-model.html). change cause subtle differences behavior two sessions perform modifications relying one session seeing session's changes. oak requires explicit calls `session.refresh()`in case. > *note*: ease migration oak, sessions idle one minute log warning > log file. furthermore sessions automatically synchronised reflect state > across accesses within single thread. is, older session see changes done > newer session given sessions accessed within thread. > > automatic session synchronisation transient feature probably removed > future versions oak. see [oak-803](https://issues.apache.org/jira/browse/oak-803) > details regarding session backwards compatibility > [oak-960](https://issues.apache.org/jira/browse/oak-960) regarding thread session > synchronisation. > > `sessionmbean` provides information session refreshed wheter > refresh happen next access. oak `item.refresh()` deprecated always cause `session.refresh()`. former call result warning written log order facilitate locating trouble spots. oak `item.save()` deprecated per default log warning fall back `session.save()`. behaviour tweaked `-ditem-save-does-session-save=false` case fall back `session#save()` happen `unsupportedrepositoryexception` thrown sub-tree rooted respective item contain transient changes. see [oak-993](https://issues.apache.org/jira/browse/oak-993) details. ### query oak index much content default jackrabbit 2. need create custom indexes necessary, much like traditional rdbmss. index specific query repository traversed. is, query still work probably slow. see [query overview page](query/query.html) create custom index. smaller bugfixes query parser might lead incompatibility. see [query overview page](query/query.html) details. oak, method `querymanager.createquery` return object type `queryobjectmodel`. ### observation * `event.getinfo()` contains primary mixin node types associated parent node event. key `jcr:primarytype` maps primary type key `jcr:mixintypes` maps array containing mixin types. * `event.getuserid()`, `event.getuserdata()`and `event.getdate()` available locally generated events (i.e. cluster node). help identifying potential trouble spots, calling methods without previous call `jackrabbitevent#isexternal()` write warning log file. * push notification mechanisms like jcr observation weight heavy distributed systems. therefore, application requirement actually "eventing problem" consider using different means like query custom indexes. [apache sling](http://sling.apache.org) identified classified common [usage patterns](https://cwiki.apache.org/confluence/display/sling/observation+usage+patterns) observation recommendations alternative solutions applicable. * event generation done looking difference two revisions persisted content trees. items present previous revision present current revision reported `event.node_added` `event.property_added`, respectively. items present previous revision present current revision reported `event.node_removed` `event.property_removed`, respectively. properties changed previous revision current revision reported `property_changed`. consequence operations cancelled others previous revision current revision reported. furthermore order events depends underlying implementation specified. particular interesting consequences: * touched properties: jackrabbit 2 used generate `property_changed` event touching property (i.e. setting property current value). oak keeps closer specification [omits events](https://issues.apache.org/jira/browse/oak-948). generally removing subtree replacing subtree generate event. * removing referenceable node adding result `property_changed` event `jcr:uuid`; applies built-in protected mandatory properties e.g. jcr:versionhistory corresponding versionable node removed versionable node name created. * limited support `event.node_moved`: + node added subsequently moved generate `event.node_moved` `event.node_added` final location. + node moved subsequently removed generate `event.node_moved` `event.node_removed` initial location. + node moved subsequently moved generate single `event.node_moved` reporting initial location `srcabspath` final location `destabspath`. + node whose parent moved moved subsequently reports initial location `srcabspath` instead location moved parent. + node moved subsequently parent moved report final location `destabspath` instead location parent moved. + removing node adding node name parent reported `node_moved` event caused `node.orderbefore()` parent node orderable sequence operations caused change order child nodes. + exact sequence `node.orderbefore()` reflected `node_moved` events: given two child nodes `a` `b`, ordering `a` `b` may reported ordering `b` `a`. * sequence differences oak generates observation events guaranteed contain states cluster local changes. guarantee hold cluster external changes. is, cancelling operations cluster external events might reported event though stem separate commits (`session.save()`). * unregistering observation listener blocks one second. pending `onevent()` call complete warning logged listener unregistered without waiting pending `onevent()` call complete. see [oak-1290](https://issues.apache.org/jira/browse/oak-1290) [jsr_333-74](https://java.net/jira/browse/jsr_333-74) information. * see [oak-1459](https://issues.apache.org/jira/browse/oak-1459) introduced differences events dispatch bulk operations (moving deleting sub-trees): <table> <tr> <th>operation</th> <th>jackrabbit 2</th> <th>oak</th> </tr> <tr> <td>add sub-tree</td> <td>node_added event every node sub-tree</td> <td>node_added event every node sub-tree</td> </tr> <tr> <td>remove sub-tree</td> <td>node_removed event every node sub-tree</td> <td>node_removed event root sub-tree only</td> </tr> <tr> <td>move sub-tree</td> <td>node_moved event, node_added event root sub-tree only, node_removed event every node sub-tree</td> <td>node_moved event, node_added event root sub-tree only, node_removed event root sub-tree only</td> </tr> </table> ### binary streams jackrabbit 2 binary values often (though always) stored spooled file local file system, methods like `value.getstream()` would thus backed `fileinputstream` instances. result `available()` method stream would typically return full count remaining bytes, regardless whether next `read()` call would block wait disk io. oak binaries typically stored external database (in case segmentnodestore) using custom data structure local file system. streams returned oak therefore custom `inputstream` subclasses implement `available()` method based whether next `read()` call return immediately needs block wait underlying io operations. difference may affect clients make incorrect assumption `available()` method always return number remaining bytes stream, return value zero end stream. neither assumption correctly based `inputstream` api contract, client code needs fixed avoid problems oak. ### locking oak support strict locking semantics jackrabbit 2.x. instead "fuzzy locking" approach used lock information stored normal content changes. `mix:lockable` node marked holding lock, code treats locked, regardless concurrent sessions might see different versions node see do. similarly lock token simply path locked node. fuzzy locking used relied tool synchronizing actions two clients expected access repository within seconds other. instead feature mostly useful higher level tool, example human author could use lock mark document locked hours days users able modify document. ### name siblings name siblings (sns) deprecated oak. figured actual benefit supporting name siblings mandated jcr dwarfed additional implementation complexity. instead ideas implement feature automatic [disambiguation node names](https://issues.apache.org/jira/browse/oak-129). meanwhile [basic support](https://issues.apache.org/jira/browse/oak-203) name siblings might cover cases. ### xml import import behavior [`import_uuid_create_new`](https://s.apache.org/jcr-2.0-javadoc/javax/jcr/importuuidbehavior.html#import_uuid_create_new) oak implemented slightly different compared jackrabbit. jackrabbit 2.x creates new uuid detects existing conflicting node uuid. oak always creates new uuid, even conflicting node. mainly two reasons done oak: * implementation oak closer jcr specification says: *incoming nodes assigned newly created identifiers upon addition workspace. result, identifier collisions never occur.* * oak uses mvcc model session operates snapshot repository. therefore difficult ensure new uuids case conflict. based snapshot view session, existing node conflicting uuid may visible commit. contrast jackrabbit 2 [expanded names][5] supported system view documents neither nodes properties ([oak-9586](https://issues.apache.org/jira/browse/oak-9586)). ### identifiers contrast jackrabbit 2.x, referenceable nodes oak uuid assigned. jackrabbit 2.x uuid visible content node referenceable exposes uuid `jcr:uuid` property. using `node.getidentifier()`, possible get uuid node. oak method return uuid node referenceable, otherwise identifier uuid nearest referenceable ancestor relative path node. manually adding property name `jcr:uuid` non referenceable node might unexpected effects oak maintains unique index `jcr:uuid` properties. namespace `jcr` reserved, strongly discouraged. ### namespaces jcr namespace support mostly compatible jackrabbit 2.x. however, oak support remapping existing namespace uri different prefix namespace registry. registered, repository wide namespace prefix namespace uri mapping cannot changed namespace registry anymore. mapping *can* changed per session level, remapping visible current session bound session lifetime. see [`session.setnamespaceprefix(string, string)`][0]. ### versioning * different identifier implementation oak, value `jcr:frozenuuid` property frozen node always uuid (see also section identifiers). property reflects value returned `node.getidentifier()` node copied version storage frozen node. also means node restored frozen node `jcr:uuid` actually referenceable. * oak currently implement activities (`option_activities_supported`), configurations baselines (`option_baselines_supported`). * oak currently implement various variants `versionmanager.merge` throws `unsupportedrepositoryoperationexception` method called. ### security * [authentication](security/authentication/differences.html) * [access control management](security/accesscontrol/differences.html) * [permission evaluation](security/permission/differences.html) * [privilege management](security/privilege/differences.html) * [principal management](security/principal/differences.html) * [user management](security/user/differences.html) ### workspaces oak repository one default workspace. ### mongodb document limit mongodb document size limit 16 mb. using document storage backend mongodb, adding node large string properties may fail combined size hits limit. consider storing large string values binary instead. oak put values blobstore, document contains much smaller reference binary value. limitation also hit node many orderable child nodes oak internally stores sequence child node names hidden property. see also [do's don'ts](dos_and_donts.html). ### session attributes oak exposes following attributes via [`session.getattribute(...)`][1] [`session.getattributenames()`][2] addition ones set [credentials][3]' attributes passed [repository.login(...)][4]. attribute name | attribute value type | description --- | --- | --- `oak.refresh-interval` | `long` | session refresh interval seconds. `oak.relaxed-locking` | `boolean` | whether relaxed locking behaviour enabled session. see [oak-1329](https://issues.apache.org/jira/browse/oak-1329). `oak.bound-principals` | `set<principal>` | principals associated jcr session. see [oak-9415](https://issues.apache.org/jira/browse/oak-9415) [0]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/session.html#setnamespaceprefix(java.lang.string,%20java.lang.string) [1]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/session.html#getattribute(java.lang.string) [2]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/session.html#getattributenames() [3]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/credentials.html [4]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/repository.html#login(javax.jcr.credentials,%20java.lang.string) [5]: https://s.apache.org/jcr-2.0-spec/3_repository_model.html#3.2.5.1%20expanded%20form # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/command_line.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## command line tools ### oak run tool supports maintenance operations backup compaction. documentation tool found https://github.com/apache/jackrabbit-oak/tree/trunk/oak-run http://jackrabbit.apache.org/oak/docs/query/pre-extract-text.html http://jackrabbit.apache.org/oak/docs/query/oak-run-indexing.html #### compatibility recommend use version `oak-run` one `oak-core` deployed system. #### backup back repository, use: java -mx4g -jar oak-run-*.jar backup <repository> <backup> using (default) tar storage, `<repository>` setting path directory contains segment (data*.tar) files. `<backup>` option target directory. #### checkpoint list checkpoints repository, use: java -mx4g -jar oak-run-*.jar checkpoints <repository> using (default) tar storage, `<repository>` setting path directory contains segment (data*.tar) files. #### compaction oak-run compact operation may used perform offline compaction: java -mx4g -jar oak-run-*.jar compact <repository> makes sense find remove old checkpoints, using `checkpoints` command described above. #### index management oak-run index operation used [manage indexes](./query/index-management.html). #### system properties supported oak-run performing operations segmentnodestore (eg. backup, checkpoints, compact), possible tweak various system properties get optimal performance. are: * `cache` - cache size segmentnodestore (default: `256`), * `compaction-progress-log` - many entries compacted log messages (default: `150000`), * `update.limit` - threshold flush temporary transaction disk (default: `10000`), * `tar.memorymapped` - allow use memory mapped files reduce memory usage (default: `false`), example: java -dtar.memorymapped=true -mx4g -jar oak-run-*.jar checkpoints <repository> #### analyzing thread dumps #### analyze thread dumps, filter idle threads, get profiling data, use following, directory contains thread dump files: java -jar oak-run-*.jar threaddump --filter --profile <directory> ### mongodb shell oak-mongo.js mongodb comes command line shell extended custom javascript. oak provides oak-mongo.js file mongomk specific extensions. first need download javascript file start mongodb shell file. wget https://s.apache.org/oak-mongo.js mongo --shell oak-mongo.js mongodb shell `oak` namespace [additional functions](oak-mongo-js/oak.html). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> authentication -------------------------------------------------------------------------------- ### jaas authentication login modules #### general concepts order understand login modules work oak help providing extension points need look jaas authentication works general discuss actual credential-verification performed. ##### brief recap jaas authentication following section copied adapted javadoc [javax.security.auth.spi.loginmodule]. authentication process within `loginmodule` proceeds two distinct phases, login commit phase: _phase 1: login_ 1. first phase, `loginmodule`'s `login` method gets invoked `logincontext`'s `login` method. 2. `login` method `loginmodule` performs actual authentication (prompt verify password example) saves authentication status private state information. 3. finished, `loginmodule`'s login method either returns `true` (if succeeded) `false` (if ignored), throws `loginexception` specify failure. failure case, `loginmodule` must retry authentication introduce delays. responsibility tasks belongs application. application attempts retry authentication, `loginmodule`'s `login` method called again. _phase 2: commit_ 1. second phase, `logincontext`'s overall authentication succeeded (the relevant required, requisite, sufficient optional loginmodules succeeded), `commit` method `loginmodule` gets invoked. 2. `commit` method `loginmodule` checks privately saved state see authentication succeeded. 3. overall `logincontext` authentication succeeded `loginmodule`'s authentication succeeded, `commit` method associates relevant principals (authenticated identities) credentials (authentication data cryptographic keys) subject located within `loginmodule`. 4. `logincontext`'s overall authentication failed (the relevant required, requisite, sufficient optional loginmodules succeed), `abort` method `loginmodule` gets invoked. case, `loginmodule` removes/destroys authentication state originally saved. ##### login module execution order simply put, login modules participate jaas authentication configured list flags indicating treat behaviors `login()` calls. jaas defines following module flags: (the following section copied adapted javadoc [javax.security.auth.login.configuration]) - **required**: loginmodule required succeed. succeeds fails, authentication still continues proceed loginmodule list. - **requisite**: loginmodule required succeed. succeeds, authentication continues loginmodule list. fails, control immediately returns application (authentication proceed loginmodule list). - **sufficient**: loginmodule required succeed. succeed, control immediately returns application (authentication proceed loginmodule list). fails, authentication continues loginmodule list. - **optional**: loginmodule required succeed. succeeds fails, authentication still continues proceed loginmodule list. overall authentication succeeds **only** **all** required requisite loginmodules succeed. sufficient loginmodule configured succeeds, required requisite loginmodules prior sufficient loginmodule need succeeded overall authentication succeed. required requisite loginmodules configured application, least one sufficient optional loginmodule must succeed. <a name="jcr_api"></a> ### jcr api within scope jcr `repository.login` used authenticate given user. method either takes `credentials` argument validation performed repository `null` case user pre-authenticated external system. furthermore jcr defines two types `credentials` implementations: - [javax.jcr.guestcredentials]: used obtain "guest", "public" "anonymous" session. - [javax.jcr.simplecredentials]: used login user userid password. following variants exist repository login itself: - `repository.login()`: equivalent passing `null` credentials default workspace name. - `repository.login(credentials credentials)`: login credentials default workspace. - `repository.login(string workspace)`: login `null` credentials workspace specified name. - `repository.login(credentials credentials, string workspacename)` - `jackrabbitrepository.login(credentials credentials, string workspacename, map<string, object> attributes)`: addition allows pass implementation specific session attributes. see [javax.jcr.repository] [org.apache.jackrabbit.api.jackrabbitrepository] details. addition jcr defines `session.impersonate(credentials)` impersonate another user - jsr 333 - clone existing session. <a name="oak_api"></a> ### oak api oak api contains following authentication related methods interfaces - [authinfo]: immutable object created upon successful login providing information authenticated `subject.` - `contentrepository.login(credentials, string)`: oak counterpart jcr login. - `contentsession.getauthinfo()`: exposes `authinfo` associated `contentsession`. <a name="api_extensions"></a> ### api extension #### oak authentication package `org.apache.jackrabbit.oak.spi.security.authentication` oak 1.0 defines extensions points allow customization authentication. - `logincontextprovider`: configurable provider `logincontext` (see below) - `logincontext`: interface version jaas logincontext aimed ease integration non-jaas components - `authentication`: aimed validate credentials first phase (jaas) login process. addition package contains various utilities base implementations. notably abstract login module implementation ([abstractloginmodule]) described default implementation authinfo interface ([authinfoimpl]). ##### abstract login module package also contains abstract `loginmodule` implementation ([abstractloginmodule]) providing common functionality. particular contains oak specific methods allow subclasses retrieve `securityprovider`, `root` accesss various security related interfaces (e.g. `principalmanager`). subclasses required implement following methods: - `getsupportedcredentials()`: return set supported credential classes. see also section [supported credentials](#supported_credentials) - `login()`: login method defined `loginmodule` - `commit()`: commit method defined `loginmodule` ###### example: extending abstractloginmodule public class testloginmodule extends abstractloginmodule { private credentials credentials; private string userid; private set<? extends principal> principals; @nonnull @override protected set<class> getsupportedcredentials() { return immutableset.of(testcredentials.class); } @override public boolean login() throws loginexception { credentials = getcredentials(); (validcredentials(credentials)) { this.credentials = credentials; this.userid = getuserid(credentials); this.principals = getprincipals(userid); return true; } return false; } @override public boolean commit() throws loginexception { (credentials != null) { (!subject.isreadonly()) { subject.getpubliccredentials().add(credentials); (principals != null) { subject.getprincipals().addall(principals); } authinfo authinfo = new authinfoimpl(userid, collections.empty_map, principals); setauthinfo(authinfo, subject); } return true; } return false; } } <a name="supported_credentials"></a> #### supported credentials since oak 1.5.1 extensions additionally contain dedicated interface eases support different `credentials` package space `org.apache.jackrabbit.oak.spi.security.authentication.credentials`: - [credentialssupport]: interface definition exposing set supported `credentials` classes common utility methods. - [simplecredentialssupport]: default implementation widely used `simplecredentials` <a name="default_implementation"></a> ### oak authentication implementation description various requirements covered oak default well characteristics corresponding implementations found section [authentication: implementation details](authentication/default.html). see section [differences](authentication/differences.html) comprehensive list differences wrt authentication jackrabbit 2.x oak. <a name="configuration"></a> ### configuration configuration authentication setup defined [authenticationconfiguration]. interface provides following method: - `getlogincontextprovider()`: provides login contexts desired authentication mechanism. #### jaas configuration utilities also exists utility class allows obtain different `javax.security.auth.login.configuration` common setup [11]: - `configurationutil#getdefaultconfiguration`: default oak configuration supporting uid/pw login configures `loginmoduleimpl` - `configurationutil#getjackrabbit2configuration`: backwards compatible configuration provides functionality covered jackrabbit-core defaultloginmodule, namely: - `guestloginmodule`: null login falls back anonymous - `tokenloginmodule`: covers token based authentication - `loginmoduleimpl`: covering regular uid/pw login <a name="pluggability"></a> ### pluggability default security setup present oak 1.0 able provide custom implementation various levels: 1. complete authentication setup changed plugging different `authenticationconfiguration` implementations. osgi-base setup achieved making configuration service. non-osgi-base setup custom configuration must exposed `securityprovider` implementation. 2. within default authentication setup replace extend set login modules individual settings. osgi-base setup achieved making modules accessible framework setting execution order accordingly. non-osgi setup specified [jaas config]. ##### examples ###### custom loginmodule non-osgi setup import javax.security.auth.login.appconfigurationentry import javax.security.auth.login.configuration; appconfigurationentry[] entries = new appconfigurationentry[]{new defaultentry(options)}; configuration c = new configuration() { @override public appconfigurationentry[] getappconfigurationentry(string applicationname) { map<string, ?> options = [....]; // choose control flag custom login module (example here: required) appconfigurationentry.loginmodulecontrolflag flag = loginmodulecontrolflag.sufficient; // create entry custom login module appconfigurationentry customentry = new appconfigurationentry("your.org.loginmoduleclassname", flag, options) // additionally use oak default login module appconfigurationentry defaultentry = new appconfigurationentry(("org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl", loginmodulecontrolflag.required, options) // define array entries correct order according needs return new appconfigurationentry[]{customentry, defaultentry}; } }; configuration.setconfiguration(c); <a name="further_reading"></a> ### reading - [authentication: implementation details](authentication/default.html) - [differences wrt jackrabbit 2.x](authentication/differences.html) - [token authentication token management](authentication/tokenmanagement.html) - [external authentication](authentication/externalloginmodule.html) - [user group synchronization](authentication/usersync.html) - [identity management](authentication/identitymanagement.html) - [ldap integration](authentication/ldap.html) - [pre-authentication](authentication/preauthentication.html) <!-- references --> [javax.security.auth.spi.loginmodule]: http://docs.oracle.com/javase/6/docs/api/javax/security/auth/spi/loginmodule.html [javax.security.auth.login.configuration]: http://docs.oracle.com/javase/6/docs/api/javax/security/auth/login/configuration.html [javax.jcr.guestcredentials]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/guestcredentials.html [javax.jcr.simplecredentials]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/simplecredentials.html [javax.jcr.repository]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/repository.html [org.apache.jackrabbit.api.jackrabbitrepository]: /oak/docs/apidocs/org/apache/jackrabbit/api/jackrabbitrepository.html [authinfoimpl]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/authinfoimpl.html [authinfo]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/authinfo.html [abstractloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/abstractloginmodule.html [authenticationconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/authenticationconfiguration.html [jaas config]: http://docs.oracle.com/javase/6/docs/technotes/guides/security/jaas/jaasrefguide.html [credentialssupport]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/credentials/credentialssupport.html [simplecredentialssupport]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/credentials/simplecredentialssupport.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/reports.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> security reports -------------------------------------------------------------------------------- ### security updates please note binary patches produced individual vulnerabilities. obtain fix particular vulnerability upgrade officially released version vulnerability fixed. #### list vulnerabilities note: vulnerability reports linked provide additional details including reference public announcement short description. | cve number | type | fix versions | |---------------|--------------------------------------------------|-----------------------------------------------------------------| |[cve-2020-1940]| sensitive information disclosure vulnerability | 1.24.0, 1.10.8, 1.8.20, 1.6.20, 1.4.26, patch 1.2 see [oak-8870] | | | | ### reporting vulnerabilities apache jackrabbit oak apache software foundation takes active stance eliminating security problems. strongly encourage everyone report vulnerabilities apache security mailing list _security(at)apache.org_, disclosing public forum. please note security mailing list used reporting undisclosed vulnerabilities managing process fixing them. cannot accept regular bug reports queries address. wish report bug undisclosed security vulnerability, please use [https://issues.apache.org/jira/projects/oak/issues](https://issues.apache.org/jira/projects/oak/issues). ###errors omissions please report errors omissions _security(at)apache.org_. <!-- hidden references --> [cve-2020-1940]: https://cve.mitre.org/cgi-bin/cvename.cgi?name=cve-2020-1940 [oak-8870]: https://issues.apache.org/jira/browse/oak-8870?focusedcommentid=17025637&page=com.atlassian.jira.plugin.system.issuetabpanels%3acomment-tabpanel#comment-17025637 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/overview.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> oak security layer -------------------------------------------------------------------------------- ### general * [introduction oak security](introduction.html) * [security reports](reports.html) ### authentication * [overview](authentication.html) * [differences wrt jackrabbit 2.x](authentication/differences.html) * [authentication : implementation details](authentication/default.html) * [pre-authentication](authentication/preauthentication.html) #### extensions * [token authentication token management](authentication/tokenmanagement.html) * [external authentication](authentication/externalloginmodule.html) * [user group synchronization](authentication/usersync.html) * [identity management](authentication/identitymanagement.html) * [ldap integration](authentication/ldap.html) * [best practices](authentication/external/bestpractices.html) ### authorization * [overview](authorization.html) * [access control management](accesscontrol.html) * [permission evaluation](permission.html) * [combining multiple authorization models](authorization/composite.html) * [best practices](authorization/bestpractices.html) #### access control management * [overview](accesscontrol.html) * [differences wrt jackrabbit 2.x](accesscontrol/differences.html) * [access control management : default implementation](accesscontrol/default.html) * [using api](accesscontrol/editing.html) #### permissions * [overview](permission.html) * [permissions vs privileges](permission/permissionsandprivileges.html) * [differences wrt jackrabbit 2.x](permission/differences.html) * [permissions : default implementation](permission/default.html) * [permission evaluation detail](permission/evaluation.html) #### privilege management * [overview](privilege.html) * [differences wrt jackrabbit 2.x](privilege/differences.html) * [privilege management : default implementation](privilege/default.html) * mapping privileges items api calls * [mapping privileges items](privilege/mappingtoitems.html) * [mapping api calls privileges](privilege/mappingtoprivileges.html) #### extensions * [restriction management](authorization/restriction.html) * [managing access closed user groups (cug)](authorization/cug.html) * [managing access principal](authorization/principalbased.html) ### principal management * [overview](principal.html) * [differences wrt jackrabbit 2.x](principal/differences.html) * [principal management : default implementation](principal.html#default_implementation) ### user management * [overview](user.html) * [differences wrt jackrabbit 2.x](user/differences.html) * [user management : default implementation](user/default.html) * [group membership](user/membership.html) * [authorizable actions](user/authorizableaction.html) * [group actions](user/groupaction.html) * [user actions](user/useraction.html) * [authorizable node name generation](user/authorizablenodename.html) * [password expiry force initial password change](user/expiry.html) * [password history](user/history.html) * [searching users groups](user/query.html) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authorization.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> authorization -------------------------------------------------------------------------------- ### general notes one main goals oak security, clearly separates access control management (such defined jcr jackrabbit api) internal permission evaluation. access control management defined optional feature added jcr 2.0, permission evaluation mandated since first version jcr even though remained implementation detail. documentation follows separations handles access control permission evaluation separately: - [access control management](accesscontrol.html) - [permissions](permission.html) despite fact distinction public facing access control management internal permission evaluation, two topics remain connected one another, given authorization model expected define handle consistently. therefore, main entry point authorization related operations single `authorizationconfiguration` (see section [configuration](#configuration) below). <a name="api_extensions"></a> ### api extensions api extensions provided oak covered following sections: - [access control management](accesscontrol.html#api_extensions) - [permissions](permission.html#api_extensions) - [restriction management](authorization/restriction.html#api_extensions) <a name="configuration"></a> ### configuration configuration authorization related parts handled [authorizationconfiguration]. class provides following methods: - `getaccesscontrolmanager`: get new ac manager instance (see [access control management](accesscontrol.html)). - `getpermissionprovider`: get new permission provider instance (see [permissions](permission.html)). - `getrestrictionprovider`: get new instance restriction provider (see [restriction management](authorization/restriction.html). #### configuration parameters supported configuration options default implementation described separately [access control management](accesscontrol/default.html#configuration) [permission evaluation](permission/default.html#configuration) . <a name="pluggability"></a> ### pluggability multiple options plugging authorization related custom implementations: #### aggregation different authorization models ##### since oak 1.4 oak 1.4 built-in `securityprovider` implementations allow aggregation multiple `authorizationconfiguration`s. behaviour `compositeauthorizationconfiguration` described corresponding [section](authorization/composite.html) (see also [oak-1268]). ##### previous versions previous versions oak aggregation multiple authorization models supported possible replace existing `authorizationconfiguration`. would completely replace default way handling authorization repository. osgi-base setup achieved making configuration implementation service takes precedence default. non-osgi-base setup custom configuration must exposed `securityprovider` implementation. #### extending restriction provider versions oak possible plug custom implementation(s) restriction management allows narrow effect permissions items matching given, defined behavior. details found section [restrictionmanagement](authorization/restriction.html#pluggability). <a name="best_practices"></a> ### best practices see section [best practices authorization](authorization/bestpractices.html). <a name="further_reading"></a> ### reading - [access control management](accesscontrol.html) - [permission evaluation](permission.html) - [restriction management](authorization/restriction.html) - [combining multiple authorization models](authorization/composite.html) <!-- hidden references --> [authorizationconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/authorizationconfiguration.html [oak-1268]: https://issues.apache.org/jira/browse/oak-1268 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/introduction.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> introduction oak security -------------------------------------------------------------------------------- ### general main entry point oak security `securityprovider`, registered oak repository upon creation. provider charge collecting exposing security related modules present given oak repository. security module comes one multiple `securityconfiguration`(s) registered provider, identified (and possibly aggregated) name. ### modules currently oak comes following built-in security modules, defined dedicated sub-interfaces [securityconfiguration]: - authentication - [authentication](authentication.html) s.str. - [token authentication token management](authentication/tokenmanagement.html) - authorization - [authorization](authorization.html) s.str. including [access control management](accesscontrol.html) [permission evaluation](permission.html) - [privilege management](privilege.html) - [principal management](principal.html) - [user management](user.html) <a name="api_extensions"></a> ### api extensions package `org.apache.jackrabbit.oak.spi.security` defines following interfaces base implementations: - [securityprovider]: main entry point oak security. - [opensecurityprovider]: rudimentary implementation test purpose minimal required setup. - [securityconfiguration]: base interface security related configurations. - [securityconfiguration.default]: default base implementation return default implementations initializers, context well empty parameters, hooks, validators etc. - [configurationbase]: abstract base implementation `securityconfiguration` interface. - [compositeconfiguration]: abstract base implementation composite configurations allow aggregation multiple modules. - [configurationparameters]: utility used pass around parameters options. - [context]: context information allows identify items defined maintained give security module implementation. - [registrationconstants]: utility used define well-known registration properties #### securityprovider `securityprovider` key oak security providing access individual security modules configurations associated. since version 1.3.7 oak provides two implementations `securityprovider` suited osgi non-osgi setup, respectively. ##### osgi setup since oak 1.3.7 core bundle install dedicated osgi component ([securityproviderregistration], labeled _"apache jackrabbit oak securityprovider"_), registers `securityprovider` mandatory references successfully resolved. new approach addresses issues present initial security provider implementation backported existing branches (see [oak-3201] [oak-3441]). optional configuration setting changed extended runtime, modules extensions considered required functional security setup, need listed _"required service pids"_ property. asserts reliable security setup proper initialization individual modules. see also sections [configuration](#configuration) [pluggability](#pluggability) below. ##### non-osgi setup non-osgi setup `securityprovider` (be default custom implementation) gets passed repository constructor. see section [pluggability](#pluggability) details wrt module initialization. following example extracted basic test setup: nodestore nodestore = ... configurationparameters params = ... // todo: provide config options // optional: set additional/custom implementations supported `securityconfiguration`s via params securityprovider sp = securityproviderbuilder.newbuilder().with(params).build(); repository repository = new jcr(nodestore).with(sp).createrepository(); #### securityconfiguration `securityconfiguration` interface defines functionality common security related modules. apart simple configuration parameters basic interface defines means properly initialize given security module provide oak internal mechanism asserts proper validation data consistency security relevant operations. please note, `repositoryinitializer` `workspaceinitializer` exposed base interface invoked upon repository|workspace initialization consequently impact [pluggability](#pluggability) given security module. examples includes modules require modifications global repository content node types, namespaces privileges require installation initial content index definitions proper execution. following subinterfaces `securityconfiguration` currently defined oak: - [authenticationconfiguration], **mandatory** - [authorizationconfiguration], **mandatory** - [principalconfiguration] - [privilegeconfiguration] - [tokenconfiguration] - [userconfiguration] ##### mandatory optional modules oak ships default implementation security configurations listed above, authentication authorization mandatory functional oak repository. compliant security requirements defined jsr 283 defines api login repository mandates minimal permission evaluation, implementation specific imposed optional access control management. minimal security setup may consequently reduced setup defined following imaginary, custom `securityprovider` (see also [opensecurityprovider]) public class mysecurityprovider implements securityprovider { [...] public <t> getconfiguration(class<t> configclass) { (authenticationconfiguration.class == configclass) { return (t) new myauthentication(); } else (authorizationconfiguration.class == configclass) { return (t) new myauthorization(); } else { throw new illegalargumentexception(); } } private final class myauthentication extends securityconfiguration.default implements authenticationconfiguration { [...] } private final class myauthorization extends securityconfiguration.default implements authorizationconfiguration { public accesscontrolmanager getaccesscontrolmanager(root root, namepathmapper namepathmapper) { throw new unsupportedoperationexception(); } public restrictionprovider getrestrictionprovider() { throw new unsupportedoperationexception(); } public permissionprovider getpermissionprovider(root root, string workspacename, set<principal> principals) { return mypermissionprovider.getinstance(principals); } } } security modules considered _optional_ oak repository point view. please note following dependencies special cases: 1. **authentication** mandatory expected bind set `principal`s `subject`. may happen repository login. 2. **permission evaluation** mandatory associated set `principal`s bound `subject` authentication step. 3. `principal`s represent link authentication authorization _may_ exposed principal management module described above. 4. **access control management** optional _usually_ goes along principal privilege management 5. **principal management** optional _not_ tied user management. however, supporting user management given repository setup _usually_ goes along exposing corresponding principals part principal management. 6. **user management** optional _may_ used credentials validation authentication step. present _usually_ used source principals exposed principal management. <a name="configuration"></a> ### configuration configuration parameters individual security modules described corresponding sections. following paragraphs describe configuration `securityprovider` `compositeconfiguration` osgi-base setup. #### securityproviderregistration | parameter | type | default | description | |--------------------------|----------|-----------|------------------------| | `required services` | string[] | see | service references mandatory securityprovider registration. | value individual configuration entries one of: - value `service.pid` registration property - value `oak.security.name` registration property default `securityproviderregistration` defines following mandatory services. long required references resolved `securityproviderregistration` register `securityprovider` service ultimately prevent premature initialization oak repository instance. - "org.apache.jackrabbit.oak.security.authorization.authorizationconfigurationimpl" - "org.apache.jackrabbit.oak.security.principal.principalconfigurationimpl", - "org.apache.jackrabbit.oak.security.authentication.token.tokenconfigurationimpl", - "org.apache.jackrabbit.oak.spi.security.user.action.defaultauthorizableactionprovider", - "org.apache.jackrabbit.oak.security.authorization.restriction.restrictionproviderimpl", - "org.apache.jackrabbit.oak.security.user.userauthenticationfactoryimpl" value configuration parameter needs adjusted additional module functionality considered required successful security setup. see section [pluggability](#pluggability) below. | parameter | type | default | description | |--------------------------|----------|-----------|------------------------| | `authorization composition type` | string (and\|or) | | composite authorization model uses flag determine type logic apply existing providers| given set permission providers, composite model aggregate results applying `and` logic (for example providers must allow specific privilege order granted), `or` (for example provider allow privilege). default `and` version used. #### compositeconfiguration | parameter | type | default | description | |-----------------|-------|----------------------------|------------------------| | `param_ranking` | int | `no_ranking` (`integer.min_value`) | optional configuration parameter define ranking within aggregation. | note: security modules allow multiple configurations may choose expose `param_ranking` option order allow explicit ordering individual implementations. ranking parameter omitted `compositeconfiguration` try use [service_ranking] define order. neither available (or set `no_ranking`) new entry appended list. <a name="pluggability"></a> ### pluggability default setup oak allows plug custom additional implementations various `securityconfiguration` described before. similarly would possible provide custom `securityprovider`. _please note_: recommended experts in-depth understanding oak internals understand security risk associated custom replacements extensions. #### securityprovider default `securityprovider` service could replaced deploying custom service osgi container. non-osgi setup jcr|oak repository needs created custom implementation: securityprovider sp = new mysecurityprovider(); repository repository = new jcr().with(sp).createrepository(); #### securityconfiguration default oak security setup distinguishes following types modules: - unary modules: `authenticationconfiguration`, `privilegeconfiguration`, `userconfiguration` - multiple modules: `authorizationconfiguration` (since oak 1.4), `principalconfiguration`, `tokenconfiguration` plugging implementation unary module replace default provided oak. far multiple modules concerned custom implementation plugged repository result creation [compositeconfiguration]. aggregated modules kept list insertion order defined `param_ranking` osgi service ranking case explicit ranking parameter missing. ##### osgi setup following steps required replace existing _unary_ security component add additional implementation (for _multiple_ configurations only): - deploy bundle containing custom implementation - configure component according needs - _multiple_ configurations make sure set desired ranking - find `securityproviderregistration` _("apache jackrabbit oak securityprovider")_ config enter pid custom security module additional value `requiredservicepids` property. - case replacement remove pid module replaced make sure implementation gets higher [service_ranking] deactivate obsolete module altogether. ##### non-osgi setup case individual security modules get "manually" bound/unbound `securityprovider` instance. provider might default custom implementation interface. security modules added provider remains implementation detail part `securityprovider` interface definition. ###### example extend default `securityprovider` custom `principalconfiguration`. see also _oak-exercise_ module example. myprincipalconfiguration pc = new myprincipalconfiguration(); configurationparameters params = configurationparameters.empty; pc.setparameters(params); securityprovider securityprovider = securityproviderbuilder.newbuilder().with(params).build(); compositeconfiguration<principalconfiguration> composite = (compositeconfiguration) securityprovider .getconfiguration(principalconfiguration.class); principalconfiguration defconfig = composite.getdefaultconfig(); pc.setsecurityprovider(securityprovider); pc.setrootprovider(((configurationbase) defconfig).getrootprovider()); pc.settreeprovider(((configurationbase) defconfig).gettreeprovider()); composite.addconfiguration(pc); composite.addconfiguration(defconfig); repository repo = new jcr(new oak()).with(securityprovider).createrepository(); ##### initialization securityconfiguration(s) given security modules mandates repository and|or workspace initialization steps e.g. node type registration persisting new index definitions, deployment module requires reload `securityprovider`. default osgi-based setup achieved adding pid corresponding service `required service pids` property mentioned ultimately forcing re-registration `securityprovider` service bundle context. setup scenarios would need recreate `contentrepository` object adjust repository 'initial' content _before_ binding new configuration `securityprovider` order avoid inconsistencies. <!-- references --> [securityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/securityprovider.html [opensecurityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/opensecurityprovider.html [securityconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/securityconfiguration.html [securityconfiguration.default]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/securityconfiguration.default.html [compositeconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/compositeconfiguration.html [configurationbase]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/configurationbase.html [configurationparameters]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/configurationparameters.html [context]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/context.html [registrationconstants]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/registrationconstants.html [authenticationconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/authenticationconfiguration.html [tokenconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/token/tokenconfiguration.html [authorizationconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/authorizationconfiguration.html [principalconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/principalconfiguration.html [privilegeconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/privilege/privilegeconfiguration.html [userconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/userconfiguration.html [oak-3201]: https://issues.apache.org/jira/browse/oak-3201 [oak-3441]: https://issues.apache.org/jira/browse/oak-3441 [securityproviderregistration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/internal/securityproviderregistration.html [service_ranking]: https://osgi.org/javadoc/r4v43/core/org/osgi/framework/constants.html#service_ranking # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/permission.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> permissions -------------------------------------------------------------------------------- <a name="jcr_api"></a> ### jcr jackrabbit api access control management optional feature, jcr implementation required support basic permission checking. basic requirements permission evalution defines follows > permissions encompass restrictions imposed access control restrictions > may effect upon content repository, either implementation > specific jcr-defined (access control management)., consists methods defined check permissions: - `session#haspermission(string abspath, string actions)` - `session#checkpermission(string abspath, string actions)` - `jackrabbitsession.haspermission(string abspath, @nonnull string... actions)` (since jackrabbit api 2.11.0 oak 1.4) actions expected comma separated list following string constants: - `session.action_read` - `session.action_add_node` - `session.action_remove` - `session.action_set_property` defined jackrabbit api following additional actions (since jackrabbit api 2.11.0): - `jackrabbitsession.action_add_property` - `jackrabbitsession.action_modify_property` - `jackrabbitsession.action_remove_property` - `jackrabbitsession.action_remove_node` - `jackrabbitsession.action_node_type_management` - `jackrabbitsession.action_versioning` - `jackrabbitsession.action_locking` - `jackrabbitsession.action_read_access_control` - `jackrabbitsession.action_modify_access_control` - `jackrabbitsession.action_user_management` **note**: oak 1.0 methods also handle names permissions defined oak (see `permissions#getstring(long permissions)`). see also section [permissions vs privileges](permission/permissionsandprivileges.html) comparison permission checks testing privileges `accesscontrolmanager`. ##### examples ###### test session permission add new node (jcr api) important: `abspath` refers node created node content = session.getnode("/content"); (session.haspermission("/content/newnode", session.action_add_node)) { content.addnode("newnode"); session.save(); } ###### test session permission perform version lock operations (jackrabbit api) node content = jrsession.getnode("/content"); (jrsession.haspermission("/content", jackrabbitsession.action_versioning, jackrabbitsession.action_locking))) { content.checkin(); session.save(); } ###### test session permission perform version operations (oak spi) node content = session.getnode("/content"); (session.haspermission("/content", permissions.getstring(permissions.version_management))) { content.checkin(); session.save(); } <a name="oak_permissions"></a> ### oak permissions #### general notes oak 1.0 permission evaluation intended completely separated access control management defined jcr jackrabbit api. evaluation enforcing permissions considered internal feature oak core module, package `org.apache.jackrabbit.oak.spi.security.authorization.permission` provides extensions points allow plug custom extensions implementations evaluation (see [api extensions](#api_extensions) below). #### built-in permissions oak 1.0 defines following [permissions]: ##### simple permissions read operations: - `read_node` - `read_property` - `read_access_control` write operations: - `add_node` - `remove_node` - `modify_child_node_collection` - `add_property` - `modify_property` - `remove_property` - `node_type_management` - `modify_access_control` - `lock_management` - `version_management` since oak 1.0: - `user_management`: : execute user management related tasks e.g. creating removing user/group, changing user password editing group membership. - `index_definition_management`: create, modify remove oak:index node subtree expected contain index definitions. repository operations: - `node_type_definition_management` - `namespace_management` - `privilege_management` - `workspace_management` used oak 1.0: - `lifecycle_management` - `retention_management` ##### aggregated permissions - `read`: aggregates `read_node` `read_property` - `remove`: aggregates `remove_node` `remove_property` - `set_property`: aggregates `add_property`, `modify_property` `remove_property` - `write`: aggregates `add_node`, `remove_node` `set_property` - `all`: aggregates permissions #### mapping jcr actions oak permissions see also section ['mapping privileges jcr/jackrabbit actions'](privilege/mappingprivilegestoactions.html). `action_read`: - access control content: `permissions.read_access_control` - regular nodes: `permissions.read_node` - regular properties: `permissions.read_property` - non-existing items: `permissions.read` `action_add_node`: - access control content: `permissions.modify_access_control` - regular nodes: `permissions.add_node` `action_remove`: - access control content: `permissions.modify_access_control` - regular nodes: `permissions.remove_node` - regular properties: `permissions.remove_property` - non-existing nodes: `permissions.remove` `action_set_property`: - access control content: `permissions.modify_access_control` - regular properties: `permissions.modify_property` - non-existing properties: `permissions.add_property` `action_add_property`: - access control content: `permissions.modify_access_control` - properties: `permissions.add_property` `action_modify_property`: - access control content: `permissions.modify_access_control` - properties: `permissions.modify_property` `action_remove_property`: - access control content: `permissions.modify_access_control` - properties: `permissions.remove_property` `action_remove_node`: - access control content: `permissions.modify_access_control` - regular nodes: `permissions.remove_node` `action_node_type_management` - `permissions.node_type_management` `action_versioning` - `permissions.version_management` `action_locking` - `permissions.lock_management` `action_read_access_control` - `permissions.read_access_control` `action_modify_access_control` - `permissions.modify_access_control` `action_user_management` - `permissions.user_management` #### permissions different operations ##### reading - **regular items**: due fine grained read permissions oak read access separately granted/denied nodes properties. granting `jcr:read` privilege result backwards compatible read access nodes properties, specifying `rep:readnodes` `rep:readproperties` privileges allows grant deny access nodes properties (see also [privilege management](privilege.html) changes privilege definitions). together restrictions new behavior allows individually grant/deny access properties match given name/path/nodetype (and possible extension even property value). - **version content**: accessibility version content located underneath `/jcr:system/jcr:versionstore` defined permissions present versionable node. case version information longer versionable node workspace original versionable path used evaluate effective permissions would apply item version restored. change covered [oak-444] addresses concerns summarized [jcr-2963]. - **access control content** read access access control content node storing policy ace information requires `read_access_control` permission. ##### writing - **property modification**: since oak former `set_property` permission split allow fined grained control writing jcr properties. particular oak clearly distinguishes creating new property exist before, modifying removing existing property. allow cover cases given `subject` allowed create content without ability modify/delete later on. - **node removal**: oak `node#remove()` requires sufficient permissions remove target node. see configuration parameters obtain backwards compatible behavior. - **rename**: due nature diff mechanism oak longer possible distinguish `jackrabbitnode#rename` move subsequent reordering. - **move**: current permission evaluation attempts provide best-effort handling achieve similar behavior present jackrabbit 2.x keeping track transient move operations. current implementation following limitations respect multiple move operations within given set transient operations: - move operations replace node moved away detected modification diff mechanism regular permission checks subtree performed. - moving ancestor node moved detect second move enforce regular permissions checks child moved first step. - **managing index definitions**: writing query index definitions requires specific index definition management enforce nodes named "oak:index" subtree defined them. note corresponding items protected jcr sense. consequently modification subtrees like e.g. changing primary type adding mixin types governed corresponding privileges. ##### writing protected items writing protected items requires specific permissions covered regular jcr write permissions. affects: - **set/modify primary mixin type**: `node_type_management` - **access control content**: `modify_access_control` - **locking**: `lock_management` - **versioning**: executing version related operations thus writing version store requires `version_management` permission instead regular jcr write permissions. similarly, content version store modified using dedicated version management api. - **user management**: default user management operations require specific user management related permission `user_management` granted editing subject. permission (including corresponding privilege) introduced oak 1.0. see configuration parameters obtain backwards compatible behavior. ##### observation permission evaluation also applied delivering observation events respecting effective permission setup `session` registered `eventlistener`. however, important understand events delivered modifications successfully persisted permissions evaluated persisted state. words: changing permission setup along modifications reported `eventlistener` result events included excluded according modified permissions. see [oak-4196] example. <a name="api_extensions"></a> ### api extensions due separation access control management permission evaluation, oak 1.0 comes dedicated api permission discovery used repository internal permission evaluation well permission discovery jcr level. package `org.apache.jackrabbit.oak.spi.security.authorization.permission` defines following interfaces classes: - [permissionprovider]: main entry point permission discovery evaluation. - [treepermission]: evaluates permissions given oak `tree`, exposed `permissionprovider`. - [repositorypermission]: evaluates repository level permissions, exposed `permissionprovider`. - [aggregatedpermissionprovider]: extension [permissionprovider] required implementations intended used aggregation multiple providers (since oak 1.4) - [permissions]: permissions defined, respected evaluated repository. - [permissionconstants]: constants used throughout permission evaluation. <a name="default_implementation"></a> ### characteristics permission evaluation explained permission evaluation completely separated access control management associated ccontent. evaluation done configured `permissionprovider`. jcr `session` (and oak `contentsession`) gets `permissionprovider` associated current repository revision session operating on. evaluated permissions caches shared different sessions even represent subject. #### differences wrt jackrabbit 2.x see corresponding [documentation](permission/differences.html). #### details default permission evaluation behavior default permission implementation described sections [permissions: default implementation](permission/default.html) [permission evaluation detail: default implementation](permission/evaluation.html). <a name="configuration"></a> ### configuration configuration permission evaluation implementation handled [authorizationconfiguration], used authorization related matters. class provides following two permission related methods: - `getpermissionprovider(root, string, set<principal>)`: get new `permissionprovider` instance. #### configuration parameters supported configuration options default implementation described corresponding [section](permission/default.html#configuration). <a name="further_reading"></a> ### reading - [permissions vs privileges](permission/permissionsandprivileges.html) - [differences wrt jackrabbit 2.x](permission/differences.html) - [permissions : default implementation](permission/default.html) - [permission evaluation detail](permission/evaluation.html) - [multiplexed permissionstore](permission/multiplexing.html) - [restriction management](authorization/restriction.html) <!-- references --> [permissions]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/permission/permissions.html [permissionprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/permission/permissionprovider.html [treepermission]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/permission/treepermission.html [repositorypermission]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/permission/repositorypermission.html [permissionconstants]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/permission/permissionconstants.html [authorizationconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/authorizationconfiguration.html [permissionhook]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authorization/permission/permissionhook.html [aggregatedpermissionprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/permission/aggregatedpermissionprovider.html [oak-444]: https://issues.apache.org/jira/browse/oak-444 [jcr-2963]: https://issues.apache.org/jira/browse/jcr-2963 [oak-1268]: https://issues.apache.org/jira/browse/oak-1268 [oak-4196]: https://issues.apache.org/jira/browse/oak-4196 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/principal.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> principal management -------------------------------------------------------------------------------- <a name="jcr_api"></a> ### jcr api jcr come dedicated principal management api. nevertheless, specification mentions `java.security.principal` key feature access control management leaves discovery principals implementation (see [section 16.5.7](https://s.apache.org/jcr-2.0-spec/16_access_control_management.html#16.5.7%20principal%20discovery)). therefore, api principal management defined part extensions present jackrabbit api. <a name="jackrabbit_api"></a> ### jackrabbit api jackrabbit api provides support principal management (i.e. discovery) missing jcr. relevant interfaces defined [org.apache.jackrabbit.api.security.principal](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/api/security/principal/package-summary.html) package space: - `principalmanager` - `principaliterator` - `jackrabbitprincipal` extends [principal](http://docs.oracle.com/javase/7/docs/api/java/security/principal.html) - `itembasedprincipal` - `groupprincipal` extends [principal](http://docs.oracle.com/javase/7/docs/api/java/security/principal.html) replacing removed `java.security.acl.group` (see [oak-7024](https://issues.apache.org/jira/browse/oak-7024)). #### differences wrt jackrabbit 2.x see corresponding [documentation](principal/differences.html). <a name="api_extensions"></a> ### api extensions - [principalprovider]: spi level access principals known repository also used default implementation `principalmanager` interface. interface replaces internal `principalprovider` interface present jackrabbit 2.x. note, principals different sources supported using [compositeprincipalprovider] similar implementation proxies different sources. - [compositeprincipalprovider]: implementation combines different principals different source providers. ##### special principals - [adminprincipal]: marker interface identify principal associated administrative user(s). - [everyoneprincipal]: built-in group principal implementation every valid principal member. - [systemprincipal]: built-in principal implementation mark system internal subjects. - [systemuserprincipal]: marker interface identify principals associated special system users. <a name="default_implementation"></a> ### oak principal management implementation default implementation principal management api basically corresponds default jackrabbit 2.x based user management implementation. note however, oak single principal provider exposed spi level (used multiple principal providers loginmodule configuration jackrabbit 2.x). see configuration section details. #### principalprovider implementations see section [implementations principalprovider interface](principal/principalprovider.html) details. <a name="configuration"></a> ### configuration [principalconfiguration] oak level entry point obtain new [principalmanager] [principalprovider] well principal related configuration options. default implementation [principalmanager] interface based oak api equally used privilege related tasks oak layer. contrast jackrabbit 2.x system may one single principal provider implementation configured. order combine principals different sources implementation properly handles different sources required; [compositeprincipalprovider] example combines multiple implementations. <a name="pluggability"></a> ### pluggability default security setup present oak 1.0 able provide custom `principalconfiguration` implementations automatically combine different principal provider implementations noted above. osgi setup following steps required order add custom principal provider implementation: - implement `principalprovider` interface - create `principalconfiguration` exposes custom provider - make configuration implementation osgi service make available oak repository. ##### examples ###### custom principalconfiguration @component() @service({principalconfiguration.class, securityconfiguration.class}) public class myprincipalconfiguration extends configurationbase implements principalconfiguration { public myprincipalconfiguration() { super(); } public myprincipalconfiguration(securityprovider securityprovider) { super(securityprovider, securityprovider.getparameters(name)); } @activate private void activate(map<string, object> properties) { setparameters(configurationparameters.of(properties)); } //---------------------------------------------< principalconfiguration >--- @nonnull @override public principalmanager getprincipalmanager(root root, namepathmapper namepathmapper) { principalprovider principalprovider = getprincipalprovider(root, namepathmapper); return new principalmanagerimpl(principalprovider); } @nonnull @override public principalprovider getprincipalprovider(root root, namepathmapper namepathmapper) { return new myprincipalprovider(root, namepathmapper); } //----------------------------------------------< securityconfiguration >--- @nonnull @override public string getname() { return name; } } ###### custom principalprovider final class myprincipalprovider implements principalprovider { myprincipalprovider(root root, namepathmapper namepathmapper) { ... } ... } <a name="further_reading"></a> ### reading - [differences wrt jackrabbit 2.x](principal/differences.html) - [implementations principalprovider interface](principal/principalprovider.html) - [caching results principal resolution](principal/cache.html) <!-- references --> [principalmanager]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/principal/principalmanager.html [principalprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/principalprovider.html [compositeprincipalprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/compositeprincipalprovider.html [adminprincipal]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/adminprincipal.html [everyoneprincipal]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/everyoneprincipal.html [systemprincipal]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/systemprincipal.html [systemuserprincipal]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/systemuserprincipal.html [principalconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/principalconfiguration.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/accesscontrol.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> access control management -------------------------------------------------------------------------------- ### general section covers fundamental concepts access control related apis provided jcr jackrabbit well extensions points defined oak. already familiar api looking examples may directly read [using access control management api](accesscontrol/editing.html) comprehensive list method calls well examples may used edit access control content repository. <a name="jcr_api"></a> ### jcr api access control management optional feature defined [jsr 283] consisting > privilege discovery: determining privileges user relation node. > > assigning access control policies: setting privileges user relation node using access control policies specific implementation. whether given implementation supports access control management defined `repository.option_access_control_supported` descriptor. since oak comes dedicated [privilege management](privilege.html) section focuses reading editing access control information. main interfaces defined jsr 283 are: - `accesscontrolmanager`: main entry point access control related operations - `accesscontrolpolicy`: marker interface kind policies defined implementation. - `accesscontrollist`: mutable policy may list entries. - `namedaccesscontrolpolicy`: opaque immutable policy jcr name. - `accesscontrolentry`: association privilege(s) given principal bound given node `accesscontrollist`. jcr access control management following characteristics: - *path-based*: policies bound nodes; given node may multiple policies; `null` path identifies repository level policies. - *transient*: access control related modifications always transient - *binding*: policies decoupled repository; order bind policy node apply modifications made existing policy `accesscontrolmanager.setpolicy` must called. - *effect*: policies bound given node take effect upon `session.save()`. access properties defined parent node. - *scope*: given policy may affect node bound may effect accessibility items elsewhere workspace. <a name="jackrabbit_api"></a> ### jackrabbit api jackrabbit api defines various access control related extensions jcr api order cover common needs example: - *deny access*: access control entries defined deny privileges given path (jcr defines allowing access control entries) - *restrictions*: limit effect given access control entry mean restrictions - *convenience*: - reordering access control entries access control list - retrieve path node given policy (or be) bound - *principal-based*: - principal-based access control management api (in contrast path-based default specified jsr 283) - privilege discovery set principals following interfaces extensions defined: - `jackrabbitaccesscontrolmanager` - `jackrabbitaccesscontrolpolicy` - `jackrabbitaccesscontrollist` - `jackrabbitaccesscontrolentry` - `principalaccesscontrollist` extends `jackrabbitaccesscontrollist` principal-based ac-setup (see [managing access principal](authorization/principalbased.html) details) - `principalaccesscontrollist.entry` extends `jackrabbitaccesscontrolentry` principal-based ac-setup (see [managing access principal](authorization/principalbased.html) details) - `principalsetpolicy` : grants set principals ability perform certain actions (see [managing access "closed user groups](authorization/cug.html) example) <a name="api_extensions"></a> ### api extensions oak defines following interfaces extending access control management api: - `policyowner`: interface improve pluggability access control management allows testing giving manager handles given policy. - `accesscontrolconstants`: constants related access control management. addition, provides access control related base classes `org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol` may used custom implementation: - `abstractaccesscontrollist`: abstract base implementation `jackrabbitaccesscontrollist` interface - `immutableacl`: immutable subclass `abstractaccesscontrollist` - `ace`: abstract subclass implements common methods mutable access control list. - `readpolicy`: implementation `namedaccesscontrolpolicy` used represent configured [readable paths](permission/default.html#configuration). #### restriction management oak 1.0 defines dedicated restriction management api. see [restriction management](authorization/restriction.html) details information regarding extensibility pluggability. <a name="utilities"></a> ### utilities jcr-commons module present jackrabbit provide access control related utilities simplify creation new policies entries example: - `accesscontrolutils.getaccesscontrollist(session, string)` - `accesscontrolutils.getaccesscontrollist(accesscontrolmanager, string)` - `accesscontrolutils.addaccesscontrolentry(session, string, principal, string[], boolean)` see [org.apache.jackrabbit.commons.jackrabbit.authorization.accesscontrolutils] complete list methods. ##### examples string path = node.getpath(); jackrabbitaccesscontrollist acl = accesscontrolutils.getaccesscontrollist(session, path); acl.addentry(principal, privileges, true); acmgr.setpolicy(path, acl); session.save(); <a name="default_implementation"></a> ### characteristics default implementation behavior default access control implementation described sections [access control management: default implementation](accesscontrol/default.html) [restriction management](authorization/restriction.html). <a name="configuration"></a> ### configuration configuration access control management implementation handled within [authorizationconfiguration], used authorization related matters. class provides following two access control related methods: - `getaccesscontrolmanager`: get new ac manager instance. - `getrestrictionprovider`: get new instance restriction provider. #### configuration parameters supported configuration options default implementation described corresponding [section](accesscontrol/default.html#configuration). <a name="further_reading"></a> ### reading - [differences wrt jackrabbit 2.x](accesscontrol/differences.html) - [access control management: default implementation](accesscontrol/default.html) - [using access control management api](accesscontrol/editing.html) - [restriction management](authorization/restriction.html) <!-- hidden references --> [jsr 283]: https://s.apache.org/jcr-2.0-spec/16_access_control_management.html [authorizationconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/authorizationconfiguration.html [org.apache.jackrabbit.commons.jackrabbit.authorization.accesscontrolutils]: http://svn.apache.org/repos/asf/jackrabbit/trunk/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/jackrabbit/authorization/accesscontrolutils.java [oak-1268]: https://issues.apache.org/jira/browse/oak-1268 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> user management -------------------------------------------------------------------------------- <a name="jcr_api"></a> ### jcr api jcr come dedicated user management api. method related ultimately used user management tasks `session.getuserid()`. therefore api user group management defined part extensions present jackrabbit api. <a name="jackrabbit_api"></a> ### jackrabbit api jackrabbit api provides user management related extensions missing jcr. relevant interfaces defined `org.apache.jackrabbit.api.security.user' package space: - `usermanager` - `authorizable` - `user` - `group` - `impersonation` - `querybuilder` - `query` <a name="api_extensions"></a> ### api extensions oak project introduces following user management related public interfaces classes: - `authorizabletype`: ease handling different authorizable types. - `authorizableaction` `authorizableactionprovider`: see [authorizable actions](user/authorizableaction.html) details. - `authorizablenodename`: see section [authorizable node name generation](user/authorizablenodename.html). - `groupaction` (via `authorizableactionprovider`): see [group actions](user/groupaction.html) details. - `userauthenticationfactory`: see sections [pluggability](user/default.html#pluggability) [user authentication](authentication/default.html#user_authentication) additional details. - `dynamicmembershipservice` `dynamicmembershipprovider` reflect dynamic group membership. new interfaces allow extend default behavior limited _everyone_ described [built-in users special groups](user/default.html). see [user group synchronization : dynamic membership](authentication/external/dynamic.html) example. <a name="utilities"></a> ### utilities `org.apache.jackrabbit.oak.spi.security.user.*` - `userconstants` : constants (note: oak names/paths) - `useridcredentials` : simple credentials implementation might used `user.getcredentials' without exposing pw information. `org.apache.jackrabbit.oak.spi.security.user.util.*` - `passwordutil` : utilities password generation. utility corresponds internal jackrabbit utility. oak also supports password-based key derivation function 2 (pbkdf2) function password generation. - `userutil` : utilities related general user management tasks. <a name="default_implementation"></a> ### oak user management implementation behavior default user management implementation described section [user management: default implementation](user/default.html). <a name="configuration"></a> ### configuration oak user management comes dedicated entry point called [userconfiguration]. class responsible passing configuration options implementation provides following two methods: - `getusermanager(root, namepathmapper)`: get new `usermanager` instance - `getuserprincipalprovider(root, namepathmapper)`: optional method allows optimized principal look-up user/group accounts (since oak 1.3.4). #### configuration parameters supported configuration options default implementation described corresponding [section](user/default.html#configuration). <a name="pluggability"></a> ### pluggability default security setup present oak 1.0 able default user management implementation replaced follows: complete user management implementation changed plugging different `userconfiguration` implementations. osgi-base setup achieved making configuration service must take precedence default. non-osgi-base setup custom configuration must exposed `securityprovider` implementation. alternatively default user management implementation extended adjusted using various means. see corresponding [section](user/default.html#pluggability) details. <a name="further_reading"></a> ### reading - [differences wrt jackrabbit 2.x](user/differences.html) - [user management : default implementation](user/default.html) - [group membership](user/membership.html) - [authorizable actions](user/authorizableaction.html) - [authorizable node name](user/authorizablenodename.html) - [password expiry force initial password change](user/expiry.html) - [password history](user/history.html) - [searching users groups](user/query.html) <!-- hidden references --> [userconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/userconfiguration.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/privilege.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> privilege management -------------------------------------------------------------------------------- <a name="jcr_api"></a> ### jcr api jsr 283 api contains following privilege related interfaces methods: - `privilege`: exposes name characteristics given privilege provides constants privilege names defined jcr. - `accesscontrolmanager.getsupportedprivileges(string)` (see also `privilegemanager.getregisteredprivileges()`) - `accesscontrolmanager.privilegefromname(string)` equivalent `privilegemanager.getprivilege(string)` <a name="jackrabbit_api"></a> ### jackrabbit api privilege management outside scope provided jcr therefore provided extensions defined jackrabbit api. consists single interface: - [privilegemanager]: privilege discovery registration new custom privileges. - `getregisteredprivileges()` - `getprivilege(string)` - `registerprivilege(string, boolean, string[]) - [privilegecollection]: wraps around set privileges allowing testing one multiple privilege names part given set without manually resolve aggregation. since oak 1.42.0. additional details see [oak-9494](https://issues.apache.org/jira/browse/oak-9494) well `jackrabbitaccesscontrolmanager.getprivilegecollection(string)` `jackrabbitaccesscontrolmanager.getprivilegecollection(string,set)`. ##### examples ###### access privilegemanager jcr privilegemanager privilegemanager = session.getworkspace().getprivilegemanager(); ###### access privilegemanager oak root root = contentsession.getlatestroot(); privilegeconfiguration config = securityprovider.getconfiguration(privilegeconfiguration.class); privilegemanager privilegemanage = config.getprivilegemanager(root, namepathmapper)); ###### register custom privilege privilegemanager privilegemanager = session.getworkspace().getprivilegemanager(); string privilegename = ... boolean isabstract = ... string[] declaredaggregatenames = ... // note: workspace operation require session#save() privilegemanager.registerprivilege(privilegename, isabstract, declaredaggregatenames); <a name="api_extensions"></a> ### api extensions - [privilegeconfiguration] : oak level entry point retrieve `privilegemanager` privilege related configuration options. - [privilegeconstants] : constants related privilege management oak names built-in privileges. - [privilegebitsprovider] : internal provider read `privilegebits` repository content map names internal representation (and vice versa). - [privilegebits]: internal representation jcr privileges. <a name="utilities"></a> ### utilities jcr-commons module present jackrabbit provide privilege related utility methods: - `accesscontrolutils` - `privilegesfromnames(session session, string... privilegenames)` - `privilegesfromnames(accesscontrolmanager accesscontrolmanager, string... privilegenames)` <a name="default_implementation"></a> ### oak privilege management implementation behavior default privilege management implementation described section [privilege management: default implementation](privilege/default.html). <a name="configuration"></a> ### configuration [privilegeconfiguration] oak level entry point obtain new `privilegemanager` well privilege related configuration options. default implementation `privilegemanager` interface based oak api equally used privilege related tasks oak layer. <a name="pluggability"></a> ### pluggability _please note:_ theory possible replace default privilege management implementation oak, recommended depth knowledge understanding jackrabbit/oak internals familiar security risk associated it. so, likely require re-write default access control permission evaluation. <a name="further_reading"></a> ### reading - [differences wrt jackrabbit 2.x](privilege/differences.html) - [privilege management : default implementation](privilege/default.html) - mapping privileges items api calls - [mapping privileges items](privilege/mappingtoitems.html) - [mapping api calls privileges](privilege/mappingtoprivileges.html) - mapping jcr/jackrabbit actions - [mapping privileges jcr/jackrabbit actions](privilege/mappingprivilegestoactions.html) - [mapping jcr actions oak permissions](permission.html#mapping-of-jcr-actions-to-oak-permissions) <!-- references --> [privilegeconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/privilege/privilegeconfiguration.html [privilegeconstants]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/privilege/privilegeconstants.html [privilegebitsprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/privilege/privilegebitsprovider.html [privilegebits]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/privilege/privilegebits.html [privilegemanager]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/authorization/privilegemanager.java [privilegecollection]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/authorization/privilegecollection.java # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/principal/principalprovider.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> implementations principalprovider interface -------------------------------------------------------------------------------- oak contains default following implementations `principalprovider` interface: ### [principalproviderimpl] default implementation `principalprovider`, makes use fact `authorizable`s defined jackrabbit user management api always paired `principal`. implementation tied particular user management implementation need rewritten security setup would configured different implementation `userconfiguration`. ### [userprincipalprovider] introduction optional `userconfiguration.getuserprincipalprovider` extension (since oak 1.3.4) allows optimized variant default principal provider, reading principal information user group accounts using generic user management api. _note:_ every single user/group exposes `principal` instance call `authorizable.getprincipal()` extension allows provider based implementation details user management implementation associated with, offering ability optimize principal lookup associated overhead terms user/group object creation. implementation located along user management implementation present oak provider implementation considered part user management api implementation. another benefit optimized implementation ability specifically cache results principal resolution order improve login performance. see section [caching results principal resolution](cache.html) details. ### [compositeprincipalprovider] implementation simple wrapper implementation combines different principals different source providers. used `compositeprincipalconfiguration` held default `securityprovider` collect configured/plugged principal configurations i.e. various implementations principal management. custom `principalprovider` implementations may used combine principals different source i.e. detaching principal management user management, principals backed existing user/group account. ### [externalgroupprincipalprovider] implementation `principalprovider` interface exposes _external_ principals type `java.security.acl.group`. _external_ refers fact principals defined managed external identity provider contrast default implementation represents principals native repository. implies principals known exposed provider implementation expect principals backed authorizable group. retrieved using jackrabbit principal management api user management calls. performance reasons `externalgroupprincipalprovider` lookup principals idp relies data persisted inside repository names external principals synchronized based configurable expiration time. see section [user group synchronization : default implementation](../authentication/external/defaultusersync.html) additional details. since oak 1.5.3 <!-- references --> [principalproviderimpl]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-core/src/main/java/org/apache/jackrabbit/oak/security/principal/principalproviderimpl.java [compositeprincipalprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/compositeprincipalprovider.html [userprincipalprovider]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/userprincipalprovider.java [externalgroupprincipalprovider]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-auth-external/src/main/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/principal/externalgroupprincipalprovider.java # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/principal/cache.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> caching results principal resolution -------------------------------------------------------------------------------- ### general since oak 1.3.4 `userprincipalprovider` optionally allows temporary caching principal resolution mainly optimize login performance (oak-3003). cache contains result group principal resolution performed `principalprovider.getprincipals(string userid)`and `principalprovider.getgroupmembership(principal)` read cache upon subsequent calls configured expiration time. ### configuration administrator may enable group principal caching via _org.apache.jackrabbit.oak.security.user.userconfigurationimpl_ osgi configuration. default caching disabled. following configuration option supported: - cache expiration (`cacheexpiration`): specifying long greater 0 enables caching. note: important configured expiration time balances login performance cache invalidation reflect changes made group membership. application makes use cache, must able live shot term diverging principal resolution user management upon repository login. expected cache used scenarios subsequent repository login calls (or even should) result creation `javax.security.auth.subject` equal principal set irrespective group membership changes. see section invalidation details. ### works #### caching principal names feature enabled, evaluating `userprincipalprovider.getprincipals(string userid)` `principalprovider.getgroupmembership(principal)` well corresponding calls `principalmanager` trigger group principal names remembered cache following conditions met: - valid expiration time configured (i.e. > 0), - `principalprovider` obtained system session (see below), - tree hold cache belongs user (i.e. tree primary type `rep:user` (i.e. caches created groups) cache consists tree named `rep:cache` built-in node type `rep:cache`, defines mandatory, protected `rep:expiration` property may additional protected, residual properties. subsequent calls read names group principals cache cache expires. expired default resolution performed order update cache. ##### limitation system calls creation maintenance caches well shortcut upon reading limited system internal sessions security reasons: cache must always filled comprehensive list group principals (as required upon login) must subsequent call never expose principal information might accessible non-cache scenario access principals protected regular permission evalution. <a name="validation"></a> ##### validation cache system maintained, protected repository content created updated implementation. attempt manipulate caches using jcr oak api calls fail. also cache created updated using internal system subject. also validation always enforce irrespective whether caching feature enabled not, prevent unintended manipulation. constraints consistency cache structure asserted dedicated `cachevalidator`. corresponding errors type `constraint` following codes: | code | message | |-------------------|----------------------------------------------------------| | 0034 | attempt create change system maintained cache. | note however, cache tree might removed session sufficient privileges remove it. ##### cache invalidation caches hold different user trees get invalidated expiration time reached. explicit, forced invalidation group membership reflected user management implementation changed. consequently, system sessions might read principal information cache (if enabled) provided set principals (as stored cache) might diverged group membership stored repository time cache expires. applications rely principal resolution _always_ sync revision associated system session perform repository login, must enable cache. similarly, applications due design extremely high turnover wrt group membership might able profit cache expected way. #### interaction user management cache created maintained `principalprovider` implementation exposed optional `userconfiguration.getuserprincipalprovider` call therefore effect results provided principal management api. regular jackrabbit user management api calls affected cache vice versa; i.e. changes made using user management api immediate effect cache trigger invalidation. words user management api calls always read revision content repository associated give jcr `session` (and oak `contentsession`). true principal management api calls non-system sessions. see introduction section invalidation expected behavior system sessions. ##### xml import users imported via jcr xml import, protected cache structure ignored (i.e. imported). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/principal/differences.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### principal management : differences wrt jackrabbit 2.x #### replacement jackrabbit internals oak 1.0 following interfaces class internal jackrabbit made part public api exposed oak: - [org.apache.jackrabbit.oak.spi.security.principal.principalprovider]: corresponds o.a.j.core.security.principal.principalprovider - [org.apache.jackrabbit.oak.spi.security.principal.adminprincipal]: corresponds o.a.j.core.security.principal.adminprincipal - [org.apache.jackrabbit.oak.spi.security.principal.everyoneprincipal]: corresponds o.a.j.core.security.principal.everyoneprincipal - [org.apache.jackrabbit.oak.spi.security.principal.systemprincipal]: corresponds o.a.j.core.security.systemprincipal #### combining principals different sources contrast jackrabbit 2.x oak deals single `principalprovider`. order combine principals different sources implementation properly handles different sources required; [compositeprincipalprovider] example combines multiple implementations. see section [pluggability](../principal.html#pluggability) example. <!-- references --> [org.apache.jackrabbit.oak.spi.security.principal.principalprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/principalprovider.html [compositeprincipalprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/compositeprincipalprovider.html [org.apache.jackrabbit.oak.spi.security.principal.adminprincipal]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/adminprincipal.html [org.apache.jackrabbit.oak.spi.security.principal.everyoneprincipal]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/everyoneprincipal.html [org.apache.jackrabbit.oak.spi.security.principal.systemprincipal]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/systemprincipal.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/privilege/default.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> privilege management : default implementation -------------------------------------------------------------------------------- ### general notes oak built-in custom privileges stored repository underneath `/jcr:system/rep:privileges`. similar repository level date (node types, namespaces versions) location shared workspaces present repository. nodes properties storing privilege definitions protected node type definition cannot modified using regular jcr write methods. addition specific `validator` `commithook` implementations assert consistency privilege store. built-in privileges installed using dedicated implementation `repositoryinitializer`. ### differences wrt jackrabbit 2.x comprehensive list changes compared jackrabbit 2.x found corresponding [documentation](differences.html). ### built-in privileges - privileges defined jsr 283 jcr:read (note: aggregate since oak 1.0) jcr:modifyproperties (note: aggregate since oak 1.0) jcr:addchildnodes jcr:removenode jcr:removechildnodes jcr:readaccesscontrol jcr:modifyaccesscontrol jcr:lockmanagement jcr:versionmanagement jcr:nodetypemanagement jcr:retentionmanagement (note: retention management implemented oak 1.0) jcr:lifecyclemanagement (note: lifecycle management implemented oak 1.0) jcr:write jcr:all - privileges defined jsr 333 jcr:workspacemanagement (note: wsp management yet implemented) jcr:nodetypedefinitionmanagement jcr:namespacemanagement - privileges defined jackrabbit 2.x rep:write rep:privilegemanagement - new privileges defined oak 1.0: rep:usermanagement rep:readnodes rep:readproperties rep:addproperties rep:alterproperties rep:removeproperties rep:indexdefinitionmanagement please note following differences respect jackrabbit 2.x definitions: - `jcr:read` aggregation `rep:readnodes` `rep:readproperties` - `jcr:modifyproperties` aggregation `rep:addproperties`, `rep:alterproperties` `rep:removeproperties` #### new privileges new privileges introduced oak 1.0 following effect: - `rep:usermanagement`: privilege required order write items define user group specific content. - `rep:readnodes`: privilege used allow/deny read access nodes (aggregate `jcr:read`) - `rep:readproperties`: privilege used allow/deny read access properties (aggregate `jcr:read`) - `rep:addproperties`: privilege required order create new properties (aggreate `jcr:modifyproperties`) - `rep:alterproperties`: privilege required order change existing properties (aggreate `jcr:modifyproperties`) - `rep:removeproperties`: privilege required order remove existing properties (aggreate `jcr:modifyproperties`) - `rep:indexdefinitionmanagement`: privilege required create, modify deleate index definitions. #### mapping privileges items api calls overview built-in privileges map api calls individual items found ['mapping privileges items'](mappingtoitems.html) ['mapping api calls privileges'](mappingtoprivileges.html). see also ['mapping privileges jcr/jackrabbit actions'](mappingprivilegestoactions.html) ['mapping jcr actions oak permissions'](../permission.html#mapping-of-jcr-actions-to-oak-permissions) <a name="representation"></a> ### representation repository oak 1.0 privilege definitions stored repository underneath `/jcr:system/rep:privileges`. following privilege related built-in node types added oak 1.0 order represent built-in custom privilege definitions. [rep:privileges] + * (rep:privilege) = rep:privilege protected abort - rep:next (long) protected multiple mandatory [rep:privilege] - rep:isabstract (boolean) protected - rep:aggregates (name) protected multiple - rep:bits (long) protected multiple mandatory note protection status child items defined node type definitions prevent modification privilege definitions using regular jcr write operations. <a name="validation"></a> ### validation consistency content structure asserted dedicated `privilegevalidator`. corresponding errors type `constraint` following codes: | code | message | |-------------------|----------------------------------------------------------| | 0041 | modification existing privilege definition x | | 0042 | un-register privilege x | | 0043 | next bits updated | | 0044 | privilege store initialized | | 0045 | modification existing privilege definition x | | 0046 | modification existing privilege definition x | | 0047 | invalid declared aggregate name x | | 0048 | privilegebits missing | | 0049 | privilegebits already used | | 0050 | singular aggregation equivalent existing privilege.| | 0051 | declared aggregate x registered privilege | | 0052 | detected circular aggregation | | 0053 | custom aggregate privilege x already covered. | <a name="configuration"></a> ### configuration implementation specific configuration options associated privilege management implementation. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/privilege/mappingtoprivileges.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### privilege management : mapping api calls privileges following table allows identify api calls require type privilege(s) #### transient operations ##### read | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `session.itemexists` | `jcr:read` | | `session.getitem` | `jcr:read` | | `session.nodeexists` | `rep:readnodes` | | `session.nodeexists` | `rep:readnodes` | | `session.getnode` | `rep:readnodes` | | `session.getrootnode` | `rep:readnodes` | | `session.getnodebyuuid` | `jcr:read` | | `session.getnodebyidentifier` | `jcr:read` | | `session.getnode` | `rep:readnodes` | | `session.propertyexists` | `rep:readproperties` | | `session.getproperty` | `rep:readproperties` | | `item.getparent` | `rep:readnodes` parent | | `item.getancestor` | `rep:readnodes` ancestor | | `node.hasnode` | `rep:readnodes` | | `node.hasnodes` | `rep:readnodes` | | `node.getnode` | `rep:readnodes` | | `node.getnodes` | `rep:readnodes` | | `node.hasproperty` | `rep:readproperties` | | `node.hasproperties` | `rep:readproperties` | | `node.getproperty` | `rep:readproperties` | | `node.getproperties` | `rep:readproperties` | | `node.getuuid` | `rep:readproperties` | | `node.getidentifier` | `rep:readproperties` | | `node.getreferences` | `rep:readproperties` | | `node.getweakreferences` | `rep:readproperties` | | `node.getprimaryitem` | `jcr:read` | | `node.getprimarynodetype` | `rep:readproperties` jcr:primarytype | | `node.getmixinnodetypes` | `rep:readproperties` jcr:mixintypes | | `property.getvalue` | `rep:readproperties` | | `property.getvalues` | `rep:readproperties` | | `property.get*` | `rep:readproperties` | | `property.getnode` | `rep:readproperties`, `rep:readnodes` ref-target | | `session.exportsystemview` | `jcr:read` | | `session.exportdocumentview` | `jcr:read` | ##### writing properties | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `node.setproperty` (new) | `rep:addproperties` | | `node.setproperty` (existing) | `rep:alterproperties` | | `property.setvalue` | `rep:alterproperties` | | `property.remove` | `rep:removeproperties` | | `node.setproperty(string, null)` | `rep:removeproperties` | | `jackrabbitsession.removeitem` (item property) | `rep:removeproperties` | ##### writing nodes | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `node.addnode(string)` | `jcr:addchildnodes` (on parent) | | `node.remove` | `jcr:removechildnodes` (on parent), `jcr:removenode` | | `jackrabbitsession.removeitem` (if item node) | `jcr:removechildnodes` (on parent), `jcr:removenode` | | `node.addnode(string, string)` | `jcr:addchildnodes` (on parent), `jcr:nodetypemanagement` | | `node.setprimarytype` | `jcr:nodetypemanagement` | | `node.addmixin` | `jcr:nodetypemanagement` | | `node.removemixin` | `jcr:nodetypemanagement` | | `node.orderbefore` | `jcr:addchildnodes` `jcr:removechildnodes` (on parent) | ##### writing index definition covered regular jcr api write operations target items require dedicated privilege despite fact item definitions protected (see oak jira corresponding discussions). items located within path contains `oak:index` considered part special index definition. | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `node.addnode(string, string)` | `rep:indexdefinitionmanagement`| | `node.addnode(string)` | `rep:indexdefinitionmanagement`| | `node.orderbefore` | `rep:indexdefinitionmanagement`| | `node.setproperty` | `rep:indexdefinitionmanagement`| | `property.setvalue` | `rep:indexdefinitionmanagement`| | `item.remove` (i.e. node property) | `rep:indexdefinitionmanagement`| | `jackrabbitsession.removeitem` | `rep:indexdefinitionmanagement`| ##### move import | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `session.move` | privileges node move would removed created using regular api calls (items subtree checked) | | `session.importxml` | privileges items would created using regular api calls | ##### access control management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `accesscontrolmanager.getapplicablepolicies` | `jcr:readaccesscontrol` | | `accesscontrolmanager.getpolicies` | `jcr:readaccesscontrol` | | `accesscontrolmanager.geteffectivepolicies` | `jcr:readaccesscontrol` | | `accesscontrolmanager.setpolicy` | `jcr:modifyaccesscontrol` | | `accesscontrolmanager.removepolicy` | `jcr:modifyaccesscontrol` | | `privilegemanager.registerprivilege` | `rep:privilegemanagent` 'null' path | ##### user management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `usermanager.getauthorizable` | `jcr:read` | | `usermanager.findauthorizable` | `jcr:read` | | `usermanager.createuser` | `rep:usermanagement` | | `usermanager.createsystemuser` | `rep:usermanagement` | | `usermanager.creategroup` | `rep:usermanagement` | | `user.isdisabled` | `jcr:read` | | `user.getdisabledreason` | `jcr:read` | | `user.disable` | `rep:usermanagement` | | `user.changepassword` | `rep:usermanagement` | | `user.getcredentials` | `jcr:read` | | `user.getimpersonation` | `jcr:read` | | `impersonation.getimpersonators` | `jcr:read` | | `impersonation.allows` | `jcr:read` | | `impersonation.grantimpersonation` | `rep:usermanagement` | | `impersonation.revokeimpersonation` | `rep:usermanagement` | | `group.getdeclaredmembers` | `jcr:read` | | `group.getmembers` | `jcr:read` | | `group.isdeclaredmember` | `jcr:read` | | `group.ismember` | `jcr:read` | | `group.addmember` | `rep:usermanagement` | | `group.removemember` | `rep:usermanagement` | | `authorizable.getid` | `jcr:read` | | `authorizable.getprincipal` | `jcr:read` | | `authorizable.getpath` | `jcr:read` | | `authorizable.declaredmemberof` | `jcr:read` (on groups listing user/group member) | | `authorizable.memberof` | `jcr:read` (on groups listing user/group member) | | `authorizable.remove` | `rep:usermanagement` | | `authorizable.getpropertynames` | `jcr:read` `rep:readproperties` (no relpath) | | `authorizable.hasproperty` | `jcr:read` `rep:readproperties` (no relpath) | | `authorizable.getproperty` | `jcr:read` `rep:readproperties` (no relpath) | | | `authorizable.setproperty` (no relpath) | `rep:addproperties` and/or `rep:alterproperties` | | `authorizable.setproperty` (with relpath | `rep:addproperties` and/or `rep:alterproperties`, `jcr:addchildnodes` | | `authorizable.removeproperty` | `rep:removeproperties` | ##### lifecycle management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `node.followlifecycletransition` | `jcr:lifecyclemanagement` | ##### retention management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `retentionmanager.getholds` | `jcr:read` | | `retentionmanager.getretentionpolicy` | `jcr:read` | | `retentionmanager.addhold` | `jcr:retentionmanagement` | | `retentionmanager.removehold` | `jcr:retentionmanagement` | | `retentionmanager.setretentionpolicy` | `jcr:retentionmanagement` | | `retentionmanager.removeretentionpolicy` | `jcr:retentionmanagement` | #### workspace operations ##### move, copy import | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `workspace.move` | privileges node move would removed created using regular api calls (items subtree checked) | | `workspace.copy` | privileges items would created using regular api calls | | `workspace.importxml` | privileges items would created using regular api calls | ##### version management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `versionmanager.ischeckedout` | `rep:readnodes` versionable node `rep:readproperties` property `jcr:ischeckedout` | | `versionmanager.getversionhistory` | `rep:readnodes` versionable node `rep:readproperties` property `jcr:versionhistory` | | `versionmanager.getbaseversion` | `rep:readnodes` versionable node `rep:readproperties` property `jcr:baseversion` | | `versionmanager.checkin` | `jcr:versionmanagement` versionable node | | `versionmanager.checkout` | `jcr:versionmanagement` versionable node | | `versionmanager.checkpoint` | `jcr:versionmanagement` versionable node | | `versionmanager.restore` | _todo_ | | `versionmanager.restorebylabel` | _todo_ | | `versionmanager.merge` | _todo_ | | `versionmanager.cancelmerge` | _todo_ | | `versionmanager.donemerge` | _todo_ | | `versionmanager.createconfiguration` | _todo_ | | `versionmanager.setactivity` | _todo_ | | `versionmanager.createactivity` | _todo_ | | `versionmanager.removeactivity` | _todo_ | | `versionhistory.*` (read) | `rep:readnodes` versionable node | | `versionhistory.removeversion` | `jcr:versionmanagement` versionable node | | `version.*` (read) | `rep:readnodes` versionable node | note: since oak 1.0 read/write access version storage defined accessibility versionable node _not_ version store items. ##### lock management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `lockmanager.getlock` = `node.getlock` | `jcr:read` | | `lockmanager.islocked` = `node.islocked` | `jcr:read` | | `lockmanager.holdslock` = `node.holdslock` | `jcr:read` | | `lockmanager.lock` = `node.lock` | `jcr:lockmanagement` | | `lockmanager.unlock` = `node.unlock` | `jcr:lockmanagement` | #### repository operations note: privileges repository operations need granted|denied _null_ path. ##### namespace management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `namespaceregistry.getprefix` | `jcr:read` | | `namespaceregistry.getprefixes` | `jcr:read` | | `namespaceregistry.geturi` | `jcr:read` | | `namespaceregistry.geturis` | `jcr:read` | | `namespaceregistry.registernamespace` | `jcr:namespacemanagement` | | `namespaceregistry.unregisternamespace` | `jcr:namespacemanagement` | ##### nodetype management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `nodetypemanager.hasnodetype` | `jcr:read` | | `nodetypemanager.getnodetype` | `jcr:read` | | `nodetypemanager.getallnodetypes` | `jcr:read` | | `nodetypemanager.getprimarynodetypes` | `jcr:read` | | `nodetypemanager.getmixinnodetypes` | `jcr:read` | | `nodetypemanager.createnodetypetemplate` | na | | `nodetypemanager.createnodedefinitiontemplate` | na | | `nodetypemanager.createpropertydefinitiontemplate` | na | | `nodetypemanager.registernodetype` | `jcr:nodetypedefinitionmanagement` | | `nodetypemanager.registernodetypes` | `jcr:nodetypedefinitionmanagement` | | `nodetypemanager.unregisternodetype` | `jcr:nodetypedefinitionmanagement` | | `nodetypemanager.unregisternodetypes` | `jcr:nodetypedefinitionmanagement` | ##### privilege management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `privilegemanager.getregisteredprivileges` | `jcr:read` | | `privilegemanager.getprivilege` | `jcr:read` | | `privilegemanager.registerprivilege` | `rep:privilegemanagement` | ##### workspace management | api call | privilege(s) | |----------------------------------------------|--------------------------------| | `workspace.createworkspace` | `jcr:workspacemanagement` | | `workspace.deleteworkspace` | `jcr:workspacemanagement` | # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/privilege/mappingtoitems.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### privilege management : mapping privileges items following table allows identify items affected invididual built privileges. note: term _regular_ used contrast _protected_ items written using special api calls thus mandate special privileges maintained system cannot modified api consumer. #### read | privilege | affected items | |-----------------------|-------------------------------------------------------| | rep:readnodes | nodes except access control content | | rep:readproperties | properties except access control content | | jcr:readaccesscontrol | items defining access control content (see below) | #### writing properties | privilege | affected items | |-----------------------|-------------------------------------------------------| | rep:addproperties | creation new regular properties | | rep:alterproperties | changing existing regular properties | | rep:removeproperties | removing existing regular properties | #### writing nodes | privilege | affected items | |-----------------------|-------------------------------------------------------| | jcr:addchildnodes | granted parent create new regular child nodes | | jcr:removechildnodes | granted parent remove regular child nodes | | rep:removenode | required granted regular nodes removal | | jcr:nodetypemanagement| explicitly setting modifying node type information regular (non-protected) node; affected properties `jcr:primarytype`, `jcr:mixintypes` | #### access control management | privilege | affected items | |-------------------------|-----------------------------------------------------| | jcr:readaccesscontrol | items defining access control content [1] | | jcr:modifyaccesscontrol | items defining access control content [1] | | rep:privilegemanagement | implementation specific; oak everything `/jcr:system/rep:privileges` | #### session workspace operations | privilege | affected items | |-------------------------|-----------------------------------------------------| | jcr:versionmanagement | items defining version content [2] | | jcr:lockmanagement | properties `jcr:lockisdeep`, `jcr:lockowner` | | jcr:lifecyclemanagement | `jcr:lifecyclepolicy`, `jcr:currentlifecyclestate` | | jcr:retentionmanagement | implementation specific, jackrabbit 2.x following properties: `rep:hold`, `rep:retentionpolicy`, oak: na | | rep:usermanagement | items defining user/group content [3] | | rep:indexdefinitionmanagement | implementation specific; oak trees starting `oak:index` node | #### repository operations | privilege | affected items | |-------------------------|-----------------------------------------------------| | jcr:namespacemanagement | implementation specific; oak everything `/jcr:system/rep:namespaces` | | jcr:nodetypedefinitionmanagement | implementation specific; oak everything `/jcr:system/jcr:nodetypes` | | rep:privilegemanagement | implementation specific; oak everything `/jcr:system/rep:privileges` | | jcr:workspacemanagement | na | #### annotations [1] oak reading/writing nodes following node types provided implementations present: `rep:policy`, `rep:acl`, `rep:ace`, `rep:grantace`, `rep:denyace`, `rep:restrictions` `rep:cugpolicy` protected items defined therein. see [default access control management](../accesscontrol/default.html) [managing access control cug](../authorization/cug.html), respectively. [2] granting jcr:versionmanagement privilege given versionable node allow writing items jcr version management api writes `/jcr:system/jcr:versionstorage`, `/jcr:system/jcr:activities`, `/jcr:system/jcr:configurations` following properties storage(s) versionable node: `jcr:activity`, `jcr:activitytitle`, `jcr:baseversion`, `jcr:childversionhistory`, `jcr:configuration`, `jcr:copiedfrom`, `jcr:frozenmixintypes`, `jcr:frozenprimarytype`, `jcr:frozenuuid`, `jcr:ischeckedout`, `jcr:mergefailed`, `jcr:predecessors`,`jcr:successors`,`jcr:root`,`jcr:versionableuuid`, `jcr:versionhistory` [3] oak creating nodes following primary types: `rep:user`, `rep:systemuser`, `rep:group`, `rep:impersonatable`, `rep:members`, `rep:memberreferences`, `rep:memberreferenceslist`, `rep:password` protected properties defined therein # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/privilege/mappingprivilegestoactions.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### mapping jcr actions privileges | jcr/jackrabbit action | privilege | |------------------------------|------------------------------------------------------------------------| | action_read | jcr:read | | action_read node | rep:readnodes | | action_read prop | rep:readproperties | | action_set_property | jcr:modifyproperties | | action_add_property | rep:addproperties | | action_modify_property | rep:alterproperties | | action_remove_property | rep:removeproperties | | action_add_node | jcr:addchildnodes parent | | action_remove_node | jcr:removenode target + jcr:removechildnodes parent | | action_remove prop | rep:removeproperties | | action_remove node | jcr:removenode target + jcr:removechildnodes parent | | action_node_type_management | jcr:nodetypemanagement | | - (combination actions) | jcr:write (note: add/remove node requires privileges granted parent) | | - (combination actions) | rep:write (note: add/remove node requires privileges granted parent) | | action_user_management | rep:usermanagement | | action_locking | jcr:lockmanagement | | action_versioning | jcr:versionmanagement | | - | rep:indexdefinitionmanagement | | action_read_access_control | jcr:readaccesscontrol | | action_modify_access_control | jcr:modifyaccesscontrol | | - | rep:privilegemanagement | | - | jcr:nodetypedefinitionmanagement | | - | jcr:namespacemanagement | | - | jcr:all | mapping unsupported operations oak | jcr/jackrabbit action | privilege | |-----------------------|-------------------------| | - | jcr:retentionmanagement | | - | jcr:lifecyclemanagement | | - | jcr:workspacemanagement | ### reading - [mapping privileges items](mappingtoitems.html) - [mapping api calls privileges](mappingtoprivileges.html) - [mapping jcr actions oak permissions](../permission.html#mapping-of-jcr-actions-to-oak-permissions) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/privilege/differences.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### privilege management : differences wrt jackrabbit 2.x #### registration custom privileges far registration custom privileges oak implementation behaves different jackrabbit 2.x following two aspects: - registration new privileges fails `illegalstateexception` editing session pending changes. - validation performed commithooks order make sure modifications made oak api directly equally verified. subsequently violation (permission, privilege consistency) detected end registration process. privilege manager perform validation. #### built-in privilege definitions following changes made built-in privilege definitions: - modifications: - `jcr:read` aggregation `rep:readnodes` `rep:readproperties` - `jcr:modifyproperties` aggregation `rep:addproperties`, `rep:alterproperties` `rep:removeproperties` - new privileges defined oak 1.0: - `rep:usermanagement` - `rep:readnodes` - `rep:readproperties` - `rep:addproperties` - `rep:alterproperties` - `rep:removeproperties` - `rep:indexdefinitionmanagement` # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/accesscontrol/default.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> access control management : default implementation -------------------------------------------------------------------------------- <!-- macro{toc|fromdepth=2} --> ### general general authorization related code oak clearly separates access control management (such defined jcr jackrabbit api) internal permission evaluation (see also [permission evaluation](../permission/differences.html)). ### differences wrt jackrabbit 2.x see corresponding [documentation](differences.html). ### resource vs principal based access control default implementation present oak 1.0 natively resource-based corresponds way jcr defines access control. nevertheless principal based approach defined jackrabbit api supported using best-effort approach: principal-based policies created using oak query api fully respect access rights imposed different policies contain entries given principal. principal-based policies also modified using corresponding methods provided access control, except `jackrabbitaccesscontrollist.orderbefore`. thus default implementation corresponds default implementation present jackrabbit 2.x. note however, former principal-base approach stored policies per principal dedicated tree longer available. ### elements access control management #### access control policies oak access control management exposes two types policies cover use case defined specification required default setup: | name | policy | description | |-----------------|-------------------------------|----------------------------| | default acl | `jackrabbitaccesscontrollist` | access control individual nodes | | repo-level acl | `jackrabbitaccesscontrollist` | repo-level access control `null` path | | read policy | `namedaccesscontrolpolicy` | trees configured readable everyone | | | | | ##### default acl default access control lists bound individual nodes. may used grant/deny access operations way related jcr items: regular read/write, access control management, versioning, locking oak 1.0 user management writing index definitions. policies designed take effect complete subtree spanned node bound to. individual access control entries evaluated strict order (first entries given list, second entries inherited list bound parent nodes) one notable exception: access control entries created non-group principals always take precedence irrespective inheritance status. details described section [permissions](../permission.html). ##### repo-level acl access control lists bound `null` path used grant/deny privileges associated operations repository-level namespace, node type, privilege workspace management. effect entries limited repository operations inherited items inside repository. ##### read policy immutable policy introduced oak 1.0 order allow opening trees need readable sessions irrespective effective policies. default policies bound following trees: - `/jcr:system/rep:namespaces`: stores registered namespaces - `/jcr:system/jcr:nodetypes`: stores registered node types - `/jcr:system/rep:privileges`: stores registered privileges default set changed extended setting corresponding configuration option. however, important note many jcr api calls rely accessibility namespace, nodetype privilege information. removing corresponding paths configuration probably undesired effects. ##### effective policies effective policies exposed `accesscontrolmanager.geteffectivepolicies(string)` `jackrabbitaccesscontrolmanager.geteffectivepolicies(set<principal>)` represent immutable view persisted policies taking effect act given path given set principals. transient modifications result `setpolicy` `removepolicy` reflected. note however, methods defined best-effort. particular `accesscontrolmanager.geteffectivepolicies(string)` evaluate restrictions associated individual entries might limit effect individual items subtree. see also [oak-8000](https://issues.apache.org/jira/browse/oak-8000) details. #### access control entries access control entries present given list subject following rules applied upon editing enforced `commithook`s: - *uniqueness*: given entry may appear onces list - *merging*: entry exists given principal allow-status restrictions, existing entry updated without moved list. - *redundancy*: new entry makes existing entry (partially) redundant existing entry updated removed altogether. #### restrictions access control entries may created limiting effect adding restrictions mentioned jsr 283. details restriction management oak 1.0 well list built-in restrictions extensibility found section [restriction management](../authorization/restriction.html). <a name="representation"></a> #### unknown principals non-existing paths access control policies (or entries) bound principals jcr item paths. however, must necessarily exist: policies non-existing paths and/or unknown principals (i.e. referential integrity ensured). deleting referenced node authorizable representing principal effect general. hand, actual policies persisted repository, removed whenever parent nodes removed (like regular child node). importing access control policies via [jcr xml import](#xml-import) behaviour unknown principals configured. ### representation repository access control policies created modified using default authorization model stored child node bound name `rep:policy` node path `/rep:repopolicy` (for repo-level policies). node type definition used represent access control content: [rep:accesscontrollable] mixin + rep:policy (rep:policy) protected ignore [rep:repoaccesscontrollable] mixin + rep:repopolicy (rep:policy) protected ignore [rep:policy] abstract [rep:acl] > rep:policy orderable + * (rep:ace) = rep:grantace protected ignore [rep:ace] - rep:principalname (string) protected mandatory - rep:privileges (name) protected mandatory multiple - rep:nodepath (path) protected /* deprecated favor restrictions */ - rep:glob (string) protected /* deprecated favor restrictions */ - * (undefined) protected /* deprecated favor restrictions */ + rep:restrictions (rep:restrictions) = rep:restrictions protected /* since oak 1.0 */ [rep:grantace] > rep:ace [rep:denyace] > rep:ace /** * @since oak 1.0 */ [rep:restrictions] - * (undefined) protected - * (undefined) protected multiple #### examples ##### regular acl /content "": { "jcr:primarytype": "rep:root", "content": { "jcr:primarytype": "oak:unstructured", "jcr:mixintypes": "rep:accesscontrollable", "rep:policy": { "jcr:primarytype": "rep:acl", "allow": { "jcr:primarytype": "rep:grantace", "rep:principalname": "jackrabbit", "rep:privileges": ["jcr:read", "rep:write"] }, "deny": { "jcr:primarytype": "rep:denyace", "rep:principalname": "jackrabbit", "rep:privileges": ["jcr:addnodes", "rep:addproperties"], "rep:restrictions" { "jcr:primarytype": "rep:restrictions", "rep:ntnames": ["nt:hierarchynode", "nt:resource"] } } } } } ##### repo-level policy "": { "jcr:primarytype": "rep:root", "jcr:mixintypes": "rep:repoaccesscontrollable", "rep:repopolicy": { "jcr:primarytype": "rep:acl", "allow": { "jcr:primarytype": "rep:grantace", "rep:principalname": "elefant", "rep:privileges": ["rep:privilegemanagement"] } } } <a name="xml_import"></a> ### xml import oak 1.0 access control content imported session workspace import. addition jcr xml import behavior extended respect `o.a.j.oak.spi.xml.importbehavior` flags instead performing best effort import. currently `importbehavior` used switch different ways handling principals unknown repository. consistency order match validation requirements specified `accesscontrollist#addaccesscontrolentry` default behavior abort (while jackrabbit 2.x behavior always besteffort). different `importbehavior` flags implemented follows: - `abort`: throws `accesscontrolexception` principal unknown - `ignore`: ignore entry defining unknown principal - `besteffort`: import access control entry unknown principal. order get best effort behavior present jackrabbit 2.x configuration parameters `authorizationconfiguration` must contain following entry: importbehavior = "besteffort" see also ([oak-1350](https://issues.apache.org/jira/browse/oak-1350))) <a name="validation"></a> ### validation consistency content structure asserted dedicated `accesscontrolvalidator`. corresponding errors type `accesscontrol` following codes: | code | message | |-------------------|----------------------------------------------------------| | 0001 | generic access control violation | | 0002 | access control entry node expected | | 0003 | invalid policy name | | 0004 | invalid policy node: order children stable | | 0005 | access control policy within access control content | | 0006 | isolated policy node | | 0007 | isolated access control entry | | 0008 | ace without principal name | | 0009 | ace without privileges | | 0010 | ace contains invalid privilege name | | 0011 | ace uses abstract privilege | | 0012 | repository level policies defined non-root node | | 0013 | duplicate ace found policy | <a name="configuration"></a> ### configuration #### configuration parameters default implementation supports following configuration parameters: | parameter | type | default | |------------------------------|---------------------|--------------------------| | `param_restriction_provider` | restrictionprovider | restrictionproviderimpl | | `param_read_paths` | set\<string\> | paths namespace, nodetype privilege root nodes | | `param_import_behavior` | string ("abort", "ignore", "besteffort") | "abort" | | | | | ##### differences jackrabbit 2.x: - "omit-default-permission" configuration option present jackrabbit's accesscontrolprovider implementations longer supported oak. - oak extra access control content installed default renders flag superfluous. <!-- hidden references --> [authorizationconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/authorizationconfiguration.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/accesscontrol/editing.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # using access control management api <!-- macro{toc} --> <a name="read"></a> ## reading ### privilege discovery #### discover/test privileges editing session note methods require editing session `read_access_control` permission specified path. - `accesscontrolmanager` - `hasprivileges(string, privilege[])` - `getprivileges(string)` - `jackrabbitaccesscontrolmanager` - `getprivilegecollection(string abspath)` : improved, performant way inspect privileges (since oak 1.42.0, see [oak-9494]) #### discover/test privileges set principal following methods used discover privileges set principals different associated reading subject. - `jackrabbitaccesscontrolmanager` - `hasprivileges(string, set<principal>, privilege[])` - `getprivileges(string, set<principal>, privilege[])` - `getprivilegecollection(string abspath, set<principal> principals)`: improved, performant way inspect privileges (since oak 1.42.0, see [oak-9494]) #### privilegecollection improved discovery `privilegecollection` interface wraps around set privileges. allows efficient repeated privilege testing avoids manual resolution privilege aggregation. since oak 1.42.0. additional details see [oak-9494]. - `privilegecollection` - `getprivileges()` - `includes(@notnull string... privilegenames)` #### note usually required application check privileges/permissions given session (or set principals) evaluation left repository. rare cases application needs understand given set principals actually allowed perform given action, recommend use `session.haspermission(string, string)` either pass actions strings defined jcr names oak permissions. evaluation multiple privileges required (e.g. custom privileges), `jackrabbitaccesscontrolmanager.getprivilegecollection` improved variant avoids manually resolving aggregation repeated expensive calls. see section [permissions vs privileges](../permission/permissionsandprivileges.html) comprehensive overview differences testing permissions `session` privileges `accesscontrolmanager`. ### reading policies - `accesscontrolmanager` - `getapplicablepolicies(string)` - `getpolicies(string)` - `jackrabbitaccesscontrolmanager` - `getapplicablepolicies(principal)` - `getpolicies(principal)` #### examples ##### read policies bound node accesscontrolmanager acmgr = session.getaccesscontrolmanager(); accesscontrolpolicy[] policies = acmgr.getpolicies("/content"); ##### read policies yet bound node accesscontrolmanager acmgr = session.getaccesscontrolmanager(); accesscontrolpolicyiterator = acmgr.getapplicablepolicies("/content"); ##### read policies bound principal note: depending setup array policies may contain `principalaccesscontrollist` (see below) jackrabbitaccesscontrolmanager acmgr = ... principalmanager principalmanager = jackrabbitsession.getprincipalmanager(); principal principal = principalmanager.getprincipal("principalname"); accesscontrolpolicy[] policies = acmgr.getpolicies(principal); ##### read policies yet bound th principal note: depending setup array policies may contain non-jcr types like `principalaccesscontrollist` (see below) jackrabbitaccesscontrolmanager acmgr = ... principalmanager principalmanager = jackrabbitsession.getprincipalmanager(); principal principal = principalmanager.getprincipal("principalname"); accesscontrolpolicy[] policies = acmgr.getapplicablepolicies(principal); ### reading policy content - `accesscontrollist` - `getaccesscontrolentries()` - `jackrabbitaccesscontrollist` - `getrestrictionnames()` - `getrestrictiontype(string)` - `isempty()` - `size()` - `principalaccesscontrollist` : extension `jackrabbitaccesscontrollist` principal-based access control setup - `getprincipal()` : principal entries list defined - `principalsetpolicy` - `getprincipals()` : set principals policy applies ### reading effective policies inspect policies take effect order help understand certain permissions granted denied. - `accesscontrolmanager` - `geteffectivepolicies(string abspath)` : policies take effect specified path - `jackrabbitaccesscontrolmanager` - `geteffectivepolicies(set<principal> principals)` : policies take effect given set principals (e.g. would added `subject` upon repository login) - `geteffectivepolicies(set<principal> principals, string... abspaths)` : policies take effect given set principals filtered specified paths (since oak 1.52.0, see [oak-10130]) #### note - retrieving effective policies best-effort - list effective policies also include policies defined configuration implementation explicit bound node/principal access control write operations. - therefore, make sure rely effective policies specific type <a name="write"></a> ## writing ### adding policies - `accesscontrolmanager` - `setpolicy(string, accesscontrolpolicy)` #### examples ##### bind policy node accesscontrolpolicyiterator = acmgr.getapplicablepolicies("/content"); (it.hasnext()) { accesscontrolpolicy policy = it.nextpolicy(); (policy instanceof namedaccesscontrolpolicy && "mypolicy".equals((namedaccesscontrolpolicy) policy).getname()) { acmgr.setpolicy("/content", policy); session.save(); } } ##### bind principal-based policy node jackrabbitaccesscontrolmanager acmgr = ... privilege[] privileges = ... (jackrabbitaccesscontrolpolicy policy : acmgr.getapplicablepolicies(principal)) { (policy instanceof principalaccesscontrollist) { // note: path bind policy retrieved policy path added entry takes effect! acmgr.setpolicy(policy.getpath(), policy); session.save(); } } ### modifying policies modification policies specific policy type. jcr/jackrabbit api defines following mutable types policies. depending configured access control setup (and level customization) may mutable policies. - `accesscontrollist` - `addaccesscontrolentry(principal, privilege[])` - `removeaccesscontrolentry(accesscontrolentry)` - `jackrabbitaccesscontrollist` - `addaccesscontrolentry(principal, privilege[], boolean)` - `addaccesscontrolentry(principal, privilege[], boolean, map<string, value>)` - `addaccesscontrolentry(principal, privilege[], boolean, map<string, value>, map<string, value[]>)` - `orderbefore(accesscontrolentry, accesscontrolentry)` - `principalaccesscontrollist` : extension `jackrabbitaccesscontrollist` principal-based access control setup - `addentry(string effectivepath, privilege[] privileges)` : binds entry path expected take effect. - `addentry(string effectivepath, privilege[] privileges, map<string, value> restrictions, map<string, value[]> mvrestrictions)` : binds entry restrictions path expected take effect - `principalsetpolicy` - `addprincipals(principal...)` - `removeprincipals(principal...)` - `accesscontrolutils` - `getaccesscontrollist(session, string)` - `getaccesscontrollist(accesscontrolmanager, string)` - `addaccesscontrolentry(session, string, principal, string[], boolean)` - `addaccesscontrolentry(session, string, principal, privilege[], boolean)` - `grantalltoeveryone(session, string)` - `denyalltoeveryone(session, string)` #### retrieve principals default recommended ways obtain `principal`s access control management principal management api: - `principalmanager` (see section [principal management](../principal.html)) - `getprincipal(string)` one way representing principals repository means user management: user management supported given oak repository (see [option_user_management_supported] repository descriptor), principals associated given user/group obtained calling: - `authorizable` (see section [user management](../user.html)) - `getprincipal()` note however, work principals backed user/group. principals provided different principal management implementation accessible user management. #### retrieve privileges - `privilegemanager` (see section [privilege management](../privilege.html)) - `getregisteredprivileges()` - `getprivilege(string)` - `accesscontrolmanager` - `getsupportedprivileges(string)` - `privilegefromname(string)` - `accesscontrolutils` - `privilegesfromnames(session session, string... privilegenames)` - `privilegesfromnames(accesscontrolmanager accesscontrolmanager, string... privilegenames)` - `privilege`: defines name constants privileges defined jcr #### examples ##### modify accesscontrollist jackrabbitaccesscontrollist acl = null; // try acl set (accesscontrolpolicy policy : acmgr.getpolicies("/content")) { (policy instanceof jackrabbitaccesscontrollist) { acl = (jackrabbitaccesscontrollist) policy; break; } } (acl != null) { principalmanager principalmanager = jackrabbitsession.getprincipalmanager(); principal principal = principalmanager.getprincipal("jackrabbit"); privilege[] privileges = accesscontrolutils.privilegesfromnames(acmgr, privilege.jcr_read, privilege.jcr_write); acl.addentry(principal, privileges, true); acmgr.setpolicy(acl.getpath(), acl); session.save(); } ##### create modify accesscontrollist jackrabbitaccesscontrollist acl = null; // try acl set (accesscontrolpolicy policy : acmgr.getpolicies("/content")) { (policy instanceof jackrabbitaccesscontrollist) { acl = (jackrabbitaccesscontrollist) policy; break; } } (acl == null) { // try applicable policy accesscontrolpolicyiterator itr = accesscontrolmanager.getapplicablepolicies("/content"); (itr.hasnext()) { accesscontrolpolicy policy = itr.nextaccesscontrolpolicy(); (policy instanceof jackrabbitaccesscontrollist) { acl = (jackrabbitaccesscontrollist) policy; break; } } } (acl != null) { principalmanager principalmanager = jackrabbitsession.getprincipalmanager(); principal principal = principalmanager.getprincipal("jackrabbit"); privilege[] privileges = accesscontrolutils.privilegesfromnames(acmgr, privilege.jcr_read, privilege.jcr_write); acl.addentry(principal, privileges, true); acmgr.setpolicy(acl.getpath(), acl); session.save(); } alternatively, use `accesscontrolutils`: jackrabbitaccesscontrollist acl = accesscontrolutils.getaccesscontrollist(session, "/content"); (acl != null) { principalmanager principalmanager = jackrabbitsession.getprincipalmanager(); principal principal = principalmanager.getprincipal("jackrabbit"); privilege[] privileges = accesscontrolutils.privilegesfromnames(session, privilege.jcr_read, privilege.jcr_write); policy.addentry(principal, privileges, true); acmgr.setpolicy(acl.getpath(), acl); session.save(); } ##### edit principal-based accesscontrollist jackrabbitaccesscontrolmanager acmgr = ... valuefactory vf = ... (jackrabbitaccesscontrolpolicy policy : acmgr.getpolicies(principal)) { (policy instanceof principalaccesscontrollist) { principalaccesscontrollist acl = (principalaccesscontrollist) policy; // add entries specifying path take effect acl.addentry("/content", accesscontrolutils.privilegesfromnames(acmgr, privilege.jcr_read)); map<string, value[]> mvrestrictions = immutablemap.of("rep:subtrees", new value[] {vf.createvalue("subtree1"), vf.createvalue("subtree2"}); acl.addentry("/var", accesscontrolutils.privilegesfromnames(acmgr, privilege.jcr_read), collections.emptymap(), mvrestrictions); // note: path bind policy retrieved policy path added entry takes effect! acmgr.setpolicy(policy.getpath(), policy); session.save(); } } ### removing policies - `accesscontrolmanager` - `removepolicy(string, accesscontrolpolicy)` #### examples ##### remove policy (accesscontrolpolicy policy : acmgr.getpolicies("/content"); (policy instanceof namedaccesscontrolpolicy && "mypolicy".equals((namedaccesscontrolpolicy) policy).getname()) { acmgr.removepolicy("/content", policy); session.save(); } } <a name="repository_level"></a> ### access control repository level `null` path serves placeholder retrieve edit policies take effect repository whole instead bound taking effect specific node path. example able administer namespace registry. #### examples ##### allow principal register namespaces jackrabbitaccesscontrollist acl = accesscontrolutils.getaccesscontrollist(session, null); (acl != null) { principalmanager principalmanager = jackrabbitsession.getprincipalmanager(); principal principal = principalmanager.getprincipal("dinosaur"); privilege[] privileges = accesscontrolutils.privilegesfromnames(session, privilegeconstants.jcr_namespace_management); policy.addentry(principal, privileges, true); acmgr.setpolicy(null, acl); session.save(); } <!-- hidden references --> [option_user_management_supported]: /oak/docs/apidocs/org/apache/jackrabbit/api/jackrabbitrepository.html [oak-10130]: https://issues.apache.org/jira/browse/oak-10130 [oak-9494]: https://issues.apache.org/jira/browse/oak-9494 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/accesscontrol/differences.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### access control management : differences wrt jackrabbit 2.x #### differences interface ##### accesscontrolmanager ###### hasprivilege getprivileges oak methods throw `pathnotfoundexception` corresponding node accessible editing session. accordance behavior mandated jsr 283 bug jackrabbit 2.x. ###### geteffectivepolicies contrast jackrabbit 2.x editing session used retrieve effective policies policies returned methods guarantueed return information otherwise accessible session. corresponding methods jackrabbit 2.x use throw exception situation. ##### accesscontrolpolicy oak introduces new type policy enforces regular read-access everyone trees hold new `readpolicy` (see [oak-951]). main usage new policy ensure backwards compatible behavior repository level information (node types, namespace, privileges) kept within content repository. jackrabbit 2.x information stored file system without ability apply enforce regular access control present items repository. currently special read policies defined part overall security configuration cannot managed/edited using regular access control management api (see ([oak-951](https://issues.apache.org/jira/browse/oak-951))). ##### accesscontrolentry validation: oak implementation `accesscontrolentry` interface longer charge validating specified privileges. validation still performed corresponding `accesscontrollist` methods, complete validation delegated commit phase executed specific `validator` implementation. default behavior respect principal validation compliant specification jackrabbit 2.x.: adding ace principal unknown repository fail. however, order consistent behavior upon xml import validation relaxed import behavior changed allow unknown principals (see ([oak-1350](https://issues.apache.org/jira/browse/oak-1350))) section xml import below. restrictions: oak optional restrictions present given `jackrabbitaccesscontrolentry` multivalued (see below). #### additional functionality ##### principal-based access control principal-based access control management present jackrabbit-core longer present oak. main benefit principal-based approach incorporated changes default [permission evaluation](../permission/differences.html)). addition default access control manager implementation supports methods defined `jackrabbitaccesscontrolmanager`; i.e. editing access control information principal possible long editing session sufficient permission target node(s). similarly, per principal policies exposed given session always respect access rights session. ##### restrictions implementation additional restrictions associated ace slighly modified/extended. see section [restriction management](../authorization/restriction.html) details. ##### xml import * respects `importbehavior` handling principals instead performing best effort import * supports `workspace` `session` import #### configuration - "omit-default-permission" configuration option present jackrabbit's accesscontrolprovider implementations longer supported oak. - oak extra access control content installed default renders flag superfluous. #### important note following modification likely effect existing applications: - `accesscontrolmanager#hasprivilege()` `accesscontrolmanager#getprivileges()` throw `pathnotfoundexception` node specified path accessible. jackrabbit 2 implementation wrong fixed oak ([oak-886](https://issues.apache.org/jira/browse/oak-886)). new behaviour turns problem existing applications might consider adding backward compatible behaviour. <!-- hidden references --> [oak-951]: https://issues.apache.org/jira/browse/oak-951 [importbehavior]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/xml/importbehavior.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/useraction.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> user actions ------------ ### overview oak 1.10 comes extension jackrabbit user management api allows perform additional actions validations user specific operations - disable (or enable) user - allowing given principal impersonate target user - revoke ability impersonate target user given principal <a name="api_extensions"></a> ### useraction api following public interface provided oak package `org.apache.jackrabbit.oak.spi.security.user.action`: - [useraction] `useraction` interface extends `authorizableaction` allows perform validations write additional application specific content executing user specific operations. therefore actions executed part transient user management modifications. contrasts `org.apache.jackrabbit.oak.spi.commit.commithook`s turn triggered modifications persisted. consequently, implementations `useraction` interface expected adhere rule perform transient repository operations validation. must force changes persisted calling `org.apache.jackrabbit.oak.api.root.commit()`. user actions executed editing session target operation fail configured actions fails (e.g. due insufficient permissions editing oak contentsession). <a name="default_implementation"></a> ### default implementations oak 1.10 provide base implementation `useraction`. <a name="xml_import"></a> ### xml import import user actions called way corresponding api calls invoked. <a name="pluggability"></a> ### pluggability refer [authorizable actions | pluggability ](authorizableaction.html#pluggability) details plug new user action system. ##### examples ###### example action example action removes profile nodes upon disabling user: clearprofilesaction extends abstractauthorizableaction implements useraction { @override public void ondisable(@notnull user user, @nullable string disablereason, @notnull root root, @notnull namepathmapper namepathmapper) throws repositoryexception { (disablereason != null) { tree = root.gettree(user.getpath()); (t.exists() && t.haschild("profiles")) { t.getchild("profiles").remove(); } } } } <!-- hidden references --> [useraction]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/action/useraction.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/default.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> user management : default implementation -------------------------------------------------------------------------------- ### general notes default user management implementation stores user/group information content repository. contrast jackrabbit 2.x, default used single, dedicated workspace user/group data, data oak 1.0 stored separately jcr workspace. consequently, `usermanager` associated editing sessions, performs actions editing session. corresponds behavior defined alternative implementation present jackrabbit 2.x ((see jackrabbit 2.x `userperworkspaceusermanager`). * oak implementation build oak api. allows double usage extension jcr api well within oak layer (aka spi). * `usermanager` always associated jcr workspace editing `session` class obtained. * changes made user management api always transient require `session#save()` persisted. * case failure user management related write operations api consumer charge specifically revert pending invalid transient modifications calling `session#refresh(false)`. ### differences wrt jackrabbit 2.x summary changes respect former implementation present jackrabbit 2.x present corresponding [section](differences.html). ### built-in users special groups setup builtin user group accounts triggered configured `workspaceinitializer` associated user management configuration (see configuration section below). default user management implementation oak comes initializer creates following builtin user accounts: #### administrator admin user always created. id user retrieved user configuration parameter `param_admin_id`, defaults `admin`. oak 1.0 however administrator user might created without initial password forcing application set password upon start (see `param_omit_admin_pw` configuration parameter). ##### anonymous user contrast jackrabbit 2.x anonymous (or guest) user optional. creation skipped value `param_anonymous_id` configuration parameter `null` empty. note, anonymous user always created without specifying password order prevent regular login `simplecredentials`. proper way obtain guest session is: repository#login(new guestcredentials(), wspname); see section [authentication](../authentication.html) information guest login. #### everyone group default user management implementation oak contains special handling optional group represents [everyone] principal, marked reserved principal name definition principals members. special group always contains users/groups member cannot edited user management api. oak fact consistently reflected group membership related methods. see also [principal management](../principal.html). ### user management operations #### reading authorizables ##### handling authorizable id * oak 1.0 node type definition `rep:authorizable` defines new property `rep:authorizableid` intended store id user group. * property protected system maintained cannot changed creation user management api calls. * default implementation comes dedicated property index `rep:authorizableid` asserts uniqueness id. * backwards compatibility jackrabbit 2.x id specified creation also reflected `jcr:uuid` (protected mandatory), used lookup. * `authorizable#getid` returns string value contained `rep:authorizableid` backwards compatibility falls back node name case `rep:authorizableid` property missing. * name authorizable node generated based configurable implementation `authorizablenodename` interface (see configuration section below). default uses id name hint includes conversion valid jcr node name. ##### equals() hashcode() implementation `object#equals()` `object#hashcode()` user groups slightly differs jackrabbit 2.x. longer relies _sameness_ underlaying jcr node compares ids user manager instance. #### creating authorizables * `rep:password` property longer defined mandatory. therefore new user might created without specifying password. note however, `user#changepassword` allow remove password property. * since version 1.1.0 oak supports new api create dedicated system users [jcr-3802](https://issues.apache.org/jira/browse/jcr-3802). <a name="query"></a> #### searching #### xpathquerybuilder oak 1.0 comes default xpath based implementation `querybuilder` interface passed query upon calling `usermanager#findauthorizables(query)`. #### group membership see section [group membership](membership.html) details. #### autosave behavior due nature usermanager (see above) decided drop auto-save behavior default implementation present oak. consequently, * `usermanager#autosave(boolean)` throws `unsupportedrepositoryoperationexception` * `usermanager#isautosave()` always returns `false` see also `param_support_autosave` below; needed application code written jackrabbit api (and thus testing auto-save mode enabled not) configuration option used last resort. #### xml import oak 1.0 user group nodes imported session workspace import. differences compared jackrabbit 2.x: * importing authorizable another tree configured user/group node failed upon save (-> see `uservalidator` `root#commit`). jackrabbit 2.x core used fail immediately. * `besteffort` behavior also implemented import impersonators (was missing jackrabbit /2.x). #### password expiry force initial password change since oak 1.1.0 default user management authentication implementation provides password expiry initial password change. default, features disabled. see section [password expiry force initial password change](expiry.html) details. #### password history since oak 1.3.3 default user management implementation provides password history support. default, feature disabled. see section [password history](history.html) details. #### impersonation default implementation [impersonation] interface comes following limitations features: - user principals granted impersonation - every user impersonate - admin user always impersonate users (and therefore cannot granted impersonation) - [configuration](#configuration) allows define list user group principals impersonate users (since oak 1.54.0, see [oak-10173]) <a name="representation"></a> ### representation repository following block lists built-in node types related user management tasks: [rep:authorizable] > mix:referenceable, nt:hierarchynode abstract + * (nt:base) = nt:unstructured version - rep:principalname (string) protected mandatory - rep:authorizableid (string) protected /* @since oak 1.0 */ - * (undefined) - * (undefined) multiple [rep:user] > rep:authorizable, rep:impersonatable + rep:pwd (rep:password) = rep:password protected /* @since oak 1.1.0 */ - rep:password (string) protected - rep:disabled (string) protected [rep:systemuser] > rep:user /* @since oak 1.1.0 */ [rep:impersonatable] mixin - rep:impersonators (string) protected multiple /* @since oak 1.1.0 */ [rep:password] - * (undefined) protected - * (undefined) protected multiple [rep:group] > rep:authorizable, rep:memberreferences + rep:members (rep:members) = rep:members multiple protected version /* @deprecated since oak 1.0 */ + rep:memberslist (rep:memberreferenceslist) = rep:memberreferenceslist protected copy /* @since oak 1.0 */ [rep:authorizablefolder] > nt:hierarchynode + * (rep:authorizable) = rep:user version + * (rep:authorizablefolder) = rep:authorizablefolder version /* @since oak 1.0 */ [rep:memberreferences] - rep:members (weakreference) protected multiple < 'rep:authorizable' /* @since oak 1.0 */ [rep:memberreferenceslist] + * (rep:memberreferences) = rep:memberreferences protected copy /* @deprecated since oak 1.0 */ [rep:members] orderable + * (rep:members) = rep:members protected multiple - * (weakreference) protected < 'rep:authorizable' <a name="validation"></a> ### validation consistency content structure asserted dedicated `uservalidator`. corresponding errors type `constraint` following codes: | code | message | |-------------------|----------------------------------------------------------| | 0020 | admin user cannot disabled | | 0021 | invalid jcr:uuid authorizable (creation) | | 0022 | changing id, principal name creation | | 0023 | invalid jcr:uuid authorizable (mod) | | 0024 | password may plain text | | 0025 | attempt remove id, principalname pw | | 0026 | mandatory property rep:principalname missing | | 0027 | admin user cannot removed | | 0028 | attempt create outside configured scope | | 0029 | intermediate folders rep:authorizablefolder | | 0030 | missing uuid group (check cyclic membership) | | <s>0031</s> | <s>cyclic group membership</s> (see [oak-6072]) | | 0032 | attempt set password system user | | 0033 | attempt add rep:pwd node system user | <a name="configuration"></a> ### configuration following user management specific methods present [userconfiguration] oak 1.0: * getusermanager: obtain new user manager instance #### configuration parameters supported default implementation | parameter | type | default | description | |-------------------------------------|---------|----------------------------------------------|-------------| | `param_admin_id` | string | "admin" || | `param_omit_admin_pw` | boolean | false || | `param_anonymous_id` | string | "anonymous" (nullable) || | `param_user_path` | string | "/rep:security/rep:authorizables/rep:users" || | `param_group_path` | string | "/rep:security/rep:authorizables/rep:groups" || | `param_default_depth` | int | 2 || | `param_password_hash_algorithm` | string | "sha-256" || | `param_password_hash_iterations` | int | 1000 || | `param_password_salt_size` | int | 8 || | `param_authorizable_node_name` | authorizablenodename | authorizablenodename#default || | `param_authorizable_action_provider`| authorizableactionprovider | defaultauthorizableactionprovider || | `param_support_autosave` | boolean | false || | `param_import_behavior` | string ("abort", "ignore", "besteffort") | "ignore" || | `param_password_max_age` | int | 0 || | `param_password_initial_change` | boolean | false || | `param_password_history_size` | int (upper limit: 1000) | 0 || | `param_cache_expiration` | long | 0 | number milliseconds internal [principal cache](../principal/cache.html) expires. set equal/lower zero cache created/evaluated. | | `param_cache_max_stale` | long | 0 | optional configuration defining number milliseconds stale principal cache served another thread already writing cache. set zero stale cache returned group principals read persistence without cached. configuration option takes effect principal cache enabled 'principal cache expiration' value greater zero. | | `param_enable_rfc7613_usercase_mapped_profile`| boolean | false || | `param_impersonator_principal_names` | string | {} | list users impersonate groups whose members impersonate user (since oak 1.54.0, [oak-10173]). | following configuration parameters present default implementation jackrabbit 2.x longer supported ignored: * `compatiblejr16` * `autoexpandtree` * `autoexpandsize` * `groupmembershipsplitsize` optional `cacheexpiration` configuration option listed discussed detail section [caching results principal resolution](../principal/cache.html). related user management s.str. affects implementation specific `principalprovider` implementation exposed `userconfiguration.getuserprincipalprovider`. <a name="pluggability"></a> ### pluggability within default user management implementation following parts modified extended runtime providing corresponding osgi services passing appropriate configuration parameters exposing custom implementations: - `authorizableactionprovider`: defines authorizable actions, see [authorizable actions](authorizableaction.html). - `authorizablenodename`: defines generation authorizable node names case user management implementation stores user information repository. see [authorizable node name generation](authorizablenodename.html). - `userauthenticationfactory`: see #### userauthenticationfactory : authenticating users since oak 1.1.5 default user management implementation allows configure thus replace default [userauthenticationfactory], links user management implementation authentication (specifically [uid/pw-login](../authentication/default.html#user_authentication)) exposes [authentication] implementation used verification specified credentials according details provided given user management implementation. ##### examples ###### example userauthenticationfactory @component() @service(userauthenticationfactory.class) public class myuserauthenticationfactory implements userauthenticationfactory { private set<string> ids = collections.emptyset(); public myuserauthenticationfactory() {} //--------------------------------------< userauthenticationfactory >--- @override authentication getauthentication(@nonnull userconfiguration configuration, @nonnull root root, @nullable string userid) { final boolean canauthenticate = (userid != null && ids.contains(userid)); return new authentication() { @override public boolean authenticate(@nullable credentials credentials) { return canauthenticate; } }; } //------------------------------------------------< scr integration >--- @activate private void activate(map<string, object> properties) { ids = immutableset.copyof(propertiesutil.tostringarray(properties.get("ids"), new string[0])); } } <!-- hidden references --> [everyone]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/everyoneprincipal.html#name [userconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/userconfiguration.html [userauthenticationfactory]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/userauthenticationfactory.html [authentication]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/authentication.html [oak-6072]: https://issues.apache.org/jira/browse/oak-6072 [oak-10173]: https://issues.apache.org/jira/browse/oak-10173 [impersonation]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/user/impersonation.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/groupaction.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> group actions ------------- ### overview oak 1.6 comes extension jackrabbit user management api allows perform additional actions validations upon group member management tasks - add authorizable group - remove authorizable group - add set member ids members group - remove set member ids group <a name="api_extensions"></a> ### groupaction api following public interface provided oak package `org.apache.jackrabbit.oak.spi.security.user.action`: - [groupaction] `groupaction` interface extends `authorizableaction` allows perform validations write additional application specific content executing group member management related write operations. therefore actions executed part transient user management modifications. contrasts `org.apache.jackrabbit.oak.spi.commit.commithook`s turn triggered modifications persisted. consequently, implementations `groupaction` interface expected adhere rule perform transient repository operations validation. must force changes persisted calling `org.apache.jackrabbit.oak.api.root.commit()`. group actions executed editing session target operation fail configured actions fails (e.g. due insufficient permissions editing oak contentsession). <a name="default_implementation"></a> ### default implementations oak 1.5 provides following base implementation `groupaction` implementations build upon: - `abstractgroupaction`: abstract base implementation perform action. <a name="xml_import"></a> ### xml import import group actions called fashion regular groups long member reference resolved existing authorizable. member ids authorizables exist group import time failed member ids passed group actions `importbehavior.besteffort` set import. <a name="pluggability"></a> ### pluggability refer [authorizable actions | pluggability ](authorizableaction.html#pluggability) details plug new group action system. ##### examples ###### example action example action creates removes asset home directories members added removed specific group: public class createhomeformembergroupaction extends abstractgroupaction { private static final string group_id = "asset-editors"; private static final string asset_root = "/content/assets"; private securityprovider securityprovider; @override public void init(securityprovider securityprovider, configurationparameters config) { this.securityprovider = securityprovider; } @override public void onmemberadded(@nonnull group group, @nonnull authorizable member, @nonnull root root, @nonnull namepathmapper namepathmapper) throws repositoryexception { createhome(group, root, member.getid(), namepathmapper); } @override public void onmembersadded(@nonnull group group, @nonnull iterable<string> memberids, @nonnull iterable<string> failedids, @nonnull root root, @nonnull namepathmapper namepathmapper) throws repositoryexception { createhome(group, root, memberids, failedids, namepathmapper); } @override public void onmemberremoved(@nonnull group group, @nonnull authorizable member, @nonnull root root, @nonnull namepathmapper namepathmapper) throws repositoryexception { removehome(group, root, member.getid(), namepathmapper); } @override public void onmembersremoved(@nonnull group group, @nonnull iterable<string> memberids, @nonnull iterable<string> failedids, @nonnull root root, @nonnull namepathmapper namepathmapper) throws repositoryexception { removehome(group, root, memberids, failedids, namepathmapper); } private void createhome(group group, root root, string memberid, namepathmapper namepathmapper) throws repositoryexception { createhome(group, root, lists.newarraylist(memberid), lists.<string>newarraylist(), namepathmapper); } private void createhome(group group, root root, iterable<string> memberids, iterable<string> failedids, namepathmapper namepathmapper) throws repositoryexception { (group_id.equals(group.getid())) { usermanager usermanager = securityprovider.getconfiguration(userconfiguration.class).getusermanager(root, namepathmapper); (string memberid : memberids) { authorizable authorizable = usermanager.getauthorizable(memberid); (authorizable != null && !authorizable.isgroup()) { // note: done editing session group modification may // desired session / privilege level perform actions. nodeutil assetroot = new nodeutil(root.gettree(asset_root)); nodeutil home = assetroot.addchild(memberid, nodetypeconstants.nt_oak_unstructured); // ... } } } } private void removehome(group group, root root, string memberid, namepathmapper namepathmapper) { removehome(group, root, lists.newarraylist(memberid), lists.<string>newarraylist(), namepathmapper); } private void removehome(group group, root root, iterable<string> memberids, iterable<string> failedids, namepathmapper namepathmapper) { } } <!-- hidden references --> [groupaction]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/action/groupaction.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/expiry.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> password expiry force initial password change -------------------------------------------------------------------------------- ### general since version 1.1.0 oak provides functionality expire passwords users well force users change password upon initial (first-time) login. ### password expiry administrators may configure passwords expire within configurable amount time (days). user whose password expired longer able obtain session/login. ### force initial password change administrator may configure system user forced set new password upon first login. special form password expiry above, upon creation user account's password expired default. upon initial login, user able obtain session/login password needs changed prior next attempt. specifying new password, initial password provided. <a name="configuration"></a> ### configuration administrator may enable password expiry initial password change via `org.apache.jackrabbit.oak.security.user.userconfigurationimpl` osgi configuration. default features disabled. following configuration options supported: | parameter | type | default | description | |-----------------------------------|---------|----------|--------------------------------------------| | `param_password_max_age` | int | 0 | number days password expires. | | `param_password_initial_change` | boolean | false | boolean flag enable initial pw change. | | `param_password_expiry_for_admin` | boolean | false | flag enable pw expiry admin user. | note: - maximum password age (`maxpasswordage`) enabled value greater 0 set (expiration time days). - change password first login (`initialpasswordchange`): enabled, forces users change password upon first login. <a name="how"></a> ### works #### definition expired password expired password defined follows: - current date-time date-time + maxpasswordage specified `rep:passwordlastmodified` property - or: expiry and/or enforce password change enabled, `rep:passwordlastmodified` property exists above, password node `rep:pw` property `rep:passwordlastmodified`, governed new `rep:password` node type located user's home, introduced, leaving open future enhancements password management (such password policies, history, et al): #### representation repository ##### node type rep:password [rep:password] - * (undefined) protected - * (undefined) protected multiple ##### node rep:pwd property rep:passwordlastmodified [rep:user] > rep:authorizable, rep:impersonatable + rep:pwd (rep:password) = rep:password protected ... `rep:pw` node `rep:passwordlastmodified` property defined protected order guard user modifying (overcoming) password expiry. new sub-node also advantage allowing repository consumers e.g. register specific commit hooks / actions node. future `rep:password` property user node may migrated `rep:pw` sub-node. #### user creation upon initial creation user, `rep:passwordlastmodified` property omitted. expiry `initialpasswordchange` enabled, absence property interpreted immediate expiry password. subsequently user changes password via `user#changepassword`, `rep:passwordlastmodified` property set henceforth interpreted. #### authentication login module must throw `javax.security.auth.login.credentialexpiredexception` upon encountering expired password. consumer implementation differentiate failed login (due wrong password specified) expired password, allowing consumer take action, e.g. redirect change password form. oak, [authentication] implementation provided default user management compares within `authenticate()` method system time value stored `rep:passwordlastmodified` throws [credentialexpiredexception] date-time specified value. case `initialpasswordchange` password considered expired `rep:passwordlastmodified` property found login. expiry force initial password change checked *after* regular credentials verification, prevent attacker identifying valid users redirected change password form upon expiry. ##### userauthenticationfactory described section [user management: default implementation](default.html#pluggability) possible change default implementation `userauthenticationfactory` pluggin custom implementation runtime. important note authentication related part password expiry handled [authentication] implementation exposed default [userauthenticationfactory]. replacing factory ultimately disable password expiry feature unless custom implementation respects enforces constraints explained before. #### changing expired password oak supports changing user's expired password part normal login process. consumers repository already specify `javax.jcr.simplecredentials` login, part normal authentication process. order change password expired user, login may called affected user's [simplecredentials], additionally providing new password via credentials attribute `newpassword`. verifying user's credentials, *before* checking expiry, said attribute used `authentication` implementation change user's password. way user change password expiry check succeeds (password expired = false) session/login provided time. method changing password via normal login call works user's password fact expired cannot used regular password changes (attribute ignored, use `user#changepassword` directly instead). [password history feature](history.html) enabled, - password change - password already history used, change fail login still throw [credentialexpiredexception]. order consumers exception become aware credentials still considered expired, password changed due new password found password history, credentials object fitted additional attribute name `passwordhistoryexception`. attribute may contain following two values: - _"new password found password history."_ - _"new password identical current password."_ #### xml import users imported via oak jcr xml importer, expiry relevant nodes property supported. xml specifies `rep:pw` node optionally `rep:passwordlastmodified` property, imported, irrespective password expiry force initial password change enabled configuration. they're enabled, imported property used normal login process described above. enabled, imported property effect. hand, imported user already exists, potentially existing `rep:passwordlastmodified` properties overwritten value import. password expiry enabled, may cause passwords expire earlier later anticipated, governed new value. also, import may create property none previously existed, thus effectively cancelling need change password first login - feature enabled. therefore customers using importer fashion aware potential need enable password expiry/force initial password change imported data make sense, and/or effect already existing/overwritten data. changes made light [oak-8408](https://issues.apache.org/jira/browse/oak-8408) following rules apply importing user without extra `rep:pw` node: - `initialpasswordchange` enabled, `rep:passwordlastmodified` never set irrespective user node new modified. i.e. user force change pw upon login. - `pw-expiry` enabled, `rep:passwordlastmodified` set new user node (but node gets modified). ensures password expire reset expiry changing existing user xml import. - `initialpasswordchange` `pw-expiry` enabled, rules `initialpasswordchange` apply. <!-- hidden references --> [simplecredentials]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/simplecredentials.html [credentialexpiredexception]: https://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/credentialexpiredexception.html [userauthenticationfactory]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/userauthenticationfactory.html [authentication]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/authentication.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/membership.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> group membership -------------------------------------------------------------------------------- <a name="jcr_api"></a> ### jackrabbit api jackrabbit api extensions provide various methods edit explore member relationship users groups: - [org.apache.jackrabbit.api.security.user.group] - `getdeclaredmembers() iterator<authorizable>` - `getmembers() iterator<authorizable>` - `isdeclaredmember(authorizable) boolean` - `ismember(authorizable boolean` - `addmember(authorizable) boolean` - `removemember(authorizable) boolen` - `addmembers(string...) set<string>` - `removemembers(string...) set<string>` - [org.apache.jackrabbit.api.security.user.authorizable] - `declaredmemberof() iterator<group>` - `memberof() iterator<group>` <a name="default_implementation"></a> ### characteristics default implementation #### member representation repository ##### behavior jackrabbit 2.x default configuration jackrabbit 2.x stores group members _weak references_ `rep:members` multi value property group node. `groupmembershipsplitsize` configuration parameter set valid, group memberships collected node structure `rep:members` instead default multi valued property. value determines maximum number member properties additional intermediate nodes inserted. valid parameter values integers > 4. node structure balanced b-tree leave nodes carry actual values residual properties name principal name member. ##### behavior oak 1.0 oak user manager automatically chooses appropriate storage structure depending number group members. number members low stored _weak references_ `rep:members` multi value property. similar jackrabbit 2.x. number members high user manager limit size multi value properties create overflow `rep:memberreferences` nodes `rep:memberslist` node hold extra members. ##### relevant new modified node types [rep:group] > rep:authorizable, rep:memberreferences + rep:members (rep:members) = rep:members multiple protected version /* @deprecated */ + rep:memberslist (rep:memberreferenceslist) = rep:memberreferenceslist protected copy [rep:memberreferences] - rep:members (weakreference) protected multiple < 'rep:authorizable' [rep:memberreferenceslist] + * (rep:memberreferences) = rep:memberreferences protected copy ##### examples ###### example group members *(irrelevant properties excluded)* { "jcr:primarytype": "rep:group", "rep:principalname": "contributor", "rep:members": [ "429bbd5b-46a6-3c3d-808b-5fd4219d5c4d", "ca58c408-fe06-357e-953c-2d23ffe1e096", "3ebb1c04-76dd-317e-a9ee-5164182bc390", "d3c827d3-4db2-30cc-9c41-0ed8117dbaff", "f5777a0b-a933-3b4d-9405-613d8bc39cc7", "fdd1547a-b19a-3154-90da-1eae8c2c3504", "65c3084e-abfc-3719-8223-72c6cb9a3d6f" ] } ###### example group many members *(irrelevant properties excluded)* { "jcr:primarytype": "rep:group", "rep:principalname": "employees", "rep:memberslist": { "jcr:primarytype": "rep:memberreferenceslist", "0": { "jcr:primarytype": "rep:memberreferences", "rep:members": [ "429bbd5b-46a6-3c3d-808b-5fd4219d5c4d", "ca58c408-fe06-357e-953c-2d23ffe1e096", ... ] }, ... "341": { "jcr:primarytype": "rep:memberreferences", "rep:members": [ "fdd1547a-b19a-3154-90da-1eae8c2c3504", "65c3084e-abfc-3719-8223-72c6cb9a3d6f", ... ] } } } *note*: exact threshold value determines storage strategy implementation detail might even vary depending underlying persistence layer. oak 1.0 threshold value set 100. #### upgrading groups jackrabbit 2.x oak content structure upon upgrade jackrabbit 2.x repository oak group member lists adjusted reflect new content structure created oak user management implementation; means group member node structure changed migration process. applications rely implementation details jackrabbit 2.x user management instead use corresponding api calls need modified accordingly. #### xml import group members importing group members import methods `javax.jcr.session` `javax.jcr.workspace` storage agnostic supports both, property based node based, strategies backward compatible content exported jackrabbit 2.x. group member lists modified import internally processed using normal user manager apis. implies node structure import might one represented input. #### add remove group members id since oak 1.3.4 default user management implementation also allows modify group membership specifying member id(s) (see [jcr-3880] [oak-3170]). following details worth mentioning: - `null` empty string id immediately fail operation `constraintviolationexception`; changes already made reverted, - attempt make group member list id return value fail operation, - duplicate ids parameter list silently ignored, - <s>cyclic membership validation postponed validator called upon `root.commit` fail point; cyclic membership needs manually resolved application</s> (see [oak-3170] below) - whether non-existing (or accessible) authorizable added removed depends configured `importbehavior`: - abort: id resolved corresponding authorizable; exist `constraintviolationexception` thrown immediately; changes already made reverted. - besteffort: specified ids resolved corresponding authorizables silently added|removed to|from set members; ids successfully added|removed listed return value. - ignore: id resolved corresponding authorizable; exist returned _failed_ return value. #### invalid membership ##### invalid authorizable adding different implementation `authorizable` allowed. always verified calling `group.addmember(authorizable)`. ##### group member adding target group member succeed. adding members id (`group.addmembers(string...)`) violation spotted simple id comparison. ##### everyone group everyone member group representing `everyoneprincipal` specially handled. due dynamic nature adding members group allowed adding member group would cause cyclic membership. note however, validation omitted case `group.addmembers(string...)` `importbehavior.besteffort` (see above). ##### cyclic membership since oak 1.7.0 explicit check cyclic group membership moved `validator` `group` implementation. cyclic membership might spotted membership resolution log cycle upon collection members/groups. following scenarios may leave cycle unnoticed upon adding members: - `group.addmember(authorizable)` editing `session` cannot read groups included cycle. - `group.addmembers(string...)` `importbehavior.besteffort` member id resolved. see [oak-3170] additional information. <a name="configuration"></a> ### configuration note oak 1.0 implementation responsible defining content structure expand multi-valued `rep:members` property accordingly. consequently, following configuration option `groupmembershipsplitsize` present jackrabbit 2.x supported anymore. <!-- hidden references --> [org.apache.jackrabbit.api.security.user.group]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/user/group.html [org.apache.jackrabbit.api.security.user.authorizable]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/user/authorizable.html [jcr-3880]: https://issues.apache.org/jira/browse/jcr-3880 [oak-3170]: https://issues.apache.org/jira/browse/oak-3170 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/history.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> password history -------------------------------------------------------------------------------- ### general since version 1.3.3 oak provides functionality remember configurable number passwords password changes prevent password set changing user's password found said history. <a name="configuration"></a> ### configuration administrator may enable password history via `org.apache.jackrabbit.oak.security.user.userconfigurationimpl` osgi configuration. default history disabled (`passwordhistorysize` set 0). following configuration option supported: | parameter | type | default | description | |-------------------------------|---------|----------|--------------------| | `param_password_history_size` | int | 0 | number passwords stored history | | | | | | setting configuration option value greater 0 enables password history sets feature remember specified number passwords user. note, current implementation limit 1000 passwords remembered history. <a name="how"></a> ### works #### representation repository history password hashes recorded multi-value property `rep:pwdhistory` user's `rep:pwd` node, mandates specific node type `rep:password` `rep:pwdhistory` property defined protected order guard user modifying (overcoming) password history limitations. [rep:user] > rep:authorizable, rep:impersonatable + rep:pwd (rep:password) = rep:password protected - rep:password (string) protected ... [rep:password] - * (undefined) protected - * (undefined) protected multiple #### recording passwords feature enabled, user changing password, old password hash recorded password history. old password hash recorded password set (non-empty). therefore setting password user first time (i.e. creation user password set before) result history record, old password. old password hash copied password history *after* provided new password validated *before* new password hash written user's `rep:password` property. history operates fifo list. new password history record exceeding configured max history size, results oldest recorded password removed history. also, configuration parameter history size changed non-zero smaller value before, upon next password change oldest records exceeding new history size removed. #### evaluation password history upon user changing password password history feature enabled (configured password history size > 0), implementation checks current password password hashes recorded history matches new password. record match, `constraintviolationexception` thrown user's password *not* changed. #### xml import users imported via jcr xml importer, password history imported irrespective whether password history feature enabled not. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/authorizableaction.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> authorizable actions -------------------------------------------------------------------------------- ### overview oak 1.0 comes extension jackrabbit user management api allows perform additional actions validations upon common user management tasks - create authorizables - remove authorizables - change user's password similar functionality present jackrabbit 2.x internal interface. compared jackrabbit interface new `authorizableaction` slightly adjusted match oak requirements operate directly oak api, eases handling implementation specific tasks writing protected items. ### authorizableaction api following public interfaces provided oak package `org.apache.jackrabbit.oak.spi.security.user.action`: - [authorizableaction] - [authorizableactionprovider] `authorizableaction` interface allows perform validations write additional application specific content executing user management related write operations. therefore actions executed part transient user management modifications. contrasts `org.apache.jackrabbit.oak.spi.commit.commithook`s turn triggered modifications persisted. consequently, implementations `authorizableaction` interface expected adhere rule perform transient repository operation validation. must force changes persisted calling `org.apache.jackrabbit.oak.api.root.commit()`. see section [group actions](groupaction.html) related extension monitor group specific operations [user actions](useraction.html) user specific operations. ### default implementations oak 1.0 provides following base implementations: - `abstractauthorizableaction`: abstract base implementation perform action. - `defaultauthorizableactionprovider`: default action provider service allows enable built-in actions provided oak. - `compositeactionprovider`: allows aggregate multiple provider implementations. #### changes wrt jackrabbit 2.x - actions longer operate jcr api rather oak api direct. - provider interface simplifies pluggability #### built-in authorizableaction implementations following implementations `authorizableaction` interface provided: * `accesscontrolaction`: set permission new authorizables * `passwordvalidationaction`: simplistic password verification upon user creation password modification * `passwordchangeaction`: verifies new password different old one * `clearmembershipaction`: clear group membership upon removal authorizable. note, remove membership references visible editing session. jackrabbit 2.x actions executed editing session target operation fail configured actions fails (e.g. due insufficient permissions editing oak contentsession). ### pluggability default security setup present oak 1.0 able provide custom `authorizableactionprovider` implementations automatically combine different implementations using `compositeactionprovider`. osgi setup following steps required order add action provider implementation: - implement `authorizableactionprovider` interface exposing custom action(s). - make provider implementation osgi service make available oak repository. - make sure `authorizableactionprovider` listed required service `securityprovider` (see also [introduction](../introduction.html#configuration])) ##### examples ###### example action provider @component() @service(authorizableactionprovider.class) public class myauthorizableactionprovider implements authorizableactionprovider { private static final string public_profile_name = "publicprofilename"; private static final string private_profile_name = "privateprofilename"; private static final string friends_profile_name = "friendsprofilename"; @property(name = public_profile_name, value = "publicprofile") private string publicname; @property(name = private_profile_name, value = "privateprofile") private string privatename; @property(name = friends_profile_name, value = "friendsprofile") private string friendsname; private configurationparameters config = configurationparameters.empty; public myauthorizableactionprovider() {} public myauthorizableactionprovider(configurationparameters config) { this.config = config; } //-----------------------------------------< authorizableactionprovider >--- @override public list<? extends authorizableaction> getauthorizableactions(securityprovider securityprovider) { authorizableaction action = new profileaction(publicname, privatename, friendsname); action.init(securityprovider, config); return collections.singletonlist(action); } //----------------------------------------------------< scr integration >--- @activate private void activate(map<string, object> properties) { config = configurationparameters.of(properties); } } ###### example action example action generates additional child nodes upon user/group creation later used store various target-specific profile information: class profileaction extends abstractauthorizableaction { private final string publicname; private final string privatename; private final string friendsname; profileaction(@nullable string publicname, @nullable string privatename, @nullable string friendsname) { this.publicname = publicname; this.privatename = privatename; this.friendsname = friendsname; } @override public void oncreate(group group, root root, namepathmapper namepathmapper) throws repositoryexception { createprofilenodes(group.getpath(), root); } @override public void oncreate(user user, string password, root root, namepathmapper namepathmapper) throws repositoryexception { createprofilenodes(user.getpath(), root); } private void createprofilenodes(@nonnull string authorizablepath, @nonnull root root) throws accessdeniedexception { tree tree = root.gettree(authorizablepath); (tree.exists()) { nodeutil authorizablenode = new nodeutil(tree); (publicname != null) { authorizablenode.addchild(publicname, nodetypeconstants.nt_oak_unstructured); } (privatename != null) { authorizablenode.addchild(privatename, nodetypeconstants.nt_oak_unstructured); } (friendsname != null) { authorizablenode.addchild(friendsname, nodetypeconstants.nt_oak_unstructured); } } } ###### example non-osgi setup map<string, object> userparams = new hashmap<string, object>(); userparams.put(userconstants.param_authorizable_action_provider, new myauthorizableactionprovider()); configurationparameters config = configurationparameters.of(immutablemap.of(userconfiguration.name, configurationparameters.of(userparams))); securityprovider securityprovider = securityproviderbuilder.newbuilder().with(config).build(); repository repo = new jcr(new oak()).with(securityprovider).createrepository(); <!-- hidden references --> [authorizableaction]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/action/authorizableaction.html [authorizableactionprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/action/authorizableactionprovider.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/query.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> searching users groups -------------------------------------------------------------------------------- user management api provided jackrabbit comes dedicated query api allows searching authorizables indepedant underlying user management implementation. ### lookup single authorizable - `usermanager.getauthorizable(string)` : lookup id - `usermanager.getauthorizable(principal` : lookup principal - `usermanager.getauthorizablebypath(string)` : lookup path ###### examples authorizable = usermgr.getauthorizable("jackrabbit"); authorizable a2 = usermanager.getauthorizablebypath(a.getpath()); authorizable everyonegroup = usermanager.getauthorizable(everyoneprincipal.getinstance()); ### searching authorizables - `usermanager.findauthorizables(string relpath, string value)` - `usermanager.findauthorizables(string relpath, string value, int searchtype)` - `usermanager.findauthorizables(query query)` ### query api - [query]: query object passed findauthorizable method. single `build(querybuilder)` method. - [querybuilder]: query builder described below. #### querybuilder ##### find property following conditions used find authorizables properties: - `querybuilder.eq(string relpath, value)`: holds property relpath _equal_ specified value. - `querybuilder.neq(string relpath, value)`: holds property relpath _not equal_ specified value. - `querybuilder.lt(string relpath, value)`: holds property relpath _smaller_ specified value. - `querybuilder.le(string relpath, value)`: holds property relpath _smaller equal_ than/to specified value.- querybuilder.lt(string relpath, value) : matches property value relpath _smaller_ specified value. - `querybuilder.gt(string relpath, value)`: holds property relpath _greater_ specified value. - `querybuilder.ge(string relpath, value)`: holds property relpath _greater equal_ than/to specified value. - `querybuilder.ge(string relpath, value)`: holds property relpath _greater equal_ than/to specified value. - `querybuilder.contains(string relpath, string searchexpr)`: full text search. - `querybuilder.exists(string relpath)`: holds property relpath exists. ###### examples iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.eq("@name", vf.createvalue("jackrabbit"))); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.gt("profile/@weight", vf.createvalue(200.0))); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.contains("profile/@color", "gold")); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.exists("@poisonous")); } }); ##### find pattern following conditions allow specify search pattern, '%' represents string zero characters '_' represents single character. - `querybuilder.like(string relpath, string pattern)`: holds property relpath matches pattern. - `querybuilder.like(string relpath, string pattern)`: holds property relpath matches pattern. - `querybuilder.namematches(string pattern)`: filter principal name (see below) ###### examples iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.like("profile/@food", "c%")); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.like("profile/@food", "c_t")); } }); ##### find property use "." indicate properties name given relative path included search result. ###### examples iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.contains(".", ""jackrabbit"")); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.contains("profile/.", "gold")); } }); ##### multiple conditions - `querybuilder.and(condition condition1, condition condition2)`: holds sub conditions hold - `querybuilder.or(condition condition1, condition condition2)`: holds two sub conditions hold - `querybuilder.not(condition condition)`: holds sub condition hold. ###### examples iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.and( builder.eq("profile/@cute", vf.createvalue(true)), builder.eq("profile/@color", vf.createvalue("black")) )); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.or( builder.eq("profile/@food", vf.createvalue("mice")), builder.eq("profile/@food", vf.createvalue("nectar")) ) ); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.not(builder.exists("profile/@food")) )); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.and( builder.eq("profile/@cute", vf.createvalue(true)), builder.not(builder.eq("profile/@color", vf.createvalue("black"))) )); } }); ##### sort results - `querybuilder.setsortorder(string propertyname, direction direction)` - `querybuilder.setsortorder(string propertyname, direction direction, boolean ignorecase)` direction either - `direction.ascending` - `direction.descending` ###### examples final boolean ignorecase = true; iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.exists("profile/@weight")); builder.setsortorder("profile/@weight", querybuilder.direction.ascending, ignorecase); } }); ##### set limits - `querybuilder.setlimit(long offset, long maxcount)` - `querybuilder.setlimit(value bound, long maxcount)` : bound refers value `setsortorder(string, direction)` property. result limited authorizables whose values sort order property follow `bound` sort direction. ###### examples final long offset = 25; final long maxcount = 1000; // -1 limit iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setlimit(offset, maxcount); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.eq("profile/@cute", vf.createvalue(true))); builder.setsortorder("profile/@weight", querybuilder.direction.ascending, true); builder.setlimit(vf.createvalue(1000.0), count); } }); ##### filter authorizable type - `querybuilder.setselector(class<? extends authorizable> selector)`: limit search result specific type authorizables (in example: groups only) selector may take following values: - `authorizable.class` - `group.class` - `user.class` ###### example iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setselector(group.class); } }); ##### find principal name - `querybuilder.namematches(string pattern)`: pattern may include '_' '%' (see above). note: 'namematches' condition shortcut regular search principal name, default implementation stored `rep:principalname`. take custom name properties account query `rep:authorizableid`. ###### examples iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.namematches("j%p")); } }); iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.namematches("c_tp")); } }); ##### find group members - `querybuilder.setscope(string groupname, boolean declaredonly)`: return members group specified name. ###### example final declaredmembersonly = false; iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setscope("mammals", declaredmembersonly); } }); ##### search impersonators - 'querybuilder.impersonates(string principalname)' note: condition looks authorizables granted impersonation authorizable specified principal name. ###### example iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { builder.setcondition(builder.impersonates("jackrabbitp")); } }); ##### find find authorizables accessible editing session ###### example iterator<authorizable> result = usermgr.findauthorizables(new query() { public <t> void build(querybuilder<t> builder) { /* */ } }); ### characteristics default implementation see sections [differences jackrabbit 2.x](differences.html#query) [the default implementation](default.html#query) details. ### utilities see [org.apache.jackrabbit.commons.jackrabbit.user.authorizablequerymanager] utility class provided jcr-commons module present jackrabbit. <!-- hidden references --> [querybuilder]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/user/querybuilder.html [query]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/user/query.html [org.apache.jackrabbit.commons.jackrabbit.user.authorizablequerymanager]: http://svn.apache.org/repos/asf/jackrabbit/trunk/jackrabbit-jcr-commons/src/main/java/org/apache/jackrabbit/commons/jackrabbit/user/authorizablequerymanager.java # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/differences.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### user management : differences jackrabbit 2.x default user management implementation present following characteristics differ default behavior jackrabbit 2.x #### general * changes made user management api always transient require `session#save()` persisted. * case failure `session#refresh` longer called order prevent reverting changes unrelated user management operation. consequently responsibility api consumer specifically revert pending invalid transient modifications. #### differences interface ##### usermanager - stores user/group information workspace associated editing session - autosave feature longer supported default; configuration option `param_support_autosave` used obtain backwards compatible behavior - calling `getauthorizable` empty id `null` id/principal throw runtime exception silently returns `null` ##### authorizable * equality hashcode : implementation `object#equals()` `object#hashcode()` authorizables differs jackrabbit 2.x. longer relies _sameness_ underlaying jcr node compares ids user manager instance. * authorizable id: id authorizables stored separately `rep:authorizableid` property. value returned upon `authorizable#getid`. backwards compatibility falls back node name case id property missing. * node name: name authorizable node generated based configurable implementation `authorizablenodename` interface. default: id name hint. see section [authorizable node name generation](authorizablenodename.html) details. ##### user * creation: password longer mandatory upon user creation. ##### group * creation: `creategroup(principal)` longer generate groupid case principal name collides existing user group id. considered redundant jackrabbit api mean time added `usermanager#creategroup(string groupid)`. * group members: way many group members stored given group redesigned oak 1.0. see section [group membership](membership.html) detailed description. <a name="query"></a> ##### querybuilder user query expected work jackrabbit 2.x following notable bug fixes: * `querybuilder#setscope(string groupid, boolean declaredonly)` also works properly `everyone` group (see [oak-949]) * `querybuilder#impersonates(string principalname)` works properly admin principal specially treated implementation `impersonation` interface (see [oak-1183]). * `querybuilder#impersonates(string principalname)` respects `param_impersonator_principal_names` configuration option (see [oak-10173]) #### additional functionality ##### xml import * importing authorizable another tree configured user/group node failed upon save (-> see `uservalidator` `root#commit`). jackrabbit 2.x core used fail immediately. * `besteffort` behavior also implemented import impersonators (was missing jackrabbit /2.x). * oak also supports workspace import authorizables ##### built-in users - admin user initialized without password (`param_omit_admin_pw` config option) - anonymous user optional (missing `param_anonymous_id` config option) - anonymous user always initialized without password. ##### group representing everyone principal - implementation optional special group representing [everyone] principal consistent throughout group membership related methods. ##### authorizable actions former internal interface `authorizableaction` slightly adjusted match oak requirements part public oak spi interfaces. see corresponding [section](authorizableaction.html) details. #### node type definitions built-in node types related user management tasks modified follows. - *rep:authorizable* - new protected property `rep:authorizableid` - *rep:group* - extends `rep:memberreferences` provides multivalued property `rep:members` - child node definition `rep:members` deprecated longer used - new child node definition `rep:memberslist` following node type definitions added: - *rep:memberreferences* : provides multivalued `rep:members` property. - *rep:memberreferenceslist* following node type definition deprecated longer used: - *rep:members* #### configuration following configuration parameters present default implementation jackrabbit 2.x longer supported ignored: * "compatiblejr16" * "autoexpandtree" * "autoexpandsize" * "groupmembershipsplitsize" <!-- hidden references --> [oak-949]: https://issues.apache.org/jira/browse/oak-949 [oak-1183]: https://issues.apache.org/jira/browse/oak-1183 [oak-10173]: https://issues.apache.org/jira/browse/oak-10173 [everyone]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/principal/everyoneprincipal.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/user/authorizablenodename.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> authorizable node name generation -------------------------------------------------------------------------------- ### overview oak 1.0 comes extension jackrabbit user management api allows change way name authorizable node generated. jackrabbit 2.x target id used name-hint default. order prevent exposing identifier related information path authorizable node, desirable change default behavior plugging different implementation `authorizablenodename` interface. - `authorizablenodename` : defines generation authorizable node names case user management implementation stores user information repository. default implementation corresponding configuration parameter `param_authorizable_node_name`. default name generator replace installing osgi service implementations `authorizablenodename` interface. non-osgi setup user configuration must initialized configuration parameters provide custom generator implementation. ### authorizablenodename api following public interfaces provided oak package `org.apache.jackrabbit.oak.spi.security.user`: - [authorizablenodename] `authorizablenodename` interface defines single method allows generate valid jcr name given authorizable id. #### changes wrt jackrabbit 2.x - generation node name configuration option default user management implementation. - osgi-based setup default changed runtime plugging different implementation. e.g. `randomauthorizablenodename` component easily enabled providing required configuration. #### built-in authorizableaction implementations oak 1.0 provides following base implementations: - `authorizablenodename.default`: backwards compatible implementation uses authorizable id name hint. - `randomauthorizablenodename`: generating random jcr name (see [randomauthorizablenodename].java). ### pluggability default security setup present oak 1.0 run custom `randomauthorizablenodename` implementations. osgi setup following steps required order add different implementation: - implement `authorizablenodename` interface. - make implementation osgi service make available oak repository. ##### examples ###### example authorizablenodename osgi-based setup sufficient make service available repository order enable custom node name generator. @component @service(value = {authorizablenodename.class}) /** * custom implementation {@code authorizablenodename} interface * uses uuid authorizable node name. */ final class uuidnodename implements authorizablenodename { @override @nonnull public string generatenodename(@nonnull string authorizableid) { return uuid.randomuuid().tostring(); } } non-osgi setup custom name generator plugged making available user configuration follows: map<string, object> userparams = new hashmap<string, object>(); userparams.put(userconstants.param_authorizable_node_name, new uuidnodename()); configurationparameters config = configurationparameters.of(immutablemap.of(userconfiguration.name, configurationparameters.of(userparams))); securityprovider securityprovider = securityproviderbuilder.newbuilder().with(config).build(); repository repo = new jcr(new oak()).with(securityprovider).createrepository(); <!-- hidden references --> [authorizablenodename]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/authorizablenodename.html [randomauthorizablenodename]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/user/randomauthorizablenodename.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authorization/composite.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> combining multiple authorization models -------------------------------------------------------------------------------- ### general notes since oak 1.4 possible combine multiple authorization models within default security setup. main entry point aggregation multiple authorization models [compositeauthorizationconfiguration], charge generating composite variants `accesscontrolmanager`, `permissionprovider` `restrictionprovider` multiple authorization modules configured (see section [implementation details](#details) below. _please note:_ despite fact oak supports aggregation multiple authorization models, extension recommended experts in-depth knowledge understanding jackrabbit/oak authorization concepts. might otherwise result severe security issues heavily impact overall performance. <a name="api_extensions"></a> ### api extensions two interfaces required make given authorization model deployable aggregated setup: - [policyowner]: extension `accesscontrolmanager`, allows given implementation claim responsibility handling certain `accesscontrolpolicy` implementations. - [aggregatedpermissionprovider]: subclass `permissionprovider` mandated permission evaluation multiple providers configured. - [aggregationfilter]: optional add-on cancel aggregation (since oak 1.16) #### policyowner interface defining single method, allows identify `accesscontrolmanager` implementation responsible set removing given policy. `accesscontrolmanager`s deployed composite authorization setup required implement interface _if_ choose support _setpolicy_ _removepolicy_. omitting `policyowner` interface likely result `accesscontrolexception` policy owner found given type policy. #### aggregatedpermissionprovider extension `permissionprovider` interface allows given provider deployed composite authorization setup. additional methods allow aggregating provider identify given `permissionprovider` handle permission evaluation given set permissions given path. ##### example permission provider shipped [oak-authorization-cug](cug.html#details) module limited scope: evaluates read-access regular items configured supported paths. means e.g. implementation able determine write access granted given set `principal`s indicates fact returning subset supported read permissions upon `supportedpermissions(tree, propertystate, long)`. aggregated permission provider consequently consult implementation evaluation write permissions move providers aggregate. #### aggregationfilter oak 1.16 introduces optional add-on allows refine permission evaluation (and computation effective policies). specifically, interface [aggregationfilter] provides ability conditionally stop aggregation process. ##### example example permission provider present [threerolesauthorizationconfiguration] _oak-exercise_ given configured subtree apply following roles given `subject`: no-access, reader, editor owner. path outside configure tree model takes effect. module deployed oak repository installation already combines cug-authorization default authorization, aggregated permission evaluation mechanism would require authorization models grant permissions subtree. essentially mandates redundant permission setup models. custom `aggregationfilter` however would allow cancel aggregation `threerolespermissionprovider` completed evaluation given set principals would leave aggregation intact otherwise (i.e. permission evaluation outside configured path `threerolespermissionprovider` invoked principals match criteria). see also [managing access principal](principalbased.html#details_aggregationfilter) implementation example. <a name="details"></a> ### implementation details soon multiple authorization models configured security setup, `compositeauthorizationconfiguration` return dedicated `jackrabbitaccesscontrolmanager` `permissionprovider` wrapping objects provided aggregated implementations. note: long single authorization model configured (default setup) `compositeauthorizationconfiguration` omit extra wrapping. #### access control multiple modules deployed [compositeaccesscontrolmanager] following characteristics returned: - api calls reading information return combined result wrapped implementations. - methods defined solely `jackrabbitaccesscontrolmanager` additionally test delegatees implement extension. - api calls writing back policies look responsible `policyowner` specifically delegate call. owner found `accesscontrolexception` thrown. hence, given authorization model free implement jcr `accesscontrolmanager` jackrabbit extension. given model allows writing access control policies, access control manager implementation must additionally implement `policyowner` interface explained section [api extensions](#api_extensions) above. #### permission evaluation models implementing `aggregatedpermissionprovider` extensions respected aggregation [compositepermissionprovider]. allows individual models cover subset permissions and|or subset paths within repository. composite wrapper subsequently applies following logic evaluate effective permissions: - delegatee ask evaluate subset supported permissions claims responsible given item/path, - delegatee handle permissions question ignored, - delegatee claim responsible item/path ignored, - given set permissions ultimately granted given item/path, _all_ permissions successfully processed none delegatees involved denied access. implies evaluation permissions across multiple implementations strictly additive: soon one provider denies access (either explicit deny missing explicit allow) permissions denied. similarly, given combination permission providers fails process complete set permissions (e.g. one permission covered modules) access denied none provider charge proper evaluation. given permission provider means: calling method outside context aggregation (i.e. single model setup), 'limited' provider must never grant access permissions items able handle properly. words: permissions explicitly granted within scope implementation must denied. #### restriction management support multiple restriction providers already present default authorization implementation since oak 1.0. mechanism described section [restriction management](restriction.html) affected new functionality. `compositeauthorizationconfiguration` charge collecting `restrictionprovider`s aggregated modules expose complete set restrictions order meet api contract. nevertheless, authorization model responsible exposing, validating evaluating subset restrictions handle access control api extensions permission evaluation, respectively. given model may decide provide support restrictions. examples include modules deal different types `accesscontrolpolicy` restriction management apply (see example [oak-authorization-cug](cug.html#details)). <a name="configuration"></a> ### configuration default `compositeauthorizationconfiguration` aggregates results applying `and` operation current set providers. changed via configuration `or`. see section [introduction oak security](../../introduction.html#configuration) details. <a name="pluggability"></a> ### pluggability following steps required plug additional authorization model oak repository: - implement custom `authorizationconfiguration` - deploy bundle containing implementation - bind `authorizationconfiguration` `securityprovider`: - osgi setup achieved adding configuration `requiredservicepids` property `securityproviderregistration` _("apache jackrabbit oak securityprovider")_ i.e. forcing recreation `securityprovider`. - non-osgi setup requires adding configuration `securityprovider` (e.g. _securityproviderbuilder.newbuilder().with(params).build()_) subsequently creating jcr/oak repository object. **important note** despite fact oak supports aggregation multiple authorization models, extension recommended experts in-depth knowledge understanding jackrabbit/oak authorization concepts. might otherwise result severe security issues heavily impact overall performance. <!-- hidden references --> [policyowner]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/accesscontrol/policyowner.html [aggregatedpermissionprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/permission/aggregatedpermissionprovider.html [aggregationfilter]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/permission/aggregationfilter.html [compositeauthorizationconfiguration]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/composite/compositeauthorizationconfiguration.java [compositeaccesscontrolmanager]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/composite/compositeaccesscontrolmanager.java [compositepermissionprovider]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/composite/compositepermissionprovider.java [threerolesauthorizationconfiguration]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-exercise/src/main/java/org/apache/jackrabbit/oak/exercise/security/authorization/models/simplifiedroles/threerolesauthorizationconfiguration.java # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authorization/bestpractices.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # best practices authorization <!-- macro{toc} --> ## get started ### threat model start coding, creating content setting access control set aside time consider needed comes securing application (and could go wrong). words: write threat model make sure keep updating continue developing. following references provide good overview well guidance build threat model: - https://shostack.org/resources/whitepapers/threat-modeling-what-why-how - https://owasp.org/www-community/threat_modeling - https://owasp.org/www-community/threat_modeling_process ### content modelling suggested [jackrabbbit wiki](https://jackrabbit.apache.org/archive/wiki/jcr/davidsmodel_115513389.html#davidsmodel-rule#2:drivethecontenthierarchy,don'tletithappen) content hierarchy jcr repository designed happen. access control requirements tend good driver. make sure content design allows readable manageable access control setup later secure data. excessive complexity often strong indicator problems content model, making security error prone difficult reason (and might ultimately might lead issues scaling). example access control setup (with [sling repoinit](https://sling.apache.org/documentation/bundles/repository-initialization.html)) illustrating content different access requirements kept separate trees complexity may yield undesired effects (see also section 'remember inheritance' below): # content design results complex ac-setup vulnerability # ---------------------------------------------------------------------- create path /content create path /content/public create path /content/content2/also_public # extra folder public information create path /content/sensitive_info # sensitive data mixed regular non-sentive content set acl /content deny everyone jcr:all # likely redundant allow readers jcr:read allow editors jcr:read, jcr:write deny readers jcr:read restriction(rep:subtrees, /sensitive_info) # editors subject reader editor? allow everyone jcr:read restriction(rep:subtrees, /public, /also_public) # different public folders?? # ... happens new node /content/public/abc/sensitive_info? end # improved content design # ------------------------------------------------------------------------------ create path /content create path /content/public create path /sensitive_info set acl /content allow readers jcr:read allow editors jcr:read, jcr:write end set acl /content/public allow everyone jcr:read end # note: ac setup sensitive info neither roles must access ### define roles tasks finally, write basic characteristics demands application without getting access control details making assumptions needs reflected repository: - roles present - kind tasks roles designed perform - define services accessing repository kind tasks need complete note, document human readable go implementation details: instead writing principal 'content-authors' needs jcr:write /content, define asset 'content', define kind data contains sensitive data (similar threat model). identify roles going interact data interact: example may identify role reading data, second role expected read write, third one approve new content publish it). ## general best practices ### know get need familiarize jcr access control management oak authorization design extensions starting edit permission setup oak installation. help avoid common pitfalls. find granting _content-writers_ role full access make work, probably left application vulnerable. - jcr specification sections [access control management](https://s.apache.org/jcr-2.0-spec/16_access_control_management.html) [permissions capabilities](https://s.apache.org/jcr-2.0-spec/9_permissions_and_capabilities.html) - [oak authorization documentation](../authorization.html) separate sections [access control management](../accesscontrol.html) [permission evaluation](../permission.html). - exercises authorization topics https://github.com/apache/jackrabbit-oak/tree/trunk/oak-exercise/src/test/java/org/apache/jackrabbit/oak/exercise/security/authorization ### principle least privilege keep mind permissions granted equivalent denying everything (which case redundant). start without access keep granting permissions needed, following [principle least privilege](https://en.wikipedia.org/wiki/principle_of_least_privilege). words: grant minimal set privileges required perform particular task. ### verification write tests upfront verify role task expected effective permissions (see definition roles) granted. neither less more. ideally, tests fail soon someone attempting make change permission setup. granting additional permissions may open door privilege escalation revoking permissions break application (if follow principle least privilege). may also include assertions permissions granted resources outside scope given role/task. #### example: pseud-code permission validator permissiontestrule ptr = ... ptr.newpermissionvalidator(everyoneprincipal.name) .hasnopermission("/") .hasnopermission("/content") .hasnopermission("/content/protected", read) .hasonlypermission("/content/public", read) .hasonlypermission("/content/public/child-item, read) .hasnopermission("/sensitive_info") .validate(); ## oak specific best practices ### avoid deny authorization models present apache jackrabbbit oak start without access granted default i.e. implicit deny everywhere. therefore recommended grant access needed avoid adding explicit deny access control entries. particular combination subsequent ```allow``` rules overall effect hard understand soon multiple principals contained given subject. wary find adding combinations denies allows might highlight problematic patterns content model hard understand secure time. ### avoid redundancy specify redundant access control setup safe side: - access granted, avoid repeating setup hierarchy. - avoid setup principals administrative access permission evaluation omitted. might even create false sense security. - avoid redundant membership impact performance permission evaluation ### principal principle oak authorization designed work `java.security.principal` abstract representation kind entity like e.g. individual, role, corporation, login id even service. jcr specification define repository knows principals, jackrabbit api defines [principal management](../principal.html) extension. #### every principal user/group oak allows plugging custom sources principals reflected principal management api. therefore, assume every principal backed user group. repository's user management one potential source principals. ##### example : everyone // everyone always exists even group user management principalmanager principalmgr = ((jackrabbitsession) session).getprincipalmanager(); principal everyone = principalmanager.geteveryone(); #### membership guarantee similarly, make sure always evaluate permissions verify subject access granted instead checking user member group. access control defined particular group principal affects members implementation detail authorization setup. ##### example : administrative access default authorization model full access repository configured selected user group principals. (see [configuration parameters](../permission/default.html#configuration) default permission evaluation). wish determine given subject full access, assume group 'administrators' members full access. #### stick group principals preferable set access control group principals instead individual user principals make sure `principalprovider` resolves principal membership according needs. further, note default authorization model give precedence user principals upon evaluation words default access control entries user principals overwrite effect groups irrespective order list (see next section). rule particularly important anonymous user marking access `guestcredentials`. setup access control anonymous result guest account effective permissions apply authenticated session. usually intended instead setting permissions _everyone_ group. see also [principalmanager.geteveryone()](/oak/docs/apidocs/org/apache/jackrabbit/api/security/principal/principalmanager.html#geteveryone) ### understand default access control permission management #### remember inheritance designing access control setup keep mind effective permissions inherited node hierarchy: allowing `jcr:read` _content-readers_ role /content also grant _content-readers_ access nodes properties subtree (e.g. /content/project1 /content/project1/jcr:title). addition, effective permissions get inherited (nested) group principals according set principals resolved added `javax.security.auth.subject` upon repository login. see [permission evaluation detail](../permission/evaluation.html) additional information well exercises [l3_precedencerulestest](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-exercise/src/test/java/org/apache/jackrabbit/oak/exercise/security/authorization/permission/l3_precedencerulestest.java) #### built-in privileges jsr 382 defines set built-in privileges apply repository operations (see https://s.apache.org/jcr-2.0-javadoc/javax/jcr/security/privilege.html). default set extended oak cover additional features outside scope defined jcr (like e.g. index user management). complete list found [privilege management : default implementation](../privilege/default.html). minimal set privileges required operation outlined [mapping api calls privileges](../privilege/mappingtoprivileges.html) [mapping privileges items](../privilege/mappingtoitems.html). ##### privileges affecting parent node note particular add/removing node `jcr:addchildnodes` `jcr:removechildnodes` required parent node respectively i.e. allowing modification child-node collection. addition `jcr:removenode` needs granted target node removal. thus, following subtle difference apply evaluation effective permissions vs. privileges (see also [permissions vs privileges](../permission/permissionsandprivileges.html)) exercises [l4_privilegesandpermissionstest.java](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-exercise/src/test/java/org/apache/jackrabbit/oak/exercise/security/authorization/permission/l4_privilegesandpermissionstest.java)): string parentpath = "/content/parent"; string toremove = "/content/parent/child"; string toadd = "/content/parent/newchild"; session session = ... // testing privileges // ---------------------------------------------------------------------------------------- accesscontrolmanager acmgr = session.getaccesscontrolmanager(); privilege jcraddchildnodes = acmgr.privilegefromname(privilege.jcr_add_child_nodes); privilege jcrremovechildnodes = acmgr.privilegefromname(privilege.jcr_remove_child_nodes); privilege jcrremovenode = acmgr.privilegefromname(jcr_remove_node); // test (unspecified) child nodes added/removed parent boolean canmodifychildcollection = acmgr.hasprivileges(parentpath, new privilege[]{jcraddchildnodes, jcrremovechildnodes}); # test existing child node removed boolean canremovenode = acmgr.hasprivileges(toremove, new privilege[]{jcrremovenode}); // testing permissions (on target node parent) // ---------------------------------------------------------------------------------------- // test not-yet existing node could added /content/parent/newchild boolean canaddnode = session.haspermission(toadd, session.action_add_node); // test existing child node removed boolean canremoveitem = session.haspermission(toremove, session.action_remove); boolean canremovenode = session.haspermission(toremove, jackrabbitsession.action_remove_node); // test non-existing node could removed (not possible privilege evaluation); boolean canremovenode = session.haspermission(toadd, jackrabbitsession.action_remove_node); #### leverage `privilegecollection` since oak 1.42.0 jackrabbit api defines new interface `privilegecollection` offers improved support testing effective privileges (see also [oak-9494](https://issues.apache.org/jira/browse/oak-9494)). allows avoiding repeated calls `accesscontrolmanager.hasprivileges` manual resolution aggregated privileges dealing privilege array returned `accesscontrolmanager.getprivileges`. // using privilegecollection // ---------------------------------------------------------------------------------------- jackrabbitaccesscontrolmanager acmgr = ... privilegecollection pc = acmgr.getprivilegecollection(parentpath); boolean canremovechildnodes = pc.includes(privilege.jcr_remove_child_nodes); boolean canmodifychildcollection = pc.includes(privilege.jcr_remove_child_nodes, privilege.jcr_add_child_nodes); boolean hasallprivileges = pc.includes(privilege.jcr_all); assertfalse(hasallprivileges); privilege[] privilegesonparentnode = pc.getprivileges(); #### use restrictions limit effect apart picking minimal set privileges minimize risk privilege escalation narrowing effect given access control setup certain items subtree. achieved creating access control entries come additional restriction. note though, restrictions affect readability. so, may want find balance enhanced security simplicity. revisiting content design early likely better choice. see section [restriction management](restriction.html) additional details well lessons [l7_restrictionstest](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-exercise/src/test/java/org/apache/jackrabbit/oak/exercise/security/authorization/accesscontrol/l7_restrictionstest.java) [l8_globrestrictiontest](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-exercise/src/test/java/org/apache/jackrabbit/oak/exercise/security/authorization/accesscontrol/l8_globrestrictiontest.java) oak exercise module. #### access control setup system user oak setup supports principal-based authorization (see [managing access principal](principalbased.html)) recommended leverage system sessions associated osgi service. helps keep application owned access control setup apart regular content. see also [service authentication](https://sling.apache.org/documentation/the-sling-engine/service-authentication.html) apache sling. ### leverage customizations oak allows customization extensions parts authorization setup. find struggling reflect needs built-in functionality, consider extending customizing authorization configuration repository. #### leverage custom privileges identify application specific operations cannot reflected using built-in privileges, oak allows registering custom privileges (see section [privilege management](../privilege.html#jackrabbit_api)). however, note built-in permission evaluation enforce custom privileges. instead, enforce application write custom authorization model (see section [combining multiple authorization models](composite.html)) example might find publishing content cannot easily secured using built-in privileges end registering custom _myapp:publish_ privilege. #### leverage custom restrictions default authorization oak allows limit effect individual jcr access control entries means restrictions. see section [restriction management](restriction.html) built-in restrictions instructions plug custom restrictions security setup. aware though potential performance impact additional evaluation. #### leverage custom authorization model find built-in authorization model suited reflect needs setting access control becomes cumbersome overly complex, consider customizing authorization setup (see section [combining multiple authorization models](composite.html)). _oak-exercise_ module defines couple [examples](https://github.com/apache/jackrabbit-oak/tree/trunk/oak-exercise/src/main/java/org/apache/jackrabbit/oak/exercise/security/authorization/models) illustrate alternative approaches. corresponding training material located section [advanced authorization topics](https://github.com/apache/jackrabbit-oak/tree/trunk/oak-exercise/src/test/java/org/apache/jackrabbit/oak/exercise/security/authorization/advanced). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authorization/restriction.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> restriction management -------------------------------------------------------------------------------- ### overview concept restriction created extension jcr access control management order refine effect individual access control entries. quoting jsr 283 section 16.6.2 permissions: > [...] permissions encompass restrictions imposed privileges, > also include additional policy-internal refinements effects > fine-grained exposed privilege discovery. common case may > provide finer-grained access restrictions individual properties > child nodes node policy applies. furthermore, restriction concept aimed allow custom extensions default access control implementation meet project specific needs without implement common functionality provided jcr. existing potential examples restrictions limiting effect given access control entry permission evaluation include: - set node types - set namespaces - name/path pattern - dedicated time frame - size value set built-in restrictions available jackrabbit 2.x extended along extensions jackrabbit api. covers public facing usage restrictions i.e. access control management. addition, oak provides internal restriction api adds support validation permission evaluation. <a name="jackrabbit_api"></a> ### jackrabbit api jackrabbit api adds following extensions jcr access control management read create entries restrictions: - `jackrabbitaccesscontrollist` - `getrestrictionnames()` : returns jcr names supported restrictions. - `getrestrictiontype(string restrictionname)` : returns property type given restriction. - `addentry(principal, privilege[], boolean, map<string, value>)`: map contain restrictions. - `addentry(principal, privilege[], boolean, map<string, value>, map<string, value[]>)`: allows specify single multi-value restrictions (since oak 1.0, jackrabbit api 2.8) - `jackrabbitaccesscontrolentry` - `getrestrictionnames()`: returns jcr names restrictions present entry. - `getrestriction(string restrictionname)`: returns restriction jcr value. - `getrestrictions(string restrictionname)`: returns restriction array jcr values (since oak 1.0, jackrabbit api 2.8). <a name="api_extensions"></a> ### oak restriction api following public interfaces provided oak package `org.apache.jackrabbit.oak.spi.security.authorization.restriction` provide support pluggable restrictions access control management repository internal permission evaluation: - [restrictionprovider]: interface obtain restriction information needed access control permission management - [restriction]: restriction object created using jackrabbit access control api - [restrictiondefinition]: static definition supported restriction - [restrictionpattern]: processed restriction ready permission evaluation - [aggregationaware]: optional extension make [restrictionprovider] aware used composite setup, since oak 1.44.0 (see [oak-9782]) <a name="default_implementation"></a> ### default implementation oak 1.0 provides following base implementations: - `abstractrestrictionprovider`: abstract base implementation provider interface. since 1.44.0 also implements [aggregationaware] (see [oak-9782]) - `restrictiondefinitionimpl`: default implementation `restrictiondefinition` interface. - `restrictionimpl`: default implementation `restriction` interface. - `compositerestrictionprovider`: allows aggregating multiple provider implementations (see [pluggability](#pluggability) below). - `compositepattern`: allows aggregating multiple restriction patterns. #### changes wrt jackrabbit 2.x apart fact internal jackrabbit extension replaced public api, restriction implementation oak differs jackrabbit 2.x follows: - separate restriction management api (see below) oak level simplifies plugging custom restrictions. - changed node type definition storing restrictions default implementation. - oak restrictions collected underneath separate child node "rep:restrictions" - backwards compatible behavior restrictions stored underneath ace node directly - support multi-valued restrictions (see [jcr-3637](https://issues.apache.org/jira/browse/jcr-3637), [jcr-3641](https://issues.apache.org/jira/browse/jcr-3641)) - validation restrictions delegated dedicated commit hook - restriction `rep:glob` limits number wildcard characters 20 - new restrictions `rep:ntnames`, `rep:prefixes`, `rep:itemnames` `rep:current` #### built-in restrictions following `restriction` implementations supported default oak access control management: | restriction name | type | multi-valued | mandatory | description | since | |------------------|--------|--------------|-----------|--------------------------------------|-------| | `rep:glob` | string | false | false | single name, path path pattern '*' wildcard(s), see details | oak 1.0 | | `rep:ntnames` | name | true | false | multivalued restriction limit effect nodes specified primary node types (no nt inheritance) | oak 1.0 | | `rep:prefixes` | string | true | false | multivalued restriction limit effect item names match specified namespace prefixes (session level remapping respected) | oak 1.0 | | `rep:itemnames` | name | true | false | multivalued restriction property node names | oak 1.3.8 | | `rep:current` | string | true | false | multivalued restriction limits effect single level i.e. target node access control entry takes effect optionally subset properties. inheritance ace effect nodes subtree properties. expanded jcr property names namespace remapping supported (see details) | oak 1.42.0 | | `rep:globs` | string | true | false | multivalued variant `rep:glob` restriction | oak 1.44.0 | | `rep:subtrees` | string | true | false | multivalued restriction limits effect one multiple subtrees (see below) | oak 1.44.0 | <a name="rep_glob"></a> ##### rep:glob - details examples nodepath `/foo` following results expected different values `rep:glob`. please note pattern based simple path concatenation equally applies either type item (both nodes properties). consequently, examples need adjusted root node order produce desired effect. particular path two subsequent / invalid never match target item path. | rep:glob | result | |---------------|----------------------------------------------------------| | null | i.e. restriction: matches /foo descendants | | "" | matches node /foo (no descendants, even properties) | examples including wildcard char: | rep:glob | result | |---------------|----------------------------------------------------------| | \* | foo, siblings foo descendants | | /\*cat | descendants /foo whose paths end 'cat' | | \*cat | siblings descendants foo name ending 'cat' | | /\*/cat | non-direct descendants /foo named 'cat' | | /cat\* | descendant /foo direct foo-descendant segment starting 'cat' | | \*/cat | descendants /foo foo's siblings name segment 'cat' | | cat/\* | descendants '/foocat' | | /cat/\* | descendants '/foo/cat' | | /\*cat/\* | descendants /foo intermediate segment ending 'cat' | examples without wildcard char: | rep:glob | result | |---------------|----------------------------------------------------------| | /cat | '/foo/cat' descendants | | /cat/ | descendants '/foo/cat' | | cat | '/foocat' descendants | | cat/ | descendants '/foocat' | see also [globpattern] implementation details [globrestrictiontest] _oak-exercise_ module training material. <a name="rep_current"></a> ##### rep:current - details examples restriction limits effect target node. value restriction property defines properties target node addition also match restriction: - empty value array make restriction matching target node (i.e. equivalent rep:glob=""). - array qualified property names extend effect restriction properties target node match specified names. - residual name * match properties target node. nodepath `/foo` following results expected different values `rep:current`: | rep:current | result | |-------------------|---------------------------------------------------------------| | [] | `/foo` only, none properties | | [\*] | `/foo` properties | | [jcr:primarytype] | `/foo` `jcr:primarytype` property. property | | [a, b, c] | `/foo` properties `a`,`b`,`c` | ###### known limitations - due support residual name `*`, valid jcr name, restriction `rep:current` defined `propertytype.string` instead `propertytype.name`. like `rep:glob` restriction therefore work expanded jcr names remapped namespace prefixes. - case permission evaluation path pointing *non-existing* jcr item (see e.g. `javax.jcr.session#haspermission(string, string)`), possible distinguish nodes properties. best-effort approach take identify known properties like e.g. `jcr:primarytype`. paths implementation `rep:current` restrictions assumes point non-existing nodes. example: `rep:current` present ace taking effect `/foo` call `session.haspermission("/foo/non-existing",session.action_read)` always return `false` restriction interpret `/foo/non-existing` path pointing node. <a name="rep_subtrees"></a> ##### rep:subtrees - details examples `rep:subtrees` restriction allows limit effect one multiple subtrees access-controlled node. simplified variant common pattern using 2 `rep:glob` (wildcard) patterns grant deny access particular node subtree descendent items. common pattern involving `rep:glob` may look follows: - entry 1: `rep:glob` = "/\*/path/to/subtree" - entry 2: `rep:glob`= "/\*/path/to/subtree/\*" `rep:subtrees` restriction neither requires multiple entries wildcard characters shown prone mistakes. corresponding setup `rep:subtrees` would - entry: `rep:subtrees` = "/path/to/subtree" matches tree defined /foo/path/to/subtree well subtree /foo/*/path/to/subtree. node path `/foo` following results expected different values `rep:subtrees`: | `rep:subtrees`| result | |---------------|-------------------------------------------------------------| | [/cat] | descendants `/foo` whose path ends `/cat` intermediate segment `/cat/` | | [/cat/] | descendants `/foo` intermediate segment `/cat/` | | [cat] | siblings descendants `/foo` whose path ends `cat` intermediate segment ending `cat` | | [cat/] | siblings descendants `/foo` intermediate segment ending `cat` | note: - variants 'cat'-paths could also consist multiple segments like e.g. `/cat/dog` `/cat/dog` - different subtrees matched defining multiple values restriction - contrast `rep:glob` wildcard characters required make sure restriction evaluated whole tree access controlled node. - empty value array never match path/item - null values empty string values ignored <a name="representation"></a> ### representation repository restrictions defined default oak repository stored properties dedicated `rep:restriction` child node target access control entry node. similarly, represented corresponding permission entry. node type definition used represent restriction content follows: [rep:ace] - rep:principalname (string) protected mandatory - rep:privileges (name) protected mandatory multiple - rep:nodepath (path) protected /* deprecated favor restrictions */ - rep:glob (string) protected /* deprecated favor restrictions */ - * (undefined) protected /* deprecated favor restrictions */ + rep:restrictions (rep:restrictions) = rep:restrictions protected /* since oak 1.0 */ /** * @since oak 1.0 */ [rep:restrictions] - * (undefined) protected - * (undefined) protected multiple <a name="pluggability"></a> ### pluggability default security setup present oak 1.0 able provide custom `restrictionprovider` implementations automatically combine different implementations using `compositerestrictionprovider`. osgi setup following steps required order add action provider implementation: - implement `restrictionprovider` interface exposing custom restriction(s). - make provider implementation osgi service make available oak repository. - make sure `restrictionprovider` listed required service `securityprovider` (see also [introduction](../introduction.html#configuration])) please make sure consider following recommendations implementing custom `restrictionprovider`: - restrictions part overall permission evaluation thus may heavily impact overall read/write performance - hashcode generation base implementation (`restrictionimpl.hashcode`) relies `propertystatevalue.hashcode`, includes internal string representation, optimal binaries (see also [oak-5784]) ##### examples ###### example restrictionprovider simple example `restrictionprovider` defines single time-based `restriction`, expected 2 values defining start end date, used allow deny access within given time frame. @component @service(restrictionprovider.class) public class myrestrictionprovider extends abstractrestrictionprovider { public myrestrictionprovider() { super(supportedrestrictions()); } private static map<string, restrictiondefinition> supportedrestrictions() { restrictiondefinition dates = new restrictiondefinitionimpl("dates", type.dates, false); return collections.singletonmap(dates.getname(), dates); } //------------------------------------------------< restrictionprovider >--- @override public restrictionpattern getpattern(string oakpath, tree tree) { (oakpath != null) { propertystate property = tree.getproperty("dates"); (property != null) { return datepattern.create(property); } } return restrictionpattern.empty; } @nonnull @override public restrictionpattern getpattern(@nullable string oakpath, @nonnull set<restriction> restrictions) { (oakpath != null) { (restriction r : restrictions) { string name = r.getdefinition().getname(); ("dates".equals(name)) { return datepattern.create(r.getproperty()); } } } return restrictionpattern.empty; } // todo: implementing 'validaterestrictions(string oakpath, tree acetree)' would allow make sure property contains 2 date values. } ###### example restrictionpattern time-based `restrictionpattern` used example provider above. class datepattern implements restrictionpattern { private final date start; private final date end; private datepattern(@nonnull calendar start, @nonnull calendar end) { this.start = start.gettime(); this.end = end.gettime(); } static restrictionpattern create(propertystate timeproperty) { (timeproperty.count() == 2) { return new datepattern( conversions.convert(timeproperty.getvalue(type.date, 0), type.date).tocalendar(), conversions.convert(timeproperty.getvalue(type.date, 1), type.date).tocalendar() ); } else { return restrictionpattern.empty; } } @override public boolean matches(@nonnull tree tree, @nullable propertystate property) { return matches(); } @override public boolean matches(@nonnull string path) { return matches(); } @override public boolean matches() { date = new date(); return d.after(start) && d.before(end); } }; ###### example non-osgi setup restrictionprovider rprovider = compositerestrictionprovider.newinstance(new myrestrictionprovider(), ...); map<string, restrictionprovider> authorizmap = immutablemap.of(param_restriction_provider, rprovider); configurationparameters config = configurationparameters.of(immutablemap.of(authorizationconfiguration.name, configurationparameters.of(authorizmap))); securityprovider securityprovider = securityproviderbuilder.newbuilder().with(config).build(); repository repo = new jcr(new oak()).with(securityprovider).createrepository(); <!-- hidden references --> [globpattern]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/restriction/globpattern.java?view=markup [globrestrictiontest]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-exercise/src/test/java/org/apache/jackrabbit/oak/exercise/security/authorization/accesscontrol/l8_globrestrictiontest.java?view=markup [restriction]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/restriction/restriction.html [restrictiondefinition]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/restriction/restrictiondefinition.html [restrictionpattern]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/restriction/restrictionpattern.html [restrictionprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/restriction/restrictionprovider.html [aggregationaware]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/restriction/aggregationaware.html [oak-5784]: https://issues.apache.org/jira/browse/oak-5784 [oak-9782]: https://issues.apache.org/jira/browse/oak-9782 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authorization/cug.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> managing access "closed user groups" (cug) -------------------------------------------------------------------------------- ### general `oak-authorization-cug` module provides alternative authorization model intended limit read access certain paths selected, small set `principal`s. restricted areas called `cug` marked dedicated policy type effectively prevent read-access anybody explicitly allowed. implies cug-authorization model solely evaluates enforces read access regular nodes properties. therefore may used additional, complementary authorization scheme primary module(s) is/are charge enforcing complete set permissions including read/write access, repository operations kind special permissions like reading writing access control content. see section [combining multiple authorization models](composite.html) information aggregating access control management permission evaluation different implementations. default `oak-authorization-cug` model disabled requires manual [configuration](#configuration) steps order plug oak security setup. deployed authorization configuration used following two operation modes: 1. evaluation disabled: access control management supported policies may applied repository without taking effect. 2. evaluation enabled: policies edited applied module take effect upon persisted, i.e. access items located restricted subject permission evaluation associated authorization model. <a name="jackrabbit_api"></a> ### jackrabbit api jackrabbit api defines extension jcr [accesscontrolpolicy] interface intended grant ability perform certain actions set [principal]s: - `principalsetpolicy` see [jackrabbit api](http://jackrabbit.apache.org/api/2.12/index.html?org/apache/jackrabbit/api/security/authorization/principalsetpolicy.html) details methods exposed interface. <a name="api_extensions"></a> ### api extensions module comes following extension `org.apache.jackrabbit.oak.spi.security.authorization.cug` package space: - [cugpolicy] - [cugexclude] ##### cugpolicy `cugpolicy` interface extends `principalsetpolicy` `jackrabbitaccesscontrolpolicy` interfaces provided jackrabbit api. comes following set methods allow read modify set `principal`s allowed access restricted area defined given policy instance. cugpolicy extends principalsetpolicy, jackrabbitaccesscontrolpolicy set<principal> getprincipals(); boolean addprincipals(@nonnull principal... principals) throws accesscontrolexception; boolean removeprincipals(@nonnull principal... principals) throws accesscontrolexception; ##### cugexclude `cugexclude` allows customize set principals excluded evaluation restricted areas. principals consequently never prevented accessing configured cugs read permission evaluation delegated module present setup. feature ships two implementations box: - `cugexclude.default`: default implementation excludes admin, system system-user principals. used fallback implementation configured. - `cugexcludeimpl`: osgi service extending default additionally allows excluded principals names runtime. see also section [pluggability](#pluggability) below. <a name="details"></a> ### implementation details #### access control management access control management part cug authorization models follows requirements defined jsr 283 extensions defined jackrabbit api (see section [access control management](../accesscontrol.html) following characterstics: ##### supported privileges implemenation `jackrabbitaccesscontrolmanager` supports subset privileges, namely `jcr:read`, `rep:readproperties`, `rep:readnodes`. ##### access control policies single type access control policies (`cugpolicy`) exposed accepted access control manager. effective cug policy creates restricted area starting target node inherited complete subtree defined therein. depending value mandatory `param_cug_supported_paths` [configuration](#configuration) option creation (and evaluation) cug policies limited certain paths within repository. within supported paths cugs nested. note however, principal set defined given `cugpolicy` inherited nested policies applied subtree. _note:_ performance reasons recommended limited usage `cugpolicy`s single couple subtrees repository. ##### management principal given fact given cug policy takes effect principals present system, access control management `principal` supported currently. corresponding jackrabbit api methods always return empty policy array. #### permission evaluation stated evaluation restricted areas requires `param_cug_enabled` [configuration](#configuration) option set `true`. switch allows setup restricted areas staging enviroment let take effect public facing production instance. permission evaluation enabled, `permissionprovider` implementation associated authorization model prevent read access restricted areas defined `cugpolicy`. `principal`s explicitly allowed policy globally configured `cugexclude` granted read permissions affected items subtree. example, applying persisting new `cugpolicy` path _/content/restricted/apache_foundation_, setting principal names _apache-members_ _jackrabbit-pmc_ prevent read access tree defined path `subject`s match two criteria: - `subject` contains`principal` _apache-members_ and|or _jackrabbit-pmc_ (as defined `cugpolicy`) - `subject` contains least one `principal` explicitly excluded cug evaluation configured, global `cugexclude` implies `permissionprovider` evaluate regular read permissions (i.e. `read_node` `read_property`). evaluation [permissions](../permission.html#oak_permissions) including reading cug policy node (access control content) consequently delegated authorization modules. case module dealing permissions, access denied (see section _combining multiple authorization models_ [details](composite.html#details)). #### permission evaluation multiplexed stores cug authorization module designed used combination non-default mounts. configured supported paths (see below) found ancestor non-default mount included therein activation/modification `cugconfiguration` fail immediately log error. <a name="representation"></a> ### representation repository cug policies defined module dedicate node name `rep:cugpolicy` type `rep:cugpolicy`. node defined dedicate mixin type `rep:cugmixin` (similar `rep:accesscontrollable`) single mandatory, protected property stores name principals granted read access restricted area: [rep:cugmixin] mixin + rep:cugpolicy (rep:cugpolicy) protected ignore [rep:cugpolicy] > rep:policy - rep:principalnames (string) multiple protected mandatory ignore _note:_ multivalued `rep:principalnames` property reflects fact cugs intended used small principal sets, preferably `java.security.acl.group` principals. <a name="validation"></a> ### validation consistency content structure creation modification asserted dedicated `cugvalidatorprovider`. corresponding error type `accesscontrol` following codes: | code | message | |-------------------|----------------------------------------------------------| | 0020 | attempt change primary type of/to cug policy | | 0021 | wrong primary type 'rep:cugpolicy' node | | 0022 | access controlled mixin 'rep:cugmixin' | | 0023 | wrong name node primary type 'rep:cugpolicy' | <a name="configuration"></a> ### configuration cug authorization extension optional feature requires mandatory configuration: includes defining supported paths enabling permission evaluation. #### configuration parameters `org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.cugconfiguration` supports following configuration parameters: | parameter | type | default | description | |-----------------------------|----------------|----------|-------------| | `param_cug_enabled` | boolean | false | flag enable evaluation cug policies upon read-access. | | `param_cug_supported_paths` | set\<string\> | \- | paths cugs created evaluated. | | `param_ranking` | int | 200 | ranking within composite authorization setup. | | | | | | _note:_ depending authorization models deployed composite setup, number cugs used given deployment well factors predominant read vs. read-write, performance overall permission evaluation may benefit changing default ranking cug authorization model. #### excluding principals cug authorization setup customized configuring `cugexcludeimpl` service allows list additional principals need excluded evaluation restricted areas: | parameter | type | default | description | |-----------------------------|----------------|----------|-------------| | `principalnames` | set\<string\> | \- | name principals always excluded cug evaluation. | | | | | | _note:_ implementation extends [default](/oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/cug/cugexclude.default.html) exclusion list. alternatively, possible plug custom `cugexclude` implementation matching specific needs (see [below](#pluggability)). <a name="pluggability"></a> ### pluggability following section describes deploy cug authorization model oak repository customize `cugexclude` extension point. _note:_ reverse steps used completely disable cug authorization model case needed given repository installation shipped vendor e.g. adobe aem 6.3. #### deploy cugconfiguration ##### osgi setup following steps required order deploy cug authorization model osgi-base oak repository: 1. deploy `oak-authorization-cug` bundle 2. activate `cugconfiguration` _("apache jackrabbit oak cug configuration")_ providing desired component configuration (_configurationpolicy.require_) 3. find `securityproviderregistration` _("apache jackrabbit oak securityprovider")_ configuration enter _`org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.cugconfiguration`_ additional value `requiredservicepids` property. third step enforce recreation `securityprovider` hence trigger `repositoryinitializer` provided cug authorization module. ##### non-osgi setup following example shows simplified setup contains `cugconfiguration` additional authorization model (second position aggregation). see also unit tests alternative approach. // setup cugconfiguration configurationparameters params = configurationparameters.of(authorizationconfiguration.name, configurationparameters.of(configurationparameters.of( cugconstants.param_cug_supported_paths, "/content", cugconstants.param_cug_enabled, true))); cugconfiguration cug = new cugconfiguration(); cug.setparameters(params); // bind security provider securityprovider securityprovider = securityproviderbuilder.newbuilder().with(configuration).build(); compositeconfiguration<authorizationconfiguration> composite = (compositeconfiguration) securityprovider .getconfiguration(authorizationconfiguration.class); authorizationconfiguration defconfig = composite.getdefaultconfig(); cug.setsecurityprovider(securityprovider); cug.setrootprovider(((configurationbase) defconfig).getrootprovider()); cug.settreeprovider(((configurationbase) defconfig).gettreeprovider()); composite.addconfiguration(cug); composite.addconfiguration(defconfig); // create oak repository (alternatively: create jcr repository) oak oak = new oak() .with(new initialcontent()) // todo: add required editors .with(securityprovider); witheditors(oak); contentrepository contentrepository = oak.createcontentrepository(); #### customize cugexclude following steps required order customize `cugexclude` implementation osgi-based repository setup. ultimately implementation needs referenced `org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.cugconfiguration`. 1. implement `cugexclude` interface according needs, 2. make implementation osgi service 3. deploy bundle containing implementation osgi container activate service. 4. make sure default cugexclude service properly replaced custom implementation. ###### example @component() @service(cugexclude.class) public class mycugexclude implements cugexclude { private static final principal principal_apache_members = new principalimpl("apache-members"); private static final principal principal_jackrabbit_pmc = new principalimpl("jackrabbit_pmc"); public mycugexclude() {} //-----------------------------------------------------< cugexclude >--- @override public boolean isexcluded(@nonnull set<principal> principals) { return principals.contains(principal_apache_members) || principals.contains(principal_jackrabbit_pmc); } //------------------------------------------------< scr integration >--- @activate private void activate(map<string, object> properties) { } } <!-- hidden references --> [principal]: http://docs.oracle.com/javase/7/docs/api/java/security/principal.html [accesscontrolpolicy]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/security/accesscontrolpolicy.html [cugpolicy]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/cug/cugpolicy.html [cugexclude]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/cug/cugexclude.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authorization/principalbased.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> managing access principal -------------------------------------------------------------------------------- ### general oak 1.16.0 introduces new, optional authorization model `oak-authorization-principalbased` module intended used combination default implementation present apache jackrabbit oak. contrast default authorization provides native support access control management based upon principals. model leverages fact jsr 283 allows redefine scope given policy beyond access controlled node bound to. quoting section [16.3 access control policies] jsr 283: note scope effect access control policy may identical node policy bound. model default disabled requires manual [configuration](#configuration) steps order add oak security setup. configuration steps include defining principals supported map access controlled node repository hold policy (see section [api extensions](#api_extensions)). <a name="jackrabbit_api"></a> ### jackrabbit api jackrabbit api 2.18 defines extension [accesscontrollist] [jackrabbitaccesscontrollist] interfaces bound given [principal] - `principalaccesscontrollist` entries contained type acl expected type - `principalaccesscontrollist.entry` addition methods inherited [accesscontrolentry] [jackrabbitaccesscontrolentry] defined absolute path ultimately take effect. see javadoc [principalaccesscontrollist] [entry] jackrabbit api 2.18 additional details. <a name="api_extensions"></a> ### api extensions module comes following extension `org.apache.jackrabbit.oak.spi.security.authorization.principalbased` package space: - [filterprovider] - [filter] ##### filterprovider filter order operational principal-based authorization needs `filterprovider` configured. corresponding `filter` defines model able evaluate permissions given set principals. unsupported set principals permission evaluation skipped altogether. similarly, access control policies obtained modified supported principals. apart validating principals `filter` interface also responsible mapping supported principal location repository access control setup principal stored. see section [implementation details](#details) description provider implementation present module. section [pluggability](#pluggability) describes deploy custom implementation. <a name="details"></a> ### implementation details <a name="details_access_mgt"></a> #### access control management access control management follows requirements defined jsr 283 extensions defined jackrabbit api (see also section [access control management](../accesscontrol.html)). ##### access control policies principal-based authorization model returns two types policies: - `principalpolicyimpl`: mutable policy implementating `principalaccesscontrollist`, returned upon `jackrabbitaccesscontrolmanager.getapplicablepolicies(principal)` `jackrabbitaccesscontrolmanager.getpolicies(principal)`. - `immutableacl`: whenever effective policies returned upon calling `accesscontrolmanager.geteffectivepolicies(string)` `jackrabbitaccesscontrolmanager.geteffectivepolicies(set<principal>)`. ##### management principal order manage access control jackrabbit api extensions need used (see [jackrabbitaccesscontrolmanager]). - `jackrabbitaccesscontrolmanager.getapplicablepolicies(principal)`: configured `filter` handles specified principal method return single empty modifiable policy type `principalaccesscontrollist` policy set target principal before. - `jackrabbitaccesscontrolmanager.getpolicies(principal)`: applicable policy set, method return single modifiable policy type `principalaccesscontrollist`. following characteristics apply modifying `principalaccesscontrollist` defined implementation: - entries grant access (i.e. _deny_) - effective path parameter must absolute jcr path null repository level privileges. - effective path may point non-existing node. - entry may define one many supported privileges (see `accesscontrolmanager.getsupportedprivileges(string abspath)` **supported privileges** below) - additional restrictions may optionally specified according `jackrabbitaccesscontrollist.getrestrictionnames` (see **supported restrictions** below) - entries added list order created - equal entries added list, additional effort made avoid cleanup redundant entries. - entries reordered within list (`jackrabbitaccesscontrollist.orderbefore`) impact net effect (no denies). since `principalaccesscontrollist` extends `jackrabbitaccesscontrollist`, new entries also added using variants `addentry` method. please note following principles: - specified `principal` must equal principal policy obtained - _allow_ entries supported (see above) - entry may define one many supported privileges (see `accesscontrolmanager.getsupportedprivileges(string abspath)` **supported privileges** below) - new entry must come single value _rep:nodepath_ restriction specifying absolute jcr path policy take effect. indicate entry takes effect repository level empty string value used. - additional restrictions may optionally specified according `jackrabbitaccesscontrollist.getrestrictionnames` (see **supported restrictions** below) path policies (`jackrabbitaccesscontrolpolicy.getpath`) defined configured `filter` implementation used persist modified policy (`accesscontrolmanager.setpolicy(string, accesscontrolpolicy)`) remove (`accesscontrolmanager.removepolicy(string, accesscontrolpolicy)`). operations require editing session _jcr:modifyaccesscontrol_ privilege granted access controlled node hold policy. since access control entries contained policy take effect tree defined [entry.geteffectivepath()](http://jackrabbit.apache.org/api/2.18/org/apache/jackrabbit/api/security/authorization/principalaccesscontrollist.entry.html#geteffectivepath), editing session **in addition** needs permission modify access control content path defined individual entry. contrasts default implementation given entry takes effect tree defined access controlled node. ##### management path editing access control path supported principal-based access control manager. consequently, `accesscontrolmanager.getapplicablepolicies(string)` `accesscontrolmanager.getpolicies(string)` return empty iterator/array. note however `accesscontrolmanager.geteffectivepolicies(string)` make best-effort approach searching entries take effect given absolute path: query look nodes type _rep:principalentry_ property _rep:effectivepath_ matching target path ancestors. restrictions limiting effect given entry taken account. see also jsr 283 section [16.3.5 scope policy] jsr 283. ##### supported privileges privileges registered repository supported authorization model. ##### supported restrictions principal-based authorization model come dedicated `restrictionprovider`. instead built handle restriction defined oak authorization setup. ##### readable paths principal-based authorization used together default implementation, respect [readable-paths configuration](../permission/default.html#configuration). trees located readable paths `accesscontrolmanager.geteffectivepolicies(string abspath)` include `namedaccesscontrolpolicy`. note, accordance default authorization model, effective policy currently included looking effective policies principal. <a name="details_permission_eval"></a> #### permission evaluation given set principals supported configured `filterprovider/filter` implementation, principal-based authorization model contribute implementation `aggregatedpermissionprovider` composite. whether access granted depends aggregated providers ranking, composition type presence `aggregationfilter` (see also section [combining multiple authorization models](composite.html) details). set principals supported `emptypermissionprovider` returned model ignored altogether. follows case permission evaluation delegated authorization modules configured composite. ##### reading caching permission evalution triggered principal-based model directly read effective permissions persisted access control content. exists separate location permissions like [permission store](../permission/default.html#permissionstore) present default implementation. entries defined given set principal eagerly loaded access control content kept memory instance `contentsession`. applies supported principals irrespective size individual policies size principal set. note, intended use-case authorization model expects small sets system user principals limited set permissions, result comparably small acls. see [oak-8227](https://issues.apache.org/jira/browse/oak-8227) benchmark series measure read operations increasing number entries principals. ##### permission inheritance contrast default permission evalution principal-based setup makes distinction user group principals does't make assumptions order principals computed placed `subject` upon login. inheritance model takes item hierarchy account. words evaluation process start target item search item hierarchy matching entry. entry considered matching defined principals given set, applies target item grants specified permissions. ##### evaluation shortcut soon entry matches target item grants requested permission evaluation stop. model supports allowing entries exists particular requirement maintain handle order entries different principals take effect given target. however, order minimize excessive read `nodestore` recommended avoid fully redundant entries e.g. - _entry:_ granting privileges, _redundant_: privileges additional restrictions - _entry:_ granting privileges, _redundant:_ subset privileges ##### readable paths since [oak-8671](https://issues.apache.org/jira/browse/oak-8671) principal-based authorization respects readable paths configuration option present default authorization model. tree located configured paths read-access always granted. ##### administrative access principal-based authorization enforce special handling administrative principals. implementing custom `filterprovider` part considerations. implementation may e.g. choose support administrative principals thus delegate permission evalution default implementation. ##### permission evaluation multiplexed stores authorization model used combinition non-default mounts one notable limitation: none non-default mounts may located configured filter root (see `filterprovider.getfilterroot()`) order make sure policies defined model located mount. <a name="details_filterprovider"></a> #### filterprovider implementation model comes implementation `filterprovider` `filter` interfaces (if enabled) limit scope principal-based authorization according following rules: - set principals must empty must contain `systemuserprincipal`s - `systemuserprincipal` must associated location repository (i.e. must `itembasedprincipal` obtained principal management api). - principals must additionally located path configured `filterproviderimpl` (see section [configuration](#configuration)) so, implementation enabled principal-based authorization take effect `systemuserprincipal`s created configured path. soon given `subject` set principals contains principals match filter definition (e.g. group principals, principals located repository located elsewhere repository), principal-based authorization skipped. applies permission evaluation access control management. <a name="details_aggregationfilter"></a> #### aggregationfilter implementation addition principal-based authorization provides implementation [aggregationfilter](composite.html#api_extensions) interface stops aggregation `permissionprovider`s effective policies soon `principalbasedpermissionprovider` takes effect (i.e. mandatory `filterprovider` handle given set principals). `aggregationfilter` enabled setting corresponding flag module [configuration](#configuration). <a name="details_examples"></a> #### examples see [permission evaluation principal-based authorization](principalbased_evaluation.html) examples illustrating authorization setup including principal-based authorization handles different principals. <a name="representation"></a> ### representation repository access control lists defined module represented nodes named `rep:principalpolicy` primary node type `rep:principalpolicy`. declaring mixin type policy node `rep:principalbasedmixin` (according `rep:accesscontrollable`). policy node single mandatory, protected property containing name principal policy bound list entries type `rep:principalentry`. apart mandatory privileges optional restrictions entry defines target path (`rep:effectivepath`), take effect upon successful commit. /** * @since oak 1.14 */ [rep:principalbasedmixin] mixin + rep:principalpolicy (rep:principalpolicy) protected ignore /** * @since oak 1.14 */ [rep:principalpolicy] > rep:policy orderable - rep:principalname (string) protected mandatory ignore + * (rep:principalentry) = rep:principalentry protected ignore /** * @since oak 1.14 */ [rep:principalentry] - rep:effectivepath (path) protected mandatory - rep:privileges (name) multiple protected mandatory multiple + rep:restrictions (rep:restrictions) = rep:restrictions protected _note:_ definition `rep:principalname` property mandate particular value, mandatory `filterprovider` implementation ultimately define, types principals type policy created principals located repository. <a name="validation"></a> ### validation validity content structure asserted dedicated `validator` creation modification. following commit failures type `accesscontrol` may occur: | code | message | |-------------------|----------------------------------------------------------------------------------------------------| | 0030 | attempt create policy node different name rep:principalpolicy | | 0031 | attempt change primary type from/to rep:principalpolicy | | 0032 | reserved node name 'rep:principalpolicy' must used nodes type 'rep:principalpolicy' | | 0033 | parent node mixin type 'rep:principalbasedmixin' | | 0034 | reserved node name 'rep:restrictions' must used nodes type 'rep:restrictions' | | 0035 | invalid restriction | | 0002 | expected access control entry parent (isolated restriction) | | 0036 | isolated entry principal policy | | 0037 | empty rep:privileges property | | 0038 | abstract privilege | | 0039 | invalid privilege | note, validator performs additional checks regarding ability modify access control content take effect location indicated `rep:effectivepath` property. case editing session sufficient permissions target location commit fail error type `access`: | code | message | |-------------------|-------------------------------------------------------------------------------------------------| | 0003 | access denied: editing session granted modify access content effective target path | <a name="configuration"></a> ### configuration #### configuration parameters `org.apache.jackrabbit.oak.spi.security.authorization.principalbased.impl.principalbasedauthorizationconfiguration` defines following configuration parameters: | parameter | type | default | description | |-----------------------------------|---------|----------|---------------------------------------------------| | `param_enable_aggregation_filter` | boolean | false | flag enable aggregration filter. | | `param_ranking` | int | 500 | ranking within composite authorization setup. | principal-based authorization addition requires `filterprovider` configured along side order operational (mandatory reference osgi setup). could either example implementation present module custom implementation. #### filterprovider implementation `filterprovider` implementation present module limits effect system users principals located configured subtree. absolute path subtree mandatory configuration option `apache jackrabbit oak filter principal based authorization` (_configurationpolicy.require_): | parameter | type | default | description | |-----------|--------|---------|------------------------------------------------------------------------------------------------------| | `path` | string | \- | required path underneath filtered system user principals must located repository.| _note:_ equally possible plug custom `filterprovider` implementation matching specific needs (see [below](#pluggability)). <a name="pluggability"></a> ### pluggability following section describes deploy authorization model oak repository customize `filterprovider` extension point. #### deploy principalbasedauthorizationconfiguration ##### osgi setup following steps required order deploy cug authorization model osgi-base oak repository: 1. deploy `oak-authorization-principalbased` bundle 2. configure activate built-in `filterprovider` deploy custom implementation (see below). 3. make sure default custom `mountinfoprovider` service running 2. optionally configure `principalbasedauthorizationconfiguration` _("apache jackrabbit oak principal based authorizationconfiguration")_ 3. find `securityproviderregistration` _("apache jackrabbit oak securityprovider")_ configuration enter _`org.apache.jackrabbit.oak.spi.security.authorization.principalbased.impl.principalbasedauthorizationconfiguration`_ additional value `requiredservicepids` property. third step enforce recreation `securityprovider` hence trigger `repositoryinitializer` provided principal-based authorization module, make sure required node type definitions installed. ##### non-osgi setup following example shows simplified setup contains `principalbasedauthorizationconfiguration` additional authorization model (second position aggregation). see also unit tests alternative approach. // setup principalbasedauthorizationconfiguration filterprovider filterprovider = todo: define filter provider; mountinfoprovider mip = mounts.defaultmountinfoprovider(); principalbasedauthorizationconfiguration ac = new principalbasedauthorizationconfiguration(); ac.bindfilterprovider(filterprovider); ac.bindmountinfoprovider(mip); // optionally set configuration parameters: ranking, enable aggregationfilter // bind security provider configurationparameters securityconfig = configurationparameters.empty; // todo define security config options securityprovider securityprovider = securityproviderbuilder.newbuilder().with(securityconfig) .withrootprovider(rootprovider) .withtreeprovider(treeprovider) .build(); securityproviderhelper.updateconfig(securityprovider, ac, authorizationconfiguration.class); // create oak repository (alternatively: create jcr repository) oak oak = new oak() .with(new initialcontent()) // todo: add required editors .with(securityprovider); witheditors(oak); contentrepository contentrepository = oak.createcontentrepository(); #### customize filterprovider following steps required order customize `filterprovider` implementation osgi-based repository setup. ultimately implementation needs referenced `org.apache.jackrabbit.oak.spi.security.authorization.principalbased.impl.principalbasedauthorizationconfiguration`. 1. implement `filterprovider` `filter` interface according needs, 2. make `filterprovider` implementation osgi service 3. deploy bundle containing implementation osgi container activate service. <!-- hidden references --> [principal]: http://docs.oracle.com/javase/7/docs/api/java/security/principal.html [accesscontrollist]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/security/accesscontrollist.html [accesscontrolentry]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/security/accesscontrolentry.html [filterprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/filterprovider.html [filter]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authorization/principalbased/filter.html [jackrabbitaccesscontrolmanager]: http://jackrabbit.apache.org/api/2.18/index.html?org/apache/jackrabbit/api/security/jackrabbitaccesscontrolmanager.html [jackrabbitaccesscontrollist]: http://jackrabbit.apache.org/api/2.18/index.html?org/apache/jackrabbit/api/security/jackrabbitaccesscontrollist.html [jackrabbitaccesscontrolentry]: http://jackrabbit.apache.org/api/2.18/index.html?org/apache/jackrabbit/api/security/jackrabbitaccesscontrolentry.html [principalaccesscontrollist]: http://jackrabbit.apache.org/api/2.18/index.html?org/apache/jackrabbit/api/security/authorization/principalaccesscontrollist.html [entry]: http://jackrabbit.apache.org/api/2.18/org/apache/jackrabbit/api/security/authorization/principalaccesscontrollist.entry.html [16.3 access control policies]: https://s.apache.org/jcr-2.0-spec/16_access_control_management.html#16.3%20access%20control%20policies [16.3.5 scope policy]: https://s.apache.org/jcr-2.0-spec/16_access_control_management.html#16.3.5%20scope%20of%20a%20policy # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authorization/principalbased_evaluation.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> permission evaluation principal-based authorization -------------------------------------------------------------------------------- examples describe permission evaluation based authorization setup following characteristices: filterproviderimpl: - path: "/home/users/system/supported" compositeauthorizationconfiguration (compositiontype=and): principalbasedauthorizationconfiguration - filterprovider: reference filterproviderimpl configured (default implementation) - enable aggregationfilter: true - ranking: 500 authorizationconfigurationimpl - ranking: 100 following principals used various combinations: principals supported configured 'filterprovider' - groupprincipal: 'testgroup' - principal: 'user' - systemuserprincipal: 'service-a' path /home/users/system/45 principals supporeted configured 'filterprovider' - systemuserprincipal: 'service-b' path /home/users/system/supported/featureb/11 - systemuserprincipal: 'service-c' path /home/users/system/supported/featurec/c1 following access control setup defined: grant access using regular path-based ac-management calls i.e. 'accesscontrolmanager.getapplicablepolicies(string)' 'accesscontrolmanager.getpolicies(string))' - 'testgroup': /content [jcr:read, jcr:readaccesscontrol] - 'service-a': /content [jcr:versionmanagement] - 'service-b': /content [jcr:read, jcr:modifyproperties] grant access using principal-based ac-management calls (only possible supported principals) i.e. 'jackrabbitaccesscontrolmanager.getapplicablepolicies(principal)' 'accesscontrolmanager.getpolicies(principal))' - 'service-b': /content [jcr:read, jcr:nodetypemanagement] - 'service-c': /content [jcr:read, jcr:lockmanagement] ##### example 1: subject principals _'user'_, _'testgroup'_ since neither 'user' 'testgroup' system-user-princial supported principal-based authorization, principal-based permission evaluation omitted. result: session granted `jcr:read`, `jcr:readaccesscontrol` /content. ##### example 2: subject principals _'service-a'_, _'testgroup'_ since neither 'service-a' 'testgroup' supported principal-based authorization, principal-based permission evaluation omitted. result: session granted `jcr:read`, `jcr:readaccesscontrol`, `jcr:versionmanagement` /content. ##### example 3: subject principals _'service-b'_, _'testgroup'_ since 'testgroup' supported principal-based authorization, principal-based permission evaluation omitted path-based access control setup take effect. result: session granted `jcr:read`,`jcr:readaccesscontrol`,`jcr:modifyproperties` /content. ##### example 4: subject principals _'service-a'_, _'service-b'_ since 'service-a' supported principal-based authorization, principal-based permission evaluation omitted path-based access control setup take effect. result: session granted `jcr:read`,`jcr:modifyproperties`,`jcr:versionmanagement` /content. ##### example 5: subject principals _'service-b'_ 'service-b' supported principal-based authorization unsupported principal present subject. therefore, principal-based permission evaluation takes effect. since `aggregationfilter` enabled configuration describedf above, permission evaluation stops continue evaluating path-based permissions. result: session granted `jcr:read`, `jcr:nodetypemanagement` /content. note: `aggregationfilter` disabled _both_ permission providers would used evaluation. result depends `compositiontype`: | `aggregationfilter` | `compositiontype.and` | `compositiontype.or` | |---------------------|-----------------------|----------------------| | enabled | `jcr:read`, `jcr:nodetypemanagement` | `jcr:read`, `jcr:nodetypemanagement` | | disabled | `jcr:read` | `jcr:read`, `jcr:modifyproperties`, `jcr:nodetypemanagement` | ##### example 6: subject principals _'service-c'_ 'service-c' supported principal-based authorization unsupported principal present subject. therefore, principal-based permission evaluation takes effect. since `aggregationfilter` enabled configuration described above, permission evaluation stops continue evaluating path-based permissions. result: session granted `jcr:read`, `jcr:lockmanagement` /content. note: `aggregationfilter` disabled _both_ permission providers would used evaluation. result depends `compositiontype`: | `aggregationfilter` | `compositiontype.and` | `compositiontype.or` | |---------------------|-----------------------|----------------------| | enabled | `jcr:read`, `jcr:lockmanagement` | `jcr:read`, `jcr:lockmanagement` | | disabled | - | `jcr:read`, `jcr:lockmanagement` | ##### example 6: subject principals _'service-b'_, _'service-c'_ 'service-b' 'service-c' supported principal-based authorization unsupported principal present subject. therefore, principal-based permission evaluation takes effect. since `aggregationfilter` enabled configuration described above, permission evaluation stops continue evaluating path-based permissions. result: session granted `jcr:read`, `jcr:nodetypemanagement`, `jcr:lockmanagement` /content. note: `aggregationfilter` disabled _both_ permission providers would used evaluation. result depends `compositiontype`: | `aggregationfilter` | `compositiontype.and` | `compositiontype.or` | |---------------------|-----------------------|----------------------| | enabled | `jcr:read`, `jcr:nodetypemanagement`, `jcr:lockmanagement` | `jcr:read`, `jcr:nodetypemanagement`, `jcr:lockmanagement` | | disabled | `jcr:read` | `jcr:read`, `jcr:modifyproperties`, `jcr:nodetypemanagement`, `jcr:lockmanagement` | # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/permission/default.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # permissions : default implementation <!-- macro{toc} --> ## general notes default implementation `permissionprovider` interface evaluates permissions based information stored dedicated part repository content call [permission store](#permissionstore). <a name="default_implementation"></a> ## characteristics permission evaluation ### regular permission evaluation see section [permission evaluation detail](evaluation.html). ### readable trees oak 1.0 comes configurable set subtrees read-accessible subjects irrespective access control content taking effect. original aim readable trees assert full acccess namespace, nodetype privilege information corresponding configuration therefore lists following paths: - `/jcr:system/rep:namespaces`: stores registered namespaces - `/jcr:system/jcr:nodetypes`: stores registered node types - `/jcr:system/rep:privileges`: stores registered privileges default set changed extended setting corresponding configuration option. however, important note many jcr api calls rely accessibility namespace, nodetype privilege information. removing corresponding paths configuration probably undesired effects. ### administrative access default implementation following principals always full access whole content repository (except hidden items exposed oak api) irrespective access control content: - `systemprincipal` - instances `adminprincipal` - principals whose name matches configured administrative principal names (see configuration section below). configuration applies permission evaluation currently reflected security models methods deal administrator (i.e. `user#isadmin`). ### permission evaluation multiplexed stores see section [multiplexing support permissionstore](multiplexing.html). <a name="representation"></a> ## representation repository <a name="permissionstore"></a> ### permission store permission evaluation present oak 1.0 keeps dedicated location permissions stored later evaluation. store kept sync access control content separated `postvalidationhook` implementation ([permissionhook]). location permission store `/jcr:system/rep:permissionstore`; accordance stores underneath `jcr:system` global whole repository keeping separate entry workspace present repository. permission entries grouped principal stored store root based hash value path access controlled node; hash collisions handled adding subnodes accordingly. /jcr:system/rep:permissionstore/workspace-name [rep:permissionstore] /principal-name [rep:permissionstore] /1259237738 [rep:permissionstore] /0 [rep:permissions] /1 [rep:permissions] /c0 [rep:permissionstore] # hash collision /0 [rep:permissions] /1 [rep:permissions] /2 [rep:permissions] /c1 [rep:permissionstore] # hash collision /0 [rep:permissions] /1 [rep:permissions] /2 [rep:permissions] /47 [rep:permissionstore] /0 [rep:permissions] /1 [rep:permissions] per path store looks follows "1259237738" { "jcr:primarytype": "rep:permissionstore", "rep:accesscontrolledpath": "/content", "0": { "jcr:primarytype": "rep:permissions", "rep:isallow": false, "rep:privileges": [32], "rep:ntnames": ["nt:unstructured", "oak:unstructured"] ... /* additional restrictions present entry */ } } #### accessing permission store important understand permission store implementation specific structure maintained system itself. reason access permission store additionally restricted superimposing regular permissions enforced regular repository items. detail means permission store cannot written jcr oak api method calls. immutability enforced dedicated `failingvalidator` prevents modifications underneath `/jcr:system/rep:permissionstore`. similarly read access allowed except system principals. order discover display access control related information api consumers use regular jcr jackrabbit permission access control management api listed [introduction](../permission.html#jcr_api) section [using access control management api](../accesscontrol/editing.html). ### node type definitions permission store following built-in node types defined: [rep:permissionstore] - rep:accesscontrolledpath (string) protected ignore - rep:numpermissions (long) protected ignore - rep:modcount (long) protected ignore + * (rep:permissionstore) = rep:permissionstore protected ignore + * (rep:permissions) = rep:permissions protected ignore [rep:permissions] - * (undefined) protected ignore - * (undefined) protected multiple ignore + * (rep:permissions) = rep:permissions protected ignore addition oak 1.0 defines specific mixin type allows store path(s) versionable node version history. adding mixing updating versionable path information taken care dedicated commit hook implementation (`versionablepathhook`). [rep:versionablepaths] mixin - * (path) protected abort <a name="validation"></a> ## validation consistency content structure asserted dedicated `permissionvalidator`. corresponding errors type `access` following codes: | code | message | |-------------------|----------------------------------------------------------| | 0000 | generic access violation | | 0021 | version storage: node creation without version history | | 0022 | version storage: removal intermediate node | <a name="configuration"></a> ## configuration ### configuration parameters default implementation supports following configuration parameters: | parameter | type | default | description | |-----------------------------------|---------------------|----------|-------------| | `param_permissions_jr2` | string | \- | enables backwards compatible behavior permissions listed parameter value containing permission names separated ','. supported values are: `user_management`,`remove_node` | | `param_read_paths` | set\<string\> | paths namespace, nodetype privilege root nodes | set paths always readable principals irrespective permissions defined path inherited nodes. | | `param_administrative_principals` | string[] | \- | names additional principals full permission permission evaluation skipped altogether. | | | | | | #### supported values param_permissions_jr2 - `remove_node`: present, permission evaluation traverse hierarchy upon node removal. config flag best effort approach guarantee identical behavior. - `user_management`: set permissions user related items evaluated way regular jcr items irrespective protection status. #### differences jackrabbit 2.x `omit-default-permission` configuration option present jackrabbit's accesscontrolprovider implementations longer supported oak. since permissions installed default flag become superfluous. ## known limitations ### isolated access control properties reported [oak-10269](https://issues.apache.org/jira/browse/oak-10269) default permission evaluation enforce `jcr:readaccesscontrol` privilege granted isolated access control properties located node marks access control policy. access control properties shipped oak associated access control policy node. issue therefore applies custom models - define isolated access control properties (through custom `context.definesproperty` implementation) - rely default authorization model enforce `read_access_control` permission # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/permission/permissionsandprivileges.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> permissions vs privileges -------------------------------------------------------------------------------- ### general notes usually required application check privileges/permissions given session (or set principals) evaluation left repository. rare cases application needs understand given session actually allowed perform given action, recommend use `session.haspermission(string, string)` `jackrabbitsession.haspermission(string, string...)` order test permissions reflected action constants defined `session` `jackrabbitsession`, default implementation also allows pass names oak internal permission. evaluate privileges granted given editing session `accesscontrolmanager.hasprivileges(string, privilege[])`, `accesscontrolmanager.getprivileges(string)` used. `jackrabbitaccesscontrolmanager` defines variants methods addition take set `principal`. editing session sufficient permissions methods used evaluate/obtain privileges different set principals associated editing session. since oak 1.42.0 `jackrabbitaccesscontrolmanager` defines `jackrabbitaccesscontrolmanager.getprivilegecollection(string)` `jackrabbitaccesscontrolmanager.getprivilegecollection(string, set)` allows efficient evaluation given set privileges granted given path. allows avoid repeated calls `hasprivileges` path manual resolution privilege aggregation (see [oak-9494](https://issues.apache.org/jira/browse/oak-9494) details). subtle differences permission-testing `session` evaluation privileges `accesscontrolmanager` listed below. ### testing permissions #### variants - `session.haspermission(string abspath, string actions)` - `session.checkpermission(string abspath, string actions)` - `jackrabbitsession.haspermission(string abspath, @nonnull string... actions)` - `abspath` absolute path pointing existing non-existing item (node property) - `actions` defines comma-separated string (or string array respectively) actions defined `session` `jackrabbitsession` (see below). default implementation also oak internal permission names allowed ( _note:_ permission names != privilege names) see section [permissions](../permission.html#oak_permissions) comprehensive list mapping actions permissions. #### characteristics - api call always supported even access control management part feature set (see corresponding repository descriptor). - _note:_ `action_add_node` evaluating node specified abspath added; i.e. path points non-existing node want add - possible evaluate custom privileges method respected default permission evaluation. - restrictions respected possible given (limited) information ### testing privileges #### variants - `accesscontrolmanager.hasprivileges(string abspath, privilege[] privileges)` - `accesscontrolmanager.getprivileges(string abspath)` - `jackrabbitaccesscontrolmanager.getprivilegecollection(string abspath)` followed `privilegecollection.includes(string...)` - `abspath` must point existing node (i.e. existing accessible editing session) - `privileges` represent array supported privileges (see corresponding api calls) testing purpose jackrabbit extension allows verify privileges granted given combination principals, may may reflect actual principal-set assigned given `subject`. calls (see below) however requires ability read access control content target path. - `jackrabbitaccesscontrolmanager.hasprivileges(string abspath, set<principal> principals, privilege[] privileges)` - `jackrabbitaccesscontrolmanager.getprivileges(string abspath, set<principal> principals)` - `jackrabbitaccesscontrolmanager.getprivilegecollection(string abspath, set<principal> principals)` (see also section [privilege management](../privilege.html)) #### characteristics - available access control management part supported feature set jcr repository. - built-in and/or custom privileges tested - `jcr:addchildnode` evaluates child added parent node identify specified abspath. name child known here! - restrictions may may respected - default implementation close real permission evaluation (not exactly following specification) <a name="further_reading"></a> ### reading - [mapping privileges items](../privilege/mappingtoitems.html) - [mapping api calls privileges](../privilege/mappingtoprivileges.html) - [mapping privileges jcr/jackrabbit actions](../privilege/mappingprivilegestoactions.html) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/permission/multiplexing.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> multiplexing support permissionstore -------------------------------------------------------------------------------- ### general notes multiplexing support implemented composite `permissionprovider` made default workspace provider existing mounts. available since oak 1.7.3 [oak-3777](https://issues.apache.org/jira/browse/oak-3777). ### permissionstore evaluation (reading) given following mount setup private - /libs - /apps default - / setup nodes /apps /libs (include apps libs) part "private" mount (mount name "private") paths part default mount. dedicated permissionstore created `oak:mount-private-default` contains information relevant specific mount. /jcr:system/rep:permissionstore + oak:mount-private-default + editor //principal name + 1345610890 (rep:permissionstore) //path hash - rep:accesscontrolledpath = /libs + 0 - rep:isallow = false - rep:privileges = [1279] + default //workspace name + editor //principal name + 1227964008 (rep:permissionstore) //path hash - rep:accesscontrolledpath = /content + 0 - rep:isallow = true - rep:privileges = [1279] ### permissionstore updates (writing) `permissionhook` mount-aware delegate changes specific path designated components based path. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/permission/differences.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### permissions : differences wrt jackrabbit 2.x #### general notes permission evaluation present oak 1.0 differs jackrabbit 2.x two fundamental aspects: 1. permission evaluation completely separated access control content executed based information stored permission store. 2. jcr `session` (or oak `contentsession`) gets `permissionprovider` associated current repository revision session operating on. #### permissions following permissions aggregation new permissions: - `read`: aggregates `read_node` `read_property` - `set_property`: aggregates `add_property`, `modify_property` `remove_property` following permissions introduced oak 1.0: - `user_management`: permission execute user management related tasks e.g. creating removing user/group, changing user password editing group membership. - `index_definition_management`: permission create, modify remove oak:index node subtree expected contain index definitions. #### evaluation ##### reading break terms backwards compatibility accessibility version content underneath `/jcr:system/jcr:versionstore`. oak access version content depends read permissions present versionable node jackrabbit 2.x apply special rule. changes covered [oak-444] address concerns summarized [jcr-2963]. ##### node removal oak `node#remove()` requires sufficient permissions remove target node. contrast jackrabbit 2.x validation traverse tree verify remove permission child nodes/properties. order obtain backwards compatible behavior respect tree removal permission evaluation configured traverse hierarchy upon removal. config flag best effort approach guarantee identical behavior. ##### rename due nature diff mechanism oak possible distinguish `jackrabbitnode#rename` move subsequent reordering. consequently permission evaluation longer apply special handling renaming present jackrabbit 2.x (renaming required ability modify child collection parent node). ##### move due nature diff mechanism oak longer possible treat move operations way implemented jackrabbit 2.x. api consumers applications running jackrabbit oak means combinations multiple moves always properly resolved. consequently permissions evaluated modifications include move (in general restrictive): move leads changes detected diff mechanism, regular permissions evaluated items appear added, removed modified, regular move operations requires `remove_node` permission source, `add_node` `node_type_management` permissions destination. ##### user management default user management operations require specific user mgt related permission granted editing subject. permission (including corresponding privilege) introduced oak 1.0. backwards compatibility jackrabbit 2.x behavior turned setting corresponding configuration flag. ##### version management reading items version store depends access rights present corresponding versionable node. case version information longer versionable node workspace original path used evaluate effective permissions would apply node version restored. changes covered [oak-444] addresses concerns summarized [jcr-2963]. ##### repository level operations repository level operations namespace, nodetype, privilege workspace management require permissions defined repository level outlined jsr 283. implies access control policies need set `null` path. contrast jackrabbit 2.x permissions defined regular path e.g. root path ignored. #### configuration `omit-default-permission` configuration option present jackrabbit's accesscontrolprovider implementations longer supported oak. since permissions installed default flag become superfluous. <!-- hidden references --> [permissions]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/authorization/permission/permissions.java [permissionhook]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/permissionhook.java [oak-444]: https://issues.apache.org/jira/browse/oak-444 [jcr-2963]: https://issues.apache.org/jira/browse/jcr-2963 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/permission/evaluation.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> default permission evaluation detail -------------------------------------------------------------------------------- <a name="permissionentries"></a> ### order evaluation permission entries order evaluate permissions given item, default `permissionprovider` lazily builds iterator `permissionsentry` representing rep:permission present permission store take effect given set principals given node (or property). `permissionsentry` stores privileges granted/denied together restrictions may defined original access control entry. iterator concatenation entries associated user principals followed entries associated group principals. order precedence follows: - permissions inherited throughout item hierarchy - user principals always take precedence group principals irrespective - order access control list - position node hierarchy - within given type principal (user vs. group principal) order executing - reverse order entries specified originally (the index permission entry) - entries associated target tree take precedence inherited entries ##### examples ###### simple inheritance /content allow - everyone - read permission result: - everyone allowed read complete tree defined /content ###### simple inheritance restrictions /content allow - everyone - read permission deny - everyone - read_property permission - restriction rep:itemnames = ['prop1', 'prop2'] result: - everyone read complete tree defined /content _except_ properties named 'prop1' 'prop2' explicitly denied restricting entry. ###### inheritance allow deny /content deny - everyone - read permission /content/public allow - everyone - read permission result: - everyone cannot read items tree defined /content - except tree defined /content/public accessible. ###### inheritance multiple allows /content allow - everyone - read permission /content/public allow - everyone - remove permission result: - everyonce read item /content complete subtree - addition everyone remove items underneath /content/public ###### inheritance different principals /content allow - everyone - read permission allow - authorgroup - remove permission result: - subject member everyone allowed read /content complete subtree - subject member authorgroup allowed remove items /content - subject member everyone _and_ authorgroup full read-access /content _and_ also remove items. /content allow - everyone - read permission /content/private deny - everyone - read permission allow - powerfulgroup - permission result: - subject member everyone - allowed read /content complete subtree - except /content/private - subject member powerfulgroup - full permission /content/private - subject member everyone _and_ powerfulgroup - full read-access /content - full permission underneath /content/private ###### interaction user group principals /home/jackrabbit allow - jackrabbit - permission deny - everyone - permission result: - subject containing 'jackrabbit' user principal full permission /home/jackrabbit irrespective presense everyone group principal subject. - subject access /home/jackrabbit /home/jackrabbit allow - jackrabbit - permission /home/jackrabbit/private deny - everyone - permission result: - subject containing 'jackrabbit' user principal full permission tree defined /home/jackrabbit irrespective presense everyone group principal subject. - subject explicitly denied access /home/jackrabbit/private ### examples: step step #### reading ##### reading node following section describes happens `session.getnode("/foo").getproperty("jcr:title")` terms permission evaluation: 1. `sessionimpl.getnode()` internally calls `sessiondelegate.getnode()` calls `root.gettree()` calls `tree.gettree()` `/foo` tree. creates bunch linked `mutabletree` objects. 1. session delegate checks tree really exists, calling `tree.exists()` calls `nodebuilder.exists()`. 1. session performing operation _admin_ session, node builder persistence layer directly used. cases, original node builder wrapped `securenodebuilder`. `securenodebuilder` performs permission checks delegating calls delegated builder. 1. non _admin_ sessions `securenodebuilder` fetches _tree permissions_ via `gettreepermission()`. 1. `treepermission` responsible evaluating permissions granted denied given oak `tree` properties. order test tree accessible `treepermission#canread()` called checks `read_node` permission normal trees (as example) `read_access_control` permission _ac trees_. result remembered `readstatus` kept `treepermission` instance. 1. read status based evaluation _permission entries_ effective tree set principals associated permission provider. retrieved internally calling `getentryiterator()`. 1. _permission entries_ [analyzed](#entry_evaluation) include respective permission so, read status set accordingly. note sequence permission entries iterator already correct order kind evaluation. ensured way stored [permission store](default.html#permissionstore) feed iterator (see [order evaluation permission entries](#permissionentries) above). iteration also detects evaluated permission entries cover _this_ node properties. case, subsequent calls evaluate property read permissions would need iteration again. order detect this, iteration checks non-matching permission entry privilege skipped eventually sets respective flag `readstatus`. flag indicates present permission entries sufficient tell session allowed read _this_ node properties. entries present ones needed evaluating `read_node` permission, ambiguous determine properties read. 1. `readstatus` calculated (or calculated earlier) `canread()` method returns `readstatus.allowsthis()` specifies _this_ node allowed read. ##### reading property 1. `node.getproperty()` internally calls `nodedelegate.getpropertyornull()` first resolves parent node indicated relative path without testing existence. new `propertydelegate` created parent node name property, internal obtains `propertystate` oak `tree`, may return `null`. 1. node delegate checks property really exists (or accessible reading session calling `propertydelegate.exists()` asserting underlying `propertystate` `null`. 1. session performing operation _admin_ session, property state persistence layer directly used. cases, original node builder wrapped `securenodebuilder`. `securenodebuilder` performs permission checks delegating calls delegated builder. 1. non _admin_ sessions `securenodebuilder` fetches _tree permissions_ via `gettreepermission()`. 1. `treepermission` responsible evaluating permissions granted denied given oak `tree` properties. order test property accessible `treepermission#canread(propertystate)` called checks `read_property` permission regular properties `read_access_control` permission properties defining access control related content. case properties defined parent tree accessible editing session result remembered `readstatus` kept `treepermission` instance; otherwise _permission entries_ collected evaluated described [above](#permissionentries). #### session write-operations ##### adding node 1. `node.addnode(string)` internally call `nodedelegate.addchild` term, adds new child corresponding oak `tree` generate autocreated child items. 1. `session.save()` called pending changes merged `nodestore` present editing oak `root`. achieved calling `root#commit`. 1. permission evaluation triggered means specific `validator` implementation passed merge along complete set validators editors combined single `commithook`. 1. `permissionvalidator` notified new node added. 1. obtains `treepermission` object form `permissionprovider` evaluates `add_node` permission granted new target node. evaluation follows principals described [above](#permissionentries). 1. added new node granted validation continues otherwise `commit` fail immediately `commitfailedexception` type `access`. ##### changing property 1. `property.setvalue` internally call `propertydelegate.setstate` new `propertystate` created new value (or new set values). 1. `session.save()` called pending changes merged `nodestore` present editing oak `root`. achieved calling `root#commit`. 1. permission evaluation triggered means specific `validator` implementation passed merge along complete set validators editors combined single `commithook`. 1. `permissionvalidator` notified modified property. 1. obtains `treepermission` object form `permissionprovider` evaluates `modify_property` permission granted. evaluation follows principals described [above](#permissionentries). 1. changing property allowed validation continues otherwise `commit` fail immediately `commitfailedexception` type `access`. #### workspace operations ##### copying nodes 1. `workspac.copy` internally call `workspacedelegate.copy`. 1. preliminary validation delegate create new `workspacecopy` call `perform` method passing separate `root` instance obtained `contentsession.getlatestroot()`; words modifications made copy operation show transient changes editing session. 1. upon completion copy operation `root.commit` called latest root instance delegated refresh editing session reflect changes made copy. 1. permission evaluation triggered upon committing changes associated copy `validator` handles transient operations. 1. `permissionvalidator` notified new items created copy checks corresponding permissions `treepermission` associated individual new nodes. evaluation follows principals described [above](#permissionentries). 1. permission violation detected `commit` fail immediately `commitfailedexception` type `access`. ##### locking node 1. `lockmanager.lock` internally call `nodedelegate.lock`, obtain new `root` editing `contentsession` perform required changes dedicated root editing session affected. 1. lock operation complete delegate call `root.commit` latest root instance order persist changes. finally lock manager refresh editing session reflect changes made. 1. permission evaluation triggered upon committing changes associated lock operation `validator` handles transient operations. 1. `permissionvalidator` notified new items created lock identify associated lock specific operations. consequently checks `lock_management` permissions granted affected tree. evaluation triggered calling `treepermission.isgranted` follows principals described [above](#permissionentries). 1. permission violation detected `commit` fail immediately `commitfailedexception` type `access`. #### repository operations ##### registering privilege 1. `privilegemanager.registerprivilege` obtain new `root` editing `contentsession` pass new `privilegedefinitionwriter` charge writing repository content associated new privilege definition. finally writer persist changes calling `root.commit`. 1. validation new privilege definition delegated dedicated `privilegevalidator`. 1. permission evaluation triggered upon committing changes associated `validator` handles transient operations. 1. `permissionvalidator` notified changes made dedicated tree storing privilege information specifically verify `privilege_management` permissions granted repository level. achieved obtaining `repositorypermission` object `permissionprovider` calling `repositorypermission.isgranted`. evaluation follows principals described [above](#permissionentries). 1. permission violation detected `commit` fail immediately `commitfailedexception` type `access`. 1. registration successfully completed manager refresh editing session. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/externalloginmodule.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> authentication external login module -------------------------------------------------------------------------------- ### overview purpose external login module provide base implementation allows easy integration 3rd party authentication identity systems, [ldap](ldap.html). general mode external login module use external system authentication source provider users groups may also synchronized repository. does: * facilitate use 3rd party system authentication * simplify populating oak user manager identities 3rd party system not: * provide transparent oak user manager * provide transparent oak principal provider. * offer services background synchronization users groups see also [best practices external authentication](external/bestpractices.html). <a name="details"></a> ### implementation details external identity login handling split 3 parts: - **external login module**: loginmodule implementation represents connection jaas login mechanism, external identity provider synchronization handler. - **external identity provider** (idp): service implementing `externalidentityprovider` interface responsible retrieve authenticate identities towards external system (e.g. ldap). - **user group synchronization**: service implementing `synchandler` interface responsible actually managing external identities within oak user management. trivial implementation might create users groups external ones demand. modularization allows reuse external login module different combinations idps synchronization handlers. although practice, systems usually 1 each. example multiple entities come play would case use several ldap servers authentication. would configure 2 ldap idps, 1 sync handler 2 extlms. #### external login module ##### general external login module 2 main tasks. one authenticate credentials 3rd party system, coordinate syncing respective users groups jcr repository (via usermanager). user needs re-authentication (for example, cache validity expired user yet present local system all), login module must check credentials external system `login()` method. details default user/group synchronization mechanism described section [user group synchronization : default implementation](external/defaultusersync.html) ##### supported credentials oak 1.5.1 `externalloginmodule` deal kind `credentials` implementations. default (i.e. unless configured otherwise) module supports `simplecredentials` thus behaves backwards compatible previous versions. additional/other credentials supported providing `externalidentityprovider` additionally implements [credentialssupport] interface. see section [pluggability](#pluggability) instructions example. ##### authentication detail details external authentication follows: _phase 1: login_ * user exists repository following conditions met **return `false`** * user externally synced _or_ * user belongs different idp configured `externalloginmodule` _or_ * [`preauthenticatedlogin`](preauthentication.html) present shared state _and_ external user require updating sync ([oak-3508]) * user exists 3rd party system credentials match **throws `loginexception`** * user exists 3rd party system credentials match * put credentials shared private state * possibly sync user * **returns `true`** * user exist 3rd party system, checks needs remove user **returns `false`** _phase 2: commit_ * credentials private state, **returns `false`** * credentials private state propagate subject **return `true`** see section [example configurations](external/externallogin_examples.html) common setup scenarios. #### external identity provider `externalloginmodule` designed work pluggable [externalidentityprovider] implementation responsible validating authentication request provide information user associated specified credentials. see [external identity management](identitymanagement.html) information regarding identity management api defined oak. section [ldap](ldap.html) describes `ldapidentityprovider` implementation shipped oak. #### user group synchronization synchronization users groups triggered external login module, user successfully authenticated idp longer present idp. see section [user synchronization](usersync.html) details description default implementation. <a name="configuration"></a> ### configuration #### configuration parameters external authentication module comes following configuration parameters [externalloginmodulefactory]/[externalloginmodule]. | parameter | type | default | description | |---------------------------|----------|------------|-------------| | `param_idp_name` | string | \- | name external idp retrieved `externalidentityprovidermanager` | | `param_sync_handler_name` | string | \- | name sync handler retrieved `syncmanager` | | | | | | | _optional (osgi-setup)_ | | | | | `jaas_ranking` | int | 150 | ranking `externalloginmodule` jaas configuration, see [loginmodulefactory] | | `jaas_control_flag` | string | sufficient | see [loginmodulecontrolflag] supported values. | | `jaas_realm_name` | string | \- | see [loginmodulefactory] | ##### examples ###### example jaas configuration following jaas configuration shows `externalloginmodule` could used setup solely uses third party login (note: jaas configuration equivalents parameters defined `org.apache.felix.jaas.loginmodulefactory` omitted): jackrabbit.oak { org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule sufficient; org.apache.jackrabbit.oak.spi.security.authentication.external.impl.externalloginmodule sufficient sync.handlername="default" idp.name="ldap"; org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl sufficient; }; <a name="pluggability"></a> ### pluggability design `externalloginmodule` allows customization key features associated third party authentication. osgi-based setup covered references within `externalloginmodulefactory`: - [externalidentityprovidermanager]: mandatory, unary reference `externalidentityprovider` lookup; see [external identity management](identitymanagement.html) details. - [syncmanager]: mandatory, unary reference `synchandler` lookup; see [user/group synchronization](usersync.html) details. default implementations ([externalidpmanagerimpl] [syncmanagerimpl]) extend `abstractservicetracker` automatically keep track new [externalidentityprovider] [synchandler] services, respectively. since oak 1.5.1 support different multiple types `credentials` easily plugged providing [externalidentityprovider] additionally implements [credentialssupport]. optional extension point idp; missing `externalloginmodule` fall back default implementation assume idp supports `simplecredentials`. see details below. #### supported credentials following steps required order change extend set credential classes supported `externalloginmodule`: - extend `externalidentityprovider` additionally implement [credentialssupport] interface. forget make sure `externalidentityprovider.authenticate(credentials)` handles set supported credentials! ##### examples ###### example credentialssupport @component() @service(externalidentityprovider.class, credentialssupport.class) public class myidentityprovider implements externalidentityprovider, credentialssupport { public mycredentialssupport() {} //-----------------------------------------< credentialssupport >--- @nonnull @override public set<class> getcredentialclasses() { return immutableset.<class>of(mycredentials.class); } @checkfornull @override public string getuserid(@nonnull credentials credentials) { (credentials instanceof mycredentials) { return ((mycredentials) credentials).getid(); } else { return null; } } @nonnull @override public map<string, ?> getattributes(@nonnull credentials credentials) { // credentials never contain additional attributes return immutablemap.of(); } //-------------------------------------< externalidentityprovider >--- @checkfornull @override public externaluser authenticate(@nonnull credentials credentials) { (credentials instanceof mycredentials) { mycredentials mc = (mycredentials) credentials; (internalauthenticate(mc)) { return new myexternaluser(mc.getid()); } else { throw new loginexception(); } } else { return null; } } [...] //----------------------------------------------< scr integration >--- @activate private void activate() { // todo } } <!-- references --> [defaultsyncconfig]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/defaultsyncconfig.html [externalidentityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityprovider.html [externalidentityprovidermanager]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityprovidermanager.html [externalidpmanagerimpl]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/externalidpmanagerimpl.html [externalloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/externalloginmodule.html [externalloginmodulefactory]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/externalloginmodulefactory.html [loginmodulefactory]: http://svn.apache.org/repos/asf/felix/trunk/jaas/src/main/java/org/apache/felix/jaas/loginmodulefactory.java [loginmodulecontrolflag]: https://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/appconfigurationentry.loginmodulecontrolflag.html [synchandler]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/synchandler.html [syncmanager]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/syncmanager.html [syncmanagerimpl]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/syncmanagerimpl.html [credentialssupport]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/credentials/credentialssupport.html [oak-3508]: https://issues.apache.org/jira/browse/oak-3508 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/default.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> authentication : implementation details -------------------------------------------------------------------------------- ### general jackrabbit oak covers different authentication requirements providing default implementations extension points different setup scenarios. ### differences wrt jackrabbit 2.x see corresponding [documentation](differences.html). ### authentication requirements jackrabbit oak covers following login requirements provides dedicated `loginmodule` implementation(s) scenario: - [guest login](#guest) - [userid/password login](#uid_pw) - [impersonation login](#impersonation) - [token login](#token) - [pre-authenticated login](#pre_authenticated) - [external login](#external) <a name="guest"></a> #### guest login proper way obtain guest session specified jsr 283: string wspname = null; // workspace name login default workspace session anonymous = repository.login(new guestcredentials(), wspname); oak 1.0 `repository#login()` `repository#login(null, wspname)` longer treated guest login. behavior jackrabbit-core violating specification, defines null-login used cases authentication process handled outside repository (see [pre-authentication](preauthentication.html)). similarly, special treatment jackrabbit core applied guest (anonymous) user omitted altogether default [loginmoduleimpl]. default, built-in anonymous user created without password. therefore, explicitly uid/pw login using anonymous userid longer work. behavior consistent default login user password set. ##### guestloginmodule aim [guestloginmodule] implementation provide backwards compatibility jackrabbit 2.x respect guest (anonymous) login: `guestloginmodule` added _optional_ entry chain login modules jaas (or corresponding osgi) configuration. example jaas configuration: jackrabbit.oak { org.apache.jackrabbit.oak.spi.security.authentication.guestloginmodule optional; org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl required; }; behavior `guestloginmodule` follows: *phase 1: login* - tries retrieve jcr credentials [callbackhandler] using [credentialscallback] - case credentials could obtained pushes new instance [guestcredentials] shared stated **returns** `true` - otherwise **returns** `false` *phase 2: commit* - phase 1 succeeded add `guestcredentials` created `everyoneprincipal` `subject` phase 2 login process **returns** `true` - otherwise **returns** `false` <a name="uid_pw"></a> #### userid/password login oak 1.0 comes 2 different login module implementations handle [simplecredentials]: - default (`loginmoduleimpl`) described - `externalloginmodule` described section [external authentication](externalloginmodule.html) ##### loginmoduleimpl [loginmoduleimpl] defines regular userid/password login requires repository setup supports [user management](../user.html) designed supports following `credentials`: - `simplecredentials` - `guestcredentials` (see above) - `impersonationcredentials` (see below) login module implementations behaves follows: *phase 1: login* * user exist repository (i.e. cannot provided user manager) **returns `false`**. * authorizable respective userid exists group disabled users, **throws `loginexception`** * user exists repository credentials match, **throws `loginexception`** * user exists repository credentials match, **returns `true`** * also, adds credentials shared state * also, adds login name shared state * also, calculates principals adds private state * also, adds credentials private state *phase 2: commit* * private state contains credentials principals, adds (both) subject **returns `true`** * private state contain credentials principals, clears state **returns `false`** <a name="user_authentication"></a> ###### user authentication `loginmoduleimpl` uses configured `authentication`-implementation performing login step. implementation use determined [userauthenticationfactory] obtained given `userconfiguration`. expected provide `authentication` implementation given `userconfiguration` accepted. case multiple implementations `userauthenticationfactory` available, precedence depends osgi service ranking property. default factory implementation ranking 0 (osgi default). services highest ranking take precedence. see also section [user management](../user/default.html#pluggability). <a name="impersonation"></a> #### impersonation login another flavor oak authentication implementation covered `javax.jcr.session#impersonate(credentials)`, allows obtain new `session` user identified specified credentials. jsr 333 method also used order clone existing session (i.e. self-impersonation user holds session). oak 1.0 impersonation implemented follows: 1. `session#impersonate` takes kind `credentials` 2. specified credentials wrapped new instance [impersonationcredentials] along current `authinfo` object. 3. `impersonationcredentials` passed `repository.login` impersonation succeeds consequently depends authentication setup implementation specific validation make sure editing session allowed impersonate user identified credentials passed impersonate call. oak 1.0 default login module ([loginmoduleimpl]) able deal `impersonationcredentials` applies following logic: - **self-impersonation**: attempt impersonate session succeed long user still valid (i.e. exists disabled). - **regular impersonation**: impersonation another user succeed impersonated user valid (i.e. exists disabled) _and_ user associated editing session allowed impersonate user. latter depends [user management](../user.html) implementation specifically return value `user.getimpersonation().allows(subject subject)`. see [user management : default implementation](../user/default.html) details. ##### impersonationcredentials since implementation `session.impersonate` longer uses `simplecredentials` transport original `subject` rather performs login dedicated [impersonationcredentials], impersonation longer restricted `simplecredentials` passed `session#impersonate` call. instead, specified credentials passed new instance `impersonationcredentials` delegating evaluation validation specified `credentials` configured login module(s). modification affect applications used jcr api impersonate given session. note however applications relying jackrabbit implementation manually creating `simplecredentials` `securityconstants.impersonator_attribute`, would need refactored migration oak. ##### impersonation custom authentication setup applications wish use custom authentication setup need ensure following steps order get jcr impersonation working: - respect `impersonationcredentials` authentication setup. - identify impersonated `impersonationcredentials.getbasecredentials`and verify authenticated. - validate editing session allowed impersonate: user associated editing session identified [authinfo] obtained `impersonationcredentials.getimpersonatorinfo()`. <a name="token"></a> #### token login see section [token authentication](tokenmanagement.html) details regarding token based authentication. ##### tokenloginmodule `tokenloginmodule` charge creating new login tokens validate repository logins `tokencredentials`. exact behavior login module described section [token authentication](tokenmanagement.html). <a name="pre_authenticated"></a> #### pre-authenticated login oak provides two different mechanisms create pre-authentication involve repositories internal authentication mechanism credentials validation. - pre-authentication combined login module chain - pre-authentication without repository involvement (aka `null` login) see section [pre-authentication login](preauthentication.html) details examples. <a name="external"></a> #### external login default setup oak solely relying repository functionality ensure proper authentication quite common authenticate different systems (e.g. ldap). setups wish combine initial authentication third party system repository functionality, oak provides default implementation extension points: - [external authentication](externalloginmodule.html): summary external authentication details `externalloginmodule`. - [user group synchronization](usersync.html): details regarding user group synchronization well list configuration options available default implementations present oak. - [identity management](identitymanagement.html): information regarding external identity management. - [ldap integration](ldap.html): make use `externalloginmodule` ldap identity provider implementation. combination aimed replace `com.day.crx.security.ldap.ldaploginmodule`, relies jackrabbit internals longer work oak. ##### externalloginmodule [externalloginmodule] base implementation allows easy integration 3rd party authentication identity systems, [ldap](ldap.html). general mode external login module use external system authentication source provider users groups may also synchronized repository. login module implementation requires valid [synchandler] [identityprovider] present. detailed behavior `externalloginmodule` described section [external authentication](externalloginmodule.html). <!-- hidden references --> [guestcredentials]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/guestcredentials.html [simplecredentials]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/simplecredentials.html [impersonationcredentials]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/impersonationcredentials.html [authinfo]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/authinfo.html [guestloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/guestloginmodule.html [loginmoduleimpl]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/user/loginmoduleimpl.html [abstractloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/abstractloginmodule.html [userauthenticationfactory]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/userauthenticationfactory.html [callbackhandler]: /oak/docs/apidocs/javax/security/auth/callback/callbackhandler.html [credentialscallback]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/callback/credentialscallback.html [externalloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/external/externalloginmodule.html [userconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/user/userconfiguration.html [synchandler]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/synchandler.html [identityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/identityprovider.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/identitymanagement.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> external identity management -------------------------------------------------------------------------------- ### general jackrabbit oak provides interfaces base classes ease custom implementation external authentication optional user/group synchronization repository. ### identity management api - [externalidentityprovidermanager]: factory `externalidentityprovider` - [externalidentityprovider]: used authenticate third party system. additionally provides method obtain information external user/group accounts needed [synchronization](usersync.html) repository. - [externalidentity]: base interface external user/group - [externaluser] - [externalgroup] - [externalidentityref]: reference external user/group consisting id provider name. - [principalnameresolver]: optimized lookup principal name [externalidentityref]; see section [dynamic membership](external/dynamic.html) [oak-5210] details) ### default implementation `oak-auth-external` module come default implementation `externalidentityprovidermanager` osgi component tracks external idps registered via osgi. osgi setup recommended way, equally used non-osgi environments manually adding removing providers. exists default implementation interfaces related external identity management. however, oak 1.0 provides support third party authentication identity management ldap covered separate module `oak-auth-ldap`. covered section [ldap integration](ldap.html). ### pluggability #### custom external identity management order plug custom implementation external identity management following steps required: - write implementation [externalidentityprovider] including implementations external identities. _note:_ running oak osgi based setup, make sure provider gets registered osgi service case automatically tracked default [externalidentityprovidermanager]. - deploy bundle containing implementation idp gets tracked [externalidentityprovidermanager]. non-osgi environment register manually - link identity provider `externalloginmodule` configuring idp name accordingly (see section [configuration](externalloginmodule.html#configuration)) ##### examples see [customexternalidentityprovider] `oak-exercise` module simplistic implementation osgi-based oak setup. #### custom externalidentityprovidermanager since `oak-auth-external` provides default [externalidentityprovidermanager] custom identity management need provide separate implementation interface. wish provider [externalidentityprovidermanager] osgi environment, please make sure gets properly referenced `externalloginmodulefactory`. <!-- references --> [externalidentityprovidermanager]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityprovidermanager.html [externalidentityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityprovider.html [externalidentity]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentity.html [externaluser]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externaluser.html [externalgroup]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalgroup.html [externalidentityref]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityref.html [customexternalidentityprovider]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-exercise/src/main/java/org/apache/jackrabbit/oak/exercise/security/authentication/external/customexternalidentityprovider.java [principalnameresolver]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/principalnameresolver.html [oak-5210]: https://issues.apache.org/jira/browse/oak-5210 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/ldap.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ldap integration -------------------------------------------------------------------------------- oak comes default implementation ldap identity provider allows perform external authentication existing ldap combination user synchronization. see section [external login module user synchronization](externalloginmodule.html) general overview `externalloginmodule` used combination custom identity providers synchronization handlers. ### default setup box oak comes following ldap integration setup: - `ldapidentityprovider`: ldap specific implementation [externalidentityprovider] interface. - `defaultsynchandler`: default implementation [synchandler] interface. - `externalloginmodule`: login module implementation allows third party authentication specified configured identity provider(s). ### characteristics default implementation #### ldap identity provider [ldapidentityprovider] service implementing [externalidentityprovider] interface. since oak 1.6.1 also implements [principalnameresolver] interface allow fast resolution given `externalidentityref` principal name optimization [dynamic membership](external/dynamic.html) feature. osgi-base setup configuration options required order establish connections ldap obtained form properties associated service. otherwise identity provider must instantiated corresponding `ldapproviderconfig` object revealing mandatory config options. details ldap configuration listed section configuration. #### combining multiple ldap sources currently way combine multiple ldap sources multiple entries `externalloginmodule` configured jaas setup coming identity provider implementation sync handler. see [oak-1839] improvement request allows multiple identity provider implementations configured `externalloginmodule`. ### configuration #### configure ldap integration following steps required order configure ldap integration oak repository: - ensure externalloginmodule forms part systems jaas configuration - enable ldap identityprovider make sure properly configured (see section _ldap configuration_ below) #### ldap configuration ldap ipds configured [org.apache.jackrabbit.oak.security.authentication.ldap.impl.ldapproviderconfig] populated either via osgi manual [repository construction](../../construct.html). | name | property | description | |------------------------------------|-------------------------------------------|------------------------------------------| | ldap provider name | `provider.name` | name ldap provider configuration. used reference provider login modules. | | bind dn | `bind.dn` | dn user authentication. leave empty anonymous bind. | | bind password | `bind.password` | password user authentication. | | ldap server hostname | `host.name` | hostname ldap server | | disable certificate checking | `host.nocertcheck` | indicates server certificate validation disabled. | | ldap server port | `host.port` | port ldap server | | use ssl | `host.ssl` | indicates ssl (ldaps) connection used. | | use tls | `host.tls` | indicates tls started connections. | | enabled protocols | `host.enabledprotocols` | allows explicitly set enabled protocols ldapconnectionconfig. | | search timeout | `searchtimeout` | time search times (eg: '1s' '1m 30s'). | | admin pool max active | `adminpool.maxactive` | max active size admin connection pool. non-positive, limit number objects managed pool one time. value 0 disables pool. | | admin pool lookup validate | `adminpool.lookuponvalidate` | indicates root dse lookup performed test connection still valid taking admin pool. | | admin pool min evictable idle time | `adminpool.minevictableidletime` | minimum amount time connection admin pool must idle becoming eligible eviction idle object evictor, running (eg: '1m 30s'). non-positive, connections evicted pool due idle time alone. | | admin pool eviction run interval | `adminpool.timebetweenevictionruns` | time interval sleep runs idle object evictor thread admin pool (eg: '1m 30s'). non-positive, idle object evictor thread run. | | admin pool tests per eviction run | `adminpool.numtestsperevictionrun` | maximum number objects examined single eviction run admin pool. | | user pool max active | `userpool.maxactive` | max active size user connection pool. non-positive, limit number objects managed pool one time. value 0 disables pool. | | user pool lookup validate | `userpool.lookuponvalidate` | indicates root dse lookup performed test connection still valid taking user pool. | | user pool min evictable idle time | `userpool.minevictableidletime` | minimum amount time connection user pool must idle becoming eligible eviction idle object evictor, running (eg: '1m 30s'). non-positive, connections evicted pool due idle time alone. | | user pool eviction run interval | `userpool.timebetweenevictionruns` | time interval sleep runs idle object evictor thread user pool (eg: '1m 30s'). non-positive, idle object evictor thread run. | | user pool tests per eviction run | `userpool.numtestsperevictionrun` | maximum number objects examined single eviction run user pool. | | user base dn | `user.basedn` | base dn user searches. | | user extra filter | `user.extrafilter` | extra ldap filter use searching users. final filter formatted like: `(&(<idattr>=<userid>)(objectclass=<objectclass>)<extrafilter>)` | | user id attribute | `user.idattribute` | name attribute contains user id. | | user dn paths | `user.makednpath` | controls dn used calculating portion intermediate path. | | user object classes | `user.objectclass` | list object classes user entry must contain. | | group base dn | `group.basedn` | base dn group searches. | | group extra filter | `group.extrafilter` | extra ldap filter use searching groups. final filter formatted like: `(&(<nameattr>=<groupname>)(objectclass=<objectclass>)<extrafilter>)` | | group dn paths | `group.makednpath` | controls dn used calculating portion intermediate path. | | group member attribute | `group.memberattribute` | group attribute contains member(s) group. | | group name attribute | `group.nameattribute` | name attribute contains group name. | | group object classes | `group.objectclass` | list object classes group entry must contain. | | use user id external ids | `useuidforextid` | enabled, value user id (resp. group name) attribute used create external identifiers. leave disabled use dn instead. | | custom attributes | `customattributes` | attributes retrieved looking ldap entries. leave empty retrieve attributes. | | | | | #### synchandler external login module see [external login module user synchronization](externalloginmodule.html) details external login module configuration options [defaultsynchandler]. <!-- references --> [externalidentityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityprovider.html [principalnameresolver]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/principalnameresolver.html [synchandler]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/synchandler.html [defaultsynchandler]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/defaultsynchandler.html [ldapidentityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/ldap/impl/ldapidentityprovider.html [org.apache.jackrabbit.oak.security.authentication.ldap.impl.ldapidentityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/ldap/impl/ldapidentityprovider.html [org.apache.jackrabbit.oak.security.authentication.ldap.impl.ldapproviderconfig]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/ldap/impl/ldapproviderconfig.html [oak-1839]: https://issues.apache.org/jira/browse/oak-1839 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/tokenmanagement.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> token authentication token management -------------------------------------------------------------------------------- ### general token based authentication completely refactor oak following general characteristics. - dedicated api managing login tokens defined package `org.apache.jackrabbit.oak.spi.security.authentication.token`. - pluggable configuration new token management api - complete separation token based authentication separate `loginmodule`. ### token authentication oak token based authentication handled dedicated [tokenloginmodule]. responsible creating new login tokens validating [tokencredentials] passed repository login. token specific login module implementation obtains [tokenprovider] security configuration defined content repository. token management implementation present given repository changed extended runtime (see section configuration below). #### tokenloginmodule `tokenloginmodule`designed support issue `tokencredentials`. authentication phases behave follows: *phase 1: login* - `tokenprovider` available **returns `false`** - `tokenprovider` configured retrieves jcr credentials [callbackhandler] using [credentialscallback] - case `tokencredentials` validates credentials: succeeds pushes users id shared state returns `true`; otherwise throws `loginexception` - credentials method returns `false` *phase 1: commit* - phase 1 succeeded subject populated method returns `true` - case phase 1 succeed method test shared state contain credentials ask new token created; succeeds create new instance `tokencredentials`, push public attributes shared stated update subject new credentials; finally commit call **returns `false`** ##### example jaas configuration ``` jackrabbit.oak { org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule sufficient; org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl required; }; ``` <a name="api_extensions"></a> ### token management api oak 1.0 defines following interfaces used manage login tokens: - [tokenconfiguration]: interface obtain `tokenprovider` instance (see section [configuration](#configuration) below). - [tokenprovider]: interface read manage login tokens. - [tokeninfo]: information associated given login token token validity. addition oak comes default implementation provider interface able aggregate multiple `tokenprovider`s: - [compositetokenconfiguration]: extension `compositeconfiguration` combined different token management implementations. - [compositetokenprovider]: aggregation `tokenprovider` implementations defined configurations contained `compositetokenconfiguration` see section [pluggability](#pluggability) example. <a name="default_implementation"></a> ### characteristics default implementation characteristics default token management implementation described section [token management : default implementation](token/default.html). <a name="configuration"></a> ### configuration configuration options default implementation described [configuration](token/default.html#configuration) section. <a name="pluggability"></a> ### pluggability default security setup present oak 1.0 able deal custom token management implementations collect multiple implementations within `compositetokenconfiguration` present `securityprovider`. `compositetokenconfiguration` combine different `tokenprovider` implementations using `compositetokenprovider`. osgi setup following steps required order add custom token provider implementation: - implement `tokenprovider` interface - expose custom provider custom `tokenconfiguration` service - make configuration available oak repository. - make sure `tokenconfiguration` listed required service securityprovider (see also [introduction](../introduction.html#configuration])) ##### examples ###### example tokenconfiguration @component() @service({tokenconfiguration.class, securityconfiguration.class}) public class mytokenconfiguration extends configurationbase implements tokenconfiguration { public tokenconfigurationimpl() { super(); } public tokenconfigurationimpl(securityprovider securityprovider) { super(securityprovider, securityprovider.getparameters(name)); } @activate private void activate(map<string, object> properties) { setparameters(configurationparameters.of(properties)); } //----------------------------------------------< securityconfiguration >--- @nonnull @override public string getname() { return name; } //-------------------------------------------------< tokenconfiguration >--- @nonnull @override public tokenprovider gettokenprovider(root root) { return new mytokenprovider(root, getparameters()); } } <!-- references --> [tokenloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/token/tokenloginmodule.html [tokencredentials]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/authentication/token/tokencredentials.html [authinfo]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/authinfo.html [contentsession]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/contentsession.html [tokenprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/token/tokenprovider.html [tokeninfo]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/token/tokeninfo.html [compositetokenconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/token/compositetokenconfiguration.html [compositetokenprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/token/compositetokenprovider.html [credentialscallback]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/callback/credentialscallback.html [callbackhandler]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/callback/callbackhandler.html [tokenconfiguration]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/token/tokenconfiguration.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/preauthentication.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> pre-authenticated login -------------------------------------------------------------------------------- oak provides two different mechanisms create pre-authentication involve repositories internal authentication mechanism credentials validation. - [pre-authentication combined login module chain](#withloginchain) - [pre-authentication without repository involvement](#withoutrepository) <a name="withloginchain"></a> ### pre-authentication combined login module chain first variant allows support 3rd party login modules wish provide login context pre authenticated login names, still want rely rest oak's login module chain. example external sso login module extract userid servlet request use authenticate repository. instead re-implementing user lookup subject population (and possible external user synchronization) informs subsequent login modules credential validation already successful. key understand mechanism [preauthenticatedlogin] marker class, pushed shared state login context indicates subsequent loginmodule credentials present state already verified thus trusted. setup particularly recommended osgi setup includes apache sling top oak repository still requires user information synchronized repository. #### works basic steps pre-authentication combination regular jaas login module chain outlined follows: 1. verify identity layer top jcr repository (e.g. custom sling authentication handler) 2. pass custom, non-public credentials implementation repository login 3. create custom login module supports dedicated credentials pushes new instance `preauthenticatedlogin` information required processed subsequent login modules (e.g. credentials user name). 4. make sure subsequent login modules jaas configuration capable deal `preauthenticatedlogin` additional information properly populate subject optionally synchronize user information create login tokens. ##### example example implementation `loginmodule#login` pushes `preauthenticatedlogin` marker shared state: public class preauthloginmodule extends abstractloginmodule { [...] @overwrite public boolean login() throws loginexception { credentials credentials = getcredentials(); (credentials instanceof mypreauthcredentials) { userid = ((mypreauthcredentials) credentials).getuserid(); (userid == null) { log.debug("could extract userid/credentials"); } else { sharedstate.put(shared_key_pre_auth_login, new preauthenticatedlogin(userid)); sharedstate.put(shared_key_credentials, new simplecredentials(userid, new char[0])); sharedstate.put(shared_key_login_name, userid); log.debug("login succeeded trusted user: {}", userid); } } [...] // subsequent login modules need succeed process 'preauthenticatedlogin' return false; } @overwrite public boolean commit() { // module leaves subject population subsequent modules // already handled login 'preauthenticatedlogin' marker. return false; } } <a name="withoutrepository"></a> ### pre-authentication without repository involvement like jackrabbit-core repository internal authentication verification skipped calling `repository#login()` `repository#login(null, wspname)`. case repository implementation expects verification performed prior login call. behavior provided default implementation `logincontextprovider` [1] expects `subject` available current `java.security.accesscontrolcontext`. however, contrast jackrabbit-core current implementation try extend pre-authenticated subject skips internal verification step altogether. #### options modify default behavior since `logincontextprovider` configurable authentication setup oak users also following options providing custom `logincontextprovider`: - disable pre-authentication trying retrieve pre-authenticated `subject`. - add support extending pre-authenticated subject always passing writable subjects `jaaslogincontext` - dropping jaas altogether providing custom implementation `org.apache.jackrabbit.oak.spi.security.authentication.logincontext` [2] interface. ##### example example use type pre-authentication: string userid = "test"; /** * retrive valid principals e.g. using jackrabbit oak api: * - principalmanager#getprincipal and/or #getgroupmembership * - principalprovider#getprincipals(string userid) */ set<? extends principal> principals = getprincipals(userid); authinfo authinfo = new authinfoimpl(userid, collections.<string, object>emptymap(), principals); subject subject = new subject(true, principals, collections.singleton(authinfo), collections.<object>emptyset()); session session; try { session = subject.doasprivileged(subject, new privilegedexceptionaction<session>() { @override public session run() throws exception { return login(null, null); } }, null); } catch (privilegedactionexception e) { throw new repositoryexception("failed retrieve session.", e); } <!-- references --> [preauthenticatedlogin]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/preauthenticatedlogin.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/differences.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ### authentication : differences wrt jackrabbit 2.x #### guest login vs null login ##### null login oak 1.0 `repository#login()` `repository#login(null, wspname)` longer treated guest login _pre-authenticed_ defined jsr 283. order get backwards compatible behavior, oak comes dedicated [guestloginmodule] added jaas (or corresponding osgi) configuration. ##### guest login respect guest login (aka anonymous login) oak content repository box contains following modifications: - null login != guest login - special password handling anonymous user dropped - anonymous user default password set ##### pre-authentication oak provides two different mechanisms create pre-authentication involve repositories internal authentication mechanism credentials validation. see corresponding section [pre-authentication](preauthentication.html) details examples. - pre-authentication combined login module chain - pre-authentication without repository involvement: `subject` must available current `java.security.accesscontrolcontext`. #### impersonation ##### self-impersonation (aka cloning session) oak 1.0 latest changes made jsr 333 respect `session#impersonate` adopted ([jsr_333-27]): attempt impersonate session (self-impersonation) succeed long user still valid. ##### impersonation credentials oak implementation `session#impersonate` longer uses `simplecredentials` transport original `subject` rather performs login dedicated [impersonationcredentials]. modification affect applications used jcr api impersonate given session. however following example 'manually' builds impersonation credentials way jackrabbit core handling **no longer work** impersonate existing session: org.apache.jackrabbit.core.sessionimpl simpl = (sessionimpl) mysession; simplecredentials jrimpcreds = new simplecredentials("someuserid, new char[0]); creds.setattribute(securityconstants.impersonator_attribute, simpl.getsubject()); session impersonated = simpl.getrepository().login(jrimpcreds, simpl.getworkspace().getname()); upon migration oak implementation specific code refactored use regular jcr api impersonation: // note: build credentials depends auth setup ! credentials impersonationcredentials = new simplecredentials("someuserid, new char[0]); session impersonated = session.impersonate(impersonationcredentials); order achieve impersonation oak api directly: contentrepository contentrepo = ... contentsession editingsession = ... authinfo impersonatorinfo = editingsession.getauthinfo(); credentials credentials = new simplecredentials("someuserid, new char[0]); impersonationcredentials impersonationcredentials = new impersonationcredentials(credentials, impersonatorinfo); contentsession impersonated = contentrepo.login(impersonationcredentials, editingsession.getworkspacename()); #### token based authentication token based authentication completely refactor oak described section [token management](tokenmanagement.html). default implementation differs jackrabbit follows - token node created dedicated node type (rep:token) - expiration key properties mandatory protected properties - expiration time obtained `param_token_expiration` defined token management api. far token based authentication concerned oak implementation contains following changes compared jackrabbit 2.x: - token based authentication completely separated regular uid/pw authentication. - dedicated [tokenloginmodule] responsible creating new login tokens performing authentication [tokencredentials] passed repository login. login modules attempt so. - token characteristics expiration time need configured token management api; `loginmodule` implementations longer need config options set. <!-- references --> [tokenloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/token/tokenloginmodule.html [tokencredentials]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/authentication/token/tokencredentials.html [guestloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/guestloginmodule.html [jsr_333-27]: https://java.net/jira/browse/jsr_333-27 [impersonationcredentials]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/impersonationcredentials.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/usersync.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> user group synchronization -------------------------------------------------------------------------------- ### general synchronization users groups triggered [externalloginmodule](externalloginmodule.html), user successfully authenticated idp longer present idp. ### synchronization api - [syncmanager]: factory configured `synchandler` implementations. - [synchandler]: responsible synchronizing users/groups `externalidentityprovider` repository. - [synccontext]: executes synchronization - [syncedidentity]: represents synchronized identity - [syncresult]: result sync operation - [syncexception]: marker sync related errors #### jmx synchronization tool addition synchronization api oak 1.0 defines utilities manage synchronized external identities within jmx (`synchronizationmbean`) allows following tasks: - `syncusers(string[] userids, boolean purge)` - `syncallusers(boolean purge)` - `syncexternalusers(string[] externalids)` - `syncallexternalusers()` - `listorphanedusers()` - `purgeorphanedusers()` ### default implementation oak 1.0 provides default implementation user synchronization api allow plug additional `synchandler` implementations. default implementation described section [user group synchronization : default implementation](external/defaultusersync.html) [user group synchronization : dynamic membership](external/dynamic.html). ### pluggability two ways replace/change user synchronization behavior 1. write custom `syncmanager` 2. write custom `synchandler` following steps required order replace default `syncmanager` implementation plug new implementation `synchandler`: - write custom implementation interface - make manager/handler available authentication setup sync manager - osgi setup: making implementation osgi service - non-osgi setup: configure manager/handler manual [repository construction](../../construct.html). <!-- references --> [syncmanager]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/syncmanager.html [synchandler]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/synchandler.html [synccontext]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/synccontext.html [syncedidentity]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/syncedidentity.html [syncresult]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/syncresult.html [syncexception]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/syncexception.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/token/default.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> token management : default implementation --------------------------------------------- ### general notes default implementation token management api stores login tokens along user's home directory repository. along hash login token separated properties defining expiration time token well additional properties associated login tokens. additional information may mandatory (thus validated login) optional. optional properties meant informative value transferred public attributes exposed [authinfo] present [contentsession]. ### token management operations #### token creation creation new token triggered valid supported `credentials` passed login module chain contain additional, empty `.token` attribute. [tokenloginmodule] obtain `credentials` shared state commit phase (i.e. phase 2 jaas authentication) pass configured [tokenprovider] implementation following sequence: credentials shared = getsharedcredentials(); (shared != null && tokenprovider.docreatetoken(shared)) { [...] tokeninfo ti = tokenprovider.createtoken(shared); [...] } case success steps generated new token stored hash along mandatory informative attributes new content node representing token. ##### supported credentials token creation default implementation deals shared `simplecredentials`. oak 1.5.8 token management extended order allow custom `credentials` implementations. achieved registering custom implementation [credentialssupport] interface. default token management uses [simplecredentialssupport]. see also [oak-4129] section [pluggability](#pluggability) below) additional information. #### token validation token created used subsequent repository logins [tokencredentials]. time [tokenloginmodule] attempt perform login phase (i.e. phase 1 jaas authentication). includes resolving login token (`tokenprovider.gettokeninfo`) asserting validity case exists. validation consists following steps: - check token expired (`tokeninfo.isexpired`) - verify mandatory attributes present match expectations (`tokeninfo.matches`) steps successfully completed login [tokenloginmodule] succeed. #### token removal given login token (and node associated it) removed authentication fails due expired token explicit api call i.e. `tokeninfo.remove`. #### resetting expiration time default `tokenprovider` implementation automatically reset expiration time given token upon successful authentication. behavior disabled setting `tokenrefresh` configuration parameter `false` (see `param_token_refresh` below). case expiration time reset attempt using api (e.g. calling ` tokeninfo.resetexpiration(long logintime)`) return `false` indicating expiration time reset. token consequently expire user need login using configured login mechanism (e.g. using credentials support token creation). #### token cleanup automatic token cleanup enabled setting `tokencleanupthreshold` parameter value larger `0` (`0` means disabled). trigger cleanup call number tokens user exceeds value. (as implementation detail throttling method introduced allow call go 1/8 times). available oak 1.7.12 on, see also [oak-6818]for additional information. <a name="representation"></a> ### representation repository #### content structure login tokens issued given user located underneath node named `.tokens` created `tokenprovider` first token created. default implementation creates distinct node login token described testuser { "jcr:primarytype": "rep:user", ... ".tokens" { "jcr:primarytype": "rep:unstructured", "2014-04-10t16.09.07.159+02.00" { "jcr:primarytype": "rep:token", ... "2014-05-07t12.08.57.683+02.00" { "jcr:primarytype": "rep:token", ... } "2014-06-25t16.00.13.018+02.00" { "jcr:primarytype": "rep:token", ... } } } #### token nodes oak 1.0 login token represented repository follows: - token node referenceable dedicated node type `rep:token` (used unstructured jackrabbit 2.x) - expiration key properties defined mandatory protected - expiration time obtained `param_token_expiration` specified login attributes falls back configuration parameter name specified configuration options `tokenconfiguration`. definition new built-in node type `rep:token`: [rep:token] > mix:referenceable - rep:token.key (string) protected mandatory - rep:token.exp (date) protected mandatory - * (undefined) protected - * (undefined) multiple protected following example illustrates token nodes resulting node type definition: testuser { "jcr:primarytype": "rep:user", ... ".tokens" { "2014-04-10t16.09.07.159+02.00" { "jcr:primarytype": "rep:token", "jcr:uuid": "30c1f361-35a2-421a-9ebc-c781eb8a08f0", "rep:token.key": "{sha-256}afaf64dba5d862f9-1000-3e2d4e58ac16189b9f2ac95d8d5b692e61cb06db437bcd9be5c10bdf3792356a", "rep:token.exp": "2014-04-11t04:09:07.159+02:00", ".token.ip": "0:0:0:0:0:0:0:1%0" ".token.othermandatoryproperty": "expectedvalue", "referer": "http://localhost:4502/crx/explorer/login.jsp" "otherinformalproperty": "somevalue" }, "2014-05-07t12.08.57.683+02.00" { "jcr:primarytype": "rep:token", "jcr:uuid": "c95c91e2-2e08-48ab-93db-6e7c8cdd6469", "rep:token.key": "{sha-256}b1d268c55abda258-1000-62e4c368972260576d37e6ba14a10f9f02897e42992624890e22c522220f7e54", "rep:token.exp": "2014-05-08t00:08:57.683+02:00" }, ... } } } <a name="validation"></a> ### validation consistency content structure creation modification asserted dedicated `tokenvalidator`. corresponding errors type `constraint` following codes: | code | message | |-------------------|----------------------------------------------------------| | 0060 | attempt create reserved token property ctx | | 0061 | attempt change existing token key | | 0062 | change primary type existing node rep:token | | 0063 | creation/manipulation tokens without using provider | | 0064 | create token outside configured scope | | 0065 | invalid location token node | | 0066 | invalid token key | | 0067 | mandatory token expiration missing | | 0068 | invalid location .tokens node | | 0069 | change type .tokens parent node | <a name="configuration"></a> ### configuration default oak `tokenconfiguration` allows define following configuration options `tokenprovider`: #### configuration parameters | parameter | type | default | |-------------------------------------|---------|--------------------------| | param_token_expiration | long | 2 * 3600 * 1000 (2 hours)| | param_token_length | int | 8 | | param_token_refresh | boolean | true | | param_password_hash_algorithm | string | sha-256 | | param_password_hash_iterations | int | 1000 | | param_password_salt_size | int | 8 | | param_token_cleanup_threshold | long | 0 (no cleanup) | | | | | <a name="pluggability"></a> ### pluggability osgi-based setup default `tokenconfiguration` bind custom implementation [credentialssupport] interface. allows support type custom credentials, reveal id user logging repository. particular chaining `tokenloginmodule` `externalloginmodule` [credentialssupport] used authenticate synchronize users provided third party systems phase 1 (login) generate login token phase 2 (commit). see section [authentication external login module](../externalloginmodule.html) additional details. work [credentialssupport] must configured [externalidentityprovider] `tokenconfiguration` `credentialssupport.getuserid` must reveal id synced user (i.e. `externaluser.getid`). general following steps required order plug different `credentialssupport` default `tokenconfiguration`: - implement `credentialssupport` interface (e.g. extension `externalidentityprovider`) - make sure implementation osgi service deploy oak repository. ##### examples ###### example credentialssupport osgi-based setup sufficient make service available repository order enable custom `credentialssupport`. @component @service(value = {credentialssupport.class}) /** * custom implementation {@code credentialssupport} interface. */ final class mycredentialssupport implements credentialssupport { @nonnull @override public set<class> getcredentialclasses() { return immutableset.<class>of(mycredentials.class); } @checkfornull @override public string getuserid(@nonnull credentials credentials) { (credentials instanceof mycredentials) { // todo: resolve user id return resolveuserid(credentials); } else { return null; } } @nonnull @override public map<string, ?> getattributes(@nonnull credentials credentials) { // todo: optional implementation return immutablemap.of(); } @override public boolean setattributes(@nonnull credentials credentials, @nonnull map<string, ?> attributes) { // todo: optional implementation return false; } [...] } ###### example credentialssupport combination external authentication see section [authentication external login module](../externalloginmodule.html#pluggability) example. <!-- references --> [tokencredentials]: /oak/docs/apidocs/org/apache/jackrabbit/api/security/authentication/token/tokencredentials.html [authinfo]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/authinfo.html [contentsession]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/contentsession.html [tokenprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/token/tokenprovider.html [tokeninfo]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/token/tokeninfo.html [tokenloginmodule]: /oak/docs/apidocs/org/apache/jackrabbit/oak/security/authentication/token/tokenloginmodule.html [credentialssupport]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/credentials/credentialssupport.html [simplecredentialssupport]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/credentials/simplecredentialssupport.html [oak-4129]: https://issues.apache.org/jira/browse/oak-4129 [externalidentityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityprovider.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/external/bestpractices.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # best practices external authentication <!-- macro{toc} --> ## get started get started make sure familiar basic concepts jcr authentication, implementation apache jackrabbit oak. external authentication oak refers integrating third party identity provider like ldap saml authentication setup optionally combining built-in authentication mechanisms. ## best practices ### jaas setup combining external authentication built-in custom [login modules] make sure define [configuration] optimal order proper [control flag] module cover cases. order chosen optional sufficient login modules come first. potentially expensive authentication third party identity provider well rare use cases defined lower ranking. additional reading: https://docs.oracle.com/en/java/javase/11/security/appendix-b-jaas-login-configuration-file.html#guid-7eb80fa5-3c16-4016-aed6-0fc619f86f8e #### combination token authentication whenever jcr sessions created oak short-lived (e.g. lasting single http request) authentication external idp may perform well. therefore recommended use external authentication combination additional authentication mechanism like e.g. built-in [token login](../tokenmanagement.html). make sure token login module [control flag] 'sufficient' evaluated prior external login connects external idp. #### combination default authentication oak comes default login user accounts stored managed inside jcr content repository. also includes support default users like 'anonymous' (guest) 'admin' full access repository. desired, recommend also add [default `loginmodule`](../default.html#uid_pw) jaas configuration. optional order depends frequency default vs external login: login impersonation local users occurs frequently (e.g. unauthentication login [guestcredentials]) default login module higher ranking. however, authentication local users unlikely, external oak login ranking. ##### example jaas configuration following jaas configuration example running oak repository external authentication combination apache sling: | ranking | control flag | loginmodule class name | |---------|--------------|------------------------| | 300 | optional | org.apache.jackrabbit.oak.spi.security.authentication.guestloginmodule | | 200 | sufficient | org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule | | 150 | sufficient | org.apache.jackrabbit.oak.spi.security.authentication.external.impl.externalloginmodulefactory | | 100 | sufficient | org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl | see [authentication external login module : examples](externallogin_examples.html#integration_with_standard_oak_authentication_used_for_apache_sling) detailed explanation well alternative configurations. ### synchronization users groups external authentication module oak comes option synchronize external identities content repository (see section [user group synchronization](../usersync.html)). following best practices followed: #### external identity provider ssot external identity provider considered single source truth (ssot) users groups defined managed it. contrast, users/groups synchronized repository considered volatile cache ideally immutable (i.e. maintained system sessions charge synchronization). following features provided _oak-auth-external_ module help prevent unintended modification synchronized external identities: - [dynamic membership](defaultusersync.html#dynamic_membership): enabling dynamic membership result membership information stored protected property cannot altered using regular jcr write jackrabbit user management api. - [dynamic group](defaultusersync.html#dynamic_groups): used combination dynamic membership application requires group principals also exposed `usermanager` (and `principalmanager` would needed permission setup). note though group accounts cannot members added (see section [enforcing dynamic groups](defaultusersync.html#enforcing_dynamic_groups)) - [protecting external identities](defaultusersync.html#protect_external_identities): module comes [configuration option](defaultusersync.html#configuration_principals) protect external identities. enabled (as warning full protection) dedicated validator report/fail attempts modify synchronized external identities. help identify violations immutability contract. #### user management external identities - properties membership external identities must managed external idp. changes made jcr repository using user management api overwritten upon next sync. - never set password external users make sure uid/pw login gets authenticated external idp never synchronized user repository. #### membership nesting performance reasons avoid defining unnecessary membership nesting increase number indirections (see [best practices authorization](../../authorization/bestpractices.html)). #### membership crossing idp boundaries introducing membership crossing idp boundaries considered trust boundary violation. adding external identities local groups cannot avoided, leverage [conditional auto-membership](defaultusersync.html#configuration_automembership) auto-membership configuration combination dynamic membership (see [configuration defaultsynchandler](defaultusersync.html#configuration_sync_handler)). ### authorization external identities upon repository login external authentication subject populated principals obtained external identity provider. addition, configured auto-membership resolved external user external groups (see automembership configuration [options](defaultusersync.html#configuration_sync_handler) section [automatic membership automembershipconfig](defaultusersync.html#configuration_automembership)) authenticated session subject regular oak permission evaluation defined instance described section [permissions](../../permission.html). #### access control setup synchronized external identities (both default dynamic sync mode) exposed principals [principal management api](../../principal.html) used access control setup described [access control management](../../accesscontrol.html). see also section [best practices authorization](../../authorization/bestpractices.html) recommendations. external groups get synchronized together external users upon repository login. wish defined access control setup groups prior synchronization upon login following 2 options exist: - pre-sync external groups make available principal manager (see next section) - configure [importmode](../../accesscontrol/default.html#configuration)=`besteffort` default oak authorization setup define access control content principals exist (see below). ##### pre-sync external groups following 2 options exist populate repository external group principals outside regular synchronization upon login: - _oak-auth-external_ module comes jmx integration allows synchronization external identities outside regular repository login. see [jmx synchronization tool](../usersync.html#jmx-synchronization-tool) [synchronizationmbean](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/jmx/synchronizationmbean.html) details. requires `externalidentityprovider` implement methods required retrieve external identities. recommended way pre-sync groups. - case `externalidentityprovider` support user group sync outside regular repository login, external identities created using jackrabbit user management api. note: - property `rep:externalid` system maintained protected cannot added changed group persisted. - mistakes defining protected properties `rep:externalid`, `rep:authorizableid` `rep:principalname` result mismatch authentication, sync permission evaluation. way fix mistakes remove recreate group. access control content associated wrong principal name needs removed separately. ##### define access control setup non-existing principals jsr 283 mandates `accesscontrolexception` thrown whenever principal specified access control content exist, apache jackrabbit oak allows relaxed contract using configuration option [importmode](../../accesscontrol/default.html#xml_import). set [`besteffort`](../../accesscontrol/default.html#configuration) access control setup unknown principals created. see also [sling-12115](https://issues.apache.org/jira/browse/sling-12115) additional option [apache sling repoinit](https://sling.apache.org/documentation/bundles/repository-initialization.html) define create access control entries non-existing principals. <!-- references --> [login modules]: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/security/auth/spi/loginmodule.html [configuration]: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/security/auth/login/configuration.html [control flag]: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/security/auth/login/appconfigurationentry.loginmodulecontrolflag.html [guestcredentials]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/guestcredentials.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/external/dynamic.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # user group synchronization : dynamic membership dynamic groups ---------------------------------------------------------------------- <!-- macro{toc} --> oak 1.5.3 default sync handler comes additional configuration option (see section [configuration](defaultusersync.html#configuration) allows enabling dynamic group membership resolution external users. enabling dynamic sync options [defaultsyncconfig] change way external groups synchronized (see [oak-4101]) automatic group membership handled (see [oak-4087]). key benefits dynamic membership resolution are: - avoiding duplicate user management effort wrt membership handling external idp repository - avoid storing/updating auto-membership assigned external users - ease principal resolution upon repository login see also [faq](faq.html#dynamic_sync) frequently asked questions dynamic sync. ## synccontext dynamic membership default `synchandler` configuration option show following effects: ### external groups - enabled handler use alternative [synccontext] synchronize external groups (`dynamicsynccontext`). - instead synchronizing membership information alongside group accounts, `dynamicsynccontext` set property `rep:externalprincipalnames` synchronized external user - `rep:externalprincipalnames` system maintained multivalued property type 'string' storing names `java.security.acl.group`-principals given external user member (both declared inherited according configured membership nesting depth) - default, external groups longer synchronized repository's user management available `principal`s (see section _user management_ below). - `dynamic groups` option enabled together `dynamic membership`, external groups synchronized user management marked _dynamic_. user-group relationship dynamic external groups determined dedicated `dynamicmembershipservice` registered options enabled given `synchandler` mapping. note: improvement [principalnameresolver] interface introduced oak 1.6.1 allow optimized resolution principal names given `externalidentityref`. order benefit shortcut given implementation `externalidentityprovider` needs also implement `principalnameresolver`. see also [oak-5210]. ### automatic membership - enabled automatic membership assignment existing, local groups longer written repository - instead, `externalprincipalconfiguration` _("apache jackrabbit oak external principalconfiguration")_ keep track mapping registered [synchandler]s (i.e. auto-membership configuration) [externalidentityprovider]s determine auto-membership based `rep:externalid` stored user accounts. - `principalprovider` associated dedicated principal configuration expand collection `principal`s generated following calls automatically assigned principals: - `principalprovider.getgroupmembership(principal)` - `principalprovider.getprincipals(string)` - configured auto-membership groupids cannot resolved existing `o.a.j.api.security.user.group` ignored accordance default behavior. - consequently, `principalprovider` relies `principalprovider` implementations _own_ group principals expose upon calls (e.g. `principalprovider.getprincipal(string)`. - changes auto-membership configuration immediately reflected new instances `principalprovider`. - note, initial version (oak 1.6) `user.automembership` configuration respected (see also [oak-5194] [oak-5195]) - [oak-9462] implementation `dynamicmembershipprovider` registered reflect automembership synchronized external users user management api (see below). applies conditional auto-membership introduced [oak-9463]. ## effect dynamic membership security modules ### principal management dynamic (principal) membership features comes dedicated `principalconfiguration` implementation (i.e. [externalprincipalconfiguration]) charge securing `rep:externalprincipalnames` properties (see also section [validation](defaultusersync.html#validation) [configuration](defaultusersync.html#configuration)). additionally, [externalprincipalconfiguration] provides `principalprovider` implementation makes external (group) principals available repository's authentication authorization using `rep:externalprincipalnames` persistent cache avoid expensive lookup idp. also makes external `principal`s retrievable searchable jackrabbit principal management api (see section [principal management](../../principal.html) comprehensive description). please note following implementation detail wrt accessibility group principals: given external principal accessible though principal management api read `rep:externalprincipalnames` properties present using dedicated query. #### api overview - `extusername` : principal name external user - `extgroupname` : principal name external group - `extuserprincipal` : principal associated synchronized external user - `extgroupprincipal` : principal associated synchronized external group | api call | default sync | dynamic membership | dynamic membership + dynamic groups | comment | -----------------------------------------------------------|--------------|--------------------|------------------------|---------| | `principalmanager.getprincipal(extusername)` | ok | ok | ok | | | `principalmanager.getprincipal(extgroupname)` | ok | (ok) <sup>1</sup> | ok | <sup>1</sup> editing session read `rep:externalprincipalnames` property containing group principal name | | `principalmanager.getgroupmembership(extuserprincipal)` | ok | ok | ok | dynamic group principals include declared external groups configured auto-membership principals (including inherited principals).| | `principalmanager.getgroupmembership(extgroupprincipal)` | ok | - <sup>2</sup> | - <sup>2,3</sup> | <sup>2</sup> group membership gets flattened stored external user. group-group relationship preserved.<br/><sup>3</sup> dynamic groups synced repository configured auto-membership principals resolved, see also user management api below. | ### user management #### user management without dynamic groups option unless 'dynamic groups' option set additionally, dynamic membership option effectively disable synchronization external group account information repository's user management feature. instead limit synchronized information group principal names membership relation given `java.security.acl.group` principal external user accounts. user management api consequently longer knowledgeable **external group identities**. groups synchronized dynamic membership got enabled, following rules apply: - option `user.enforcedynamicmembership` disabled (default), previously synced groups, member information continue synchronized according sync configuration. - option `user.enforcedynamicmembership` enabled, previously synced membership migrated become dynamic upon user synchronization. synchronized group removed longer declared members. behavior affect default authentication authorization modules (see below) impact applications rely full synchronization external identities. application able benefit dynamic membership feature dynamic groups created jackrabbit [user management api](../../user.html) (see [oak-2687]). note however, [oak-9462] groups listed **automembership** configuration parameters well optional [automembershipconfig] dynamic group membership external user identities reflected corresponding api calls, notably `group.ismember`, `group.isdeclaredmember`, `group.getmembers`, `group.getdeclaredmembers` well `authorizable.memberof` `authorizable.declaredmemberof()`. #### user management dynamic groups option enabled 'dynamic groups' flag turned addition, external group accounts continue synchronized repository's user management. however, membership information stored together groups instead dynamically calculated `rep:externalprincipalnames` property caching membership information user accounts. achieved means dedicated implementation `dynamicmembershipprovider` interface. groups synchronized prior enabling dynamic membership, following rules apply: - option `user.enforcedynamicmembership` disabled (default), previously synced groups, member information continue synchronized according sync configuration. - option `user.enforcedynamicmembership` enabled, previously synced membership migrated become dynamic upon user synchronization. synchronized group _not_ removed longer declared members. note, manually adding members dynamic external groups using `group.addmember`, `group.addmembers` equivalent oak api operations prevented dedicated validator enabled soon _dynamic groups_ option present together _dynamic membership_. #### api overview - `extuserid` : id synchronized external user - `extgroupid` : id synchronized external group - `extuser` : synchronized external user `org.apache.jackrabbit.api.security.user.user` - `extgroup` : synchronized external group `org.apache.jackrabbit.api.security.user.group` - `autogroup` : local group configured auto-membership option `defaultsyncconfig` | api call | default sync | dynamic membership | dynamic membership + dynamic groups | comment | -----------------------------------------------------------|--------------|--------------------|------------------------|---------| | `usermanager.getauthorizable(extuserid)` | ok | ok | ok | applies for<br/>`usermanager.getauthorizable(extuserid, user.class)`,<br/>`usermanager.getauthorizable(extuserprincipal)`,<br/>`usermanager.getauthorizablebypath(extuserpath)` | | `usermanager.getauthorizable(extgroupid)` | ok | - | ok | applies for<br/>`usermanager.getauthorizable(extgroupid, group.class)`,<br/>`usermanager.getauthorizable(extgroupprincipal)`,<br/>`usermanager.getauthorizablebypath(extgrouppath)` | | `extuser.declaredmemberof()` | ok | - <sup>3</sup> | (ok) <sup>4</sup> | <sup>3</sup> auto-membership local groups, external groups synced.<br/><sup>4</sup> `user.memberof()` nested group membership gets flattened upon dynamic sync. configured auto-membership reflected dynamic `automembershipprovider`. | | `extuser.memberof()` | ok | - <sup>3</sup> | ok | | | `extgroup.declaredmemberof()` | ok | - <sup>5</sup> | - <sup>6</sup> | <sup>5</sup> external groups synced!<br/><sup>6</sup> (conditional) automembership upon dynamic sync nested group membership gets flattened | | `extgroup.memberof()` | ok | - <sup>5</sup> | - <sup>6</sup> | | | `extgroup.getdeclaredmembers()` | ok | - <sup>5</sup> | (ok) <sup>7</sup> | <sup>7</sup> `group.getmembers()` | | `extgroup.getmembers()` | ok | - <sup>5</sup> | (ok) <sup>8</sup> | <sup>8</sup> includes external users nested membership gets flattened upon dynamic sync. | | `extgroup.isdeclaredmember(extuser)` | ok | - <sup>5</sup> | (ok) <sup>9</sup> | <sup>9</sup> `group.ismember(extuser)` | | `extgroup.ismember(extuser)` | ok | - <sup>5</sup> | ok | | | `extgroup.isdeclaredmember(extgroup)` | ok | - <sup>5</sup> | - <sup>10</sup> | <sup>10</sup> group-group relations nested membership gets flattened | | `extgroup.ismember(extgroup)` | ok | - <sup>5</sup> | - <sup>10</sup> | | | `extgroup.addmember(authorizable)` | ok | - <sup>5</sup> | - <sup>11</sup> | <sup>11</sup> adding members dynamic groups fail upon commit. | | `extgroup.addmembers(string...)` | ok | - <sup>5</sup> | - <sup>11</sup> | | | `extgroup.removemember(authorizable)` | ok | - <sup>5</sup> | ok | | | `extgroup.removemembers(string...)` | ok | - <sup>5</sup> | ok | | | `autogroup.isdeclaredmember(extuser)` | ok | ok <sup>12</sup> | ok <sup>12</sup> | <sup>12</sup> `automembershipprovider` stored local group node listed 'auto-membership' config. | | `autogroup.ismember(extuser)` | ok | ok <sup>12</sup> | ok <sup>12</sup> | | | `autogroup.isdeclaredmember(extgroup)` | ok | - <sup>5</sup> | ok <sup>12</sup> | | | `autogroup.ismember(extgroup)` | ok | - <sup>5</sup> | ok <sup>12</sup> | | | `autogroup.getdeclaredmembers()` | ok | (ok) <sup>5,12</sup>| ok <sup>12</sup> | | | `autogroup.getmembers()` | ok | (ok) <sup>5,12</sup>| ok <sup>12</sup> | | ### authentication authentication setup provided oak affected dynamic membership handling long configured `loginmodule` implementations rely `principalprovider` principal resolution `externalprincipalconfiguration` _("apache jackrabbit oak external principalconfiguration")_ properly registered `securityprovider` (see section [configuration](defaultusersync.html#configuration)). ### authorization authorization modules shipped oak depend `principal`s (and user management functionality) therefore affected dynamic membership configuration. <!-- references --> [synchandler]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/synchandler.html [synccontext]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/synccontext.html [defaultsynccontext]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/defaultsynccontext.html [defaultsyncconfig]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/defaultsyncconfig.html [externalidentityprovider]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityprovider.html [principalnameresolver]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/principalnameresolver.html [automembershipconfig]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/automembershipconfig.html [oak-4101]: https://issues.apache.org/jira/browse/oak-4101 [oak-2687]: https://issues.apache.org/jira/browse/oak-2687 [oak-4087]: https://issues.apache.org/jira/browse/oak-4087 [oak-5194]: https://issues.apache.org/jira/browse/oak-5194 [oak-5195]: https://issues.apache.org/jira/browse/oak-5195 [oak-5210]: https://issues.apache.org/jira/browse/oak-5210 [oak-9462]: https://issues.apache.org/jira/browse/oak-9462 [oak-9463]: https://issues.apache.org/jira/browse/oak-9463 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/external/externallogin_examples.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> authentication external login module : examples ---------------------------------------------------- <!-- macro{toc} --> <a name="standard-sling"></a> ### integration standard oak authentication used apache sling following jaas configuration used combination apache sling. #### example jaas configuration example { org.apache.jackrabbit.oak.spi.security.authentication.guestloginmodule optional; org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule sufficient; org.apache.jackrabbit.oak.spi.security.authentication.external.impl.externalloginmodule sufficient sync.handlername="your-synchandler_name" idp.name="your_idp_name"; org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl sufficient; }; #### understanding configuration ##### loginmodule sequence - `guestloginmodule` charge handling unauthenticated guest login without passing [guestcredentials]. words: credentials obtained login phase, new instance [guestcredentials] pushed shared state module succeeds. due _optional_ flag success required authentication proceeds list modules. module helps cover non-standard guest login `null` credentials performed apache sling (compatibility jackrabbit 1.0) - `tokenloginmodule` charge handling repository authentication request `tokencredentials`: - _login success_: token-login succeeds _sufficient_ flag makes sure authentication proceed `loginmodule` list. means hit `externalidentityprovider` re-sync external user long login token valid. - _login failure_: fails (e.g. type `credentials`) authentication proceed `loginmodule` list. - _commit_: login failed login module test `credentials` passed login ask generation new login token. login succeeded populate `subject` `principal`s, `credentials` `authinfo`. note: setup `tokenloginmodule` expected handle subsequent authentication request issued login token. latter achieved providing `credentials` attributes force `tokenloginmodule` generate new login token _commit_ phase. application use login toke subsequent requests. see [token authentication token management](../tokenmanagement.html) details description default implementation. - `externalloginmodule` charge handling authentication request users managed `externalidentityprovider`. - _login success_: user authentication idp succeeds module synchronizes external user repository according logic defined configure `synchandler`. user synced might updated. often user gets re-synced implementation detail `synchandler`. - _login failure_: authentication fails (e.g. wrong idp invalid `credentials`), login proceed `loginmoduleimpl`. - _commit_: login succeeded login module populate `subject` `principal`s, `credentials` `authinfo`. note: login token generated upon first login, subsequent login _external_ users end handled module (including connection idp) fail. - `loginmoduleimpl` charge handling authentication request users managed created repository's user management api; i.e. users defined `externalidentityprovider`. includes built-in system users like administrator, guest-user (aka anonymous) `systemusers`. also handles impersonation logins. - _login success_: regular user authentication (or impersonation) succeeds _sufficient_ flag makes sure authentication proceed `loginmodule` list i.e. omits unnecessarily trying authenticate local user external idp. - _login failure_: authentication fails (e.g. local user could uid/pw matching passed `credentials`), continue `loginmodule` list. - _commit_: login succeeded login module populate `subject` `principal`s, `credentials` `authinfo`. note: login token generated upon first login, subsequent login _local_ users end handled module fail. <a name="standard"></a> ### integration standard oak authentication #### example jaas configuration example { org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule sufficient; org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl sufficient; org.apache.jackrabbit.oak.spi.security.authentication.external.impl.externalloginmodule required sync.handlername="your-synchandler_name" idp.name="your_idp_name"; }; #### understanding configuration ##### loginmodule sequence - `tokenloginmodule` charge handling repository authentication request `tokencredentials`: - _login success_: token-login succeeds _sufficient_ flag makes sure authentication proceed `loginmodule` list. means hit `externalidentityprovider` re-sync external user long login token valid. - _login failure_: fails (e.g. type `credentials`) authentication proceed `loginmodule` list. - _commit_: login failed login module test `credentials` passed login ask generation new login token. login succeeded populate `subject` `principal`s, `credentials` `authinfo`. note: setup `tokenloginmodule` expected handle subsequent authentication request issued login token. latter achieved providing `credentials` attributes force `tokenloginmodule` generate new login token _commit_ phase. application use login toke subsequent requests. see [token authentication token management](../tokenmanagement.html) details description default implementation. - `loginmoduleimpl` charge handling authentication request users managed created repository's user management api; i.e. users defined `externalidentityprovider`. includes built-in system users like administrator, guest-user (aka anonymous) `systemusers`. also handles impersonation logins. - _login success_: regular user authentication (or impersonation) succeeds _sufficient_ flag makes sure authentication proceed `loginmodule` list i.e. omits unnecessarily trying authenticate local user external idp. - _login failure_: authentication fails (e.g. local user could uid/pw matching passed `credentials`), continue `loginmodule` list. - _commit_: login succeeded login module populate `subject` `principal`s, `credentials` `authinfo`. note: login token generated upon first login, subsequent login _local_ users end handled module fail. - `externalloginmodule` charge handling authentication request users managed `externalidentityprovider`. - _login success_: user authentication idp succeeds module synchronizes external user repository according logic defined configure `synchandler`. user synced might updated. often user gets re-synced implementation detail `synchandler`. - _login failure_: authentication fails (e.g. wrong idp invalid `credentials`), whole login fail `externalloginmodule` configured _required_ last module chain. - _commit_: login succeeded login module populate `subject` `principal`s, `credentials` `authinfo`. note: login token generated upon first login, subsequent login _external_ users end handled module (including connection idp) fail. ##### login different credentials ###### guestcredentials - `tokenloginmodule` ignore - `loginmoduleimpl` default supports `guestcredentials`; success depends existence valid guest user repository. succeeds authentication move `externalloginmodule`. - `externalloginmodule` default support `guestcredentials` may suitable `credentialssupport` configured. ###### simplecredentials - `tokenloginmodule` ignore - `loginmoduleimpl` default supports `simplecredentials` succeed credentials successfully validated local repository user. expected succeed synced external users,which password synced. succeeds authentication move `externalloginmodule`. - `externalloginmodule` default support `simplecredentials` succeed authenticating external external idp including sync successful. none modules succeeded `externalloginmodule` required succeed. ###### tokencredentials - `tokenloginmodule` supports `tokencredentials` succeed credentials valid. succeeds authentication move module list. fails overall authentication expected fail subsequent modules expected support `tokencredentials`. - `loginmoduleimpl` support `tokencredentials` fail. - `externalloginmodule` expected support `tokencredentials` thus overall authentication expected fail `tokenloginmodule` failed. ###### impersonationcredentials - `tokenloginmodule` ignore - `loginmoduleimpl` default supports `impersonationcredentials` succeed impersonation target user allowed. succeeds authentication move `externalloginmodule`. - `externalloginmodule` default support `impersonationcredentials` may suitable `credentialssupport` configured. ###### credentials - overall login success `externalloginmodule` supports credentials - `tokenloginmodule` ignore - `loginmoduleimpl` ignore - `externalloginmodule` succeed configured suitable `credentialssupport` ensures authentication external idp successful. <a name="preauth"></a> ### integration pre-authentication login module chain #### example jaas configuration example { your.org.preauthenticationloginmodule optional; org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl optional; org.apache.jackrabbit.oak.spi.security.authentication.external.impl.externalloginmodule sufficient sync.handlername="your-synchandler_name" idp.name="your_idp_name"; }; see [pre-authenticated login](../preauthentication.html#withloginchain) example `loginmodule` illustrates pre-authentication pushed shared stated. _note:_ configuration slightly adjusted example [oak-3508] marking pre-auth login _optional_. highlights fact subsequent `loginmodule`s charge respecting `preauthenticatedlogin` marker properly populating `subject` second _commit_ phase. also, example implementation login never succeeds (in case _sufficient_ would actually work well). however, ever succeeded `preauthenticatedlogin` marker would meaningless pre-auth module fact would populate `subject` i.e. relying details defined handled `loginmodule`s. #### understanding configuration ##### loginmodule sequence - custom pre-auth module charge handling custom pre-auth `credentials` shared code performing authentication outside scope repository module. task create `preauthenticatedlogin` marker push shared stated inform subsequent modules, always consulted due _optional_ flag. - _login success_: desired want subsequent modules verify matching identity `preauthenticatedlogin` later populate subject. - _login failure_: default passing responsibility modules chain. - _commit_: nothing do. - `loginmoduleimpl` try resolve repository user associated `preauthenticatedlogin` perform regular login login `credentials` `preauthenticatedlogin` present. - _login success_: exists valid user given `preauthenticatedlogin` `credentials` login always succeed case pre-auth login. otherwise credentials regularly evaluated (e.g. password validation). authentication continue chain due _optional_ flag. - _login failure_: matching user exists user valid (e.g. disabled). case regular authentication fail `credentials` cannot validated. authentication continue `loginmodule` list. - _commit_: login succeeded login module populate `subject` `principal`s, `credentials` `authinfo`. - `externalloginmodule` try resolve `preauthenticatedlogin` alternatively `credentials` `syncedidentity`. - `syncedidentity` exists user retrieved external idp eventually synced repository. case `preauthenticatedlogin` present retrieving identity additionally includes credentials validation. - exists `syncedidentity` module validate it. case `preauthenticatedlogin` checks identity needs synced again. - _login success_: exists valid external identity idp synced repository. - _login failure_: matching/valid identity exists idp exists `syncedidentity` belong idp `preauthenticatedlogin` marker `syncedidentity` need re-sync. - _commit_: login succeeded login module populate `subject` `principal`s, `credentials` `authinfo`. ##### login different credentials ###### custom pre-auth credentials - custom pre-auth module push `preauthenticatedlogin` shared state - overall login suceeds subsequent modules able deal `preauthenticatedlogin`. ###### guestcredentials - custom pre-auth module ignore - overall login success subsequent modules allow login `guestcredentials` - `loginmoduleimpl` default supports `guestcredentials`; success depends existence valid guest user repository. - `externalloginmodule` default support `guestcredentials` may suitable `credentialssupport` configured. ###### simplecredentials - custom pre-auth module ignore - overall login success subsequent modules allow login `simplecredentials` - `loginmoduleimpl` default supports `simplecredentials` succeed credentials successfully validated local repository user. - `externalloginmodule` default support `simplecredentials` succeed authentication external idp including sync successful. ###### impersonationcredentials - custom pre-auth module ignore - overall login success subsequent modules allow login `impersonationcredentials` - `loginmoduleimpl` default supports `impersonationcredentials` succeed impersonation target user allowed. - `externalloginmodule` default support `impersonationcredentials` may suitable `credentialssupport` configured. ###### credentials - overall login success `externalloginmodule` supports credentials - custom pre-auth module ignore - `loginmoduleimpl` ignore - `externalloginmodule` succeed configured suitable `credentialssupport` ensures authentication external idp successful. ##### faq ###### custom 'preauthcredentials' public? custom `credentials` shared code performing authentication (outside repository) custom _preauthenticationloginmodule_ implementation must neither public shared implementations order prevent un-authenticated login. ###### 'loginmoduleimpl' flagged sufficient? `loginmoduleimpl` defined _sufficient_ external identities would never synced `preauthenticatedlogin` marker present shared state. ###### 'externalloginmodule' flagged required? `externalloginmodule` required succeed, login _local_ users longer possible. also would mean pre-authenticated login `syncedidentity` needs re-sync would longer possible would ultimately fail repository authentication. <!-- references --> [oak-3508]: https://issues.apache.org/jira/browse/oak-3508 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/external/faq.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # external authentication : faq <!-- macro{toc} --> ## general | question | answer | references | |-------------------|-------------------------------|-------------------| | longer able change `rep:externalid`? | since oak 1.5.8 default sync mechanism properly protects system maintained property `rep:externalid` used link given synced user/group account corresponding entry external idp. | see [documentation](defaultusersync.html) [oak-4301] | | user group created content package get synced idp? | users/groups `rep:externalid` linking external idp respected default sync mechanism. | see also [oak-4397] [oak-5304] | | synchronized user/group updated | default sync configuration defines expiration time identities get re-synced | see section [configuration](defaultusersync.html#configuration) | | membership information store | default sync configuration needs define `user.membershipnestingdepth` > 0 order external membership information synchronized | see section [configuration](defaultusersync.html#configuration) | | membership information updated | default sync configuration defines `user.membershipexptime` membership get re-synced | see section [configuration](defaultusersync.html#configuration) | | synchronize identities outside repository login? | yes, `synchronizationmbean` jmx console additional synchronization options | | ## dynamic sync see [user group synchronization : dynamic membership dynamic groups](dynamic.html) details. | question | answer | references | |-------------------|-------------------------------|-------------------| | external group get created | dynamic membership option synchronize membership information group accounts. additionally enabling 'dynamic groups' option make sure groups synchronized keeping dynamic nature membership information. | see section [dynamic groups](defaultusersync.html#dynamic_groups)| | cannot add members synchronized group | dynamic groups option comes dedicated validator makes external groups read-only | see section [enforcing dynamic groups](defaultusersync.html#validation) | | auto-membership cannot altered user management api | configured auto-membership local groups calculated dynamically configuration cannot changed user management api | see section [automatic membership](dynamic.html) | | external groups rep:members property | membership information computed using implementation `dynamicmembershipprovider` computed dynamically `rep:externalprincipalnames` properties stored external users | see [oak-9803] | | group nesting reflected repository | dynamic sync flattens nested membership `dynamicmembershipprovider` mark members membership declared | see description [`dynamicsynccontext`](dynamic.html) | [oak-4301]: https://issues.apache.org/jira/browse/oak-4301 [oak-4397]: https://issues.apache.org/jira/browse/oak-4397 [oak-5304]: https://issues.apache.org/jira/browse/oak-5304 [oak-9803]: https://issues.apache.org/jira/browse/oak-9803 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/security/authentication/external/defaultusersync.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # user group synchronization : default implementation -------------------------------------------------------------------------------- <!-- macro{toc} --> ## default implementation sync api ### syncmanager default implementation (`syncmanagerimpl`) intended use osgi-base repository setup: tracks `synchandler` registered via osgi. used non-osgi environments passing `org.apache.jackrabbit.oak.spi.whiteboard.whiteboard` constructor. ### synchandler [defaultsynchandler] comes set configuration options allow specify synchronization behavior (see below). depending configuration chooses two different `synccontext` implementations. ### synccontext oak provides following implementations [synccontext] interface: - [defaultsynccontext]: base implementation synchronizes external user group accounts repository - [dynamicsynccontext]: derived implementation provides special handling external groups. #### defaultsynccontext users/groups synchronized context get following properties set. properties allow run separate task periodical update make sure authorizables later identified external users. - `rep:externalid` : allows identify external users, know associated idp distinguish others. - `rep:lastsynced` : sync timestamp mark external user/group valid configurable time (to reduce expensive syncing). expired, validated 3rd party system again. note: since oak 1.5.8 system-maintained property `rep:externalid` protected altered using regular jcr jackrabbit api, irrespective permission setup editing session. backwards compatibility protection turned off. see [oak-4301] details. [defaultsynccontext] exported part 'basic' package space may used provide custom implementations. #### dynamicsynccontext extending [defaultsynccontext] implementation provides special handling external groups case [dynamic group membership](#dynamic_membership) option enabled [configuration](#configuration). addition properties mentioned implementation create multivalued string property caches group principal names external user accounts: - `rep:externalprincipalnames` : optional system-maintained property related [dynamic group membership](#dynamic_membership) ### syncresult [defaultsyncresultimpl] exported part 'basic' package space providing simple `syncresult` implementation based status [defaultsyncedidentity]. ### syncedidentity [defaultsyncedidentity] exported part 'basic' package space. maps id synchronized user/group account external identity references represented [externalidentityref]. ### dynamic sync <a name="dynamic_membership"></a> #### dynamic group membership oak 1.5.3 default sync handler comes addition configuration option allows enabling dynamic group membership resolution external users. enabling dynamic membership [defaultsyncconfig] change way external groups synchronized (see also [oak-4101]). details effects security related modules described section [dynamic membership dynamic groups](dynamic.html). <a name="dynamic_groups"></a> #### dynamic groups oak 1.46.0 exists option leverage [dynamic membership](#dynamic_membership) combination new `dynamic groups` configuration option (see also [oak-9803]). options enabled external groups continue synchronized repository making sure user-group relationship still inspected using jackrabbit user management api without losing benefits dynamic membership. see section [dynamic membership dynamic groups](dynamic.html) details comparison. <a name="xml_import"></a> ### xml import protected nature `rep:externalprincipalnames` also reflected xml import user accounts: external users `rep:externalprincipalnames` property get regularly imported. however, non-system driven import omit `rep:externalprincipalnames` additional remove `rep:lastsynced` property order force re-sync external user system upon next login triggered jmx console. depending _user dynamic membership_ configuration value target system sync result full sync group membership re-create `rep:externalprincipalnames` property. <a name="validation"></a> ### validation #### rep:externalprincipalnames oak 1.5.3 dedicated `validator` implementation asserts protected, system-maintained property `rep:externalprincipalnames` written internal system session. prevents users unintentionally maliciously manipulating information linking external identity provider particular external identity set external group principals associated account. additionally, validator asserts consistency properties defined external user/group accounts. | code | message | |-------------------|----------------------------------------------------------| | 0070 | attempt create, modify remove system property 'rep:externalprincipalnames' | | 0071 | attempt write 'rep:externalprincipalnames' type type.strings | | 0072 | property 'rep:externalprincipalnames' requires 'rep:externalid' present node. | | 0073 | property 'rep:externalid' cannot removed 'rep:externalprincipalnames' present. | #### rep:externalid protection `rep:externalid` property enabled (since oak 1.5.8) validator performs following checks: | code | message | |-------------------|----------------------------------------------------------| | 0074 | attempt add, modify remove system maintained property 'rep:externalid'. | | 0075 | property 'rep:externalid' may single value type string. | <a name="protect_external_identities"></a> #### protecting synchronized external users/groups protection synchronized external users/groups enabled (since oak 1.44.0) additional validator present either warns upon prevents creation, modification removal external identities synchronized repository following exception: - system sessions configured service user principals (see `systemprincipalnames` option) exempted protection - security related content present given synced user/group still written given editing session required permissions (e.g. adding access control content removing token nodes). protection aims prevent inconsistencies idp (source truth), synchronized user/group accounts particular group membership properties. following constraint violations reported: | code | message | |------|----------------------------------------------------------------------------| | 0076 | attempt add property '%s' protected external identity node '%s' | | 0076 | attempt modify property '%s' protected external identity node '%s' | | 0076 | attempt delete property '%s' protected external identity node '%s' | | 0076 | attempt add protected external identity '%s' | | 0076 | attempt add node '%s' protected external identity node '%s' | | 0076 | attempt remove protected external identity '%s' | | 0076 | attempt remove node '%s' protected external identity | <a name="enforcing_dynamic_groups"></a> #### enforcing dynamic groups `user.dynamicmembership` enabled together `group.dynamicgroups` separate validator present make sure members added dynamic groups regular api calls (`group.addmember(authorizable)` `group.addmembers(string...`). note, groups synchronized prior dynamic synchronization also subject validator longer new members added. eventually become dynamic upon synchronization members, wipe previously written membership information. following constraint violation exceptions raised upon persisting changes new members added dynamic external group: | code | message | |------|----------------------------------------------------------------------------| | 0077 | "attempt add members dynamic group '%s' '%s'" | <a name="configuration"></a> ### configuration <a name="configuration_sync_handler"></a> #### configuration defaultsynchandler default `synchandler` implementations configured via [defaultsyncconfig]: | name | property | default | description | |-------------------------------|-------------------------------|---------------------|---------------------| | sync handler name | `handler.name` | "default" | name sync configuration. used reference handler login modules. | | user auto membership | `user.automembership` | [] | list groups synced user added automatically | | user expiration time | `user.expirationtime` | "1h" | duration synced user gets expired (eg. '1h 30m' '1d'). | | user membership expiration | `user.membershipexptime` | "1h" | time membership expires (eg. '1h 30m' '1d'). | | user membership nesting depth | `user.membershipnestingdepth` | 0 | returns maximum depth group nesting membership relations synced. value 0 effectively disables group membership lookup. value 1 adds direct groups user. value effect syncing individual groups syncing users membership ancestry. | | user dynamic membership | `user.dynamicmembership` | false | enabling dynamic membership external users. | | user enforce dynamic membership | `user.enforcedynamicmembership` | false | enabled together `user.dynamicmembership` previously synced membership information migrated dynamic membership upon user sync. otherwise takes effect. | | user rfc7613 username normalization profile | `user.enablerfc7613usercasemappedprofile` | false | enable usercasemappedprofile defined rfc7613 username normalization. | | user path prefix | `user.pathprefix` | "" | path prefix used creating new users. | | user property mapping | `user.propertymapping` | ["rep:fullname=cn"] | list mapping definition local properties external ones. eg: 'profile/email=mail'.use double quotes fixed values. eg: 'profile/nt:primarytype="nt:unstructured" | | disable missing users | `user.disablemissing` | false | default, users longer exist external provider locally removed. set property `true` [disable](https://jackrabbit.apache.org/api/2.8/org/apache/jackrabbit/api/security/user/user.html#disable(java.lang.string)) instead re-enabled become available again. | | group auto membership | `group.automembership` | [] | list groups synced group added automatically | | group expiration time | `group.expirationtime` | "1d" | duration synced group expires (eg. '1h 30m' '1d'). | | group rfc7613 username normalization profile | `group.enablerfc7613usercasemappedprofile` | false | enable usercasemappedprofile defined rfc7613 username normalization. | | group path prefix | `group.pathprefix` | "" | path prefix used creating new groups. | | group property mapping | `group.propertymapping` | [] | list mapping definition local properties external ones. | | group 'dynamic groups' | `group.dynamicgroups` | false | takes effect combination `user.dynamicmembership` result external groups synced dynamic groups. | note, following options relate [dynamic sync](dynamic.html) feature: - `user.dynamicmembership` : enabling dynamic membership external users. - `user.enforcedynamicmembership` : enabled together `user.dynamicmembership` previously synced membership information migrated dynamic membership upon user sync. otherwise takes effect. - `group.dynamicgroups` : takes effect combination `user.dynamicmembership` result external groups synced dynamic groups. <a name="configuration_automembership"></a> #### automatic membership automembershipconfig since oak 1.42.0 ([oak-9463]) auto-membership behavior extended allow conditional group membership based characteristics given synced external identity. addition configuration options `group.automembership` `user.automembership` apply groups/users, new interface [automembershipconfig] implemented defined fine-grained membership e.g. based external group membership particular properties defined given external user. `defaultsynchandler` tracking services implementing [automembershipconfig] match handler name. present additional membership defined [automembershipconfig], reflected upon default dynamic sync together original, 'global' auto-membership configuration. <a name="configuration_principals"></a> #### configuration 'apache jackrabbit oak external principalconfiguration' please note `externalprincipalconfiguration` _("apache jackrabbit oak external principalconfiguration")_ comes dedicated `repositoryinitializer`, requires repository (re)initialized module `oak-auth-external` installed. recommended way assert proper init, add 'org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.externalprincipalconfiguration' additional value `requiredservicepids` configuration option `securityproviderregistration` _("apache jackrabbit oak securityprovider")_. see section [introduction oak security](../../introduction.html) details `securityproviderregistration`. `externalprincipalconfiguration` defines following configuration options: | name | property | description | values | |------------------------------|-------------------------------|------------------------------------------|-------------| | external identity protection | `protectexternalid` | enables protection system maintained `rep:externalid` properties | `true`,`false`| | external user group protection | `protectexternalidentities` | enables protection synchronized external users/groups accounts (since oak 1.44.0). | `none`: protection (default),<br/>`warn`: log warnings,<br/>`protected`: protection enabled | | system principal names | `systemprincipalnames` | names additional 'systemuserprincipal' instances excluded protection check (since oak 1.44.0) | `true`,`false` | | | | | <!-- references --> [synccontext]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/synccontext.html [defaultsynccontext]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/defaultsynccontext.html [defaultsyncconfig]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/defaultsyncconfig.html [defaultsyncresultimpl]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/defaultsyncresultimpl.html [defaultsyncedidentity]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/defaultsyncedidentity.html [defaultsynchandler]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/defaultsynchandler.html [externalidentityref]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/externalidentityref.html [dynamicsynccontext]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/impl/dynamicsynccontext.java [automembershipconfig]: /oak/docs/apidocs/org/apache/jackrabbit/oak/spi/security/authentication/external/basic/automembershipconfig.html [oak-4101]: https://issues.apache.org/jira/browse/oak-4101 [oak-2687]: https://issues.apache.org/jira/browse/oak-2687 [oak-4301]: https://issues.apache.org/jira/browse/oak-4301 [oak-9463]: https://issues.apache.org/jira/browse/oak-9463 [oak-9803]: https://issues.apache.org/jira/browse/oak-9803 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/plugins/blobstore.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## blob store oak blobstore similar jackrabbit 2.x datastore. however, minor problems blobstore tries address. because, jackrabbit datastore: * temporary file created adding large binary, even binary already exists * sharding slow complicated hash needs calculated first, binary stored target shard (the filedatastore still support sharding directory currently) * file handles kept open consumer done reading, complicates code, could potentially get "too many open files" consumer close stream * database based data stores, similar (even worse) problem streams kept open, means need use connection pooling, user close stream could run connections * database based data stores, databases (mysql), binaries fully read memory, results out-of-memory * binaries similar always stored separately matter problems solved oak blobstores, binaries split blocks 2 mb. similar [dropbox works internally][1]. blocks processed memory temp files never needed, blocks cached. file handles need kept open. sharding trivial block processed separately. binaries similar: blobstore, currently, stored separately except 2 mb blocks match. however, algorithm blobstore would allow re-use matching parts, blobstore, concatenating blob ids means concatenating data. another change datastore implementations use sha-1, blobstore uses sha-256. using sha-256 requirement point, see also http://en.wikipedia.org/wiki/sha-2 "federal agencies ... must use sha-2 family hash functions applications 2010". might affect potential users. ### support jackrabbit 2 datastore jackrabbit 2 used [datastore][2] store blobs. oak supports usage datastore via `datastoreblobstore` wrapper. allows usage `filedatastore` `s3datastore` oak nodestore implementations. ### nodestore blobstore currently oak provides two nodestore implementations i.e. `segmentnodestore` `documentnodestore`. oak ships multiple blobstore implementations 1. `fileblobstore` - stores file contents chunks file system 2. `mongoblobstore` - stores file content chunks mongo. typically used `documentnodestore` running mongo default 3. `filedatastore` (with wrapper) - stores file file system without breaking chunks. mostly used blobs shared multiple repositories. also used default migrating jackrabbit 2 repositories oak 4. `s3datastore` (with wrapper) - stores file amazon s3 5. `rdbblobstore` - store file contents chunks relational databases. typically used `documentnodestore`when using relational db persistence 6. `azuredatastore` (with wrapper) - stores file microsoft azure blob storage addition implementations considered **experimental** 1. `cloudblobstore` - stores file file chunks cloud storage using [jclouds blobstore api][3]. 2. `mongogridfsblobstore` - stores file chunks mongo using gridfs support depending nodestore type usage requirement configured use particular blobstore implementation. osgi env refer [configuring datastore/blobstore](../osgi_config.html#config-blobstore) #### segmentnodestore (tarmk) default segmentnodestore (aka tarmk) require blobstore. instead binary content directly stored part segment blob itself. depending requirements one following used * filedatastore - used blobs/binaries shared multiple repositories. would also used jr2 repository migrated oak * s3datastore - used binaries stored amazon s3 * azuredatastore - used binaries stored microsoft azure blob storage #### documentnodestore default documentnodestore running mongo uses `mongoblobstore`. depending requirements one following used * mongoblobstore - used default recommended development testing. * filedatastore - used binaries stored file system. would also used jr2 repository migrated oak * s3datastore - used binaries stored amazon s3. typically used running amazon aws * azuredatastore - used binaries stored microsoft azure blob storage #### caching datastore datastore implementations `s3datastore`,`cachingfiledatastore` `azuredatastore` support local file system caching files/blobs extend `abstractsharedcachingdatastore` class implements caching functionality. `cachingfiledatastore` useful datastore nfs. cache size limit configured `cachesize` parameter. #### downloads local cache checked existence record corresponding requested file/blob accessing datastore. cache exceeds limit configured adding file cache file(s) evicted reclaim space. #### asynchronous uploads cache also supports asynchronous uploads datastore. files staged locally cache file system asynchronous job started upload file. number asynchronous uploads limited size staging cache configured `stagingsplitpercentage` parameter default set 10. defines ratio `cachesize` dedicated staging cache. percentage cache available downloads calculated (100 - stagingsplitperentage) * cachesize (by default 90). asynchronous uploads also multi-threaded governed `uploadthreads` configuration parameter. default value 10. files moved main download cache uploads complete. staging cache exceeds limit, files uploaded synchronously datastore previous asynchronous uploads complete space available staging cache. uploaded files removed staging area periodic job whose interval configured `stagingpurgeinterval` configuration parameter. default value 300 seconds. failed uploads (due various reasons e.g. network disruption) put retry queue retried periodically configured interval `stagingretryinterval`. default value 600 seconds. #### caching stats `consolidateddatastorecachestats` registered mbean provides snapshot cache performance download upload staging cache. ![datastore cache stats](../img/datastore-cache-stats.png) following table explains different statistics exposed type caches | parameters | datastore-downloadcache | datastore-stagingcache | |:-----------------:|:-------------------------------------------:|:----------------------:| |elementcount | number files cached | pending file uploads cache| |requestcount | number files requested cache | number file uploads requested| |hitcount | number files served cache | number files uploaded asynchronously| |hitrate | ratio hits requests | ratio hits requests| |loadcount | number files loaded cache | number file requests cache| |loadsuccesscount | number files successfully loaded | number file requests served cache| |loadexceptioncount | number load file unsuccessful | number file requests cache| |maxweight | max cache size (bytes) | max cache size (bytes)| |totalweight | current size cache (bytes | current size cache (bytes)bytes| |totalmemweight | approximate size cache in-memory (bytes) | approximate size cache memory (bytes)| parameters used size cache. example: * hitrate important parameter much 1 indicates cache low based load increased. * staging cache low hit ratio, download cache high hit ratio also current size much less maxsize better increase `stagingsplitpercentage` parameter. mbean also exposes method `isfilesynced` takes node path binary returns whether associated file/blob uploaded datastore. #### upgrade (pre oak 1.6 caching) upgrading older cache implementation process seamless pending uploads would scheduled upload previously downloaded files cache put cache initialization. slight difference structure local file system cache directory. whereas older cache structure downloaded upload files put directly cache path. newer structure segregates downloads uploads stores cache path directories `download` `upload` respectively. also option upgrade cache offline using `datastorecacheupgrade` command oak-run. details execute command different parameters checked readme oak-run module. ### blob garbage collection blob garbage collection(gc) applicable following blob stores: * documentnodestore * mongoblobstore/rdbblobstore (default blob stores rdb & mongo) * filedatastore * s3datastore * shareds3datastore (since oak 1.2.0) * azuredatastore * segmentnodestore * filedatastore * s3datastore * shareds3datastore (since oak 1.2.0) * azuredatastore oak implements mark sweep based garbage collection logic. 1. mark phase - phase binary references marked blobstore nodestore 1. mark blobstore - gc logic would make record blobs present blobstore. 2. mark nodestore - gc logic would make record blob references referred node present nodestore. note blob references old revisions node would also considered valid references. 2. sweep phase - phase blob references form mark blobstore phase found mark nodestore part would considered gc candidates. would delete blobs older specified time interval (last modified say 24 hrs (default) ago). garbage collection triggered calling: * `marksweepgarbagecollector#collectgarbage()` (oak 1.0.x) * `marksweepgarbagecollector#collectgarbage(false)` (oak 1.2.x) * mbeans registered mbeanserver following also used trigger gc: * `blobgc#startblobgc()` takes `markonly` boolean parameter indicate mark complete gc <a name="blobid-tracker"></a> #### caching blob ids locally (oak 1.6.x) `filedatastore`, `s3datastore` `azuredatastore` blob ids cached locally disk created speeds 'mark blobstore' phase. locally tracked ids synchronized data store periodically enable cluster nodes different repositories sharing datastore get consolidated list blob ids. interval synchronization defined osgi configuration parameter `blobtracksnapshotintervalinsecs` configured nodestore services. 2 garbage collection cycles executed within `blobtracksnapshotintervalinsecs` may warnings logs missing blob ids due fact deletions due earlier gc synchronized data store. ok either ignore warnings adjust `blobtracksnapshotintervalinsecs` parameter according schedule identified running blob gc. upgrading existing system take advantage caching existing blob ids cached. one following executed. * use `marksweepgarbagecollectot#collectgarbage(boolean markonly, boolean forceblobretrieve)` `true` `forceblobretrieve` parameter force retrieving blob ids datastore cache locally also. * execute blob gc configured time duration `blobtracksnapshotintervalinsecs`. * execute [consistency check](#consistency-check) jmx blobgcmbean configured time duration `blobtracksnapshotintervalinsecs`. * execute `datastorecheck` command offline using oak-run `--track` option defined [consistency check](#consistency-check). #### shared datastore blob garbage collection (since 1.2.0) ##### registration start repository configured use shared datastore (same path, s3 bucket azure container), unique repository id generated registered nodestore well datastore. datastore repository id registered empty file format `repository-[repository-id]` (e.g. repository-988373a0-3efb-451e-ab4c-f7e794189273). empty file created under: * filedatastore - root directory configured datastore. * s3datastore - `meta` folder s3 bucket configured. * azuredatastore - `meta` folder azure container configured. start/configuration repositories sharing data store confirmed unique repositoryid per repository registered datastore. refer section [checking shared gc status](#check-shared-datastore-gc). ##### execution high-level process garbage collection still described above. support blob garbage collection shared datastore mark sweep phase run independently. details process follows: * mark nodestore phase executed repositories sharing datastore. * executed running `marksweepgarbagecollector#collectgarbage(true)`, true indicates mark only. * references collected datastore file format `references-[repository-id]` (e.g. references-988373a0-3efb-451e-ab4c-f7e794189273). * one completion process repositories, sweep phase needs triggered. * executed running `marksweepgarbagecollector#collectgarbage(false)` one repositories, false indicates run sweep also. * sweep process checks availability references file registered repositories (all repositories corresponding `repository-[repositoryid]` files available) aborts otherwise. * references available collected. * blobs available datastore collected deletion candidates identified calculating blobs available appearing blobs referenced. blobs older specified time interval earliest available references file deleted. (last modified say 24 hrs (default)). earliest references identified means timestamp marker file (`markedtimestamp-[repositoryid]`) repository. shared datastore garbage collection applicable following datastore(s): * filedatastore * shareds3datastore - extends s3datastore enable sharing data store multiple repositories <a name="check-shared-datastore-gc"></a> ##### checking gc status shared datastore garbage collection status gc operations repositories connected datastore checked calling: * `marksweepgarbagecollector#getstats()` returns list `garbagecollectionrepostats` objects following fields: * repositoryid - repositoryid repository * local - repositoryid tagged asterix(\*) indicates whether repositoryid local instance operation ran. * starttime - start time mark operation repository * endtime - end time mark operation repository * length - size references file created * numlines - number references available * mbeans registered mbeanserver following also used retrieve status: * `blobgc#getblobgcstatus()` returns compositedata fields. operation also used ascertain 'mark' phase executed successfully repositories, part steps automate gc shared datastore configuration. sufficient condition check references file available repositories. server running oak remote jmx connection enabled following code example used connect remotely check mark phase concluded repository instances. ```java import java.util.hashtable; import javax.management.openmbean.tabulardata; import javax.management.mbeanserverconnection; import javax.management.mbeanserverinvocationhandler; import javax.management.objectname; import javax.management.remote.jmxconnectorfactory; import javax.management.remote.jmxserviceurl; import javax.management.openmbean.compositedata; /** * checks status mark operation instances sharing datastore. */ public class getgcstats { public static void main(string[] args) throws exception { string userid = "<user>"; string password = "<password>"; string serverurl = "service:jmx:rmi:///jndi/rmi://<host:port>/jmxrmi"; string object_name = "org.apache.jackrabbit.oak:name=document node store blob garbage collection,type=blobgarbagecollection"; string[] buffer = new string[] {userid, password}; hashtable<string, string[]> attributes = new hashtable<string, string[]>(); attributes.put("jmx.remote.credentials", buffer); mbeanserverconnection server = jmxconnectorfactory .connect(new jmxserviceurl(serverurl), attributes).getmbeanserverconnection(); objectname name = new objectname(object_name); blobgcmbean gcbean = mbeanserverinvocationhandler .newproxyinstance(server, name, blobgcmbean.class, false); boolean markdone = checkmarkdone("globalmarkstats", gcbean.getglobalmarkstats()); system.out.println("mark done instances - " + markdone); } public static boolean checkmarkdone(string operation, tabulardata data) { system.out.println("-----operation " + operation + "--------------"); boolean markdoneonothers = true; try { system.out.println("number instances " + data.size()); (object : data.values()) { compositedata row = (compositedata) o; string repositoryid = row.get("repositoryid").tostring(); system.out.println("repository " + repositoryid); ((!row.containskey("markendtime") || row.get("markendtime") == null || row.get("markendtime").tostring().length() == 0)) { markdoneonothers = false; system.out.println("mark done repository : " + repositoryid); } } } catch (exception e) { system.out.println( "-----error operation " + operation + "--------------" + e.getmessage()); } system.out.println("-----completed " + operation + "--------------"); return markdoneonothers; } } ``` ##### unregistration repository longer shares datastore needs unregistered shared datastore following steps: * identify repositoryid repository using steps above. * remove corresponding registered repository file (`repository-[repositoryid]`) datastore * filedatastore - remove file data store root directory. * s3datastore - remove file `meta` folder s3 bucket. * azuredatastore - remove file `meta` folder azure container. * remove files corresponding particular repositoryid e.g. `markedtimestamp-[repositoryid]` `references-[repositoryid]`. ##### reset repository id repositories sharing datastore cloned would `repositoryid` registered datastore repository cloned running shared dsgc would lead data loss/missing blobs. so, care must taken reset `repositoryid`. [oak-run](http://mvnrepository.com/artifact/org.apache.jackrabbit/oak-run/) cli utility `resetclusterid` command reset repository id. command executed details found [readme](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-run/readme.md) oak-run: `java -jar oak-run.jar resetclusterid < repository path | mongo uri >` <a name="consistency-check"></a> #### consistency check data store consistency check report data store binaries missing still referenced. consistency check triggered by: * `marksweepgarbagecollector#checkconsistency` * mbeans registered mbeanserver following also used: * `blobgcmbean#checkconsistency` consistency check complete, message show number binaries reported missing. number greater 0, check logs configured `org.apache.jackrabbit.oak.plugins.blob .marksweepgarbagecollector` details missing binaries. example missing binaries reported logs: > > 11:32:39.673 info [main] marksweepgarbagecollector.java:600 consistency check found [1] missing blobs > 11:32:39.673 warn [main] marksweepgarbagecollector.java:602 consistency check failure blob store : datastore backed blobstore [org.apache.jackrabbit.oak.plugins.blob.datastore.oakfiledatastore], check missing candidates file /tmp/gcworkdir-1467352959243/gccand-1467352959243 * `datastorecheck` command oak-run also used execute consistency check datastore. details execute command different parameters checked readme oak-run module. [1]: http://serverfault.com/questions/52861/how-does-dropbox-version-upload-large-files [2]: https://jackrabbit.apache.org/archive/wiki/jcr/datastore_115513387.html [3]: http://jclouds.apache.org/start/blobstore/ # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/features/direct-binary-access.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # direct binary access `@since oak 1.10` feature enables remote client oak-based application upload download binaries directly to/from supported oak [blobstore](../plugins/blobstore.html), without streaming binaries application oak itself. use feature, underlying storage provider must support capability corresponding oak blobstore must implement feature support. currently, feature implemented [s3datastore](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/blob/cloud/s3/s3datastore.html) (over [amazon s3](https://aws.amazon.com/s3/)) [azuredatastore](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/blob/cloud/azure/blobstorage/azuredatastore.html) (over [microsoft azure blob storage](https://azure.microsoft.com/en-us/services/storage/blobs/)). authentication access control fully enforced oak, direct access resource- time-limited. using feature frees oak-based web application network, memory disk i/o involved transferring binary files, provides clients application scalable, redundant high-bandwidth access directly cloud storage. eliminates web application server deployment environment potential bottleneck network capacity. furthermore, allows leveraging cdn transfer acceleration options cloud storage providers. api designed independent particular cloud provider, relies standard http binary upload & download, well cryptographically signed urls. ## architecture following diagram shows 3 involved parties: _remote client_, oak-based _server application_ _cloud binary storage_. rather pushing binaries client server application oak cloud binary storage application handle substantial extra i/o load, let client directly stream binaries cloud storage. ![](direct-binary-access-block-diagram.png) background design feature found [on wiki](https://jackrabbit.apache.org/archive/wiki/jcr/direct-binary-access_115513390.html). ## requirements use feature, oak must configured [blobstore](../plugins/blobstore.html) supports feature. currently blob/datastores supported: * [s3datastore](../osgi_config.html#jackrabbit_2_-_s3datastore) * azuredatastore please note `direct binary access` work customer provided keys. info, please refer aws documentation [sse-c keys](https://docs.aws.amazon.com/amazons3/latest/userguide/serversideencryptioncustomerkeys.html#ssec-and-presignedurl) ## configuration feature explicitly enabled setting properties datastore. table, "s3" refers `s3datastore`, "azure" `azuredatastore`. | property | type | default | description | |----------|------|---------|-------------| | `presignedhttpuploaduriexpiryseconds` | integer | 0 (disabled) | time limit upload urls, seconds. choose value long enough clients upload larger binaries possibly retry, unlimited ensure access control. setting 0 disables direct upload feature. | | `presignedhttpdownloaduriexpiryseconds` | integer | 0 (disabled) | time limit download urls, seconds. choose value long enough clients download larger binaries possibly retry, unlimited ensure access control. setting 0 disables direct download feature. | | `presignedhttpdownloaduricachemaxsize` | integer | 0 (disabled) | **experimental.** cache size reusing download urls. expired urls cached half expiry time, hence feature enabled, clients might get urls expire half `presignedhttpdownloaduriexpiryseconds`. setting 0 disables cache. | | `presignedhttpdownloaduriverifyexists` | boolean | true | flag determine whether check binary exists blob storage issuing presigned download uri. default verify existence first, providing assurance signed uri references existing binary. flag set false, existence check skipped. makes generating signed uri anywhere 100 1000 times faster since network api calls made, means possible cases return signed uri reference existing blob. see [oak-7998](https://issues.apache.org/jira/browse/oak-7998) [oak-8552](https://issues.apache.org/jira/browse/oak-8552) details. | | s3:&nbsp;`presignedurienabletransferacceleration` <br/>azure:&nbsp;n/a | boolean | false (disabled) | **experimental.** enables [s3 transfer acceleration](https://docs.aws.amazon.com/amazons3/latest/dev/transfer-acceleration.html) upload download urls. transfer acceleration must enabled s3 bucket oak starts. | ## api javadoc apis feature available [jackrabbit-api](https://jackrabbit.apache.org/jcr/jcr-api.html): * [jackrabbitvaluefactory](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/api/jackrabbitvaluefactory.html) uploading - cast `session.getvaluefactory()` use `initiatebinaryupload()` `completebinaryupload()` * [binarydownload](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/api/binary/binarydownload.html) downloading - cast `binary` call `geturi()` * elements [org.apache.jackrabbit.api.binary package](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/api/binary/package-summary.html) ## usage ### download ![](direct-binary-download-block-diagram.png) example shows retrieve time-limited presigned url reading binary: ``` node ntfile = session.getnode("/content/file.png"); node ntresource = ntfile.getnode("jcr:content"); binary binary = ntresource.getproperty("jcr:data").getbinary(); (binary instanceof binarydownload) { binarydownload binarydownload = (binarydownload) binary; binarydownloadoptions.binarydownloadoptionsbuilder builder = binarydownloadoptions.builder() // would typically come jcr node name .withfilename(ntfile.getname()) // mime type must typically set would stored along nt:file .withmediatype(ntresource.getproperty("jcr:mimetype")); (ntresource.hasproperty("jcr:encoding")) { builder.withcharacterencoding(ntresource.getproperty("jcr:encoding")); } // need prevent browser potentially executing response // (for example js, flash, html), enforce download option // builder.withdispositiontypeattachment(); uri uri = binarydownload.geturi(builder.build()); (uri == null) { // feature available // ... } // use uri <img src="uri"> send response remote client // ... } ``` please note `binary` objects returned `property.getbinary()`, `property.getvalue().getbinary()` `property.getvalues() ... getbinary()` support functional `binarydownload`. also note clients always check whether uri returned `geturi()` call null. null return value generally indicates feature available. situation also possible two cases: * binary stored in-line node store. binary smaller minimum upload size, stored node store instead cloud blob storage, thus direct download uri cannot provided. * data store implementation using asynchronous uploads binary still cache. client adds binary via repository (i.e. using direct binary upload feature) immediately requests download uri it, possible binary still cache yet uploaded cloud storage, thus direct download uri cannot provided. ### upload direct binary upload process split 3 phases: 1. **initialize:** remote client makes request jackrabbit-based application request upload, calls `initiatebinaryupload(long, int)` returns resulting information remote client. 2. **upload:** remote client performs actual binary upload directly binary storage provider. `binaryupload` returned previous call `initiatebinaryupload(long, int)` contains list uris used upload. clients use uris upload; however, required clients use uris list. number uris must used subject size binary uploaded minimum maximum sizes returned `binaryupload` object, constitutes detailed instructions complete upload successfully. information, including details upload algorithm, see [`binaryupload` documentation](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/api/binary/binaryupload.html). 3. **complete:** remote client notifies jackrabbit-based application step 2 complete. upload token returned first step (obtained calling `binaryupload.getuploadtoken()`) passed client `completebinaryupload(string)`. provide application regular jcr binary used write jcr content including binary (such `nt:file` structure) persist it. ![](direct-binary-upload-block-diagram.png) #### 1. initiate remote client would make request http api provide file size file upload jcr path upload to: `post /initiate-upload?filesize=1234&path=/content/file.png` code example shows servlet using api returning upload instructions client. ``` /** * servlet registered /initiate-upload */ public class initiateuploadservlet extends httpservlet { public void dopost(httpservletrequest request, httpservletresponse response) throws ioexception, servletexception { final session session = // .. retrieve session request // allows limit number returned uris case response message size limited // use -1 unlimited final int maxuris = 50; final string path = request.getparameter("path"); final long filesize = long.parselong(request.getparameter("filesize")); valuefactory vf = session.getvaluefactory(); (vf instanceof jackrabbitvaluefactory) { jackrabbitvaluefactory valuefactory = (jackrabbitvaluefactory) vf; binaryupload upload = valuefactory.initiatebinaryupload(filesize, maxuris); (upload == null) { // feature available, must pass binary via inputstream vf.createbinary() // ... } else { jsonobject json = new jsonobject(); json.put("minpartsize", upload.getminpartsize()); json.put("maxpartsize", upload.getmaxpartsize()); jsonarray uris = new jsonarray(); iterator<uri> iter = upload.getuploaduris(); (iter.hasnext()) { uris.put(iter.next()); } json.put("uploaduris", uris); // provide client complete url request later, pass path json.put("completeurl", "/complete-upload?uploadtoken=" + upload.getuploadtoken() + "&path=" + path); response.setcontenttype("application/json"); response.setcharacterencoding("utf-8"); response.getwriter().write(json.tostring()); } } else { // feature available, must pass binary via inputstream vf.createbinary() // ... } } } ``` clients always check whether `binaryupload` returned `valuefactory.initiatebinaryupload()` null. situation indicates feature supported. #### 2. upload remote client upload using instructions according [upload algorithm described binaryupload](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/api/binary/binaryupload.html). #### 3. complete upload successfully completed, notify application, case making request `completeurl` response: `post /complete-upload?uploadtoken=abcdedfghijkl` code example shows servlet handle `complete-upload` request: ``` /** * servlet registered /complete-upload */ public class completeuploadservlet extends httpservlet { public void dopost(httpservletrequest request, httpservletresponse response) throws ioexception, servletexception { final session session = // .. retrieve session request final string path = request.getparameter("path"); final string uploadtoken = request.getparameter("uploadtoken"); valuefactory vf = session.getvaluefactory(); (vf instanceof jackrabbitvaluefactory) { jackrabbitvaluefactory valuefactory = (jackrabbitvaluefactory) vf; binary binary = valuefactory.completebinaryupload(uploadtoken); node ntfile = jcrutils.getorcreatebypath(path, "nt:file", session); node ntresource = ntfile.addnode("jcr:content", "nt:resource"); ntresource.setproperty("jcr:data", binary); // also set jcr:mimetype etc. session.save(); } else { // feature available - unexpected initiate-upload worked } } } ``` # cdn support `@since oak 1.18 (azuredatastore)` oak configured make use cdns desired. configuring cdn use oak provide clients accelerated blob access times blobs accessed via local caches instead origin blob store. ## preconditions following conditions must true leverage cdn: * must using `azuredatastore`. (`s3datastore` supported future date currently supported.) * must direct binary access enabled - cdns offer benefit direct access uris. * must cdn configured uses cloud blob storage container origin. ## configuration add one following configuration options data store configuration file: | property | type | default | description | |----------|------|---------|-------------| | `presignedhttpdownloaduridomainoverride` | string | null | property set, domain provided used direct download uris instead default direct download domain. | | `presignedhttpuploaduridomainoverride` | string | null | property set, domain provided used direct upload uris instead default direct upload domain. | set, property value valid fully-qualified domain name, e.g. "mycdndomain.azureedge.net". ## uses cdns may used direct upload well direct download, cdn question supports behavior. cdns support behavior include aws cloudfront, azure cdn offerings, third-party cdns well; however, capabilities responsibility service providers, oak. check cdn provider authoritative information suitability; comprehensive testing recommended. note required configure domains, required domains same. example, one cdn offers best download performance another cdn offers best upload performance, may choose implement set configuration parameter different domain. likewise, required set both. wish use cdns download upload, simply configure download parameter cdn domain configure upload domain. ## ignoring domain override `@since oak 1.22 (azuredatastore)` usually domain override configured, value used signed uri requests using domain result better experience. however, cases client want use domain override even configured. example, suppose service running cloud service issuing requests signed uris. suppose service running cloud region blob storage. case, probably much faster service resolve uri request using default uri domain rather cdn domain, cloud service providers resolve dns names internally route traffic much efficiently. client asks signed uri knows giving uri service download, may wish indicate wants ignore configured domain override uri. specify behavior signed download uris, client requesting uri specify ignore domain override building `binarydownloadoptions`: ``` binarydownloadoptions options = binarydownloadoptions.builder() .withdomainoverrideignored(true) .build(); ``` default behavior use domain override one configured. ignore configured domain override signed upload uris, client requesting uri specify ignore domain override via optional `binaryuploadoptions` parameter: ``` binaryuploadoptions options = binaryuploadoptions.builder() .withdomainoverrideignored(true) .build(); ``` default behavior use domain override one configured. note providing `binaryuploadoptions` `jackrabbitvaluefactory.initiatebinaryupload()` optional, provided default behavior used. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/features/direct-binary-access-upload-file.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # direct binary access upload file process using sse encryption direct binary upload process split [3 phases](direct-binary-access.html) remote client performs actual binary upload directly binary storage provider. binaryupload returned `initiatebinaryupload(long, int)` contains detailed instructions complete upload successfully. information, see `binaryupload` documentation. example a: heres initiatehttpupload: ``` long one_gb = 1048576000; int datalength = 123456; /*pre-set properties sse */ datarecordupload uploadcontext = initiatehttpupload(one_gb, 1); string uploadtoken = uploadcontext.getuploadtoken(); byte[] data = new byte[datalength]; random randomgen = new random(); randomgen.nextbytes(data); /*statuscode returned closeablehttpresponse 200 */ closeablehttpresponse resulthttpstatuscode = httpput(uploadcontext, new bytearrayinputstream(data), data.length); ``` heres make use context returned `initiatehttpupload` example upload file using different sse encryption: ``` closeablehttpresponse httpput(@nullable datarecordupload uploadcontext, inputstream inputstream, long length) throws ioexception { // weird combination @nullable assertnotnull() ides warning test methods uri puturl = uploadcontext.getuploaduris().iterator().next(); httpput putreq = new httpput(puturl); string keyid = null; string encryptiontype = props.getproperty(s3encryption); (encryptiontype.equals(sse_kms)) { keyid = props.getproperty(kmskeyid); putreq.addheader(new basicheader(headers.server_side_encryption, ssealgorithm.kms.getalgorithm())); if(keyid != null) { putreq.addheader(new basicheader(headers.server_side_encryption_aws_kms_keyid, keyid)); } } putreq.setentity(new inputstreamentity(inputstream , length)); closeablehttpclient httpclient = httpclients.createdefault(); closeablehttpresponse response = httpclient.execute(putreq); return response; } ``` example [test case](https://github.com/apache/jackrabbit-oak/blob/5f89d905e96de6f9bb9314a08529e262607ba406/oak-blob-cloud/src/test/java/org/apache/jackrabbit/oak/blob/cloud/s3/tests3ds.java#l219) initiate, upload complete binary upload phases shown. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/features/oak-run-nodestore-connection-options.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # oak run nodestore connection `@since oak 1.7.6` page provide details around various options supported oak-run commands connect nodestore repository. default commands (unless documented) would connect read mode. options supported following command (see [oak-6210][oak-6210]) * console * index * tika depending setup would need configure nodestore blobstore use commands work. commands may require blobstore details. check specific oak-run command help see access blobstore required not. ## read write mode default commands would connect nodestore read mode. ensure oak-run commands safely used productions setup cause side effect. operations read-write access would required. done passing `--read-write` option. read-write mode ensured oak version oak-run matching oak version used application create repository. newer version oak-run read repository created older version oak (as oak backward compatible) however writes done newer version oak-run (which recent oak version used repository application) may cause issues due change storage format. ## nodestore ### segmentnodestore connect segmentnodestore specify path folder used segmentnodestore storing repository content java -jar oak-run <command> /path/to/segmentstore `--read-write` option enabled must ensured target repository use. otherwise oak-run would able access nodestore. ### documentnodestore - mongo connect mongo specify mongouri java -jar oak-run <command> mongodb://server:port support options like cache size, cache distribution etc. refer help output via `-h` see supported options ### documentnodestore - rdb connect relational database specify jdbc url add database user password optional arguments: java -cp ... org.apache.jackrabbit.oak.run.main <command> jdbc:... --rdbjdbcuser user --rdbjdbcpasswd password note oak-run jar file lacks several rdb specific jar files need added classpath: 1. tomcat-jdbc-8.5.*.jar (apache tomcat jdbc connection pool) 2. juli-6.0.*.jar (apache tomcat logger) 3. whatever jdbc driver needed connect database ## blobstore ### filedatastore specify path directory used `filedatastore` via `--fds-path` option java -jar oak-run <command> /path/to/segmentstore --fds-path=/path/to/fds ### s3datastore specify path config file contains connection details related s3 bucket used via `-s3ds` option java -jar oak-run <command> /path/to/segmentstore --s3ds=/path/to/s3datastore.config file valid config file configured s3datastore osgi setup pid `org.apache.jackrabbit.oak.plugins.blob.datastore.s3datastore.config`. change `path` property location based system command used. running command setup oak application running ensure `path` set different location. [oak-6210]: https://issues.apache.org/jira/browse/oak-6210 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/features/atomic-counter.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## atomic counter `@since 1.3.0 (stand-alone) , 1.3.14 (full cluster support)` ### overview atomic counter functionality aims address need use cases like _votes_, _likes_, _+1s_ on. make sure eventually consistent correct account sums/subtractions increments. set specific node type (`mix:atomiccounter`) node, protected property, `oak:counter` hold count votes. perform increment decrement set specific property type `long`: `oak:increment`. see later [usage section](#usage). #### stand-alone, synchronous running stand-alone configurations, like segment, actual increase `oak:counter` property happen synchronously, space commit. therefore always reflect date value. #### clustered, asynchronous running clustered solutions, potential one, like documentmk actual increase `oak:counter` property happen asynchronously. therefore value displayed `oak:counter` could date lagging behind time. dealing conflicts could happen updating properties across cluster scaling without deal global locking system. consolidation task timeout default `32000ms`. aspect configurable providing environment variable: `oak.atomiccounter.task.timeout`. case node time tracked logs warning. example increase timeout 64 seconds set command line `-doak.atomiccounter.task.timeout=64000`. ##### constraints clustered solution, order asynchronous behaviour enabled **have provide** `org.apache.jackrabbit.oak.spi.state.clusterable` `java.util.concurrent.scheduledexecutorservice`. null fall back synchronous behaviour. fall back synchronous well `org.apache.jackrabbit.oak.spi.whiteboard.whiteboard` provided provided commit hooks repository constructions registered whiteboard itself. done automatically default oak repository constructions, customise actions needed. ### enabling feature (repository construction) #### plain java ##### stand-alone nodestore store = ... //store instantiation jcr jcr = new jcr(store).withatomiccounter(); repository repo = jcr.createcontentrepository(); ##### clustered nodestore store = ... //store instantiation // documentnodestore implements aspect therefore could // something like: `(clusterable) store`. casting store // clusterable. clusterable clusterable = ... // provide scheduledexecutorservice // take care shutting properly // repository shutdown. scheduledexecutorservice executor = ... jcr jcr = new jcr(store) .with(clusterable) .with(executor) .withatomiccounter(); repository repo = jcr.createcontentrepository(); #### osgi ##### stand-alone clustered @reference(target = "(type=atomiccounter)") private editorprovider atomiccounter; ... nodestore store = ... jcr jcr = new jcr(store); jcr.with(atomiccounter); ... running clustered environment `editorprovider` expect find service type `org.apache.jackrabbit.oak.spi.state.clusterable` `org.apache.jackrabbit.oak.spi.state.nodestore`. `documentnodestore` already register `clusterable`. one two available fall back synchronous behaviour. ### usage session session = ... // creating counter node node counter = session.getrootnode().addnode("mycounter"); counter.addmixin("mix:atomiccounter"); // use nodetypeconstants session.save(); // output 0. default value system.out.println("counter now: " + counter.getproperty("oak:counter").getlong()); // incrementing 5 counter counter.setproperty("oak:increment", 5); session.save(); // output 5 system.out.println("counter now: " + counter.getproperty("oak:counter").getlong()); // decreasing 1 counter.setproperty("oak:increment", -1); session.save(); // output 4 system.out.println("counter now: " + counter.getproperty("oak:counter").getlong()); session.logout(); ### debug experiencing problems counter start analysing situation setting `debug` log appender `org.apache.jackrabbit.oak.plugins.atomic`. set `trace` even information provided. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/features/observation.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # observation jackrabbit oak part jcr implementation provides support observing content changes via [eventlistener][1]. event listeners notified asynchronously, see events occur transaction committed. `eventlistener` provide filtering criteria type events interested. event processing consume system resources hence important `eventlistener` tell oak precisely type event changes interested in. filtering criteria specified following way * via [observationmanager#addeventlistener][2] registration call. * via jackrabbit extension [jackrabbiteventfilter][3] * via jackrabbit oak extension [oakeventfilter][4] (new oak 1.6) ### reliable event processing jcr event listeners might miss events because: * event listeners see events occurred installed. earlier events missed (e.g., events via migration). * case power failure (or similar) right event persisted, event listener able process it. process events reliably, efficiently, low latency, consider using hybrid approach: * startup, use query process old events (that missed far). * use event listener process recent events low latency. example, reliably process changes nodes, one might create ordered index `jcr:lastmodified` property nodes. (this assumes property updated needed.) startup application, event listener registered, subsequent events processed low latency. process events happened _before_ listener registered (e.g. via migration, case crash), run query check `jcr:lastmodified >= $lastprocessed` `$lastprocessed` time last events processed via event listener. timestamp needs persisted time time (consider persisting delay example one minute, avoid frequent updates). way, one sure events processed. ### oakeventfilter `@since oak 1.6` make use new filtering capability use following approach import org.apache.jackrabbit.api.observation.jackrabbitevent; import org.apache.jackrabbit.api.observation.jackrabbiteventfilter; import org.apache.jackrabbit.api.observation.jackrabbitobservationmanager; import org.apache.jackrabbit.oak.jcr.observation.filter.filterfactory; import org.apache.jackrabbit.oak.jcr.observation.filter.oakeventfilter; session session = ... eventlistener listener = ... observationmanager om = session.getworkspace().getobservationmanager(); // cast jackrabbitobservationmanager jackrabbitobservationmanager jrom = (jackrabbitobservationmanager) om; // construct jackrabbiteventfilter jackrabbiteventfilter jrfilter = new jackrabbiteventfilter(); // wrap oakeventfilter oakeventfilter oakfilter = filterfactory.wrap(jrfilter); oakfilter.withincludesubtreeonremove(); // set filtering criteria // ... jrom.addeventlistener(listener, oakfilter); refer [oakeventfilter][4] javadocs details filtering criteria supported ### benefits filter approach jackrabbit oak jcr `eventlistener` implemented oak [observer][5] backed memory queue. upon save call done jcr layer nodestore oak pushes repository root node queue later used compute diff older root generate jcr events. events work properly needs ensure memory queue get filled up. precise filter helps oak _prefiltering_ changes added queue. e.g. filter stats interested changes '/content' oak check changes path happened given change, change queued. [1]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/observation/eventlistener.html [2]: https://s.apache.org/jcr-2.0-javadoc/javax/jcr/observation/observationmanager.html [3]: https://jackrabbit.apache.org/api/2.14/org/apache/jackrabbit/api/observation/jackrabbiteventfilter.html [4]: https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/jcr/observation/filter/oakeventfilter.html [5]: https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/spi/commit/observer.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/architecture/move.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> like move -------------------------------------------------------------------------------- page describes move operations implemented oak highlights interesting potentially surprising side effects memory usage. jcr `node` oak `tree` instances basic entities access content repository. jackrabbit oak implementation jcr `node` backed `mutabletree` implements `tree`. name indicates `tree` mutable state change time. following example illustrates this. contentsession = ... root r = s.getlatestroot(); tree = r.gettree("/zoo/marty"); r.move("/zoo/marty", "/madagascar/marty"); string p = t.getpath(); even though move operation invoked `tree` `t` directly, change reflected value returned `t.getpath()`. returned path `/madagascar/marty`. impact move operation `tree` instance evaluated lazily. main benefit approach need spend time update `tree` instances unnecessarily referenced heap, used application later garbage collected. so, move operations applied lazily `tree` instances? `mutabletree` object `pendingmoves` reference next `move` needs apply read write operation. reading child `tree` passes current `pendingmoves` reference child. is, reading entire subtree, `mutabletree` instances `pendingmoves` reference pointing `move`. initially, referenced `move` empty, indicates move operation happened. going back example. slightly simplified state move operation looks like following. ![tree move](tree-before-move.png) right move operation, state `mutabletree` instances still same. `move` object referenced modified information move operation new empty `move` object appended via `next` reference. ![tree move](tree-after-move.png) effect move operation `tree` objects applied `tree` accessed, e.g. calling `getpath()`. whenever read write happens, `mutabletree` check anything via `pendingmoves` apply operation source path move matches path. `mutabletree` simply moves next `move` source path match, empty `move` reached. entire process also done recursively first applying potential move operations parent. ensures hierarchical integrity subtree moved. ![tree access move](tree-access-after-move.png) read operation `move` object source destination information referenced anymore `mutabletree`, eligible garbage collection. implementation drawbacks usage patterns. `mutabletree` obtained `contentsession` referenced application retain significant memory tree accessed move operations performed `contentsession`. let's consider example julien stays zoo, others move madagascar. tree zoo = r.gettree("/zoo"); tree madagascar = r.gettree("/madagascar"); tree julien = zoo.getchild("julien"); list<tree> move = streamsupport.stream(target.getchildren().spliterator(), false) .filter(t -> !t.getname().equals(julien.getname())) .collect(collectors.tolist()); move.foreach(t -> r.move(t.getpath(), concat(madagascar.getpath(), t.getname()))); move.foreach(t -> system.out.println(t.getname() + " made madagascar")); end `tree` `julien` accumulated move information, `tree` instances `list` `pendingmoves` pointing empty `move`. please note, memory retained julien independent whether changes committed `contentsession.commit()`. linked `move` objects referenced `pendingmoves` same. intuition might suggest committing changes frees memory, case scenario. ![tree many moves](tree-after-many-moves.png) memory usage situation significant `move` object remembers path information actually references `mutabletree` object destination parent `string` name moved tree new parent. behind scenes, `mutabletree` also references parent `nodebuilder` access properties. also means, moving nodes deep use memory compared nodes closer root. therefore advisable release references `tree` instances soon possible code performs many move operations. alternatively, code call method `tree` references longer period time. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/architecture/overview.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> oak - big picture -------------------------------------------------------------------------------- todo: explain concepts: mvcc, oak modules plugins, key apis, ... ![the big picture](big-picture.png?raw=true) ## main concepts * [node state model](nodestate.html) * [transactional model](transactional-model.html) ## apis * [jcr](https://s.apache.org/jcr-2.0-javadoc/index.html) * [oak api](../oak_api/overview.html) * [nodestore api](../nodestore/overview.html) ## readmes * [oak](https://github.com/apache/jackrabbit-oak/blob/trunk/readme.md) * [oak core](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-core/readme.md) * [oak run](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-run/readme.md) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/architecture/nodestate.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # understanding node state model article describes _node state model_ core design abstraction inside `oak-core` component. understanding node state model essential working oak internals building custom oak extensions. ## background oak organizes content large tree hierarchy consists nodes properties. snapshot revision content tree immutable, changes tree expressed sequence new revisions. nodestore oak repository responsible managing content tree revisions. node state model expressed nodestate interface oak-core designed purposes. provides unified low-level abstraction managing tree content lays foundation higher-level oak api that's visible clients. ## state node _node_ oak unordered collection named properties child nodes. content tree evolves sequence revisions, node go series different states. _node state_ _immutable_ snapshot specific state node subtree beneath it. example, following diagram shows two revisions content tree, first revision consists five nodes, second revision sixth node added one subtrees. note unmodified subtrees shared across revisions, modified nodes ancestors root (shown yellow) need updated reflect change. way revisions remain readable times without implementation make separate copy entire repository revision. ![two revisions content tree](nodestate-r1.png?raw=true) avoid making special case root node therefore make easy write algorithms recursively process subtree standalone content tree, node state _unnamed_ contain information location within larger content tree. instead property child node state uniquely named within parent node state. algorithm needs know path node construct encountered names descends tree structure. since node states immutable, also easy keep _thread-safe_. implementations use mutable data structures like caches otherwise thread-safe default, expected use mechanisms like synchronization ensure thread-safety. ## nodestate interface design principles reflected `nodestate` interface `org.apache.jackrabbit.oak.spi.state` package `oak-core`. interface consists three sets methods: * methods accessing properties * methods accessing child nodes * `exists` method checking whether node exists accessible * `builder` method building modified states * `compareagainstbasestate` method comparing states request property child node name, get number properties child nodes, iterate them. even though properties child nodes accessed separate methods, share namespace given name either refer property child node, time. iteration order properties child nodes _unspecified stable_, re-iterating items _specific nodestate instance_ return items order before, specific ordering defined necessarily remain across different instances. last three methods, `exists`, `builder` `compareagainstbasestate`, covered next sections. see also `nodestate` javadocs details interface methods. ## existence iterability node states `exists` method makes possible always traverse path regardless whether named content exists not. `getchildnode` method returns child `nodestate` instance given name, caller expected use `exists` method check whether named node actually exist. purpose feature allow paths like `/foo/bar` traversed even current user read access `bar` node parent `foo`. consequence even possible access content like fictional `/bar` subtree exist all. piece code accessing content could look like this: ```java nodestate root = ...; nodestate foo = root.getchildnode("foo"); assert !foo.exists(); nodestate bar = foo.getchildnode("bar"); assert bar.exists(); nodestate baz = root.getchildnode("baz"); assert !baz.exists(); ``` following diagram illustrates content tree, raw content simply exists access controlled view tree: ![content tree without access control](nodestate-r2.png?raw=true) node missing, i.e. `exists` method returns `false` thus either exist read-protected, one can't list properties child nodes. hand, non-readable node property show listing child nodes properties parent. words, node property _iterable_ parent readable. example, attempts list properties child nodes node `foo` show empty: ```java assert !foo.getproperties().iterator().hasnext(); assert !foo.getchildnodeentries().iterator().hasnext(); ``` note without external knowledge accessibility child node like `bar` there's way piece code distinguish existing non-readable node `foo` non-existing node `baz`. ## building new node states since node states immutable, separate builder interface, `nodebuilder`, used construct new, modified node states. calling `builder` method node state returns builder modifying node subtree it. node builder thought _mutable_ version node state. addition property child node access methods like ones already present `nodestate` interface, `nodebuilder` interface contains following key methods: * `setproperty` `removeproperty` methods modifying properties * `getchildnode` method accessing modifying existing subtree * `setchildnode` `removechildnode` methods adding, replacing removing subtree * `exists` method checking whether node represented builder exists accessible * `getnodestate` method getting frozen snapshot modified content tree builders acquired root builder instance linked changes made one instance automatically become visible builders. example: ```java nodebuilder rootbuilder = root.builder(); nodebuilder foobuilder = rootbuilder.getchildnode("foo"); nodebuilder barbuilder = foobuilder.getchildnode("bar"); assert !barbuilder.getboolean("x"); foobuilder.getnodechild("bar").setproperty("x", boolean.true); assert barbuilder.getboolean("x"); assert barbuilder.exists(); foobuilder.removechildnode("bar"); assert !barbuilder.exists(); ``` `getnodestate` method returns frozen, immutable snapshot current state builder. providing snapshot somewhat expensive especially many changes builder, method generally used last step intended changes made. meanwhile accessors `nodebuilder` interface used provide efficient read access current state tree modified. node states constructed builder often retain internal reference base state used builder. allows common node state comparisons perform really well described next section. ## comparing node states node evolves sequence states, often important able tell changed two states node. functionality available `compareagainstbasestate` method. method takes two arguments: * _base state_ comparison. comparison report changes necessary moving given base state node state comparison method invoked. * `nodestatediff` instance detected changes reported. diff interface contains callback methods reporting added, modified removed properties child nodes. comparison method actually used compare two nodes, implementations method typically heavily optimized case given base state actually earlier version node. practice far common scenario node state comparisons, typically executed `o(d)` time `d` number changes two states. fallback strategy comparing two completely unrelated node states much expensive. important detail `nodestatediff` mechanism `childnodechanged` method get called _any_ changes subtree starting named child node. comparison method thus able efficiently detect differences depth given nodes. hand `childnodechanged` method called direct child node, diff implementation explicitly recurse tree wants know exactly change subtree. code recursion typically looks something like this: public void childnodechanged( string name, nodestate before, nodestate after) { after.compareagainstbasestate(before, ...); } note performance reasons possible `childnodechanged` method called cases even actually changes within subtree. hard guarantee method *not* called subtree, subtree definitely changed, common cases `compareagainstbasestate` implementation detect cases thus avoid extra `childnodechanged` calls. however important diff handlers prepared deal events. ## commit hook mechanism repository typically various constraints control kind content allowed. often also wants annotate content changes additional modifications like adding auto-created content updating in-content indices. _commit hook mechanism_ designed purposes. oak instance list commit hooks applies commits. commit hook full control commit: reject commit, pass as-is, modify way. commit hooks implement `commithook` interface contains single `processcommit` method: nodestate processcommit(nodestate before, nodestate after) throws commitfailedexception; `before` state original revision content changes committed based, `after` state contains changes. `after.compareagainstbasestate(before, ...)` call used find exact set changes committed. if, based content diff inspection commit, hook decides reject commit example due constraint violation, throwing `commitfailedexception` appropriate error code outlined https://jackrabbit.apache.org/archive/wiki/jcr/oakerrorcodes_115513474.html. commit acceptable, hook return state as-is make additional modifications return resulting node state. returned state passed state next hook hooks chance process commit. resulting final node state persisted new revision made available oak clients. ## <a name="commit-editors"/> commit editors practice commit hooks interested content diff returned `compareagainstbasestate` call mentioned above. call somewhat expensive especially large commits, good idea multiple commit hooks separate diff. efficient approach diff multiple hooks process parallel. _commit editor mechanism_ used purpose. editor essentially commit hook optimized processing content diffs. instead list separate hooks, editors handled single `editorhook` instance. hook handles details performing content diff notifying available editors detected content changes. editors provided list `editorprovider` instances implement following method: editor getrooteditor( nodestate before, nodestate after, nodebuilder builder) throws commitfailedexception; instead comparing given states directly, provider expected return `editor` instance used comparison. states passed method provider collect generic information like node type definitions needed construct returned editor. given `nodebuilder` instance used returned editor make modifications based detected content changes. builder based state, shared multiple editors diff processing might longer exactly match state. editors within single editor hook generally attempt make conflicting changes. `editor` interface much like `nodestatediff` interface described earlier. main differences editor methods allowed throw `commitfailedexceptions` child node modification methods return `editor` instance. idea editor _instance_ normally used observing changes single node. changes subtree node, relevant child node modification method expected return new editor instance observing changes subtree. editor hook keeps track returned "sub-editors" recursively notifies changes relevant subtrees. editor interested changes inside particular subtree return `null` notify editor hook there's need recurse subtree. effect editor tied location changes within content tree, return itself. good example name validator simply checks validity names regardless they're stored. location relevant, example need keep track path changed node, store information internal state returned editor instance. ## commit validators mentioned, common use commit hooks verify content changes preserve applicable constraints. example repository may want enforce integrity reference properties, constraints defined node types, simply well-formedness names used. validation typically based content diff commit, editor mechanism natural match. additionally, since validation imply content modifications, editor mechanism restricted particular case. abstract `validatorprovider` class related `validator` interface based respective editor interfaces. main difference validator provider drops `nodebuilder` argument make impossible validators even accidentally modify commit processed. thus, even though there's performance benefit using `validator` interface instead `editor`, good idea whenever possible make intention code clearer. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/architecture/transactional-model.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> transactional model sessions ================================ sessions oak based multi version concurrency control model using snapshot isolation relaxed first committer wins strategy. is, login session impression operating copy repository. modifications sessions affect current session. relaxed first committer wins strategy later session fail save contains operations incompatible operations earlier session saved successfully. different standard first committer wins strategy failure would occur conflicting operations rather incompatible operations. incompatible weaker conflict since two write operation item conflict incompatible. details incompatible somewhat dependent implementation `nodestore.rebase()` backend used. see [below](#rebasing). snapshot isolation exhibits [write skew](http://http//research.microsoft.com/apps/pubs/default.aspx?id=69541) problematic application level consistency requirements. consider following sequence operations: session1.getnode("/testnode").setproperty("p1", -1); check(session1); session1.save(); session2.getnode("/testnode").setproperty("p2", -1); check(session2); session2.save(); session session3 = repository.login(); check(session3); check method enforces application logic constraint says sum properties `p1` `p2` must negative. session1 session2 enforce constraint saving, constraint might hold globally session3. see `compatibilityissuestest.sessionisolation` test case demonstrating runnable code. <a name="rebasing"/> rebasing incompatible changes (conflicts) ------------------------------------------------------------------ save changes session rebased top current head. is, changes done withing session re-applied top latest state repository. process lead conflicts latest state includes changes incompatible changes session. e.g. session modified value property latest state repository property changed different value. rebasing process attempts resolve conflicts possible. conflict resolvable conflicting nodes annotated conflict marker denoting type conflict value(s) rebase operation. conflict marker internal node name `:conflict` added node whose properties child nodes conflict. #### types non resolvable conflicts * `addexistingproperty`: property added different value property name added trunk. * `removeremovedproperty`: property removed property name removed trunk. *note:* conflict technically easy resolve, current jcr specification mandates conflict here. * `removechangedproperty`: property removed property name changed trunk. * `changeremovedproperty`: property changed property name removed trunk. * `changechangedproperty`: property changed property name changed different value trunk. * `addexistingnode`: node added different node name added trunk. *note:* subtleties currently discussed. see [oak-1553](https://issues.apache.org/jira/browse/oak-1553). * `removeremovednode`: node removed node name removed trunk. *note:* conflict technically easy resolve, current jcr specification mandates conflict here. * `removechangednode`: node removed node name changed trunk. * `changeremovednode`: node changed node name removed trunk. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/oak_api/overview.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> oak api -------------------------------------------------------------------------------- - [javadocs](../apidocs/) (latest release) - javadoc previous releases available [javadoc.io](http://www.javadoc.io/): - [oak-jcr](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-jcr/) - [oak-core](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-core/) - [oak-run](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-run/) - [oak-upgrade](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-upgrade/) - [oak-commons](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-commons/) - [oak-blob](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-blob/) - [oak-blob-cloud](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-blob-cloud/) - [oak-http](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-http/) - [oak-lucene](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-lucene/) - [oak-solr-core](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-solr-core/) - [oak-solr-osgi](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-solr-osgi/) - [oak-auth-external](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-auth-external/) - [oak-auth-ldap](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-auth-ldap/) - [oak-segment-tar](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-segment-tar/) - [oak-authorization-cug](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-authorization-cug/) - [oak-exercise](http://www.javadoc.io/doc/org.apache.jackrabbit/oak-exercise/) ### key api entry points - [contentrepository] - [contentsession] - [root] - [tree] - [propertystate] #### values - [propertyvalue] - [type] - [blob] #### query - [queryengine] - [query] - [resultrow] #### various - [authinfo] : see section [authentication](../security/authentication.html) - [descriptors] - [commitfailedexception] : see also [error codes](error_codes.html) <!-- hidden references --> [contentrepository]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/contentrepository.html [contentsession]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/contentsession.html [root]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/root.html [tree]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/tree.html [propertystate]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/propertystate.html [propertyvalue]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/propertyvalue.html [type]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/type.html [blob]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/blob.html [queryengine]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/queryengine.html [query]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/query.html [resultrow]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/resultrow.html [authinfo]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/authinfo.html [descriptors]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/descriptors.html [commitfailedexception]: /oak/docs/apidocs/org/apache/jackrabbit/oak/api/commitfailedexception.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/oak_api/error_codes.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> error codes ================================================================================ since [oak-764] commitfailedexceptions thrown commit hooks oak come error codes help identify cause problem locate additional information issue. page informal registry common error codes. ### type constraint #### node type validation | oakconstraint000x | primary mixin type information | |-------------------|----------------------------------------------------------| | 0001 | primary type x exist | | 0002 | mixin type x used primary type | | 0003 | abstract type x used primary type | | 0004 | default primary type available child node x | | 0005 | mixin type x exist | | 0006 | primary type x used mixin type | | 0007 | abstract type x used mixin type | | oakconstraint002x | presence mandatory items | |-------------------|----------------------------------------------------------| | 0021 | mandatory property x included new node | | 0022 | mandatory property x removed | | 0025 | mandatory child node x included new node | | 0026 | mandatory child node x removed | #### user validation see section [user management](../security/user/default.html#validation) #### privilege validation see section [privilege management](../security/privilege/default.html#validation) #### token validation see section [token management](../security/authentication/tokenmanagement.html#validation) ### type access #### permission validation see section [permissions](../security/permission/default.html#validation) ### type access control #### default access control validation see section [access control management](../security/accesscontrol/default.html#validation) #### cug validation see section [closed user groups](../security/authorization/cug.html#validation) <!-- hidden references --> [oak-764]: https://issues.apache.org/jira/browse/oak-764 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/elastic.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## elastic index oak supports elasticsearch (elastic short) based indexes property constraint full text constraints. elastic indexes support similar features [lucene][lucene] indexes, however differences: * `type` `elasticsearch`. * index definition needs `/oak:index`. locations supported. * `async` property needs set `elastic-async`. synchronous, `nrt` lanes supported. indexes updated asynchronously. * `refresh` ignored. changes take effect immediately changing them. existing documents elasticsearch changed. * indexes automatically built needed: built setting `reindex` property `true` using `oak-run` tool. recommend build using `oak-run` tool. * `evaluatepathrestrictions` cannot disabled. parent paths always indexed. queries path restrictions evaluated index level possible, otherwise evaluated repository level. * `codec` ignored. * `compatversion` ignored. * `useifexists` ignored. * `blobsize` ignored. * `name` ignored. * `indexpath` ignored. * `analyzers` support lucene configuration plus elasticsearch specific [options][options]. since elasticsearch uses recent version lucene compared one `oak-lucene` module, might differences configuration options could require changes migrating lucene elasticsearch. * `useinexcerpt` support regexp relative properties. * property definitions, `sync` `unique` ignored. synchronous indexing, enforcing uniqueness constraints currently supported elastic indexes. * behavior `dynamicboost` slightly different: lucene indexes, boosting done indexing, elastic done query time. * behavior `suggest` slightly different: lucene indexes, suggestor updated every 10 minutes default frequency changed `suggestupdatefrequencyminutes` property suggestion node index definition node. elastic indexes, delay thus need config property. improvement es lucene. [lucene]: https://jackrabbit.apache.org/oak/docs/query/lucene.html [options]: https://www.elastic.co/guide/en/elasticsearch/reference/current/configure-text-analysis.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/query-troubleshooting.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## query troubleshooting ### slow queries first step query troubleshooting often detect query slow, traverses many nodes. queries traverse many nodes logged follows: *warn* org.apache.jackrabbit.oak.plugins.index.cursors$traversingcursor traversed 22000 nodes filter filter(query= select * [nt:base] isdescendantnode('/etc') lower([jcr:title]) like '%coat%'); consider creating index changing query get good performance, queries traverse 1000 nodes (specially queries run often). #### potentially slow queries addition avoiding queries traverse many nodes, makes sense avoid queries use index. queries might fast (and traverse nodes) small repository, large repository typically slow well. therefore, makes sense detect queries soon possible (in developer environment), even code runs queries tested larger repository. oak detect queries log follows (with log level info oak 1.6.x, warn oak 1.8.x): *info* org.apache.jackrabbit.oak.query.queryimpl traversal query (query without index): select * [nt:base] isdescendantnode('/etc') lower([jcr:title]) like '%coat%'; consider creating index #### query plan understand query slow, first step commonly get query execution plan. this, query executed using `explain select ...`. case, plan is: [nt:base] [nt:base] /* traverse "/etc//*" (isdescendantnode([nt:base], [/etc])) (lower([nt:base].[jcr:title]) like '%coat%') */ means, nodes `/etc` traversed. #### making query specific order make query faster, try add constraints, make constraints tighter. usually require knowledge expected results. example, path restriction specific, less nodes need read. also true index used. also, possible use specific node type. understand nodetype mixin indexed, consult nodetype index `/oak:index/nodetype`, property ` declaringnodetypes`. even case, nodetype specific possible. assuming query changed this: select * [acme:product] isdescendantnode('/etc/commerce') lower([jcr:title]) like '%coat%') [commercetype] = 'product' _relevant_ change improve path restriction. case, already enough make traversal warning go away. #### queries without index changing query, still message log file complains query use index, described above: *info* org.apache.jackrabbit.oak.query.queryimpl traversal query (query without index): select * [acme:product] isdescendantnode('/etc/commerce') lower([jcr:title]) like '%coat%' [commercetype] = 'product'; consider creating index query plan index change, still nodes traversed. case, relatively nodes almost empty development repository, traversal warning logged. production, might lot nodes `/etc/commerce`, makes sense continue optimization. #### traversal ok known data model query never traverse many nodes, index needed. corner case, applies queries traverse fixed number (for example) configuration nodes, number descendant nodes guaranteed low using certain nodetype allows fixed number child nodes. case, query changed say traversal fine. mark queries, append `option(traversal ok)` query. feature used rare corner cases. select * [nt:base] isdescendantnode('/etc/commerce') lower([jcr:title]) like '%coat%' [commercetype] = 'product' option(traversal ok) #### estimating node counts find many nodes certain path, use jmx bean `nodecounter`, estimate node count. example: run `getestimatedchildnodecounts` `p1=/` `p2=2` might give you: /: 2522208, ... /etc: 1521504, /etc/commerce: 29216, /etc/images: 1231232, ... case, still many nodes `/etc/commerce` production repository. also note number nodes grow time. #### prevent running traversal queries avoid running queries use index altogether, change configuration jmx bean `queryenginesettings`: set `failtraversal` `true`, queries without index throw exception trying execute them, matter many nodes repository. mean queries never traverse nodes, means queries _must_ traverse nodes fail. #### using different new index multiple options: * consider creating index `jcr:title`. `like '%..%'` conditions, much help, nodes property need read. also, using `lower` make index less effective. so, makes sense nodes property expected system. * nodes nodetype, consider adding `acme:product` nodetype index. requires reindexing. query could use nodetype index, within nodetype, traverse `/etc/commerce`. `nodecounter` also help understand many `acme:product` nodes repository, nodetype indexed. find out, run `getestimatedchildnodecounts` `p1=/oak:index/nodetype` `p2=2`. * query needs return added nodes immediately (synchronously; without delay), consider creating [property index](./property-index.html). note lucene indexes asynchronous, new nodes may appear result seconds. * ensure one node matching result repository, consider creating unique [property index](./property-index.html). * consider using fulltext index, is: change query using `lower([jcr:title]) like '%...%'` using `contains([jcr:title], '...')`. possibly combine adding property `commercetype` fulltext index. last plan possibly best solution case. #### index definition generator case need modify create lucene property index, use [oak index definition generator](http://oakutils.appspot.com/generate/index) tool. tool know index configuration, always suggest create new index; might better extend existing index. however, note that: * changing existing index requires reindexing index. * out-of-the-box index modified, need merge modifications migrating newer software. best add documentation index definition simplify merging, example form "info" properties. #### verification changing query, possibly index, run `explain select` again, verify right plan used, case might be, query: select * [acme:product] isdescendantnode('/etc/commerce') contains([jcr:title], 'coat') [commercetype] = 'product' [nt:unstructured] [acme:product] /* lucene:lucene(/oak:index/lucene) full:jcr:title:coat ft:(jcr:title:"coat") case, fulltext restriction query used index, might already sufficient. not, fulltext index might changed also index `commercetype`, possibly use `evaluatepathrestrictions`. #### queries many union conditions queries contain many "or" conditions, many "union" subqueries, slow read lot data. example query: /jcr:root/content/(a|b|c|d|e)//element(*, cq:page)[ jcr:contains(@jcr:title, 'some text') jcr:contains(jcr:content/@keywords, 'some text') jcr:contains(jcr:content/@cq:tags, 'some text') jcr:contains(jcr:content/@team, 'some text') jcr:contains(jcr:content/@topics, 'some text') jcr:contains(jcr:content/@jcr:description, 'some text')] query internally converted 5 subqueries, due "union" clause (a|b|c|d|e). then, 5 subqueries run 6 subqueries: one jcr:contains condition. so, index contacted 30 times. avoid overhead, index could changed (or new index created) aggregation required properties (here: jcr:title, jcr:content/keywords,...). simplify query to: /jcr:root/content/(a|b|c|d|e)//element(*, cq:page)[jcr:contains(., 'some text')] resolve problems. speed query avoiding running 5 subqueries, might better use less specific path constraint, instead use different way filter results, as: /jcr:root/content//element(*, cq:page)[jcr:contains(., 'some text') @category='x'] #### ordering score combined / union conditions queries expect results sorted score ("order @jcr:score descending"), use "union" "or" conditions, may return result expected order, depending index(es) used. example: /jcr:root/conent/products/(indoor|outdoor)//*[jcr:contains(., 'test')] order @jcr:score descending here, query converted "union", result subqueries combined. score subquery comparable (which often case lucene indexes), order results may match expected order. instead using path restrictions above, likely better use additional condition query, index that: /jcr:root/content/products//*[jcr:contains(., 'test') (@producttag='indoor' @producttag='outdoor')] order @jcr:score descending possible, try avoid using "union", use "or" condition follows. work sql-2 queries however: select * [nt:base] contains(*, 'test') issamenode(a, '/content') ([jcr:path] like '/content/x800/%' [jcr:path] like '/content/y900/%') order [jcr:score] desc # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/ordered-index.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # ordered index (deprecated since 1.1.8) extension property index keep order indexed property persisted repository. used speed-up queries `order by` clause, _equality_ _range_ ones. select * [nt:base] order jcr:lastmodified select * [nt:base] jcr:lastmodified > $date select * [nt:base] jcr:lastmodified < $date select * [nt:base] jcr:lastmodified > $date1 jcr:lastmodified < $date2 select * [nt:base] [jcr:uuid] = $id define property index subtree add index definition node that: * must type `oak:queryindexdefinition` * must `type` property set __`ordered`__ * contains `propertynames` property indicates properties stored index. `propertynames` single value list type `name[]` _optionally_ specify * `reindex` flag set `true`, triggers full content re-index. * direction sorting specifying `direction` property type `string` value `ascending` `descending`. provided `ascending` default. * index defined asynchronous providing property `async=async` _caveats_ * case deploying index clustered mongodb define asynchronous providing `async=async` index definition. avoid cluster merges. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/indexing.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # indexing * [indexing](#indexing) * [overview](#overview) * [new 1.6](#new-1.6) * [indexing flow](#indexing-flow) * [index definitions](#index-defnitions) * [index definition location](#oak-index-nodes) * [synchronous indexing](#sync-indexing) * [asynchronous indexing](#async-indexing) * [checkpoint](#checkpoint) * [indexing lane](#indexing-lane) * [clustered setup](#cluster) * [indexing lease](#async-index-lease) * [indexing lag](#async-index-lag) * [setup](#async-index-setup) * [async indexing mbean](#async-index-mbean) * [isolating corrupt indexes](#corrupt-index-handling) * [near real time indexing](#nrt-indexing) * [usage](#nrt-indexing-usage) * [nrt indexing mode - nrt](#nrt-indexing-mode-nrt) * [nrt indexing mode - sync](#nrt-indexing-mode-sync) * [cluster setup](#nrt-indexing-cluster-setup) * [configuration](#nrt-indexing-config) * [reindexing](#reindexing) * [reducing reindexing times](#reduce-reindexing-times) * [how abort reindexing](#abort-reindex) ## <a name="overview"></a> overview queries perform well, oak supports indexing content stored repository. indexing works comparing different versions node data (technically, "diff" base `nodestate` modified `nodestate`). indexing mode defines comparing performed, index content gets updated: 1. synchronous indexing 2. asynchronous indexing 3. near real time (nrt) indexing indexing uses [commit editors](../architecture/nodestate.html#commit-editors). editors type `indexeditor`, responsible updating index content based changes main content. currently, oak following built-in editors: 1. propertyindexeditor 2. referenceeditor 3. luceneindexeditor 4. solrindexeditor ### <a name="new-1.6"></a> new 1.6 * [near real time (nrt) indexing](#nrt-indexing) * [multiple async indexers setup via osgi config](#async-index-setup) * [isolating corrupt indexes](#corrupt-index-handling) ## <a name="indexing-flow"></a> indexing flow `indexeditor` invoked part commit (`session.save()`), part asynchronous "diff" process. cases, stage "diff" performed _before_ _after_ state, passed `indexupdate`, responsible invoking `indexeditor` based _discovered_ index definitions. ### <a name="index-defnitions"></a> index definitions index definitions nodes type `oak:queryindexdefinition`, stored special node named `oak:index`. part diff traversal, level, `indexupdate` looks `oak:index` nodes. canonical index definition structure: /oak:index/indexname - jcr:primarytype = "oak:queryindexdefinition" - type (string) mandatory - async (string) multiple - reindex (boolean) index definitions nodes following properties: 1. `type` - determines _type_ index. `indexupdate` looks `indexeditor` given type registered `indexeditorprovider`. out-of-the-box oak setup, one following values: * `reference` - configured out-of-the-box setup * `counter` - configured out-of-the-box setup * `property` * `lucene` * `solr` 2. `async` - determines index updated synchronously asynchronously. following values: * `sync` - default value. indicates index meant updated part commit. * `nrt` - indicates index [near real time](#nrt-indexing) index. * `async` - indicates index updated asynchronously. case, value used determine [indexing lane](#indexing-lane) * value ends `async`. 3. `reindex` - set `true`, reindexing performed index. reindexing done, property value set `false`. see [reindexing](#reindexing) details. based two properties, `indexupdate` creates `indexeditor` instances traverses "diff", registers itself, passing callbacks changes. #### <a name="oak-index-nodes"></a> index definition location indexing logic supports placing `oak:index` nodes path. depending location, indexes index content present paths. so, example 'oak:index' present _'/content/oak:index'_, indexes defined node index repository data present _'/content'_. depending type index, one create index definitions root path ('/'), non-root paths. currently `lucene` indexes support creating index definitions non-root paths. `property` indexes created root path, is, '/'. ### <a name="sync-indexing"></a> synchronous indexing synchronous indexing, index content gets updated part commit itself. changes main content, well index content, done atomically single commit. mode currently supported `property` `reference` indexes. ### <a name="async-indexing"></a> asynchronous indexing asynchronous indexing (also called async indexing) performed using periodic scheduled jobs. part setup, oak schedules certain periodic jobs perform diff repository content, update index content based that. periodic `asyncindexupdate` job assigned [indexing lane](#indexing-lane), scheduled run certain interval. time execution, job performs work: 1. look last indexed state via stored checkpoint data. checkpoint exists, read `nodestate` checkpoint. state exists, checkpoint present, treats initial indexing, case base state empty. state considered `before` state. 2. check change repository `before` state. change detected current indexing cycle considered completed `indexstatsmbean#done` time set current time. `lastindexedtime` updated 3. create checkpoint _current_ state refer `after` state. 4. create `indexupdate` instance bound current _indexing lane_, trigger diff `before` `after` state. 5. `indexupdate` pick index definitions bound current indexing lane, create `indexeditor` instances them, pass diff callbacks. 6. diff traverses depth-first manner, end diff, `indexeditor` final changes current indexing run. depending index implementation, index data either stored nodestore (for indexes type `lucene`, `property`, on), remote store (for type `solr`). 7. `asyncindexupdate` update last indexed checkpoint current checkpoint commit. async indexes _eventually consistent_ repository state, lag behind latest repository state time. however, index content eventually consistent, never ends wrong state respect repository state. #### <a name="checkpoint"></a> checkpoint checkpoint mechanism, whereby client `nodestore` request oak ensure repository state (snapshot) time preserved, removed revision garbage collection process. later, state retrieved nodestore passing checkpoint. think checkpoint tag git repository, named revision. async indexing makes use checkpoint support access older repository state. #### <a name="indexing-lane"></a> indexing lane term "indexing lane" refers set indexes updated given async indexer. index definition meant async indexing defines `async` property, whose value name indexing lane. example, consider following two index definitions: /oak:index/userindex - jcr:primarytype = "oak:queryindexdefinition" - async = "async" /oak:index/assetindex - jcr:primarytype = "oak:queryindexdefinition" - async = "fulltext-async" here, _userindex_ bound "async" indexing lane, _assetindex_ bound "fulltext-async" lane. oak [setup](#async-index-setup) configures two `asyncindexupdate` jobs: one "async", one "fulltext-async". job "async" run, processes index definitions `async` value `async`, job "fulltext-async" run, picks index definitions `async` value `fulltext-async`. jobs scheduled run different intervals, also different cluster nodes. job keeps bookkeeping checkpoint state, [paused resumed](#async-index-mbean) separately. prior oak 1.4, one indexing lane: `async`. oak 1.4, support added create two lanes: `async` `fulltext-async`. 1.6, possible [create multiple lanes](#async-index-setup). #### <a name="cluster"></a> clustered setup clustered setup, one needs ensure host application async indexing jobs lanes run singleton cluster. `asyncindexupdate` lane executed concurrently different cluster nodes, leads race conditions, old checkpoint gets lost, leading reindexing. see also [clustering](../clustering.html#scheduled-jobs) details host application schedule indexing jobs. ##### <a name="async-index-lease"></a> indexing lease `asyncindexupdate` in-built "lease" logic ensure even jobs gets scheduled run different cluster nodes, one runs. done keeping lease property, gets periodically updated indexing progresses. `asyncindexupdate` run skips indexing current lease expired. last update lease done long ago (default: 15 minutes), assumed cluster node supposed index available, node take over. lease logic delay start indexing system stopped cleanly. oak 1.6, affect non-clustered setups like based segmentnodestore, [affects documentnodestore][oak-5159] based setups. #### <a name="async-index-lag"></a> indexing lag async indexing jobs default configured run interval 5 seconds. depending system load diff size content indexed, indexing may start lagging longer time interval. due this, indexing results lag behind repository state, may become stale, means new content added show query results longer time. `indexstats` mbean keeps time series metrics stats indexing frequency. used track indexing state. [nrt indexing](#nrt-indexing) introduced oak 1.6 helps situations, keep results date. #### <a name="async-index-setup"></a> setup `@since oak 1.6` async indexers configured via osgi config `org.apache.jackrabbit.oak.plugins.index.asyncindexerservice`. ![async indexing config](async-index-config.png) different lanes configured adding rows _async indexer configs_. prior 1.6, indexers created programmatically constructing oak. #### <a name="async-index-mbean"></a> async indexing mbean configured async indexer setup, indexer exposes `indexstatsmbean`, provides various stats around current indexing state: org.apache.jackrabbit.oak: async (indexstats) org.apache.jackrabbit.oak: fulltext-async (indexstats) provides following details: * failingindexstats - stats around indexes [failing marked corrupt](#corrupt-index-handling). * lastindexedtime - time repository state indexed. * status - running, done, failing etc. * failing - boolean flag indicating indexing failing due issue. monitored detecting indexer healthy not. * executioncount - time series data around number runs various time intervals. provides following operations: * pause - pauses indexer. * abortandpause - aborts running indexing cycle pauses indexer. invoke 'resume' ready resume indexing again. * resume - resume indexing. #### <a name="corrupt-index-handling"></a> isolating corrupt indexes `since 1.6` `asyncindexerservice` marks index fails update 30 minutes (configurable) `corrupt`, ignore indexes indexing. index marked corrupt, following log entry made: 2016-11-22 12:52:35,484 info na [async-index-update-fulltext-async] o.a.j.o.p.i.asyncindexupdate - marking [/oak:index/lucene] corrupt. index failing since tue nov 22 12:51:25 ist 2016, 1 indexing cycles, failed 7 times, skipped 0 time post this, new content gets indexed corrupt index skipped, following warn entry made: 2016-11-22 12:52:35,485 warn na [async-index-update-fulltext-async] o.a.j.o.p.index.indexupdate - ignoring corrupt index [/oak:index/lucene] marked corrupt since [2016-11-22t12:51:25.492+05:30]. index must reindexed indexing work properly info also seen mbean ![corrupt index stats indexstatsmbean](corrupt-index-mbean.png) later, index reindexed, following log entry made 2016-11-22 12:56:25,486 info na [async-index-update-fulltext-async] o.a.j.o.p.index.indexupdate - removing corrupt flag index [/oak:index/lucene] marked corrupt since [corrupt = 2016-11-22t12:51:25.492+05:30] feature disabled setting `failingindextimeoutseconds` 0 `asyncindexservice` config. see also [oak-4939][oak-4939] details. ### <a name="nrt-indexing"></a> near real time indexing `@since oak 1.6` _this mode supported `lucene` indexes_ lucene indexes perform well evaluating complex queries, benefit evaluated locally copy-on-read support. however, `async`, depending system load lag behind repository state. cases lag (which order minutes) acceptable, one must use `property` indexes. avoid that, oak 1.6 [added support near real time indexing][oak-4412] ![nrt index flow](index-nrt.png) mode, indexing happen two modes, query consult multiple indexes. diagram shows indexing flow time. flow: * t1, t3 t5 - time instances checkpoints created. * t2 t4 - time instance async indexer runs completed indexes updated. * persisted index: * v2 - index version v2, repository state indexed t1. * v3 - index version v2, repository state indexed t3. * local index: * nrt1 - local index, repository state indexed t2 t4. * nrt2 - local index, repository state indexed t4 t6. repository state changes time, async indexer run index changes last known checkpoint current state run started. async run 1 completed, persisted index repository state indexed t3. without nrt index support, query performed t2 t4, see index results repository state t1, state persisted indexes data for. change cannot seen next async indexing cycle complete (at t4). nrt indexing support, indexing happen two places: * persisted index - index updated via async indexer run. flow remains same, periodically updated indexer run. * local index - addition persisted index, cluster node also maintain local index. index keeps data two async indexer runs. post run, previous index discarded, new index built (actually, previous index retained one cycle). query making use index automatically make use persisted local indexes. this, new content added repository last async index run also show quickly. #### <a name="nrt-indexing-usage"></a> usage nrt (near real time) indexing enabled index configuring `async` property: /oak:index/assetindex - jcr:primarytype = "oak:queryindexdefinition" - async = ['fulltext-async', 'nrt'] here, `async` set multi-valued property, * indexing lane - example `async` `fulltext-async`, * nrt indexing mode - `nrt` `sync`. ##### <a name="nrt-indexing-mode-nrt"></a> nrt indexing mode - nrt mode, local index updated asynchronously cluster nodes post commit, index reader refreshed second. so, change done show cluster node within 1 2 seconds. /oak:index/userindex - jcr:primarytype = "oak:queryindexdefinition" - async = ['async', 'nrt'] ##### <a name="nrt-indexing-mode-sync"></a> nrt indexing mode - sync mode, local index updated synchronously cluster nodes post commit, index reader refreshed immediately. mode indexes slowly compared "nrt" mode. /oak:index/userindex - jcr:primarytype = "oak:queryindexdefinition" - async = ['async', 'sync'] single node setup (for example `segmentnodestore`), mode effectively makes async lucene index perform synchronous property indexes. however, 'nrt' mode performs better, using preferable. #### <a name="nrt-indexing-cluster-setup"></a> cluster setup cluster setup, cluster node maintains local index changes happening cluster node. addition that, also indexes changes cluster nodes relying [oak observation external changes][oak-4808]. depends frequently external changes delivered. due this, even nrt indexing changes cluster nodes take time reflected query results compared local changes. #### <a name="nrt-indexing-config"></a> configuration nrt indexing expose configuration options part [luceneindexproviderservice](lucene.html#osgi-config): * `enablehybridindexing` - boolean property, defaults `true`. set `false` disable nrt indexing feature completely. * `hybridqueuesize` - size in-memory queue used hold lucene documents indexing `nrt` mode. default size 10000. ## <a name="superseding"></a> superseding index helps replacing one index another. suppose following indices: ``` jcr:root + oak:index + sampleindex1 - jcr:primarytype = "oak:queryindexdefinition" + sampleindex2 - jcr:primarytype = "oak:queryindexdefinition" ``` add properties `supersedes = ["/oak:index/sampleindex1"]` `reindex=true` `sampleindex2` save those. result, superseded index `sampleindex1` would disabled (by setting type=disabled property) next indexing cycle. ## <a name="reindexing"></a> reindexing reindexing rarely solves problems. specially, typically make queries return expected result. cases, _not_ recommended reindex, also reindex slow (sometimes multiple days), use lot temporary disk space. note removing checkpoints, removing hidden `:async` node cause full reindex, recommended either. queries return right data, possibly index [not yet up-to-date][oak-5159], query incorrect, included/excluded path settings wrong (for lucene indexes). instead reindexing, suggested first check log file, modify query uses different index traversal, run query again. reindexing existing indexes required following scenarios: * a: case _property_ index configuration changed, index used queries, contain nodes. nodes existed _before_ index configuration changed, indexed. workaround change ('touch') affected nodes. * b: prior oak 1.6, case _lucene_ index definition changed (same a). oak 1.6 newer, queries use old index definition index [reindexed](lucene.html#stored-index-definition). * c: prior oak 1.2.15 / 1.4.2, case query engine picks slow index queries counter index (`/oak:index/counter`) [got sync adding removing lots nodes many times][oak-4065]. case, recommended verify contents counter index first, upgrade oak reindexing. view content, use nodecounter jmx bean run `getestimatedchildnodecounts` p1 = `/` p2 = `2`. problem, estimated node count root node typically low, 10 times lower sum children. `counter` index needs reindexed case. workaround (to avoid reindexing) manually tweak index configurations using manually set `entrycount` index used low value (as high possible index still needed), example 100 1000. * d: case binary lucene index (a lucene index file) missing, example binary available datastore. happen case datastore misconfigured garbage collection removed binary still required. cases, binaries might missing well; best traverse nodes repository ensure case. * e: case binary lucene index (a lucene index file) corrupt. index corrupt, `asyncindexupdate` run fail exception saying lucene index file corrupt. case, first verify following procedure resolve issue: stop oak, remove local copy lucene index (directory `index`), restart. index still corrupt this, reindexing needed. cases, please file oak issue. * f: prior oak 1.2.24 / 1.4.13 / 1.6.1, using document store (mongodb rdbmk) combination large transaction (a commit changed added many thousand nodes), one parent nodes 100 child nodes, indexes (all types) [did see changes cases][oak-5557]. * g: prior oak 1.4.7, repository sidegrade used _partial_ migrations, migrating data without migrating related indexes. case, property indexes need either fully rebuilt, (as alternative) copy migrate content using newer version oak. see also [oak-4684][oak-4684]. * h: binary missing reindexing. happen following case: reindexing creating new index takes multiple days, time, one day later, datastore garbage collection run concurrently. binaries created reindexing get missing datastore garbage collection removes unreferenced binaries older one day. indexing reindexing using oak-run affected this. * i: prior oak 1.0.27 / 1.2.11, index file gets larger 2 gb, possibly index opened (exception "invalid seek request"), subsequently index might get corrupt. see also [oak-3911][oak-3911]. new indexes built automatically index definition stored. reindex _existing_ index (when needed), set `reindex` property `true` respective index definition: /oak:index/userindex - reindex = true changes saved, index reindexed. asynchronous indexes, reindex starts next async indexing cycle. synchronous indexes, reindexing done part save (or commit) itself. (synchronous) property index, alternative use `propertyindexasyncreindexmbean`; see [reindeinxing property indexes](property-index.html#reindexing) section details that. reindexing starts, following log entries seen log: [async-index-update-async] o.a.j.o.p.i.indexupdate reindexing performed following indexes: [/oak:index/userindex] [async-index-update-async] o.a.j.o.p.i.indexupdate reindexing traversed #100000 /home/user/admin [async-index-update-async] o.a.j.o.p.i.asyncindexupdate [async] reindexing completed indexes: [/oak:index/userindex*(4407016)] 30 min reindexing complete, `reindex` flag set `false` automatically. ### <a name="reduce-reindexing-times"></a> reducing reindexing times index reindexed full text extraction configured reindexing take long time time spent text extraction. cases recommended use text [pre-extraction support](pre-extract-text.html). text pre-extraction done starting actual reindexing. would ensure reindexing time spent performing text extraction hence actual time taken reindexing index gets reduced considerably. ### <a name="abort-reindex"></a> abort reindexing building index slow. aborted (stopped finished), example detect error index definition. reindexing building new index aborted using asynchronous indexes. synchronous indexes, stopped started using `propertyindexasyncreindexmbean`. this, use respective `indexstats` jmx bean (for example, `async`, `fulltext-async`, `async-reindex`), call operation `abortandpause()`. then, either set `reindex` flag `false` (for existing index), remove index definition (for new index), change index type `disabled`. store change. finally, call operation `resume()` regular indexing operations continue. [oak-3911]: https://issues.apache.org/jira/browse/oak-3911 [oak-4065]: https://issues.apache.org/jira/browse/oak-4065 [oak-4412]: https://issues.apache.org/jira/browse/oak-4412 [oak-4684]: https://issues.apache.org/jira/browse/oak-4684 [oak-4808]: https://issues.apache.org/jira/browse/oak-4808 [oak-4939]: https://issues.apache.org/jira/browse/oak-4939 [oak-5159]: https://issues.apache.org/jira/browse/oak-5159 [oak-5557]: https://issues.apache.org/jira/browse/oak-5557 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/ootb-index-change.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## changing out-of-the-box index definitions may need change out-of-the-box index definition shipped either oak products built top it. better deal upgrades changes provided index definitions would better follow following practice. let's say example following index definition `nodetypeindex` like add custom node list: `cust:unstructured`. "oak:index/nodetype" : { "jcr:primarytype": "oak:queryindexdefinition", "declaringnodetypes": [ "sling:messageentry", "slingevent:job", "oak:queryindexdefinition", "rep:user", "rep:authorizable", "sling:bgjobdata", "sling:vanitypath", "sling:chunks", "slingevent:timedevent", ], "nodetypelistdefined": true, "propertynames": [ "jcr:primarytype", "jcr:mixintypes" ], "type": "property", "reindex": false, "reindexcount": 1 } customise would following: 1. copy current index definition new name. let's say `oak:index/custnodetype` 2. add custom nodetype `declaringnodetypes` 3. issue re-index setting `reindex=true` 4. wait finish 5. either [disable](./query-engine.html#temporarily_disabling_an_index) old index definition delete it. new index definition example, completed would look like following: "oak:index/custnodetype" : { "jcr:primarytype": "oak:queryindexdefinition", "declaringnodetypes": [ "sling:messageentry", "slingevent:job", "oak:queryindexdefinition", "rep:user", "rep:authorizable", "sling:bgjobdata", "sling:vanitypath", "sling:chunks", "slingevent:timedevent", "cust:unstructured" ], "nodetypelistdefined": true, "propertynames": [ "jcr:primarytype", "jcr:mixintypes" ], "type": "property", "reindex": false, "reindexcount": 2 } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/oak-run-indexing.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # <a name="oak-run-indexing"></a> oak run indexing * [oak run indexing](#oak-run-indexing) * [common options](#common-options) * [generate index info](#index-info) * [dump index definitions](#dump-index-defn) * [dump index data](#async-index-data) * [index consistency check](#check-index) * [reindex](#reindex) * [a - out-of-band indexing](#out-of-band-indexing) * [step 1 - text preextraction](#out-of-band-pre-extraction) * [step 2 - create checkpoint](#out-of-band-create-checkpoint) * [step 3 - perform reindex](#out-of-band-perform-reindex) * [step 4 - import index](#out-of-band-import-reindex) * [4.1 - via oak-run](#import-index-oak-run) * [4.2 - via indexermbean](#import-index-mbean) * [4.3 - via script](#import-index-script) * [b - online indexing](#online-indexing) * [step 1 - text preextraction](#online-indexing-pre-extract) * [step 2 - perform reindexing](#online-indexing-perform-reindex) * [updating adding new index definitions](#index-definition-updates) * [json file format](#json-file-format) * [tika setup](#tika-setup) `@since oak 1.7.0` **work progress. used production setups** oak 1.7 added tooling part oak-run `index` command. details around various operations supported command. `index` command supports connecting different nodestores via various options documented [here](../features/oak-run-nodestore-connection-options.html). example assume setup consisting segmentnodestore filedatastore. depending setup use appropriate connection options. default tool would generate output file directory `indexing-result` referred output directory. unless specified operations connect repository read mode ## <a name="common-options"></a> common options commands support following common options 1. `--index-paths` - comma separated list index paths selected operations need performed. specified operation would performed indexes. also refer help output via `-h` command options ## <a name="index-info"></a> generate index info java -jar oak-run*.jar index --fds-path=/path/to/datastore /path/to/segmentstore/ --index-info generates report consisting various stats related indexes present given repository. generated report stored default `<output dir>/index-info.txt` supported index types ## <a name="dump-index-defn"></a> dump index definitions java -jar oak-run*.jar index --fds-path=/path/to/datastore /path/to/segmentstore/ --index-definitions `--index-definitions` operation dumps index definition json format file `<output dir>/index-definitions.json`. json file contains index definitions keyed index paths supported index types ## <a name="async-index-data"></a> dump index data java -jar oak-run*.jar index --fds-path=/path/to/datastore /path/to/segmentstore/ --index-dump `--index-dump` operation dumps index content output directory. output directory would contain one folder index. folder would property file `index-details.txt` contains `indexpath` supported lucene indexes. ## <a name="check-index"></a> index consistency check java -jar oak-run*.jar index --fds-path=/path/to/datastore /path/to/segmentstore/ --index-consistency-check `--index-consistency-check` operation performs index consistency check various indexes. supports 2 level * level 1 - specified `--index-consistency-check=1`. performs basic check determine blobs referred index valid * level 2 - specified `--index-consistency-check=2`. performs check determine index files valid corruption happened. check slower would generate report `<output dir>/index-consistency-check-report.txt` supported lucene indexes. ## <a name="reindex"></a> reindex reindex operation supports 2 modes index * out-of-band indexing - oak-run would connect repository read mode. would require certain manual steps * online indexing - oak-run would connect repository `--read-write` mode supported lucene indexes. indexes reindex fulltext indexing enabled refer [tika setup](#tika-setup) steps adapt command include tika support text extraction ### <a name="out-of-band-indexing"></a> - out-of-band indexing band indexing following phases 1. get checkpoint issued 2. perform indexing read connection nodestore upto checkpoint state 3. import generated indexes 4. complete increment indexing checkpoint state current head #### <a name="out-of-band-pre-extraction"></a> step 1 - text preextraction index reindexed involves fulltext index repository binary content recommended first [text pre-extraction](pre-extract-text.html) performed. ensures costly operation around text extraction done prior actual indexing actual indexing text extraction critical path #### <a name="out-of-band-create-checkpoint"></a>step 2 - create checkpoint go `checkpointmbean` create checkpoint long enough lifetime like 10 days. invoke `checkpointmbean#createcheckpoint` 864000000 argument lifetime #### <a name="out-of-band-perform-reindex"></a> step 3 - perform reindex step perform actual indexing via oak-run connects repository read mode. java -jar oak-run*.jar index --reindex \ --index-paths=/oak:index/indexname \ --checkpoint=0fd2a388-de87-47d3-8f30-e86b1cf0a081 \ --fds-path=/path/to/datastore /path/to/segmentstore/ following options used * `--pre-extracted-text-dir` - directory path containing pre extracted text generated via step #1 (optional) * `--index-paths` - command requires explicit set index paths need indexed (required) * `--checkpoint` - checkpoint index updated, indexing read mode. testing purpose, set 'head' indicate head state used. (required) * `--index-definitions-file` - json file file path contains updated index definitions index support fulltext indexing omit providing blobstore details #### <a name="out-of-band-import-reindex"></a>step 4 - import index last step need import index back repository. done one following ways ##### <a name="import-index-oak-run"></a>4.1 - via oak-run mode import index using oak-run java -jar oak-run*.jar index --index-import --read-write \ --index-import-dir=<index dir> \ --fds-path=/path/to/datastore /path/to/segmentstore "index dir" directory contains index files created step #3. check logs previous command directory path. mode used repository oak version 1.7+ oak-run connects repository read-write mode. ##### <a name="import-index-mbean"></a>4.2 - via indexermbean mode import index using jmx. looks `indexermbean` import index directory using `importindex` operation ##### <a name="import-index-script"></a>4.3 - via script todo - provide way import data older setup using script ### <a name="online-indexing"></a>b - online indexing online indexing automates manual steps required out-of-band indexing. mode used repository oak version 1.7+ oak-run connects repository read-write mode. #### <a name="online-indexing-pre-extract"></a>step 1 - text preextraction out-of-band indexing #### <a name="online-indexing-perform-reindex"></a>step 2 - perform reindexing step configure oak-run connect repository read-write mode let perform steps i.e checkpoint creation, indexing import java -jar oak-run*.jar index --reindex --index-paths=/oak:index/lucene --read-write --fds-path=/path/to/datastore /path/to/segmentstore ### <a name="index-definition-updates"></a> updating adding new index definitions `@since oak 1.7.5` index tooling support updating adding new index definitions existing setups. done passing path json file contains index definitions java -jar oak-run*.jar index --reindex --index-paths=/oak:index/newassetindex \ --index-definitions-file=index-definitions.json \ --fds-path=/path/to/datastore /path/to/segmentstore index-definitions.json following structure { "/oak:index/newassetindex": { "evaluatepathrestrictions": true, "compatversion": 2, "type": "lucene", "async": "async", "jcr:primarytype": "oak:queryindexdefinition", "indexrules": { "jcr:primarytype": "nt:unstructured", "dam:asset": { "jcr:primarytype": "nt:unstructured", "properties": { "jcr:primarytype": "nt:unstructured", "valid": { "name": "valid", "propertyindex": true, "jcr:primarytype": "nt:unstructured", "notnullcheckenabled": true }, "mimetype": { "name": "mimetype", "analyzed": true, "jcr:primarytype": "nt:unstructured" } } } } } } points note json file * key top level object refers index path * value key refers complete index definition * index path present existing repository would result new index created * case new index must ensured parent path structure must already exist repository. new index created `/content/en/oak:index/contentindex` path upto `/content/en/oak:index` already exist repository * option used online indexing ensure oak-run version matches oak version used target repository also use json file generated [oakutils](http://oakutils.appspot.com/generate/index). needs modified confirm structure i.e. enclose whole definition intended index path key. general index definitions need special encoding values index definitions oak use string, long double types mostly. however index refers binary config like tika config binary data would need encoded. refer next section details. option supported online out-of-band indexing. details refer [oak-6471][oak-6471] ### <a name="json-file-format"></a> json file format standard types used oak supported directly json like names, blobs etc. would need encoded specific format. encoding rules long : encoding required : _"compatversion": 2_ boolean : encoding required : _"propertyindex": true,_ double : encoding required : _"weight": 1.5_ string : prefix value `str:` : generally value need encoded. encoding required string starts 3 letters colon : _"pathpropertyname": "str:jcr:path"_ date : prefix value `dat:`. value iso8601 formatted date string : _"created": "dat:2017-07-20t13:23:21.196+05:30"_ name : prefix value `nam:`. : `jcr:primarytype` `jcr:mixins` encoding required. property names would converted name type : _"nodetype": "nam:nt:base"_ path : prefix value `pat:` : _"imagepath": "pat:/content/assets/book.jpg"_ uri : prefix value `uri:` : _"serveruri": "uri:http\://foo.example.com"_ binary : default binary values encoded base64 string binary less 1 mb size. encoded value prefixed `:blobid:` : _"jcr:data": ":blobid:axygz"_ ### <a name="tika-setup"></a> tika setup indexes reindex fulltext indexing enabled need include tika library classpath. required even pre extraction used ensure new binary added pre-extraction done indexed. first download [tika-app](https://tika.apache.org/download.html) jar tika downloads. able use 1.15 version oak 1.7.4 jar. modify index command like below. rest arguments remain documented before. java -cp oak-run.jar:tika-app-1.15.jar org.apache.jackrabbit.oak.run.main index [oak-6471]: https://issues.apache.org/jira/browse/oak-6471 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/search-mt.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## machine translation search * [query time mt lucene indexes](#qtmtl) * [apache joshua](#joshua) * [language packs](#languagepacks) * [setup](#setup) oak supports clir (cross language information retrieval) using _machine translation_ decorate search queries. extension provided within _oak-search-mt_ bundle. ### <a name="qtmtl"></a> query time mt lucene indexes machine translation query time supported oak lucene indexes extension oak lucene's *fulltextquerytermsprovider* api called *mtfulltextquerytermsprovider*. initial implementation details found [oak-4348](https://issues.apache.org/jira/browse/oak-4348). *mtfulltextquerytermsprovider* take text given query eventually translate provide new lucene query (to added original one). query time machine translation performed *mtfulltextquerytermsprovider* index definition selected index matches node types defined *mtfulltextquerytermsprovider* configuration (e.g. oak:unstructured). *mtfulltextquerytermsprovider* try perform translation whole text first and, secondly, single tokens created lucene _analyzer_ passed *#getqueryterm(string text, analyzer analyzer, nodestate indexdefinition)* api call. machine translation currently implemented means apache joshua, statistical machine translation toolkit. *mtfulltextquerytermsprovider* require *language pack* (a smt model) order perform translation search queries. #### <a name="joshua"></a> apache joshua apache joshua statistical machine translation toolkit originally developed johns hopkins university university pennsylvania, donated 2015 apache software foundation. information usage apache joshua multi language search see slides/video berlin buzzwords 2017 presentation [embracing diversity: searching multiple languages](https://berlinbuzzwords.de/17/session/embracing-diversity-searching-over-multiple-languages). ##### <a name="languagepacks"></a> language packs apache joshua used train machine translation models called _language packs_, however provides set ready use (apache licensed) language packs many language pairs at: [https://cwiki.apache.org/confluence/display/joshua/language+packs](https://cwiki.apache.org/confluence/display/joshua/language+packs) #### <a name="setup"></a> setup multiple *mtfulltextquerytermsprovider* configured (for different language pairs) using *mtfulltextquerytermsproviderfactory* osgi configuration factory. order instantiate *mtfulltextquerytermsproviderfactory* following properties need configured: * _path.to.config_ -> path _joshua.config_ configuration file (e.g. downloaded language pack) * _node.types_ -> list node types query time mt expansion done * _min.score_ -> minimum score (between 0 1) translated sentence / token used expanding query (this used filter low quality translations) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/ordered-index-migrate.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # migrating ordered index lucene property quick step-by-step migrate ordered index lucene. assuming following ordered index configuration { ... "declaringnodetypes" : "nt:unstructured", "direction" : "ascending", "propertynames" : "foobar", "type" : "ordered" ... } related lucene configuration { "jcr:primarytype" : "oak:queryindexdefinition", "compatversion" : 2, "type" : "lucene", "async" : "async", "indexrules" : { "jcr:primarytype" : "nt:unstructured", "nt:unstructured" : { "properties" : { "jcr:primarytype" : "nt:unstructured", "foobar" : { "propertyindex" : true, "name" : "foobar", "ordered" : true } } } } } details around configuration lucene index additional flags, please refer [index documetation](lucene.html). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/query.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## oak query oak index much content default jackrabbit 2. need create custom indexes necessary, much like traditional rdbmss. index specific query, repository traversed. is, query still work probably slow. * [the query engine](./query-engine.html) * [xpath grammar](./grammar-xpath.html) * [sql-2 grammar](./grammar-sql2.html) * [troubleshooting](./query-troubleshooting.html) * [flags](./flags.html) ### indexes 4 main types indexes available oak. type (eg: nodetype) please refer [query engine](./query-engine.html) documentation page. * [lucene](./lucene.html) * [elastic](./elastic.html) * [property](./property-index.html) * [solr](./solr.html) details indexing works (for index types): * [indexing](indexing.html) * [reindexing](indexing.html#reindexing) ### customisations * [change out-of-the-box index definitions](./ootb-index-change.html) * [machine translation search](./search-mt.html) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/query-engine.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <!-- toc created help: grep "^#.*$" src/site/markdown/query/query-engine.md | sed 's/#/ /g' | sed 's/\(#*\) \(.*\)/\1 * [\2](#\2)/g' --> ## query engine - [the query engine](#the-query-engine) - [overview](#overview) - [query processing](#query-processing) - [cost calculation](#cost-calculation) - [identifying nodes](#identifying-nodes) - [ordering](#ordering) - [iterating result set](#iterating-the-result-set) - [query options](#query-options) - [query option traversal](#query-option-traversal) - [query option offset / limit](#query-option-offset--limit) - [query option index tag](#query-option-index-tag) - [index selection policy](#index-selection-policy) - [compatibility](#compatibility) - [result size](#result-size) - [quoting](#quoting) - [equality path constraints](#equality-for-path-constraints) - [slow queries read limits](#slow-queries-and-read-limits) - [keyset pagination](#keyset-pagination) - [full-text queries](#full-text-queries) - [excerpts highlighting](#excerpts-and-highlighting) - [simpleexcerptprovider](#simpleexcerptprovider) - [native queries](#native-queries) - [similarity queries](#similarity-queries) - [spellchecking](#spellchecking) - [suggestions](#suggestions) - [facets](#facets) - [xpath sql-2 transformation](#xpath-to-sql-2-transformation) - [the node type index](#the-node-type-index) - [temporarily disabling index](#temporarily-disabling-an-index) - [deprecating indexes](#deprecating-indexes) - [the deprecated ordered index](#the-deprecated-ordered-index) - [index storage manual inspection](#index-storage-and-manual-inspection) - [sql-2 optimisation](#sql-2-optimisation) - [additional xpath sql-2 features](#additional-xpath-and-sql-2-features) - [temporarily blocking queries](#temporarily-blocking-queries) ## overview oak index much content default jackrabbit 2. need create custom indexes necessary, much like traditional rdbmss. index specific query, repository traversed. is, query still work probably slow. query indices defined `oak:index` node. ### query processing internally, query engine uses cost based query optimizer asks available query indexes estimated cost process query. uses index lowest cost. default, following indexes available: * property index indexed property. * full-text index based apache lucene / solr. * node type index (which based property index properties jcr:primarytype jcr:mixins). * traversal index iterates subtree. index efficiently process filter condition, nodes repository traversed given subtree. usually, data read index repository traversing query result. exceptions however, data read memory query executed. common case using `order by` clause index provide sorted result. cases paths results read far kept memory, order return duplicate results. case using `or` conditions two indexes used (internally `union` query executed). enable debug logging module `org.apache.jackrabbit.oak.query`, may see this: cost nodetype 1638354.0 cost property 2.0 cost traverse 3451100.0 means cost nodetype index _would_ 1638354.0, cost property index _would_ 2, cost traversal _would_ 3451100.0. index can't deal certain condition return cost "infinity". say traversal actually used, lists expected costs. query engine pick index lowest expected cost, (in case above) "property". expected cost traversal is, oak 1.0.x, really guess looking length path. oak 1.2 newer, "counter" index used (see mainly oak-1907). known issue this, add remove lot nodes loop, could end too-low cost, see oak-4065. #### cost calculation query index expected estimate worst-case cost query given filter. returned value 1 (very fast; lookup unique node) estimated number entries traverse, cursor would fully read, could theory one network round-trip disk read operation per node (this method may return lower number data known fully memory). returned value supposed estimate accurate. please note method called index whenever query run, method reasonably fast (not read data itself, least read much data). index implementation query data, return `infinity` (`double.positive_infinity`). #### identifying nodes index selected, query executed index. translation jcr query syntax query language supported index includes many constraints possible supported index. depending index definition mean constraints resolved index itself. case, query engine tries let index handle much constraints possible later executes remaining constraints [iterating result set](#iterating-the-result-set) retrieving nodes node store evaluating nodes constraints. retrieval, including non-matching nodes counted traversal. means despite use index additional traversal required constraints query executed index. matching index determined previous step, query engine executes query solely based traversing node store evaluating nodes constraints. #### ordering query requests ordered result set, query engine tries get already ordered result index; case index definition support requested ordering case traversal, query engine must execute ordering itself. achieve entire result set read memory sorted. consumes memory, takes time requires query engine read full result set even case limit setting would otherwise limit number results traversed. #### iterating result set query results implemented lazy iterators, result set read needed. next result requested, result iterator seeks potential nodes find next node matching query. seek process query engine reads filters potential nodes finds match. even query handled completely index, query engine needs check requesting session allowed read nodes. means final step every potential node must loaded node store, thus counting towards read limit (see [slow queries read limits](#slow-queries-and-read-limits)). ### query options query options, enforce usage indexes (failing query index), limit indexes considered set limit offset query. #### query option traversal default, queries without index log info level message follows (see oak-4888, since oak 1.6): traversal query (query without index): {statement}; consider creating index message logged index available, query potentially traverses many nodes. message logged index available, traversing cheap. setting jmx configuration `queryenginesettings.failtraversal` true, queries without index throw exception instead logging message. query itself, syntax `option(traversal {ok|fail|warn})` supported (at end statement, `order by`). override default setting, queries traverse well known number nodes (for example 10 20 nodes). supported xpath sql-2, follows: /jcr:root/oak:index/*[@type='lucene'] option(traversal ok) select * [nt:base] ischildnode('/oak:index') order name() option(traversal ok) #### query option offset / limit `@since oak 1.44.0 (oak-9740)` setting offset / limit query set limits offsets set query object. note, setting overridden settings made via `query#setoffset` `query#setlimit` methods. syntax `option(limit {num}, offset {num})` end statement, `order by` used conjunction option. supported xpath sql-2, follows: /jcr:root/oak:index/*[@type='lucene'] option(limit 100) select * [nt:base] ischildnode('/oak:index') order name() option(offset 19, limit 20) #### query option index tag `@since oak 1.7.4 (oak-937)` default, queries use index lowest expected cost (as relational databases). cases, needed specify index(es) considered query: * want ensure specific type index used specific type queries, example custom indexes used custom queries. * multiple lucene fulltext indexes different aggregation rules, index data overlaps. query, want specify aggregation rule use. * temporarily work around limitations index implementation, example incorrect cost estimation. use index tags, add `tags` (a multi-valued string property) index(es) choice, example: /oak:index/lucene/tags = [x, y] note index multiple tags, tag used multiple indexes. syntax limit query certain tag is: `<query> option(index tag <tagname>)`: /jcr:root/content//element(*, nt:file)[jcr:contains(., 'test')] option(index tag x) select * [nt:file] ischildnode('/content') contains(*, 'test') option(index tag [x]) query consider indexes contain specified tag (that is, possibly multiple indexes). query supports one tag only. query explicitly uses option, indexes considered (including indexes tags indexes without tags). tag name may contain characters `a-z, a-z, 0-9, _`. limitations: * currently supported indexes type `lucene` compatversion 2, type `property`. * indexes type `lucene`, adding adding changing property `tags`, need also set property `refresh` `true` (boolean), change applied. indexing required. * solr indexes, reference index, support tags yet. means still might return low cost, even tag match. * nodetype index partially supports feature: tag specified query, nodetype index used. however, tags nodetype index ignored currently. * currently way disable traversal way. expected cost traversal low (lower cost index), query traverse. avoid traversal, note indexes support cost overrides, traversal never used fulltext queries. #### index selection policy `@since oak 1.42.0 (oak-9587)` ensure index used `option(index tag <tagname>)` specified, certain index types support `selectionpolicy`. set value `tag`, index used queries specify `option(index tag x)`, `x` one tags index. feature allows safely add index, without risking existing queries specify index tag switch new index. limitations: * currently supported indexes type `lucene` compatversion 2, type `property`. * indexes type `lucene`, adding changing property `selectionpolicy`, need also set property `refresh` `true` (boolean), change applied. indexing required. ### compatibility #### result size nodeiterator.getsize(), versions jackrabbit 2.x returned estimated (raw) lucene result set size, including nodes accessible. default, oak this; either returns correct result size, -1. oak 1.2.x newer supports compatibility flag works similar way jackrabbit 2.x, returning estimate (see oak-2926). specially, query restrictions part used index considered calculating size. additionally, acls applied results, nodes visible current session still included count returned. such, count returned higher actual number results accurate count determined iterating results. works lucene `compatversion=2` right now, even enabled, getsize may still return -1 index used support feature. example code show work (where `test` common word index): string query = "//element(*, cq:page)[jcr:contains(., 'test')]"; query query = querymanager.createquery(qs, "xpath"); queryresult result = query.execute(); long size = result.getrows().getsize(); best configured via osgi configuration `fastquerysize` `org.apache.jackrabbit.oak.query.queryenginesettingsservice` (since oak 1.6.x), described oak-2977, since oak 1.3.x: using apache sling, add following line file `conf/sling.properties`, restart application: oak.query.fastresultsize=true oak-10424 (since oak 1.62), possible configure list principals fast result size enabled every query, using osgi configuration "sessionquerysettingsprovider" / "directcountsprincipals". #### quoting [special characters queries need escaped.](https://jackrabbit.apache.org/archive/wiki/jcr/encodingandescaping_115513396.html) however, compared jackrabbit 2.x, query parser generally strict invalid syntax. following query used work jackrabbit 2.x, oak, multiple way quote path used time: select * [nt:base] isdescendantnode(s, ["/libs/sling/config"]) instead, query needs be: select * [nt:base] isdescendantnode(s, [/libs/sling/config]) #### equality path constraints jackrabbit 2.x, following condition interpreted like condition: select * nt:base jcr:path = '/abc/%' therefore, query behaves exactly like used. oak, longer case, queries search exact path match. ### slow queries read limits slow queries logged follows: *warn* traversed 10000 nodes filter filter(query=select ...) consider creating index changing query case, index might need created, condition query might need changed take advantage existing index. queries traverse many nodes, read many nodes memory, cancelled. limits set runtime (also slow query running) using jmx, domain "org.apache.jackrabbit.oak", type "queryenginesettings", attribute names "limitinmemory" "limitreads". setting persisted, next restart, default values (unlimited) used. workaround, limits changed using system properties "oak.querylimitinmemory" "oak.querylimitreads". queries exceed one limits cancelled unsupportedoperationexception saying "the query read x nodes... avoid running memory, processing stopped." "limitreads" applies number nodes read query. applies whether index used. exact number nodes read query depends many factors, mainly query, query plan used, index configuration, access rights, nodes repository. result size query often much smaller number nodes read. example, query two conditions, `a=1 b=2`, index `a`, nodes `a=1` need read traversing result. nodes read set limit, exception thrown. query also path condition (for example descendants `/home`), index supports path conditions (which case property indexes, also lucene indexes `evaluatepathrestrictions` set), nodes given subtree read. "limitinmemory" applies nodes read memory, order sort result, order ensure node returned once. applies whether index used. example, query uses `order c`, index used query support ordering property, nodes match condition read memory first, even first node returned. property indexed order, lucene indexes order enabling `ordered` property. ensuring node returned once: needed queries contain `union` (it needed using `union all`). also needed query uses `or` conditions different properties. example, query uses `a=1 b=2`, conversion `union` would `select ... a=1 union select ... b=2`. query converted `union` indexes used, case separate indexes `a` `b`. xpath queries, conversion `union` always made, sql-2 queries conversion made `union` query lower expected cost. using `or` combination property, `a=1 a=2`, conversion `union` made. ### keyset pagination best limit result size hundred entries. read large result, keyset pagination used. note "offset" large values (more hundred) avoided, lead performance memory issues. keyset pagination refers ordering result set key column, paginate using column. requires ordered index key column. example: /jcr:root/content//element(*, nt:file) [@jcr:lastmodified >= $lastentry] order @jcr:lastmodified, @jcr:path first query, set `$lastentry` 0, subsequent queries, use last modified time last result. order index needed queries work efficiently, e.g.: /oak:index/fileindex - type = lucene - compatversion = 2 - async = async - includedpaths = [ "/content" ] - querypaths = [ "/content" ] + indexrules + nt:file + properties + jcrlastmodified - name = "jcr:lastmodified" - propertyindex = true - ordered = true notice multiple entries modified date might exist. application requires node processed once, additional logic required skip entries already seen (for modified date). good property use keyset pagination on, lowercase node name used. best start `$lastentry` empty string, subsequent run use lowercase version node name last entry. notice nodes may appear two query results, multiple nodes name. case, sql-2 needs used, xpath, escaping applied names. details function-based indexes, see [the function-based indexing documentation](lucene.html#function-based-indexing). select [jcr:path], * [nt:file] lower(name(a)) >= $lastentry isdescendantnode(a, '/content') order lower(name(a)), [jcr:path] /oak:index/fileindex - type = lucene - compatversion = 2 - async = async - includedpaths = [ "/content" ] - querypaths = [ "/content" ] + indexrules + nt:file + properties + lowercasename - function = "lower(name())" - propertyindex = true - ordered = true ### full-text queries full-text syntax supported jackrabbit oak superset jcr specification. default (that is, using lucene index `compatversion` 2), jackrabbit oak uses [apache lucene grammar fulltext search](https://lucene.apache.org/core/4_7_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html). [see also escape queries.](https://jackrabbit.apache.org/archive/wiki/jcr/encodingandescaping_115513396.html). however, words `and` `not` treated search terms, `or` supported keyword. instead `not`, use `-`. instead `and`, write terms next (instead `hello world`, write `hello world`). older lucene indexes (`compatversion` 1), following syntax supported within `contains` queries. subset apache lucene syntax: fulltextsearch ::= ::= { ' ' }* ::= term { ' ' term }* term ::= ['-'] { simpleterm | phraseterm } [ '^' boost ] simpleterm ::= word phraseterm ::= '"' word { ' ' word }* '"' boost ::= <number> please note `or` needs written uppercase. characters within words escaped using backslash. examples: jcr:contains(., 'jelly sandwich^4') jcr:contains(@jcr:title, 'find this') first example, word "sandwich" weight four times word "jelly." details boosting, see apache lucene documentation score boosting. compatibility jackrabbit 2.x, single quoted phrase queries currently supported. means query `contains(., "word ''hello world'' word")` supported. new applications rely feature. ### excerpts highlighting lucene index configured provide excerpts highlighting. see <a href="lucene.html#property_definitions">useinexcerpt</a> details configure excerpt generation. queries use excerpts, query needs use lucene index configured. queries also needs contain "excerpt" property, follows: /jcr:root/content//*[jcr:contains(., 'test')]/(rep:excerpt(.)) excerpt read using jcr api call `row.getvalue("rep:excerpt(.)")`. since oak version 1.10 (oak-7151), optionally property name specified query: /jcr:root/content//*[jcr:contains(., 'test')]/(rep:excerpt(@jcr:title) | rep:excerpt(.)) excerpt title read using `row.getvalue("rep:excerpt(@title)")`, excerpt node using (as before) `row.getvalue("rep:excerpt(.)")`. #### simpleexcerptprovider simpleexcerptprovider fallback mechanism excerpts highlighting. mechanism limitations, used really needed. simpleexcerptprovider independent index configuration. highlighting limited, example stopwords ignored. highlighting case insensitive since oak versions 1.2.30, 1.4.22, 1.6.12, 1.8.3, 1.10 (oak-7437). simpleexcerptprovider used reading excerpt query contain excerpt property, in: /jcr:root/content//*[jcr:contains(., 'test')] simpleexcerptprovider also used excerpt requested property specified query. example, using `row.getvalue("rep:excerpt(@title)")`, query contain property excerpt property, in: /jcr:root/content//*[jcr:contains(., 'test')]/(rep:excerpt(.)) simpleexcerptprovider also used queries use lucene index, query uses lucene index, excerpts configured there. ### native queries `@deprecated oak 1.46` take advantage features available full-text index implementations apache lucene apache lucene solr, called `native` constraints supported. constraints passed directly full-text index. supported xpath sql-2. xpath queries, name function `rep:native`, sql-2, `native`. first parameter index type (currently supported `solr` `lucene`). second parameter native search query expression. sql-2, selector name (if needed) first parameter, language. examples: //*[rep:native('solr', 'name:(hello world)')] select [jcr:path] [nt:base] native('solr', 'name:(hello world)') select [jcr:path] [nt:base] native(a, 'solr', 'name:(hello world)') also allows use solr [morelikethis](http://wiki.apache.org/solr/morelikethis) feature. example query is: select [jcr:path] [nt:base] native('solr', 'mlt?q=id:utf8test&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1') full-text implementation available, queries fail. ### similarity queries oak supports similarity queries using lucene solr indexes. example, following query return nodes similar content node /test/a: //element(*, nt:base)[rep:similar(., '/test/a')] compared jackrabbit 2.x, support rep:similar following limitations: full-text aggregation currently supported. ### spellchecking `@since oak 1.1.17, 1.0.13` oak supports spellcheck queries using lucene solr indexes. unlike queries, spellcheck queries return jcr `node` outcome queries text terms come content written jcr `properties`. example, following query return spellchecks (wrongly spelled) term `helo`: /jcr:root[rep:spellcheck('helo')]/(rep:spellcheck()) result query jcr `row` contain corrected terms, spellchecked used underlying index, special property named `rep:spellcheck()`. clients wanting obtain spellchecks could use following jcr code: `@until oak 1.3.10, 1.2.13` spellchecks returned flat. querymanager qm = ...; string xpath = "/jcr:root[rep:spellcheck('helo')]/(rep:spellcheck())"; queryresult result = qm.createquery(xpath, query.xpath).execute(); rowiterator = result.getrows(); string spellchecks = ""; (it.hasnext()) { spellchecks = it.getvalue("rep:spellcheck()").getstring() } `spellchecks` string would following pattern `\[[\w|\w]+(\,\s[\w|\w]+)*\]`, e.g.: [hello, hold] `@since oak 1.3.11, 1.2.14` spellcheck would returned per row. querymanager qm = ...; string xpath = "/jcr:root[rep:spellcheck('helo')]/(rep:spellcheck())"; queryresult result = qm.createquery(xpath, query.xpath).execute(); rowiterator = result.getrows(); list<string> spellchecks = new linkedlist<string>(); (it.hasnext()) { spellchecks.add(it.getvalue("rep:spellcheck()").getstring()); } either lucene solr configured provide spellcheck feature, see [enable spellchecking lucene](lucene.html#spellchecking) [enable spellchecking solr](solr.html#spellchecking) note spellcheck terms come already filtered according calling user privileges, users could see spellcheck corrections coming indexed content allowed read. ### suggestions `@since oak 1.1.17, 1.0.15` oak supports search suggestions using lucene solr indexes. unlike queries, suggest queries return jcr `node` outcome queries text terms come content written jcr `properties`. example, following query return search suggestions (e.g. user entered) term `in `: /jcr:root[rep:suggest('in ')]/(rep:suggest()) result query jcr `row` contain suggested terms, together score, suggested scored used underlying index, special property named `rep:suggest()`. clients wanting obtain suggestions could use following jcr code: `@until oak 1.3.10, 1.2.13` suggestions returned flat. querymanager qm = ...; string xpath = "/jcr:root[rep:suggest('in ')]/(rep:suggest())"; queryresult result = qm.createquery(xpath, query.xpath).execute(); rowiterator = result.getrows(); string suggestions = ""; (it.hasnext()) { suggestions = it.getvalue("rep:suggest()").getstring() } `suggestions` string would following pattern `\[\{(term\=)[\w|\w]+(\,weight\=)\d+\}(\,\{(term\=)[\w|\w]+(\,weight\=)\d+\})*\]`, e.g.: [{term=in 2015 red fox still fox,weight=1.5}, {term=in 2015 fox red, like mike's fox john's fox,weight=0.7}] `@since oak 1.3.11, 1.2.14` suggestion would returned per row. querymanager qm = ...; string xpath = "/jcr:root[rep:suggest('in ')]/(rep:suggest())"; queryresult result = qm.createquery(xpath, query.xpath).execute(); rowiterator = result.getrows(); list<string> suggestions = new linkedlist<string>(); (it.hasnext()) { suggestions.add(it.getvalue("rep:suggest()").getstring()); } either lucene solr configured provide suggestions feature, see [enable suggestions lucene](lucene.html#suggestions) [enable suggestions solr](solr.html#suggestions). note suggested terms come already filtered according calling user privileges, users could see suggested terms coming indexed content allowed read. ### facets `@since oak 1.3.14` oak support [facets](https://en.wikipedia.org/wiki/faceted_search). enabled (see details [lucene](lucene.html#facets) and/or [solr](solr.html#suggestions) indexes) facets retrieved properties (backed proper field lucene / solr) using following snippet: string sql2 = "select [jcr:path], [rep:facet(tags)] [nt:base] " + "where contains([jcr:title], 'oak')"); query q = qm.createquery(sql2, query.jcr_sql2); queryresult result = q.execute(); facetresult facetresult = new facetresult(result); set<string> dimensions = facetresult.getdimensions(); // { "tags" } list<facetresult.facet> facets = facetresult.getfacets("tags"); (facetresult.facet facet : facets) { string label = facet.getlabel(); int count = facet.getcount(); ... } nodes/rows still retrieved within queryresult object usual way. note retrieving facets affect result set query constraints. so, indexes resolve query constraints would considered resolving query. lucene indexes index must also index relevant properties faceting considered evaluating query. so, query like: select [rep:facet(jcr:title)] [nt:unstructured] resolved index indexing `nt:unstructured` nodes. following query used get facets nodes existing faceted proeprty: select [rep:facet(jcr:title)] [nt:unstructured] [jcr:title] null ### xpath sql-2 transformation support xpath query language, queries internally converted sql-2. every conversion logged `debug` level `org.apache.jackrabbit.oak.query.queryengineimpl` logger: org.apache.jackrabbit.oak.query.queryengineimpl parsing xpath statement: //element(*)[@sling:resourcetype = 'slingevent:lock')] org.apache.jackrabbit.oak.query.queryengineimpl xpath > sql2: select [jcr:path], [jcr:score], * [nt:base] [sling:resourcetype] = 'slingevent:lock' /* xpath: //element(*)[@sling:resourcetype = 'slingevent:lock' @lock.created < xs:datetime('2013-09-02t15:44:05.920+02:00')] */ _each transformed sql-2 query contains original xpath query comment._ converting xpath sql-2, `or` conditions automatically converted `union` queries, indexes used conditions form `a = 'x' b = 'y'`. ### node type index `nodetypeindex` implements `queryindex` using `propertyindexlookup`s `jcr:primarytype` `jcr:mixintypes` evaluate node type restriction filter. cost index sum costs `propertyindexlookup` queries `jcr:primarytype` `jcr:mixintypes`. ### temporarily disabling index temporarily disable index (for example testing), set index type `disabled`. please note index type set, index updated, enable again, might correct. specially important synchronous indexes. ### deprecating indexes index still needed backward compatibility, longer used queries, set property `deprecated` index definition. log warning "this index deprecated" index used queries. allow detect usage index application. ### deprecated ordered index index deprecated favour lucene property index. please refer [lucene index documentation](lucene.html) details. help migrating lucece index please refer to: [migrate ordered index](ordered-index-migrate.html) historical information around index please refer to: [ordered index](ordered-index.html). ### index storage manual inspection sometimes need inspect index content debugging (or pure curiosity). index content generally stored content index definition hidden nodes (this apply solr index). order able browse index content need low level repository tool allows nodestore level access. currently 2 options: oak-console (command line tool, works existing nodestore implementations) oak-explorer (gui based java swing, works segmentnodestore), available run modes [oak-run](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-run/readme.md) module structure index specific implementation subject change. worth mentioning _*propertyindex_ flavors store content unstructured nodes (clear readable text), _lucene_ index stored binaries, one would need export entire lucene directory local file system browse using dedicated tool. ### sql-2 optimisation @since 1.3.9 -doak.query.sql2optimisation enabled default 1.3.11 perform round optimisation `query` object obtained parsing sql-2 statement. example attempt conversion conditions union [oak-1617](https://issues.apache.org/jira/browse/oak-1617). disable provide `-doak.query.sql2optimisation=false` start-up. ### additional xpath sql-2 features oak implementation supports features part jcr specification: @since 1.5.12 union xpath sql-2 queries. examples: /jcr:root/(content|lib)/* /jcr:root/content//*[@a] | /jcr:root/lib//*[@b]) order @c select * [nt:base] issamenode(a, '/content') union select * [nt:base] issamenode(a, '/lib') xpath functions "fn:string-length" "fn:local-name". ### temporarily blocking queries @since 1.14.0 application code run bad queries read lot data consume lot memory. best solution fix application, however take time. queries blocked runtime using validator patterns, without immediately change application. validator patterns set inspected using jmx `queryenginesettingsmbean` follows: * `setqueryvalidatorpattern`: adds removes query pattern. * `queryvalidatorjson`: gets existing patterns, including often last execution occurred. adding new pattern, recommended first set `failquery` `false` verify pattern correct (only warning logged running matching queries). pattern correct, set `failquery` `true`. validator patterns stored repository `/oak:index/queryvalidator/<patternkey>` (nodetype e.g. `nt:unstructured`) follows: * `pattern`: regular expression query. alternatively, multi-valued string contains list exact parts query. * `failquery`: whether fail query (true) log warning (false). * `comment`: pattern comment. pattern set using multi-valued string, regular expression pattern constructed array texts. case, escaping needed. example patterns are: * `[ "select * from", "order [name]" ]`: queries start end given texts. * `"/jcr:root/var/acme/.*"`: queries match regular expression. patterns evaluated alphabetical order. read once, startup. see also [oak-8294](https://issues.apache.org/jira/browse/oak-8294) # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/lucene.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## lucene index * [new 1.6](#new-1.6) * [index definition](#index-definition) * [indexing rules](#indexing-rules) * [cost overrides](#cost-overrides) * [indexing rule inheritance](#indexing-rule-inheritence) * [property definitions](#property-definitions) * [evaluate path restrictions](#path-restrictions) * [include exclude paths indexing](#include-exclude) * [aggregation](#aggregation) * [analyzers](#analyzers) * [specify analyzer class directly](#analyzer-classes) * [create analyzer via composition](#analyzer-composition) * [codec](#codec) * [boost search relevancy](#boost) * [effective index definition](#stored-index-definition) * [generating index definition](#generate-index-definition) * [near real time indexing](#nrt-indexing) * [luceneindexprovider configuration](#osgi-config) * [tika config](#tika-config) * [mime type usage](#mime-type-usage) * [mime type mapping](#mime-type-mapping) * [non root index definitions](#non-root-index) * [function-based indexing](#function-based-indexing) * [dynamic boost](#dynamic-boost) * [native query index selection](#native-query) * [persisting indexes](#persisting-indexes) * [copyonread](#copy-on-read) * [copyonwrite](#copy-on-write) * [lucene index mbeans](#mbeans) * [active index files collection](#active-blob-collection) * [analyzing created lucene index](#luke) * [pre-extracting text binaries](#text-extraction) * [advanced search features](#advanced-search-features) * [suggestions](#suggestions) * [spellchecking](#spellchecking) * [facets](#facets) * [score explanation](#score-explanation) * [custom hooks](#custom-hooks) * [search similar feature vectors](#similar-fv) * [design considerations](#design-considerations) * [limits](#limits) * [lucene index vs property index](#lucene-vs-property) * [examples](#examples) * [a - simple queries](#simple-queries) * [b - queries structured content](#queries-structured-content) * [uc1 - find assets `status` `published`](#uc1) * [uc2 - find assets `status` `published` sorted last modified date](#uc2) * [uc3 - find assets comment contains _december_](#uc3) * [uc4 - find assets created david refer december](#uc4) * [uc5 - facets](#uc5) oak supports lucene based indexes support property constraint full text constraints. depending configuration lucene index used evaluate property constraints, full text constraints, path restrictions sorting. select * [nt:base] [assettype] = 'image' following index definition would allow using lucene index query ``` /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - type = "lucene" - compatversion = 2 - async = "async" + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + assettype - propertyindex = true - name = "assettype" ``` index definition node lucene-based index * must type `oak:queryindexdefinition` * must `type` property set __`lucene`__ * must contain `async` property set value `async`, sends index update process background thread _note compared [property index](query.html#property-index) lucene property index always configured async mode hence might lag behind reflecting current repository state performing query_ taking another example. support following query /jcr:root/content//*[jcr:contains(., 'text')] lucene index needs configured index properties /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - type = "lucene" - compatversion = 2 - async = "async" - includedpaths = ["/content"] - querypaths = ["/content"] + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + allprops - name = ".*" - isregexp = true - nodescopeindex = true ### <a name="new-1.6"></a> new 1.6 following new features 1.6 release * [near real time indexing](#nrt-indexing) * [effective index definition](#stored-index-definition) ### <a name="index-definition"></a> index definition lucene index definition consist `indexingrules`, `analyzers` , `aggregates` etc determine node properties indexed indexed. canonical index definition structure luceneindex (oak:queryindexdefinition) - type (string) = 'lucene' mandatory - async (string) = 'async' mandatory - codec (string) - compatversion (long) = 2 - evaluatepathrestrictions (boolean) = false - valueregex (string) - queryfilterregex (string) - includedpaths (string) multiple - querypaths (string) multiple = ['/'] - excludedpaths (string) multiple - maxfieldlength (long) = 10000 - refresh (boolean) - useifexists (string) - blobsize (long) = 32768 - functionname (string) - name (string) - indexpath (string) + indexrules (nt:unstructured) + aggregates (nt:unstructured) + analyzers (nt:unstructured) + tika (nt:unstructured) following config options defined index definition level type : required always `lucene`. async : required always `async`, [`async`, `nrt`]. codec : optional string property. : name [lucene codec](#codec) use compatversion : required integer property, needs set 2 : version 1 deprecated, new indexes always use version 2. version 1 support property restrictions index time aggregation. compatversion 2 full text index usually faster run queries. full text indexing compatversion 2, query time, access right parent (aggregate) node checked, access right child nodes checked. concern, aggregation used. evaluatepathrestrictions : optional boolean property defaults `false`. : enabled index evaluate [path restrictions](#path-restrictions) valueregex : optional string property : regular expression property value index definition. specified, properties would added index whose value matches regex defined property. queryfilterregex : optional string property : regular expression query text. property present index definition, queries whose search text match pattern still using index log warning. property specified, valueregex specified, property also used use case specified here. includedpaths : optional multi value property. defaults '/'. : list paths included index. used, 'querypaths' set value(s). see [path includes/excludes](#include-exclude) details. querypaths : optional multi value property. defaults '/'. : list paths index used perform queries. used, 'includedpaths' set value(s). see [path includes/excludes](#include-exclude) details. excludedpaths : optional multi value property. defaults empty. : list paths excluded indexing. see [path includes/excludes](#include-exclude) details. tags : optional multi value property. defaults empty. : list [tags index][index-tags]. selectionpolicy : optional string property. defaults empty. : [selection policy index][index-selection-policy]. [maxfieldlength][oak-2469] : numbers terms indexed per field. defaults 10000 refresh : optional boolean property. : used refresh stored index definition. see [effective index definition](#stored-index-definition) [useifexists][oak-7739] : optional string property : use index queries given node property exists. specially useful blue-green deployments, using composite node store. example, set `/libs/indexes/acme/@v1`, index used given property exists. repository property missing, index used. blue-green deployments, possible two versions application running time, different `/libs` folders. settings therefore allows enable disable index usage depending version use. (this index still updated even node / property exist, setting affects index usage queries.) option supported indexes type `lucene` `property`. `@since oak 1.10.0` [blobsize][oak-2201] : default value 32768 (32kb). : size bytes used splitting index files storing functionname : name used enable index usage [native query support](#native-query). name : deprecated. optional property. : captures name index used logging indexpath : deprecated. optional string property specify [index path](#copy-on-write). : path index definition repository. e.g. index definition specified `/oak:index/lucene` set path `indexpath` #### <a name="indexing-rules"></a> indexing rules indexing rules define types nodes properties indexed. index configuration define one `indexingrules` different nodetypes. fulltextindex - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + indexrules - jcr:primarytype = "nt:unstructured" + app:page + properties - jcr:primarytype = "nt:unstructured" + publisheddate - propertyindex = true - name = "jcr:content/publisheddate" + app:asset + properties - jcr:primarytype = "nt:unstructured" + imagetype - propertyindex = true - name = "jcr:content/metadata/imagetype" rules defined per nodetype rule one property definitions determine properties indexed. canonical index definition structure rulename (nt:unstructured) - inherited (boolean) = true - indexnodename (boolean) = false - includepropertytypes (string) multiple + properties (nt:unstructured) following config options defined index rule level inherited : optional boolean property defaults true : determines rule applicable exact match applied match done basis nodetype inheritance includepropertytypes : applicable index enabled fulltext indexing : full text index defaults include types : string array property types indexed. values one specified [propertytype names][1] <a name="index-node-name"></a> indexnodename : `@since oak 1.0.20, 1.2.5` : default false. set true index would also created node name. would enable faster evaluation queries involving constraints node name. example * _select [jcr:path] [nt:base] name() = 'kite'_ * _select [jcr:path] [nt:base] name() like 'kite%'_ * /jcr:root//kite * /jcr:root//*[jcr:like(fn:name(), 'kite%')] * /jcr:root//element(*, app:asset)[fn:name() = 'kite'] * /jcr:root//element(kite, app:asset) ##### <a name="cost-overrides"></a> cost overrides default, cost using index calculated follows: query, overhead one operation. entry index, cost one. following applies `compatversion` 2 only: use lower higher cost, set following optional properties index definition: - costperexecution (double) = 1.0 - costperentry (double) = 1.0 please note typically, settings need explicitly set. cost per execution overhead one query. cost per entry cost per node index. using 0.5 means cost half, means index would used often (that is, even different index similar cost). ##### <a name="indexing-rule-inheritence"></a>indexing rule inheritance `indexrules` defined per nodetype support nodetype inheritance. example indexing node indexer would look applicable indexrule node based _primarytype_. direct match found rule would used otherwise would look rule parent types. rules looked order entry `indexrules` node (indexrule node type `nt:unstructured` `orderable` child nodes) `inherited` set false rule rule would applicable exact match found ##### <a name="property-definitions"></a>property definitions index rule consist one property definition defined `properties`. order property definition node important properties based regular expressions. canonical property definition structure propnode (nt:unstructured) - name (string) - boost (double) = '1.0' - index (boolean) = true - useinexcerpt (boolean) = false - analyzed (boolean) = false - nodescopeindex (boolean) = false - ordered (boolean) = false - isregexp (boolean) = false - type (string) = 'undefined' - propertyindex (boolean) = false - notnullcheckenabled (boolean) = false - nullcheckenabled (boolean) = false - excludefromaggregation (boolean) = false - weight (long) = 5 - function (string) following details mentioned config options defined property definition level name : property name. defined, property name set node name. also set relative property, e.g., `jcr:content/metadata/color`. relative properties, one wildcard (`*`) supported instead node name: `*/color` aggregates values property `color` direct child nodes. `isregexp` true, property name regular expression. special properties "jcr:path", "jcr:score" indexed. path indexes using function-based index recent versions oak. isregexp : set true, property name interpreted regular expression, given definition applicable matching property names. expression must match '/'. * `^[^\/]*$` - matches properties node. * `jcr:content/metadata/.*` - property definition applicable properties child node `jcr:content/metadata` regular expression matches property names, intermediate nodes. `jcr:content/.*/.*` *not* index properties children `jcr:content`. [oak-5187][oak-5187] open improvement track supporting regular expression matching intermediate child nodes. boost : property included `nodescopeindex` defines boost done index value given property name. see [boost search relevancy](#boost) details index : determines property indexed. mostly useful fulltext index properties need _excluded_ getting indexed. useinexcerpt : controls whether value property used create excerpt. value property still full-text indexed set false, never show excerpt parent node. set true property value would stored separately within index causing index size increase. set true make use excerpt feature nodescopeindex : control whether value property part fulltext index. is, _jcr:contains(., 'foo')_ return nodes string property contains word foo. example * /jcr:root/content//element(*, app:asset)[jcr:contains(., 'image')]_ case aggregation properties would indexed node level default property type part `includepropertytypes`. however, explicit property definition provided would included `nodescopeindex` set true. note : index definition consists property nodescopeindex set true, index node name nodes (with node type matching child type one defined indexrule). could result large index size case indexrules broader node types nt:base. advisable use nodescopeindex broader node types absolutely needed support queries like _jcr:contains(., 'foo')_ analyzed : set true property used part `contains`. example * /jcr:root/content//element(*, app:asset)[jcr:contains(@type, 'image')]_ * /jcr:root/content//element(*, app:asset)[jcr:contains(jcr:content/metadata/@format, 'image')]_ <a name="ordered"></a> ordered : property used _order by_ clause perform sorting set true. set true property used perform sorting increases index size. example * /jcr:root/content//element(*, app:asset)[jcr:contains(@type, 'image')] order @size_ * /jcr:root/content//element(*, app:asset)[jcr:contains(@type, 'image')] order jcr:content/@jcr:lastmodified_ refer [lucene based sorting][oak-2196] details. note supported single value property. enabling multi value property would cause indexing fail. ordering supported properties, functions. order name node, use following query index definition: select * [sling:folder] ischildnode('/content') order name() + sling:folder + properties (nt:unstructured) + nodename (nt:unstructured) - function (string) = 'name()' - propertyindex (boolean) = true - ordered (boolean) = true type : jcr property type. one `date`, `boolean`, `double` , `string`, `long`, `binary`. mostly inferred indexed value. however cases property type used consistently across various nodes would recommended specify type explicitly. binary indexed associated property `jcr:mimetype`. propertyindex : whether index property used equality conditions, ordering, null conditions. notnullcheckenabled : since 1.1.8 : property checked _is null_ set true. reduce index size, enabled nodetypes generic. * /jcr:root/content//element(*, app:asset)[jcr:content/@excludefromsearch] details, see [is null support][oak-2234]. nullcheckenabled : since 1.0.12 : property checked _is null_ set true. enabled nodetypes generic leads index entry nodes type property set. * /jcr:root/content//element(*, app:asset)[not(jcr:content/@excludefromsearch)] would better use query checks property existence property set specific values queries make use index without extra storage cost. details, see [is null support][oak-2517]. excludefromaggregation : since 1.0.27, 1.2.11 : set true, property excluded aggregation [oak-3981][oak-3981] function : since 1.5.11, 1.6.0, 1.42.0 : function, [function-based indexing](#function-based-indexing). dynamicboost : since 1.28.0 : enable [dynamic boost](#dynamic-boost) <a name="weight"></a> weight : allows override estimated number entries per value, affects cost index. : since 1.6.3: `weight` set `0`, property assumed reduce cost. queries contain _only_ condition use index. see [oak-5899][oak-5899] details. : since 1.7.11: `weight` set `10`, estimated number unique entries 10. means, cost reduced factor 10, queries contain condition. see [oak-6735][oak-6735] details. : since 1.10: default value `5`. see [oak-7379][oak-7379] details. sync : since 1.8.0, [oak-6535] : changes content available index soon committed. requires "propertyindex=true". relative properties notnullcheckenabled supported. : see [hybrid indexes][hybrid-index] details. unique : since 1.8.0, [oak-6535] : requires "sync=true". enforces unique property values content. : see [hybrid indexes][hybrid-index] details. <a name="property-names"></a>**property names** property name one following 1. simple name - like _assettype_ etc. used properties defined directly indexed node 2. relative name - like _jcr:content/metadata/title_. used properties defined relative node indexed. 3. regular expression - like _.*_. used property whose name match given pattern indexed. also used relative properties like _jcr:content/metadata/dc:.*$_ indexes property names starting _dc_ node relative path _jcr:content/metadata_ 4. string `:nodename` - special case indexes node name virtual property node indexed. setting along `nodescopeindex=true` akin setting `indexnodename=true` indexing rule (`@since oak 1.3.15, 1.2.14`). ordering supported. ordering, use `function=name()` instead. ##### <a name="path-restrictions"></a> evaluate path restrictions lucene index provides support evaluating path restrictions natively. consider query like select * [app:asset] isdescendantnode(a, [/content/app/old]) contains(*, 'white') default, index would return node _contain white_ query engine would filter nodes _/content/app/old_. perform slow lots nodes path. speed queries one enable `evaluatepathrestrictions` lucene index index would return nodes _/content/app/old_. enabling feature would incur cost terms slight increase index size. refer [oak-2306][oak-2306] details. ##### <a name="include-exclude"></a> include exclude paths indexing `@since oak 1.0.14, 1.2.3` sometimes, nodes certain paths indexed (`includedpaths`). `includedpaths` used, `querypaths` set value(s). `excludedpaths` `includedpaths` *don't* affect index selection logic query. path restrictions queries checked `querypaths`. follow index definition causes nodes `/content` `/home` indexed: /oak:index/abc - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - includedpaths = ["/content", "/home"] - querypaths = ["/content", "/home"] sometimes, certain path excluded (`excludedpaths`), e.g. transient system data. application stores logs `/var/log`, data supposed indexed, excluded, setting `excludedpaths` `["/var/log"]`. however, typically better set `includedpaths` `querypaths`. <a name="query-paths"></a> **querypaths** need ensure given index gets used query specific path restrictions need specify paths `querypaths`. cases, `querypaths` used, `includedpaths` set value, reduce index size. example `includedpaths` `querypaths` set `["/content", "/home"]`. index would used queries `/content` well queries `/home`. used queries without path restriction, queries `/tmp`. **usage** key points consider using `includedpaths`, `querypaths`, `excludedpaths`, 1. `includedpaths` `querypaths` typically set value(s). also, query use matching path restriction. way, index size reduced, surprises queries show data stored repository. 2. data indexes needed. shrinks index size, speeds indexing. 3. use `includedpaths`, `excludedpaths`, `querypaths` caution. wrong paths excluded, nodes might show query results should. 4. sub-root index definitions (e.g. `/test/oak:index/index-def-node`) - `excludedpaths` `includedpaths` need relative path index defined for. condition supposed put `/test/a` index definition `/test/oak:index/index-def-node` `/a` needs put value `excludedpaths` `includedpaths`. hand, `querypaths` remains absolute path. so, example above, `querypaths` would get value `/test/a`. see [oak-2599][oak-2599] details. #### <a name="aggregation"></a>aggregation sometimes useful include contents descendant nodes single node easier search content scattered across multiple nodes. oak allows define index aggregates based relative path patterns primary node types. changes aggregated items cause main item reindexed, even modified. <b>please note aggregation support nodetype inheritance. support aggregation child nodetypes, need explicitly defined separate aggregation configuration index definition.</b> aggregation configuration defined `aggregates` node index configuration. following example creates index aggregate nt:file includes content jcr:content node: fulltextindex - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + aggregates + nt:file + include0 - path = "jcr:content" default, properties whose type matches `includepropertytypes` part child nodes per aggregation pattern included indexing. excluding certain properties define property definition relative path set `excludefromaggregation` `true`. properties would excluded fulltext index given nodetype multiple includes defined. aggregate definition structure specific include rule aggregatenodeinclude (nt:unstructured) - path (string) mandatory - primarytype (string) - relativenode (boolean) = false following details mentioned config options defined part aggregation include. (refer [oak-2268][oak-2268] implementation details) path : path pattern include. example * `jcr:content` - name explicitly specified * `*` - child node depth 1 * `*/*` - child node depth 2 primarytype : restrict included nodes certain type. restriction would applied last node given path + aggregates + nt:file + include0 - path = "jcr:content" - primarytype = "nt:resource" relativenode : boolean property indicates query performed specific node example following content + space.txt (app:asset) + renditions (nt:folder) + original (nt:file) + jcr:content (nt:resource) - jcr:data query like select * [app:asset] contains([renditions/original/*], "pluto") following index configuration would required fulltextindex - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + aggregates + nt:file + include0 - path = "jcr:content" + app:asset + include0 - path = "renditions/original" - relativenode = true + indexrules - jcr:primarytype = "nt:unstructured" + app:asset **aggregation recursion** performing aggregation aggregation rules applied node aggregated. example aggregating _app:asset_ _renditions/original/*_ aggregated aggregation rule would applied. case _renditions/original_ _nt:file_ aggregation rule applicable _nt:file_ would applied. logic might result recursion. (see [jcr-2989][jcr-2989] details). case `reaggregatelimit` set aggregate definition node defaults 5 + aggregates + app:asset - reaggregatelimit (long) = 5 + include0 - path = "renditions/original" - relativenode = true #### <a name="analyzers"></a>analyzers analyzer specified, `oakanalyzer` used, uses apache lucene `standardtokenizer`, `lowercasefilter`, `worddelimiterfilter` following options: `generate_word_parts`, `stem_english_possessive`, `generate_number_parts`. `@since oak 1.5.5, 1.4.7, 1.2.19` unless custom analyzer explicitly configured (as documented below), built-in analyzer configured include original term well (`preserve_original`). controlled setting boolean property `indexoriginalterm` `analyzers` node: /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" + analyzers - indexoriginalterm = true (see [oak-4516][oak-4516] details) `@since oak 1.2.0` analyzers configured part index definition via `analyzers` node. default analyzer configured via `analyzers/default` node ``` + sampleindex - jcr:primarytype = "oak:queryindexdefinition" + analyzers + default ... ``` ##### <a name="analyzer-classes"></a>specify analyzer class directly box analyzer used configured directly ``` + analyzers + default - class = "org.apache.lucene.analysis.standard.standardanalyzer" - lucenematchversion = "lucene_47" (optional) ``` confirm specific version specify via `lucenematchversion` otherwise oak would use default version depending version lucene shipped with. one also provide stopword file via `stopwords` `nt:file` node analyzer node ``` + analyzers + default - class = "org.apache.lucene.analysis.standard.standardanalyzer" - lucenematchversion = "lucene_47" (optional) + stopwords (nt:file) ``` ##### <a name="analyzer-composition"></a>create analyzer via composition analyzers also composed based `tokenizers`, `tokenfilters` `charfilters`. similar support provided solr [configure analyzers xml][solr-analyzer]. case, analyzer `class` property needs removed. `tokenizer` needs specified, components (e.g. `charfilters`, `synonym`) optional. ``` + analyzers + default + charfilters (nt:unstructured) // filters needs ordered + htmlstrip + mapping + tokenizer - name = "standard" + filters (nt:unstructured) // filters needs ordered + lowercase + stop - words = "stop1.txt, stop2.txt" + stop1.txt (nt:file) + stop2.txt (nt:file) + porterstem + synonym - synonyms = "synonym.txt" + synonym.txt (nt:file) ``` #### examples convert umlauts using ascii folding, use following. (ascii folding converts characters basic latin possible. includes umlauts, characters accents, on.) ``` + analyzers + default + tokenizer - name = "standard" + filters (nt:unstructured) // filters needs ordered + asciifolding ``` stemming support, use: ``` 1. use analyzer stemming included default e.g. englishanalyzer porterstemfilter. + analyzers + default - class = "org.apache.lucene.analysis.en.englishanalyzer" 2. use stemming part analyzer composition (using org.apache.lucene.analysis.hunspell.hunspellstemfilterfactory) + analyzers + default + tokenizer - name = "standard" + filters (nt:unstructured) // filters needs ordered + lowercase + hunspellstem - dictionary = "en_gb.dic" - affix = "en_gb.aff" + en_gb.aff (nt:file) + en_gb.dic (nt:file) ``` points note 1. name filters, charfilters tokenizer formed removing factory suffixes. * org.apache.lucene.analysis.standard.standardtokenizerfactory -> `standard` * org.apache.lucene.analysis.charfilter.mappingcharfilterfactory -> `mapping` * org.apache.lucene.analysis.core.stopfilterfactory -> `stop` 2. config parameter required factory specified property node * factory requires load file e.g. stop words file file content provided via creating child `nt:file` node filename * property value must type `string`. jcr type used like array integer etc 3. analyzer-chain processes text nodes well text passed query. so, take care mapping configuration (e.g. synonym mappings) factor chain analyzers. e.g common mistake synonym mapping would `domain => range` there's lower case filter configured well (see example above). setup indexed value `domain` would actually get indexed `range` (mapped value lower case filter it) query `range` would actually query `range` (due lower case filter) give result (as might expected). easy work-around example could lower case mappings i.e. use `domain => range`. 4. precedence: specifying analyzer class directly precedence analyzer configuration composition. want configure analyzers composition analyzer class must specified. in-build analyzer least precedence comes play custom analyzer configured. similarly, setting `indexoriginalterm` analyzers node modify behavior in-built analyzer also works custom analyzer configured. 5. determine list supported factories look lucene javadocs * [tokenizerfactory](https://lucene.apache.org/core/4_7_1/analyzers-common/org/apache/lucene/analysis/util/tokenizerfactory.html) * [charfilterfactory](https://lucene.apache.org/core/4_7_1/analyzers-common/org/apache/lucene/analysis/util/charfilterfactory.html) * [filterfactory](https://lucene.apache.org/core/4_7_1/analyzers-common/org/apache/lucene/analysis/util/tokenfilterfactory.html) 6. oak support composing analyzer based lucene. helpful docs around * https://cwiki.apache.org/confluence/display/solr/understanding+analyzers%2c+tokenizers%2c+and+filters * https://cwiki.apache.org/confluence/display/solr/charfilterfactories * https://wiki.apache.org/solr/analyzerstokenizerstokenfilters#specifying_an_analyzer_in_the_schema 7. defining synonyms: * synonym file, lines like _plane, airplane, aircraft_ refer tokens mutual synoyms whereas lines like _plane => airplane_ refer _one way_ synonyms, plane expanded airplane vice versa * continuing point above, since oak would use analyzer indexing well querying, using one-way synonyms practical way supported moment. * special characters escaped * multi word synonyms need particular attention (see https://lucidworks.com/post/solution-for-multi-term-synonyms-in-lucenesolr-using-the-auto-phrasing-tokenfilter/) note currently one analyzer configured per index. possible specify separate analyzer query index time currently. #### <a name="codec"></a>codec name [lucene codec][lucene-codec] use. default, index involves fulltext indexing oak lucene uses `oakcodec` disables compression. due index size may grow large. enable compression set codec `lucene46` /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - codec = "lucene46" refer [oak-2853][oak-2853] details. enabling `lucene46` codec would lead smaller compact indexes. #### <a name="boost"></a>boost search relevancy `@since oak 1.2.5` fulltext indexing enabled internally oak would create fulltext field consists text extracted various fields i.e. fields `nodescopeindex` `true`. allows search like `/jcr:root/content//*[jcr:contains(., 'foo')]` perform search across indexable field containing foo (see [contains function][jcr-contains] details) certain cases desirable nodes searched term present specific property ranked higher (come earlier search result) compared node searched term found property. cases possible boost specific text contributed individual property. meaning title field boosted description, search result would node coming earlier searched term found title field work ensure property (which need preferred) `nodescopeindex` `analyzed` set true. addition, specify `boost` property give higher weightage values found specific property note even without setting explicit `boost` setting `nodescopeindex` `analyzed` true would improve search result due way [lucene scoring][boost-faq]. internally oak would create separate lucene fields jcr properties would perform search across fields. details refer [oak-3367][oak-3367] ``` + indexrules - jcr:primarytype = "nt:unstructured" + app:asset + properties - jcr:primarytype = "nt:unstructured" + description - nodescopeindex = true - analyzed = true - name = "jcr:content/metadata/jcr:description" + title - analyzed = true - nodescopeindex = true - name = "jcr:content/metadata/jcr:title" - boost = 2.0 ``` index config search like ``` select * [app:asset] contains(., 'batman') ``` would node (of type app:asset) come first _batman_ found _jcr:title_. nodes search text found field like aggregated content would come later #### <a name="stored-index-definition"></a>effective index definition `@since oak 1.6` prior oak 1.6 index definition defined content directly used query execution indexing. possible index definition modified incompatible way would start affecting query execution leading inconsistent result. since oak 1.6 index definitions cloned upon reindexing stored hidden structure. incremental indexing query plan calculation stored index definition used. changes done post reindex index definition would applicable reindex done. would cases changes index definition require reindex. e.g. new property introduced content model prior content exist property safe index property without reindex. cases user must follow steps 1. make required changes 2. set `refresh` property `true` index definition node 3. save changes next async indexing cycle flag would picked stored index definition would refreshed. _post flag would automatically removed log message would logged_. would also see log message like ``` luceneindexeditorcontext - refreshed index definition [/oak:index/fooluceneindex] ``` simplify troubleshooting stored index definition accessed `luceneindexmbean` via `getstoredindexdefinition` operation. would dump string representation stored nodestate ![dump stored index definition](lucene-index-mbean-dump-index.png) feature disabled setting osgi property `disablestoredindexdefinition` `luceneindexproviderservice` true. disable change index definition would start effecting query plans refer [oak-4400][oak-4400] details. #### <a name="generate-index-definition"></a> generating index definition simplify generating index definition suitable evaluating certain set queries make use http://oakutils.appspot.com/generate/index. provide set queries would generate suitable index definitions queries. note would still need tweak definition aggregation, path include exclude etc data cannot inferred query ### <a name="nrt-indexing"></a> near real time indexing `@since oak 1.6` refer [near realtime indexing](indexing.html#nrt-indexing) details ### <a name="osgi-config"></a>luceneindexprovider configuration runtime aspects oak lucene support configured via osgi configuration. configuration needs done pid `org.apache .jackrabbit.oak.plugins.index.lucene.luceneindexproviderservice` ![osgi configuration](lucene-osgi-config.png) enablecopyonreadsupport : enable copying lucene index local file system improve query performance. see [copy indexes read](#copy-on-read) enablecopyonwritesupport : enable copying lucene index local file system improve indexing performance. see [copy indexes write](#copy-on-write) localindexdir : directory used copy index files local file system. specified `enablecopyonreadsupport` enabled prefetchindexfiles : prefetch index files copyonread enabled. enabled new lucene index files would copied locally index made available queryengine (1.0.17,1.2.3) debug : boolean value. defaults `false` : enabled lucene logging would integrated slf4j ### <a name="tika-config"></a>tika config `@since oak 1.0.12, 1.2.3` oak lucene uses [apache tika][tika] extract text binary content + tika - maxextractlength (long) = -10 + config.xml (nt:file) + jcr:content - jcr:data = //config xml binary content oak uses [default config][default-config]. use custom config specify config file via `tika/config.xml` node index config. [maxextractlength][oak-2470] : limits number characters extracted tika parse. negative value indicates multiple `maxfieldlength` positive value used * maxextractlength = -10, maxfieldlength = 10000 -> actual value = 100000 * maxextractlength = 1000 -> actual value = 1000 #### <a name="mime-type-usage"></a>mime type usage binary indexed associated property `jcr:mimetype` defined supported tika. default, indexer uses [typedetector][oak-2895] instead default `defaultdetector` relies `jcr:mimetype` pick right parser. #### <a name="mime-type-mapping"></a>mime type mapping `@since oak 1.7.7` certain circumstances, may desired pass value `jcr:mimetype` property tika parser. example, would necessary binary application-specific mime type, parsable standard tika parser generic type. support cases, create node structure `tika/mimetypes` node following mime type structure, e.g. + tika + mimetypes (nt:unstructured) + application (nt:unstructured) + vnd.mycompany-document (nt:unstructured) - mappedtype = application/pdf index indexing binary type `application/vnd.mycompany-document` force tika treat binary type `application/pdf`. ### <a name="non-root-index"></a>non root index definitions lucene index definition defined location repository need always defined root. example query involves path restrictions like select * [app:asset] isdescendantnode(a, '/content/companya') [format] = 'image' create required index definition say `assetindex` `/content/companya/oak:index/assetindex`. case index would contain data subtree `/content/companya` ### <a name="function-based-indexing"></a>function-based indexing `@since oak 1.5.11, 1.6.0, 1.42.0` function-based indexes example allow search (or order by) lower case version property. details see [oak-3574][oak-3574] [oak-9625][oak-9625]. example using index definition uppercaselastname - function = "fn:upper-case(@lastname)" - propertyindex = true - ordered = true allows search for, order by, lower case version property "lastname". example functions: * fn:upper-case(@data) * fn:lower-case(test/@data) * fn:lower-case(fn:name()) * fn:lower-case(fn:local-name()) * fn:string-length(test/@data) * first([alias]) * upper([data]) * lower([test/data]) * lower(name()) * lower(localname()) * length([test/data]) * length(name()) * name() * path() indexing multi-valued properties supported. relative properties supported (except ".." "."). range conditions supported ('>', '>=', '<=', '<'). functions path(), first(), name() require oak version 1.42.0 newer. ### <a name="dynamic-boost"></a>dynamic boost `@since oak 1.28.0` enable feature, add property indexed, e.g.: dynamicboost - dynamicboost = true (boolean) - propertyindex = true - name = jcr:content/metadata/predictedtags/.* (string) - isregexp = true (boolean) way, node `jcr:content/metadata/predictedtags` added (for indexed node type), dynamic boost used. read child nodes node (`jcr:content/metadata/predictedtags`) node read: * name (string) * confidence (double) add field, token "name" property, boost set confidence. replacement `indexfieldprovider`. see also [oak-8971][oak-8971]. ### <a name="native-query"></a>native query index selection `@deprecated oak 1.46` oak query engine supports native queries like /jcr:root/content//*[rep:native('lucene', 'name:(hello world)')] multiple lucene based indexes enabled system need make use specific lucene index like `/oak:index/assetindex` specify index name via `functionname` attribute index definition. example assetindex definition like luceneassetindex - jcr:primarytype = "oak:queryindexdefinition" - type = "lucene" ... - functionname = "lucene-assetindex" executing following query would ensure lucene index `assetindex` used /jcr:root/content//*[rep:native('lucene-assetindex', 'name:(hello world)')] ### <a name="persisting-indexes"></a>persisting indexes filesystem default, lucene indexes stored `nodestore`. required stored file system directly - jcr:primarytype = "oak:queryindexdefinition" - type = "lucene" ... - persistence = "file" - path = "/path/to/store/index" store lucene index file system, lucene index definition node, set property `persistence` `file`, set property `path` directory index stored. start reindexing setting `reindex` `true`. note setup would non cluster `nodestore`. backend `nodestore` supports clustering index data would accessible cluster nodes ### <a name="copy-on-read"></a>copyonread lucene indexes stored `nodestore`. oak lucene provides custom directory implementation enables lucene load index `nodestore`. might cause performance degradation `nodestore` storage remote. case oak lucene provide `copyonreaddirectory` copies index content local directory enables lucene make use local directory based indexes performing queries. runtime various details related copy read features exposed via `copyonreadstats` mbean. indexes jcr path e.g. `/oak:index/assetindex` would copied `<index dir>/<hash jcr path>`. determine mapping local index directory jcr path refer mbean details ![copyonreadstats](lucene-index-copier-mbean.png) details refer [oak-1724][oak-1724]. feature enabled via [lucene index provider service configuration](#osgi-config) _with oak 1.0.13 feature enabled default._ ### <a name="copy-on-write"></a>copyonwrite `@since oak 1.0.15, 1.2.3` similar _copyonread_ feature oak lucene also supports _copyonwrite_ enable faster indexing first buffering writes local filesystem transferring remote storage asynchronously indexing proceeds. provide better performance hence faster indexing times. **indexpath** _not required oak 1.6 , 1.4.7+_ speed indexing copyonwrite would also need set `indexpath` index definition path index repository. e.g. index defined `/oak:index/lucene` value `indexpath` set `/oak:index/lucene`. would enable indexer perform read indexing process locally thus avoid costly read remote. details refer [oak-2247][oak-2247]. feature enabled via [lucene index provider service configuration](#osgi-config) ### <a name="mbeans"></a>lucene index mbeans oak lucene registers jmx bean `luceneindex` provide details index content e.g. size index, number documents present index etc ![lucene index mbean](lucene-index-mbean.png) mbean supports retrieving index fields terms using `getfieldtermsinfo(java.lang.string indexpath, java.lang.string field, int max)` `getfieldtermsinfo(java.lang.string indexpath, java.lang.string field, java.lang.string fieldtype, int max)` methods. first method always assumes return type string, second method allows specify return type either: - string (value: string, java.lang.string) - long (value: long, java.lang.long) - integer (value: int, java.lang.integer) example: ![lucene index mbean - getfieldtermsinfo](lucene-index-mbean-getfieldtermsinfo.png) ### <a name="active-blob-collection"></a>active index files collection `@since oak 1.7.12` lucene indexing moderately active repository creates lot deleted files. creates excessive load usual mark-sweep garbage collection. since, blobs related indexed data explicitly made unique, safe delete soon index node referring blob deleted. active deletion index blobs implemented [oak-2808][oak-2808]. feature periodically deletes blobs deleted index. 'period' controlled `deletedblobscollectioninterval` property [lucene index provider service configuration](#osgi-config). feature would delete blobs deleted certain time. task actually purge blobs datastore performed jmx operation. jmx bean operation `org.apache.jackrabbit.oak:name=active lucene files collection,type=activedeletedblobcollector` operation `startactivecollection()`. disable active deletion certain installation, set system property `oak.active.deletion.disabled`. ### <a name="luke"></a>analyzing created lucene index [luke] handy development diagnostic tool, accesses already existing lucene indexes allows display index details. oak, lucene index files directly accessible. enable analyzing index files via luke follow mentioned steps 1. download luke version includes matching lucene jars used oak. oak 1.0.8 release lucene version used 4.7.1. download jar [here](https://github.com/dmitrykey/luke/releases) $wget https://github.com/dmitrykey/luke/releases/download/4.7.0/luke-with-deps.jar 2. use [oak console][oak-console] dump lucene index files directory. use `lc dump` command follows: $ java -jar oak-run-*.jar console /path/to/oak/repository apache jackrabbit oak 1.1-snapshot jackrabbit oak shell (apache jackrabbit oak 1.1-snapshot, jvm: 1.7.0_55) type ':help' ':h' help. ------------------------------------------------------------------------- /> lc info /oak:index/lucene index size : 74.1 mb number documents : 235708 number deleted documents : 231 /> lc dump info /> lc dump /path/to/dump/index/lucene /oak:index/lucene copying lucene indexes [/path/to/dump/index/lucene] copied 74.1 mb 1.209 /> lc dump /path/to/dump/index/slingalias /oak:index/slingalias copying lucene indexes [/path/to/dump/index/lucene-index/slingalias] copied 8.5 mb 218.7 ms /> 3. afterwards, open index via luke. oak lucene uses [custom codec][oak-1737]. oak-lucene jar needs included luke classpath display index details $ java -xx:maxpermsize=512m -cp luke-with-deps.jar:oak-lucene-1.0.8.jar org.getopt.luke.luke luke ui shown access various details. ### <a name="text-extraction"></a>pre-extracting text binaries refer [pre-extraction via oak-run](pre-extract-text.html). ### <a name="advanced-search-features"></a>advanced search features #### <a name="suggestions"></a>suggestions `@since oak 1.1.17, 1.0.15` order use lucene index perform search suggestions, index definition node (the one type `oak:queryindexdefinition`) needs `compatversion` set `2`, one property nodes, depending use case, need property `useinsuggest` set `true`, setting controls properties terms used suggestions taken. configuration done, default, lucene suggester updated every 10 minutes changed setting property `suggestupdatefrequencyminutes` `suggestion` node index definition node different value. _note till oak 1.3.14/1.2.14, `suggestupdatefrequencyminutes` setup index definition node itself. still supported backward compatibility, separate `suggestion` node preferred._ sample configuration suggestions based terms contained `jcr:description` property. ``` /oak:index/lucene-suggest - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + suggestion - suggestupdatefrequencyminutes = 20 + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + jcr:description - propertyindex = true - analyzed = true - useinsuggest = true ``` `@since oak 1.3.12, 1.2.14` index analyzer used perform fine grained suggestions, e.g. single words (whereas default suggest configuration returns entire property values, see [oak-3407]: https://issues.apache.org/jira/browse/oak-3407). analyzed suggestions enabled setting "suggestanalyzed" property true, e.g.: ``` /oak:index/lucene-suggest - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + suggestion - suggestupdatefrequencyminutes = 20 - suggestanalyzed = true ``` _note till oak 1.3.14/1.2.14, `suggestanalyzed` setup index definition node itself. still supported backward compatibility, separate `suggestion` node preferred._ setting `useinsuggest=true` property definition `name=:nodename` would add node names suggestion dictionary (see [property name](#property-names) node name indexing) since, oak 1.3.16/1.2.14, little support exists queries `isdescendantnode` constraint subset suggestions sub-tree. requires `evaluatepathrestrictions=true` index definition. e.g. ``` select rep:suggest() [nt:base] suggest('test') isdescendantnode('/a/b') ``` ``` /jcr:root/a/b//[rep:suggest('in 201')]/(rep:suggest()) ``` note, subset done filtering top 10 suggestions. so, possible get suggestions subtree query, top 10 suggestions part subtree. details look [oak-3994] related issues. #### <a name="spellchecking"></a>spellchecking `@since oak 1.1.17, 1.0.13` order use lucene index perform spellchecking, index definition node (the one type `oak:queryindexdefinition`) needs `compatversion` set `2`, one property nodes, depending use case, need property `useinspellcheck` set `true`, setting controls properties terms used spellcheck corrections taken. sample configuration spellchecking based terms contained `jcr:title` property. since oak 1.3.11/1.2.14, suggestion would returned per row. ``` /oak:index/lucene-spellcheck - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + jcr:title - propertyindex = true - analyzed = true - useinspellcheck = true ``` since, oak 1.3.16/1.2.14, little support exists queries `isdescendantnode` constraint subset suggestions sub-tree. requires `evaluatepathrestrictions=true` index definition. e.g. ``` select rep:suggest() [nt:base] suggest('test') isdescendantnode('/a/b') ``` ``` /jcr:root/a/b//[rep:suggest('in 201')]/(rep:suggest()) ``` note, subset done filtering top 10 spellchecks. so, possible get results subtree query, top 10 spellchecks part subtree. details look [oak-3994] related issues. #### <a name="facets"></a>facets `@since oak 1.3.14` lucene property indexes also used retrieving facets, order property _facets_ must set _true_ property definition. ``` /oak:index/lucene-with-facets - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + tags - facets = true - propertyindex = true ``` specific facet related features lucene property index configured separate _facets_ node index definition. `@since oak 1.5.15` no. facets retrieved configurable via _topchildren_ property, defaults 10. ``` /oak:index/lucene-with-more-facets - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + facets - topchildren = 100 + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + tags - facets = true - propertyindex = true ``` default, acl checks always performed facets lucene property index. secure (no information leakage possible), slow. _secure_ configuration property allows configure facet counts performed. `@since oak 1.6.16, 1.8.10, 1.9.13` `secure` property string allowed values `secure`, `statistical` `insecure` - `secure` default value. `secure` boolean property maintain compatibility `false` maps `insecure` `true` (default time) maps `secure`. following configuration options supported: * `secure` (the default) means results query checked access permissions. facets counts returned index reflect accessible given user. query result therefore reflects information user access rights for. slow, specially large result set. * `insecure` means facet counts reported stored index, without performing access rights checks. setting may allow users infer existence content access. recommended use setting either index guaranteed contain data public (e.g. public subtree repository), information sensitive. * `statistical` means data sampled randomly (default `1000` configurable via `samplesize`), acl checks performed sample. facet counts returned proportional percentage accessible samples checked acl. warning: setting potentially leaks repository information user runs query may see. must used either index guaranteed contain data public (e.g. public subtree repository), leaked information sensitive. note [beauty sampling](https://onlinecourses.science.psu.edu/stat100/node/16/) sample size `1000` error rate 3% 95% confidence, acls evenly distributed sampled data. however, often acls evenly distributed. also, low rate accessible documents decreases chances reach average rate. sense expectation error rate, here's errors looked like different scenarios test runs sample size 1000 error averaged 1000 random runs scenario. ``` |-----------------|-----------------------|------------------------| | result set size | %age accessible nodes | avg error 1000 runs | |-----------------|-----------------------|------------------------| | 2000 | 5 | 5.79 | | 5000 | 5 | 9.99 | | 10000 | 5 | 10.938 | | 100000 | 5 | 11.13 | | | | | | 2000 | 25 | 2.4192004 | | 5000 | 25 | 3.8087976 | | 10000 | 25 | 4.096 | | 100000 | 25 | 4.3699985 | | | | | | 2000 | 50 | 1.3990011 | | 5000 | 50 | 2.2695997 | | 10000 | 50 | 2.5303981 | | 100000 | 50 | 2.594599 | | | | | | 2000 | 75 | 0.80360085 | | 5000 | 75 | 1.1929348 | | 10000 | 75 | 1.4357346 | | 100000 | 75 | 1.4272015 | | | | | | 2000 | 95 | 0.30958 | | 5000 | 95 | 0.52715933 | | 10000 | 95 | 0.5109484 | | 100000 | 95 | 0.5481065 | |-----------------|-----------------------|------------------------| ``` ![error rate plot](../img/facets-statistical-error-rate-plot.png) notice error rate increase large result set sizes flattens around 10000 results. also, note even 50% results accessible, error rate averages less 3%. so, cases, sampling size 1000 give fairly decent estimation facet counts. chance setup error rates intolerable, sample size configured _samplesize_ property _facets_ configuration node. error rates generally inversely proportional `sample-size`. so, reduce error rate 1/2 sample size needs increased 4 times. canonical example `statistical` configuration would look like: ``` /oak:index/lucene-with-statistical-facets + facets - secure = "statistical" - samplesize = 1500 + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + tags - facets = true - propertyindex = true ``` see [query-engine](query-engine.html#facets) regarding query evaluate facets alongwith. also check examples queries required index definitions faceting [use case 5](#uc5). #### <a name="score-explanation"></a>score explanation `@since oak 1.3.12` lucene supports [explanation scores][score-explanation] selected query using virtual column `oak:scoreexplanation`. e.g. `select [oak:scoreexplanation], * [nt:base] foo='bar'` _note showing explanation score expensive. so, feature used debug purposes only_. #### <a name="custom-hooks"></a>custom hooks `@since oak 1.3.14` following features deprecated: osgi environment, implementations `indexfieldprovider` `fulltextquerytermsprovider` `org.apache.jackrabbit.oak.plugins.index.lucene.spi` (see javadoc [here][oak-lucene]) called indexing querying documented javadocs. ### <a name="similar-fv"></a>search similar feature vectors oak lucene index currently supports _rep:similar_ queries via _morelikethis_ text properties, allows search similar nodes looking texts. capability extends _rep:similar_ support feature vectors, typically used represent binary content like images, order search similar nodes looking vectors. order index jcr properties holding vector values similarity search, either form blobs form texts, index definition rule property _useinsimilarity_ parameter set _true_. result, (re)indexing, vector indexed approximate nearest neighbour search possible, requiring brute force nearest neighbour search entire set indexed vectors. default, another property feature vector similarity search, called _similarityrerank_, set _true_ order allow reranking top 15 results using brute force nearest neighbour. therefore, first iteration approximate nearest neighbour search performed obtain possibly relevant results (expecting high recall), brute force nearest neighbour top 15 search results performed improve precision (see [oak-7824](https://issues.apache.org/jira/browse/oak-7824), [oak-7962](https://issues.apache.org/jira/browse/oak-7962), [oak-8119](https://issues.apache.org/jira/browse/oak-8119)). improvement accuracy similarity search results nodes feature vectors also properties holding text values used keywords tags well describe feature vector contents, _similaritytags_ configuration set _true_ properties (see [oak-8118](https://issues.apache.org/jira/browse/oak-8118)). see also [oak-7575](https://issues.apache.org/jira/browse/oak-7575). `@since oak 1.8.8` ### <a name="design-considerations"></a>design considerations lucene index provides quite features meet various query requirements. defining index definition consider following aspects 1. query uses different path restrictions keeping restrictions make use `evaluatepathrestrictions` 2. query performs sorting explicit property definition property sorting performed set `ordered` true property 3. query based specific nodetype define `indexrules` nodetype 4. aim precise index configuration indexes right amount content based query requirement. index precise would smaller would perform better. 5. **make use nodetype achieve _cohesive_ index**. would allow multiple queries make use index also evaluation multiple property restrictions natively lucene 6. **[non root indexes](#non-root-index)** - query always perform search certain paths create index definition paths only. might helpful multi tenant deployment tenant data stored specific repository path queries made path. fact, recommended use single index properties indexed related. would enable lucene index evaluate much property restriction possible natively (which faster) also save storage cost incurred storing node path. 7. use features required - certain features provided lucene index incur extra cost terms storage space enabled. example enabling `evaluatepathrestrictions`, `ordering` etc. enable option make use features enable properties. `ordering` enabled sorting performed properties `evaluatepathrestrictions` enabled going specify path restrictions. 8. **avoid overlapping index definition** - overlapping index definition indexing nodetype different `includedpaths` `excludedpaths`. index selection logic make use `includedpaths` `excludedpaths` index selection. index selection done cost basis `querypaths`. multiple definition type would cause ambiguity index selection may lead unexpected results. instead, single index definition type. following analogy might helpful people coming rdbms world. treat nodetype table db direct relative properties columns table. various property definitions considered index columns. ### <a name="limits"></a>limits apache lucene version currently used oak limit 2^31 documents per index ([this includes lucene version 6](http://lucene.apache.org/core/6_5_0/core/org/apache/lucene/codecs/lucene62/package-summary.html#limitations)). larger index needed, please use apache solr, limit. ### <a name="examples"></a>examples look [generating index definition](#generate-index-definition) tooling details simplify generating index definition given set queries #### <a name="simple-queries"></a>a - simple queries many cases query purely based specific property restricted specific nodetype ``` select * [nt:base] isdescendantnode([/content/public/platform]) s.code = 'draft' ``` following index definition would allow using lucene index query ``` /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" - evaluatepathrestrictions = true + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + code - propertyindex = true - name = "code" ``` definition * indexes `code` property present node * supports evaluation path restriction i.e. `isdescendantnode([/content/public/platform])` via `evaluatepathrestrictions` * single indexrule `nt:base` queries specify explicit nodetype restriction another query like ``` select * [nt:base] s.status = 'done' ``` either add another property definition create new index definition altogether. default, prefer club indexes together ``` /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" - evaluatepathrestrictions = true + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + code - propertyindex = true - name = "code" + status - propertyindex = true - name = "status" ``` taking another example. lets say perform range query like ``` select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [offtime] > cast('2015-04-06t02:28:33.032-05:00' date) ``` also clubbed index definition ``` /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" - evaluatepathrestrictions = true + indexrules - jcr:primarytype = "nt:unstructured" + nt:base + properties - jcr:primarytype = "nt:unstructured" + code - propertyindex = true - name = "code" + status - propertyindex = true - name = "status" + offtime - propertyindex = true - name = "offtime" ``` #### <a name="queries-structured-content"></a>b - queries structured content queries previous examples based mostly unstructured content nodetype restrictions applied. however, many cases nodes queried confirm certain structure. example, following content ``` /content/dam/assets/december/banner.png - jcr:primarytype = "app:asset" + jcr:content - jcr:primarytype = "app:assetcontent" + metadata - dc:format = "image/png" - status = "published" - jcr:lastmodified = "2009-10-9t21:52:31" - app:tags = ["properties:orientation/landscape", "marketing:interest/product"] - size = 450 - comment = "image december launch" - jcr:title = "december banner" + xmpmm:history + 1 - softwareagent = "adobe photoshop" - author = "david" + renditions (nt:folder) + original (nt:file) + jcr:content - jcr:data = ... ``` content like queried multiple ways. lets take first query <a name="uc1"></a> **uc1 - find assets `status` `published`** ``` select * [app:asset] a.[jcr:content/metadata/status] = 'published' ``` following index definition would created ``` /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + indexrules - jcr:primarytype = "nt:unstructured" + app:asset + properties - jcr:primarytype = "nt:unstructured" + status - propertyindex = true - name = "jcr:content/metadata/status" ``` index definition * indexes nodes type `app:asset` **only** * indexes relative property `jcr:content/metadata/status` nodes <a name="uc2"></a> **uc2 - find assets `status` `published` sorted last modified date** ``` select * [app:asset] a.[jcr:content/metadata/status] = 'published' order a.[jcr:content/metadata/jcr:lastmodified] desc ``` enable query index definition needs updated following ``` + app:asset + properties - jcr:primarytype = "nt:unstructured" + status - propertyindex = true - name = "jcr:content/metadata/status" + lastmodified - propertyindex = true - name = "jcr:content/metadata/jcr:lastmodified" - ordered = true - type = date ``` index definition * `jcr:content/metadata/jcr:lastmodified` marked **`ordered`** enabling support _order by_ evaluation i.e. sorting properties * property type set `date` * indexes `status` `jcr:lastmodified` <a name="uc3"></a> **uc3 - find assets comment contains _december_** ``` select * [app:asset] contains([jcr:content/metadata/comment], 'december') ``` enable query index definition needs updated following ``` + app:asset + properties - jcr:primarytype = "nt:unstructured" + comment - name = "jcr:content/metadata/comment" - analyzed = true ``` index definition * `jcr:content/metadata/comment` marked **`analyzed`** enabling evaluation `contains` i.e. fulltext search * `propertyindex` enabled property going used perform equality check <a name="uc4"></a> **uc4 - find assets created david refer december ** ``` select * [app:asset] contains(., 'december david') ``` want create fulltext index assets. would index properties `app:asset` including relative nodes. enable need make use [aggregation](#aggregation) ``` /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - compatversion = 2 - type = "lucene" - async = "async" + aggregates + app:asset + include0 - path = "jcr:content" + include1 - path = "jcr:content/metadata" + include2 - path = "jcr:content/metadata/*" + include3 - path = "jcr:content/metadata/*/*" + include4 - path = "jcr:content/renditions" + include5 - path = "jcr:content/renditions/original" + nt:file + include0 - path = "jcr:content" + indexrules - jcr:primarytype = "nt:unstructured" + app:asset - includepropertytypes = ["string", "binary"] + properties - jcr:primarytype = "nt:unstructured" + comment - propertyindex = true - nodescopeindex = true - name = "jcr:content/metadata/comment" ``` index definition * indexes `string` `binary` properties part fulltext index via **`includepropertytypes`** * `aggregates` defined various relative paths like _jcr:content_, _jcr:content/metadata_, _jcr:content/renditions/original_ etc. rules properties like _banner.png/metadata/comment_, _banner.png/metadata/xmpmm:history/1/author_ get indexed part fulltext index _banner.png_ node. * inclusion _jcr:content/renditions/original_ would lead aggregation _jcr:content/renditions/original/jcr:content/jcr:data_ property also aggregation logic would apply rules `nt:file` aggregating `original` node * aggregation would include default properties part **`includepropertytypes`**. however, property explicit property definition provided like `comment` `nodescopeindex` would need set true definition would allow fulltext query performed. more. suppose want give preference nodes fulltext term found `jcr:title` compared field. cases `boost` fields ``` + indexrules - jcr:primarytype = "nt:unstructured" + app:asset + properties - jcr:primarytype = "nt:unstructured" + comment - propertyindex = true - nodescopeindex = true - name = "jcr:content/metadata/comment" + title - propertyindex = true - nodescopeindex = true - name = "jcr:content/metadata/jcr:title" - boost = 2.0 ``` ##### <a name="uc5"></a>uc5 - facets unconstrained queries facets like ``` select [rep:facet(title)] [app:asset] /jcr:root//element(*, app:asset)/(rep:facet(title)) select [rep:facet(title)], [rep:facet(tags)] [app:asset] /jcr:root//element(*, app:asset)/(rep:facet(title) | rep:facet(tags)) ``` would require index `app:asset` containing nodes type. that, turn, means either index needs fulltext index needs indexing `jcr:primarytype` property. following definitions would work case: ``` + /oak:index/index1 - ... + aggregates + app:asset + include0 - path = "jcr:content" + indexrules + app:asset + properties + title - facets = true + tags - facets = true - propertyindex = true + /oak:index/index2 - ... + indexrules + app:asset + properties + title - facets = true - nodescopeindex = true + tags - facets = true - propertyindex = true + /oak:index/index3 - ... + indexrules + app:asset + properties + nodetype - propertyindex = true - name = jcr:primarytype + title - facets = true + tags - facets = true ``` another thing note facets facet counts derived lucene index. immediately obvious, implies constraint query **not** get evaluated index going return incorrect facet counts constraints would get filtered _after_ collecting counts index. so, following queries require correspondingly listed indexes: ``` select rep:facet(title) [app:asset] isdescendantnode('/some/path') + /oak:index/index2 - ... - evaluatepathrestrictions = true + indexrules + app:asset + properties + title - facets = true - propertyindex = true ``` ``` select rep:facet(title) [app:asset] contains(., 'foo') + /oak:index/index2 - ... + indexrules + app:asset + properties + title - facets = true - propertyindex = true - nodescopeindex = true ``` ``` select rep:facet(title) [app:asset] [title] null + /oak:index/index2 - ... + indexrules + app:asset + properties + title - facets = true - propertyindex = true ``` [1]: https://s.apache.org/jcr-2.0-javadoc/constant-values.html#javax.jcr.propertytype.typename_string [oak-1724]: https://issues.apache.org/jira/browse/oak-1724 [oak-1737]: https://issues.apache.org/jira/browse/oak-1737 [oak-2005]: https://issues.apache.org/jira/browse/oak-2005 [oak-2196]: https://issues.apache.org/jira/browse/oak-2196 [oak-2201]: https://issues.apache.org/jira/browse/oak-2201 [oak-2234]: https://issues.apache.org/jira/browse/oak-2234 [oak-2247]: https://issues.apache.org/jira/browse/oak-2247 [oak-2268]: https://issues.apache.org/jira/browse/oak-2268 [oak-2306]: https://issues.apache.org/jira/browse/oak-2306 [oak-2463]: https://issues.apache.org/jira/browse/oak-2463 [oak-2469]: https://issues.apache.org/jira/browse/oak-2469 [oak-2470]: https://issues.apache.org/jira/browse/oak-2470 [oak-2517]: https://issues.apache.org/jira/browse/oak-2517 [oak-2599]: https://issues.apache.org/jira/browse/oak-2599 [oak-2808]: https://issues.apache.org/jira/browse/oak-2808 [oak-2853]: https://issues.apache.org/jira/browse/oak-2853 [oak-2892]: https://issues.apache.org/jira/browse/oak-2892 [oak-2895]: https://issues.apache.org/jira/browse/oak-2895 [oak-3367]: https://issues.apache.org/jira/browse/oak-3367 [oak-3574]: https://issues.apache.org/jira/browse/oak-3574 [oak-3981]: https://issues.apache.org/jira/browse/oak-3981 [oak-3994]: https://issues.apache.org/jira/browse/oak-3994 [oak-4400]: https://issues.apache.org/jira/browse/oak-4400 [oak-4516]: https://issues.apache.org/jira/browse/oak-4516 [oak-5187]: https://issues.apache.org/jira/browse/oak-5187 [oak-5899]: https://issues.apache.org/jira/browse/oak-5899 [oak-6535]: https://issues.apache.org/jira/browse/oak-6535 [oak-6735]: https://issues.apache.org/jira/browse/oak-6735 [oak-7379]: https://issues.apache.org/jira/browse/oak-7379 [oak-7739]: https://issues.apache.org/jira/browse/oak-7739 [oak-8971]: https://issues.apache.org/jira/browse/oak-8971 [oak-9625]: https://issues.apache.org/jira/browse/oak-9625 [luke]: https://code.google.com/p/luke/ [tika]: http://tika.apache.org/ [oak-console]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-run#console [jcr-2989]: https://issues.apache.org/jira/browse/jcr-2989?focusedcommentid=13051101 [solr-analyzer]: https://wiki.apache.org/solr/analyzerstokenizerstokenfilters#specifying_an_analyzer_in_the_schema [default-config]: https://github.com/apache/jackrabbit-oak/blob/trunk/oak-lucene/src/main/resources/org/apache/jackrabbit/oak/plugins/index/lucene/tika-config.xml [lucene-codec]: https://lucene.apache.org/core/4_7_1/core/org/apache/lucene/codecs/codec.html [tika-download]: https://tika.apache.org/download.html [oak-run-tika]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-run#tika [jcr-contains]: https://s.apache.org/jcr-1.0-spec/6.6.5.2_jcr_contains_function.html [boost-faq]: https://wiki.apache.org/lucene-java/lucenefaq#how_do_i_make_sure_that_a_match_in_a_document_title_has_greater_weight_than_a_match_in_a_document_body.3f [score-explanation]: https://lucene.apache.org/core/4_6_0/core/org/apache/lucene/search/indexsearcher.html#explain%28org.apache.lucene.search.query,%20int%29 [oak-lucene]: http://www.javadoc.io/doc/org.apache.jackrabbit/oak-lucene/ [index-tags]: https://jackrabbit.apache.org/oak/docs/query/query-engine.html#query_option_index_tag [index-selection-policy]: https://jackrabbit.apache.org/oak/docs/query/query-engine.html#index_selection_policy [hybrid-index]: https://jackrabbit.apache.org/oak/docs/query/hybrid-index.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/property-index.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## property index useful whenever query property constraint full-text: select * [nt:base] [jcr:uuid] = $id define property index, add index definition node that: * must child node `/oak:index`. * must type `oak:queryindexdefinition`. * `type` (string) must property set "property". * `propertynames` (name, multi-valued): property indexed. multi-valued property, must empty. usually contains _one_ property name. nodes _any_ properties stored index. recommended index one property per index. (if multiple properties indexed within one index, index contains nodes either one properties, make query less efficient, make query pick wrong index.) optionally specify: * `declaringnodetypes` (name, multi-valued): index applies certain node type. * `unique` (boolean): set `true`, uniqueness constraint property added. ensure set declaringnodetypes, otherwise nodes repository affected (which likely want), able version node. first 100 characters used check uniqueness. means, first 100 characters value need different; not, trying store rejected exception "uniqueness constraint violated". applies storing; querying, characters considered. * `includedpaths` (string, multi-valued): paths included ('/' set). since oak version 1.4 (oak-3263). index used query path restriction excluded, part included paths. * `excludedpaths` (string, multi-valued): paths index excluded (none set). since oak version 1.4 (oak-3263). index used query path restriction excluded, part included paths. * `valuepattern` (string) regular expression indexed values. index used equality conditions value matches pattern, "in(...)" queries values match pattern. index used "like" conditions. since oak version 1.7.2 (oak-4637). * `valueexcludedprefixes` index used equality conditions value start given prefix, prefix start value, similarly "in(...)" conditions, similarly "like" conditions. "in(...)" queries values match pattern. since oak version 1.7.2 (oak-4637). * `valueincludedprefixes` index used equality conditions value starts given prefix, similarly "in(...)" conditions, similarly "like" conditions. since oak version 1.7.2 (oak-4637). * `entrycount` (long): estimated number path entries index, override cost estimation (a high entry count means high cost). * `keycount` (long), estimated number keys index, override cost estimation (a high key count means lower cost low key count means high cost searching specific keys; effect searching "is null"). * `reindex` (boolean): set `true`, full content re-indexed. take long time, run synchronously storing index (except async index). see "reindexing" details. * `useifexists` (string), use index queries given node property exists. specially useful blue-green deployments, using composite node store. example, set `/libs/indexes/acme/@v1`, index used given property exists. repository property missing, index used. blue-green deployments, possible two versions application running time, different `/libs` folders. settings therefore allows enable disable index usage depending version use. (this index still updated even node / property exist, setting affects index usage queries.) option supported indexes type `lucene` `property`. since oak version 1.10.0 (oak-7739). example: { nodebuilder index = root.child("oak:index"); index.child("uuid") .setproperty("jcr:primarytype", "oak:queryindexdefinition", type.name) .setproperty("type", "property") .setproperty("propertynames", "jcr:uuid") .setproperty("declaringnodetypes", "mix:referenceable") .setproperty("unique", true) .setproperty("reindex", true); } simplify use one existing `indexutils#createindexdefinition` helper methods: { nodebuilder index = indexutils.getorcreateoakindex(root); indexutils.createindexdefinition(index, "myprop", true, false, immutablelist.of("myprop"), null); } #### <a name="reindexing"></a> reindexing usually, reindexing needed configuration index changed, index contain different data. example, reindexing needed property indexed changed, nodetype added __`declaringnodetypes`__, __`includedpaths`__ changed. strictly needed less data indexed, example nodetype removed. however, save space, might make sense reindex even case. typically, query return expected result, reindexing help; likely, reason somewhere else found, disabling index tried first. reindexing property index happens synchronously setting __`reindex`__ flag __`true`__. means first #save call generate full repository traversal purpose building index content might take long time. asynchronous reindexing property index available oak-1456. way works pushing property index updates background job indexing process done, property definition switched back synchronous updates mode. enable async reindex behaviour need first set __`reindex-async`__ __`reindex`__ flags __`true`__ (call #save). verify initial setup worked refreshing index definition node looking __`async`__ = __`async-reindex`__ property. next need start dedicated background job via jmx call __`propertyindexasyncreindex#startpropertyindexasyncreindex`__ mbean. example: { nodebuilder index = root.child("oak:index"); index.child("property") .setproperty("reindex-async", true) .setproperty("reindex", true); } recovering failed async reindex special care needs taken wrt. created checkpoint __`async`__ property. checkpoint released via __`checkpointmanager`__ mbean, __`async`__ property needs manually deleted also setting __`reindex`__ flags __`true`__ make sure index returns consistent state, sync head revision. #### cost estimation running query, property index reports estimated cost query engine, query engine picks index lowest cost (cost-based query optimization). algorithm calculate estimated cost roughly follows (a bit simplified): * cost infinity (so index never used) condition contains fulltext constraint, applicable restriction, wrong nodetype, path filtering (`includedpaths` / `excludedpaths`) match query. * nodetype index, cost sum cost `jcr:primarytype` lookup (if primary type known), plus cost `jcr:mixintypes` lookup (if known). * otherwise, cost based overhead (which 2), plus estimated number entries. * "x null" condition, estimated number entries either configured `entrycount` or, set, approximate number entries index. approximation "order magnitude" estimation (morris' algorithm). * unique index "x = 1" condition, estimated number entries either 0 1 (depending whether key found). * non-unique index "x = 1" condition, `entrycount` `keycount` set, setting used estimate number entries. not, approximate number entries key read (maintained using morris algorithm). addition that, path condition used scale estimated count depending approximate number nodes subtree versus approximate number entries repository, using approximation available via `counter` index. example, query path restriction "/content/products/t-shirts" property restriction "color = 'red'", index property "color", entry count approximation read index. let's say 10'000 value. approximate number nodes subtree "/content/products/t-shirts" read (let's say 20'000), approximate number nodes repository (let's say 1 million). therefore, estimated number entries scaled (divided 50) 10'000 200. estimated cost therefore 202, due overhead 2. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/hybrid-index.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## hybrid index * [new 1.6](#new-1.6) * [synchronous index usecases](#synchronous-index-usecases) * [unique indexes](#unique-indexes) * [property indexes](#property-indexes) * [drawbacks current property indexes](#drawbacks-of-current-property-indexes) * [proposal](#proposal) * [index definition](#index-definition) * [index storage](#index-storage) * [unique indexes](#unique-indexes-definition) * [property indexes](#property-indexes-definition) * [index pruner](#index-pruner) * [query evaluation](#query-evaluation) ### <a name="new-1.6"></a>new 1.6 oak 1.6 ([oak-4412](#oak-4412)), add support near real time (nrt) limited support sync indexes. [oak-6535](#oak-6535), add support sync property indexes. see also [oakathon august 2017 presentationhybrid index v2.pdf](#hybrid-index-v2.pdf) ### <a name="synchronous-index-usecases"></a>synchronous index usecases synchronous indexes required following use-cases: #### <a name="unique-indexes"></a>unique indexes unique indexes like uuid index, principal name index, need ensured indexed value unique across whole repository commit. indexed value already exists, e.g. principal name already exist, commit fail. this, need synchronous index, get updated part commit itself. #### <a name="property-indexes"></a>property indexes depending application requirements query results may be: * eventually consistent - changes eventually gets reflected query results. * consistent - change immediately gets reflected query results. cases, example user-driven search, eventual consistent search result work fine, hence async indexes used. nrt indexes (oak-4412), changes done user get reflected soon search results. however, cases need support fully consistent search results. assume component maintains cache nodes type app:component, uses observation listener listen changes nodes type app:component, upon finding changes, rebuilds cache queriying nodes. cache correct, needs ensured query results consistent session associated listener. otherwise may miss new component, later request cache component would fail. use-cases, required indexes synchronous results provided index consistent. ### <a name="drawbacks-of-current-property-indexes"></a>drawbacks current property indexes oak support synchronous property indexes, used meet use-cases. however current implementation certain drawbacks: * slow reads remote storage - property indexes stores normal nodestate hence reading remote storage like mongo performs poorly (with prefetch, oak-9780, improved). * storage overhead - final storage overhead larger, specially remote storage nodestate mapped 1 document. (on hand, temporary disk usage lucene indexes might higher node stores, due write amplification lucene.) --- ### <a name="proposal"></a>proposal overcome drawbacks still meet synchronous index requirements, implement hybrid index indexes content stored using property index (for recent entries) lucene indexes (for older entries): * store recently added index content normal property index. * part async indexer, store content lucene index. * later prune property index content (parts indexed lucene). * query union query results property index lucene indexes (with caveats). #### <a name="index-definition"></a>index definition synchronous index support needs enabled via index definition: * set sync true property definition needs indexed sync way ``` /oak:index/assettype - jcr:primarytype = "oak:queryindexdefinition" - type = "lucene" - async = ["async"] + indexrules + nt:base + properties + resourcetype - propertyindex = true - name = "assettype" - sync = true ``` unique indexes set unique i.e. true: ``` /oak:index/uuid - jcr:primarytype = "oak:queryindexdefinition" - type = "lucene" - async = ["async"] + indexrules + nt:base + properties + uuid - propertyindex = true - name = "jcr:uuid" - unique = true ``` ### <a name="index-storage"></a>index storage property index content stored hidden nodes index definition nodes. storage structure similar property indexes changes. #### <a name="unique-indexes-definition"></a>unique indexes ``` /oak:index/assettype + :data //stores lucene index files + :property-index + uuid + <value 1> - entry = [/indexed-content-path] - jcr:created = 1502274302 //creation time millis + 49652b7e-becd-4534-b104-f867d14c7b6c - entry = [/jcr:system/jcr:versionstorage/63/36/f8/6336f8f5-f155-4cbc-89a4-a87e2f798260/jcr:rootversion] ``` here: * :property-index - hidden node property indexes stored various properties marked sync. * unique indexes, entry also timestamp later used pruning. #### <a name="property-indexes-definition"></a>property indexes ``` /oak:index/assettype + :data //stores lucene index files + :property-index + resourcetype - head = 2 - previous = 1 + 1 - jcr:created = 1502274302 //creation time millis - lastupdated = 1502284302 + type1 + libs + login + core - match = true + <value> + <mirror indexed path> + 2 - jcr:created = 1502454302 + type1 + ... ``` create new buckets index values simplifies pruning. new buckets get created successful async indexer run, older buckets get removed. bucket structure similar tje content mirror store strategy. indexed property, keep head property refers current active bucket. changed indexpruner. addition, previous bucket refer last active bucket. run indexpruner: * check indexstatsmbean#lastindexedtime changed last known time. * changed then: * create new bucket incrementing current head value. * set previous current head. * set head new head value. * set lastupdated previous bucket now. * remove buckets. require head previous bucket overlap content previous. #### <a name="index-pruner"></a>index pruner index pruner periodic task prunes index content. uses indexstatsmbean#lastindexedtime determine upto time async indexer indexed repository, removes entries property index older time. * property index - pruning done creating new bucket removing older bucket. * unique index - prunining done iterating current indexed content removing older ones. ### <a name="query-evaluation"></a>query evaluation query side, perform union query 2 index types: union cursor created consist of: * lucenepathcursor - primary cursor backed lucene index. * propertyindexcursor - union path cursor current head previous bucket. #### open points multiple property definition lucene index marked sync query involves constraints 1, property index picked clear. ## attachments: [hybrid index v2.pdf (application/pdf)](#hybrid-index-v2.pdf) [oak-4412]: https://issues.apache.org/jira/browse/oak-4412 [hybrid-index-v2.pdf]:https://jackrabbit.apache.org/archive/wiki/jcr/attachments/115513516/115513517.pdf # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/pre-extract-text.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # <a name="pre-extract-text"></a>pre-extracting text binaries * [pre-extracting text binaries](#pre-extract-text) * [a - oak run pre-extraction command](#a-oak-run-command) * [step 1 - oak-run setup](#a-setup) * [step 2 - generate csv file](#a-generate-csv) * [step 3 - perform text extraction](#a-perform-text-extraction) * [1. using tika](#a-tika-text-extraction) * [2. using dumped indexed data](#a-index-text-extraction) * [b - preextractedtextprovider](#b-pre-extracted-text-provider) * [oak application](#b-oak-app) * [oak run indexing](#b-oak-run) `@since oak 1.0.18, 1.2.3` lucene indexing performed single threaded mode. extracting text binaries expensive operation slows indexing rate considerably. incremental indexing mostly works fine performing reindex creating index first time migration increases indexing time considerably. speed cases oak supports pre extracting text binaries avoid extracting text indexing time. feature consist 2 broad steps 1. extract store extracted text binaries using oak-run tooling. 2. configure oak runtime use extracted text time indexing via `preextractedtextprovider` details feature refer [oak-2892][oak-2892] ## <a name="a-oak-run-command"></a>a - oak run pre-extraction command oak run tool provides `tika` command supports traversing repository extracting text binary properties. ### <a name="a-setup"></a>step 1 - oak-run setup download following jars * oak-run 1.7.4 [link][1] refer [oak-run setup](../features/oak-run-nodestore-connection-options.html) details connecting different types nodestore. example assume setup consisting segmentnodestore filedatastore. depending setup use appropriate connection options. use current oak-run version perform text extraction older oak setups i.e. fine use oak-run 1.7.x branch connect oak repositories version 1.0.x later. oak-run tooling connects repository read mode hence safe use older version. generated extracted text dir used older setup. following steps #2 i.e. generation csv file scans whole repository. hence step run system active use. step #3 requires access blobstore hence run oak application use. ### <a name="a-generate-csv"></a>step 2 - generate csv file first step would need generate csv file would contain details binary property. file would generated using `tika` command oak-run. step oak-run would connect repository read mode. generate csv file use `--generate` action java -jar oak-run.jar tika \ --fds-path /path/to/datastore \ /path/to/segmentstore --data-file oak-binary-stats.csv --generate connecting s3 command take long time checking binary id currently triggers download actual binary content require. speed use fake datastore support oak-run java -jar oak-run.jar tika \ --fake-ds-path=temp \ /path/to/segmentstore --data-file oak-binary-stats.csv --generate would generate csv file content like ``` 43844ed22d640a114134e5a25550244e8836c00c#28705,28705,"application/octet-stream",,"/content/activities/jcr:content/folderthumbnail/jcr:content" 43844ed22d640a114134e5a25550244e8836c00c#28705,28705,"application/octet-stream",,"/content/snowboarding/jcr:content/folderthumbnail/jcr:content" ... ``` default scans whole repository. need restrict look certain path specify path via `--path` option. ### <a name="a-perform-text-extraction"></a>step 3 - perform text extraction csv file generated need perform text extraction. currently extracted text files stored files per blob format one used `filedatastore` addition creates 2 files * blobs_error.txt - file containing blobids text extraction ended error * blobs_empty.txt - file containing blobids text extracted phase incremental i.e. run multiple times `--store-path` specified would avoid extracting text previously processed binaries. 2 ways this: 1. text extraction using tika 2. use suitable lucene index get text extraction data index would generated earlier #### <a name="a-tika-text-extraction"></a>step 3.1 - text extraction using tika would need download [tika-app](https://tika.apache.org/download.html) jar tika downloads. able use 1.15 version oak 1.7.4 jar. perform text extraction use `--extract` action java -cp oak-run.jar:tika-app-1.15.jar \ org.apache.jackrabbit.oak.run.main tika \ --data-file binary-stats.csv \ --store-path ./store \ --fds-path /path/to/datastore extract command require access nodestore requires access blobstore. configure blobstore use like filedatastore s3datastore. command would text extraction using multiple threads store extracted text directory specified `--store-path`. consequently, run different machine (possibly powerful allow use multiple cores) speed text extraction. one also split csv multiple chunks process different machines merge stores later. ensure merge time blobs*.txt files also merged note need launch command `-cp` instead `-jar` need include classes outside oak-run jar like tika-app. also ensure oak-run comes classpath. required due old classes packaged tika-app #### <a name="a-index-text-extraction"></a> 3.2 - populate text extraction store using already indexed data `@since oak 1.9.3` approach prerequisites consistent useful: ##### consistency indexed data csv generated [step 2](#a-generate-csv) **note**: **_very_** important making sure lead incorrectly populating text extraction store. make sure useful binaries added repository step dumped indexed data one used [generating binary stats csv](#a-generate-csv) ##### suitability index used populating extracted text store indexes index binaries obvious candidates consumed way. constraints definition needs adhere to: * index binary path binary exists (binary must relative path) * index multiple binaries indexed path * iow, multiple non-relative property definitions match index binaries example usable index definitions + /oak:index/usableindex1 ... + indexrules ... + nt:resource + properties ... + binary - name="jcr:data" - nodescopeindex=true + /oak:index/usableindex2 ... + indexrules ... + nt:resource + properties ... + binary - name="^[^\/]*$" - isregexp=true - nodescopeindex=true examples unusable index definitions + /oak:index/unusableindex1 ... + indexrules ... + nt:file + properties ... + binary - name="jcr:content/jcr:data" - nodescopeindex=true + /oak:index/unusableindex2 ... + aggregates ... + nt:file ... + include0 - path="jcr:content" pre-requisites mentioned, let's dive use this. we'd first need dump index data suitable index (say `/oak:index/suitableindexdef`) using [dump index][dump-index] method say `/path/to/index/dump` use `--populate` action populate extracted text store using dump usable indexed data. command would look something like: java -jar oak-run.jar tika \ --data-file binary-stats.csv \ --store-path ./store \ --index-dir /path/to/index/dump/index-dumps/suitableindexdef/data populate command need connect either node store blob store, need configure execution. command would update `blobs_empty.txt` indexed data given path empty. would also update `blobs_error.txt` indexed data given path indexed special value `textextractionerror`. cases (multiple none stored `:fulltext` fields given path) output command would report errors recorded `blobs_error.txt`. ## <a name="b-pre-extracted-text-provider"></a>b - preextractedtextprovider step would configure oak make use pre extracted text indexing. depending indexing performed would configure `preextractedtextprovider` either osgi oak-run index command ### <a name="b-oak-app"></a>oak application `@since oak 1.0.18, 1.2.3` look osgi config `apache jackrabbit oak datastore preextractedtextprovider` ![osgi configuration](pre-extracted-text-osgi.png) `preextractedtextprovider` configured upon reindexing lucene indexer would make use check text needs extracted not. check `textextractionstatsmbean` various statistics around text extraction also validate `preextractedtextprovider` used. ### <a name="b-oak-run"></a>oak run indexing configure directory storing pre extracted text via `--pre-extracted-text-dir` option `index` command. see [oak run indexing](oak-run-indexing.html) [oak-2892]: https://issues.apache.org/jira/browse/oak-2892 [1]: https://repo1.maven.org/maven2/org/apache/jackrabbit/oak-run/1.7.4/oak-run-1.7.4.jar [dump-index]: oak-run-indexing.html#async-index-data # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/flags.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## flags list available flags enable/disable options query engine #### oak.queryfulltextcomparisonwithoutindex `@since 1.2.0` default `false`. provided command line like `-doak.queryfulltextcomparisonwithoutindex=true` allow query engine parse full text conditions even full-text indexes defined. #### oak.query.sql2optimisation `@since 1.3.9, 1.3.11` perform another round optimisation provided query. see [related section query engine](query-engine.html#sql2_optimisation) page. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/solr.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## solr index solr index mainly meant full-text search (the 'contains' type queries): //*[jcr:contains(., 'text')] also able search path property restrictions. primary type restriction support also provided recommended usually much better use [node type index](query.html#the_node_type_index) kind queries. even full-text index, recommended use asynchronously (see `oak#withasyncindexing`) because, production scenarios, it'll 'remote' index therefore network latency / errors would less impact repository performance. index definition node solr-based index: * must type `oak:queryindexdefinition` * must `type` property set __`solr`__ * must contain `async` property set value `async`, sends index update process background thread. _optionally_ one add * `reindex` flag set `true`, triggers full content re-index. example: { nodebuilder index = root.child("oak:index"); index.child("solr") .setproperty("jcr:primarytype", "oak:queryindexdefinition", type.name) .setproperty("type", "solr") .setproperty("async", "async") .setproperty("reindex", true); } oak solr index creates one document solr index node repository, documents usually least field property associated related node. indexing properties done name: e.g. property 'jcr:title' node written field 'jcr:title' corresponding solr document index, type: e.g. properties 'jcr:data' 'binary_content' type _binary_ written field 'binary_data' that's responsible indexing fields type thus properly configured hosting type data. ### configuring solr index besides index definition parameters mentioned above, number additional parameters defined oak solr index configuration. configuration composed by: - search / indexing configuration (see [oaksolrconfiguration](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/index/solr/configuration/oaksolrconfiguration.html)) - solr server configuration (see [solrserverconfiguration](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/index/solr/configuration/solrserverconfiguration.html)) ### search / indexing configuration options options define oak handles search indexing requests order properly delegate operations solr. #### use property restrictions set _true_ solr index used also filtering nodes property restrictions. default 'false'. #### use path restrictions set _true_ solr index used also filtering nodes path restrictions. default 'false'. #### use primary types set _true_ solr index used also filtering nodes primary type. default 'false'. #### path field name field used searching exact match certain path. default 'path_exact'. #### catch field name field used searching specific field defined search query (e.g. user entered queries like 'foo bar'). default 'catch_all'. default solr schema.xml provided oak solr index contains copyfield everything 'catch_all', causing properties certain node indexed field (as separate values) therefore query run field would match properties original node would matched query. #### descendant path field name field used searching nodes descendants certain node. default 'path_des'. e.g. solr query find descendant nodes /a/b would 'path_des:\/a\/b'. #### children path field name field used searching child nodes certain node. default 'path_child'. e.g. solr query find child nodes /a/b would 'path_child:\/a\/b'. #### parent path field name field used searching parent node certain node. default 'path_anc'. e.g. solr query find parent node /a/b would 'path_anc:\/a\/b'. #### property restriction fields (optional) mapping property names solr fields, mapping jcr:title=foo defined node property jcr:title correspondant solr document property foo indexed value jcr:title property. default mapping, therefore default mechanism mapping property names field names performed. #### used properties whitelist properties used indexing / searching solr index. whitelist, empty, would dominate whatever configuration defined [ignored_properties](#ignored_properties). default empty list. e.g. whitelist contains properties _jcr:title_ _text_ solr index index properties node possible use searching two properties. #### ignored properties blacklist properties ignored indexing searching solr index. blacklist makes sense (it taken account solr index) [used properties](#used_properties) option value. default following array: _("rep:members", "rep:authorizableid", "jcr:uuid", "rep:principalname", "rep:password"}_. #### commit policy solr commit policy used indexing nodes documents solr. possible values 'soft', 'hard', 'auto'. soft: perform solr soft-commit indexed document. hard: perform solr (hard) commit indexed document. auto: perform commit relies auto commit configured plain solr's configuration (solrconfig.xml). default _soft_. #### rows number documents per 'page' fetched query. default _10_. #### collapse _jcr:content_ nodes `@since 1.3.4, 1.2.4, 1.0.18` whether [collapsing query parser](https://cwiki.apache.org/confluence/display/solr/collapse+and+expand+results) used searching order collapse nodes descendants 'jcr:content' nodes 'jcr:content' node only. e.g. normal query results would include '/a/jcr:content' '/a/jcr:content/b/', option enabled '/a/jcr:content' would returned solr using collapsing query parser. feature requires additional field indexed, therefore turned on, reindexing triggered order make work properly. #### collapsed path field `@since 1.3.4, 1.2.4, 1.0.18` name field used collapsing descendants jcr:content nodes, see 'collapse jcr:content nodes' option. ##### solr server configuration options tbd #### setting solr server solr index work oak needs able communicate solr instance / cluster. apache solr supports multiple deployment architectures: * embedded solr instance running jvm client runs * single remote instance * master / slave architecture, eventually multiple shards replicas * solrcloud cluster, zookeeper instance(s) control dynamic, resilient set solr servers high availability fault tolerance oak solr index configured either use 'embedded solr server' 'remote solr server' (being able connect single remote instance solrcloud cluster via zookeeper). ##### supported solr deployments depending use case, different solr server deployments recommended. ###### embedded solr server embedded solr server recommended developing testing solr index oak repository. in-memory solr instance started jvm oak repository, without http bindings (for security purposes it'd allow http access repository data independently acls). configuring embedded solr server mainly consists providing path standard [solr home dir](https://wiki.apache.org/solr/solrterminology) (_solr.home.path_ oak property) used start solr; path either relative absolute, path would exist default configuration provided _oak-solr-core_ artifact would put given path. start embedded solr server custom configuration (e.g. different schema.xml / solrconfig.xml default ones) (modified) solr home files would put dedicated directory, according solr home structure, solr.home.path property pointed directory. ###### single remote solr server single (remote) solr instance simplest possible setup using oak solr index production environment. oak communicate solr server solr's http apis (via [solrj](http://wiki.apache.org/solr/solrj) client). configuring single remote solr instance consists providing url connect order reach [solr core] (https://wiki.apache.org/solr/solrterminology) host solr index oak repository via _solr.http.url_ property contain url (e.g. _http://10.10.1.101:8983/solr/oak_). configuration tuning solr, what's described page, performed solr side; [sample solr configuration](https://github.com/apache/jackrabbit-oak/tree/trunk/oak-solr-core/src/main/resources/solr/) files (schema.xml, solrconfig.xml, etc.) start found _oak-solr-core_ artifact. ###### solrcloud cluster [solrcloud](https://cwiki.apache.org/confluence/display/solr/solrcloud) cluster recommended setup oak solr index production provides scalable fault tolerant architecture. order configure solrcloud cluster host zookeeper instance / ensemble managing solr servers provided _solr.zk.host_ property (e.g. _10.1.1.108:9983_) since solrj client solrcloud communicates directly zookeeper. [solr collection](https://wiki.apache.org/solr/solrterminology) used within oak named _oak_, replication factor 2 using 2 shards; means default setup solrcloud cluster would composed least 4 solr servers index split 2 shards shard 2 replicas. solrcloud also allows hot deploy configuration files used certain collection setting collection used oak needed files starting cluster, configuration files also uploaded local directory, controlled _solr.conf.dir_ property 'oak solr remote server configuration'. detailed description solrcloud works see [solr reference guide](https://cwiki.apache.org/confluence/display/solr/solrcloud). ##### osgi environment create index definition solr index, described [above](#solr_index). query index definition node created, access osgi configurationadmin via e.g. apache felix webconsole: 1. find 'oak solr indexing / search configuration' item eventually change configuration properties needed 2. find either 'oak solr embedded server configuration' 'oak solr remote server configuration' items depending chosen solr architecture eventually change configuration properties needed 3. find 'oak solr server provider' item select chosen provider ('remote' 'embedded') #### advanced search features ##### aggregation `@since oak 1.1.4, 1.0.13` solr index supports query time aggregation, enabled osgi setting `solrqueryindexproviderservice` service property `query.aggregation` true. ##### suggestions `@since oak 1.1.17, 1.0.15` default solr configuration ([solrconfig.xml](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-solr-core/src/main/resources/solr/oak/conf/solrconfig.xml#l1102) [schema.xml](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-solr-core/src/main/resources/solr/oak/conf/schema.xml#l119)) comes preconfigured suggest component, uses lucene's [fuzzysuggester](https://lucene.apache.org/core/4_7_0/suggest/org/apache/lucene/search/suggest/analyzing/fuzzysuggester.html) hood. updating suggester [default configuration](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-solr-core/src/main/resources/solr/oak/conf/solrconfig.xml#l1110) done every time `commit` request sent solr however recommended production systems possible, much better send explicit request solr rebuild suggester dictionary, e.g. day, week, etc. / different suggesters configured solr, per [reference documentation](https://cwiki.apache.org/confluence/display/solr/suggester). ##### spellchecking `@since oak 1.1.17, 1.0.13` default solr configuration ([solrconfig.xml](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-solr-core/src/main/resources/solr/oak/conf/solrconfig.xml#l1177)) comes preconfigured spellchecking component, uses lucene's [directspellchecker](http://lucene.apache.org/core/4_7_0/suggest/org/apache/lucene/search/spell/directspellchecker.html) hood require additional data structure neither ram disk. / different spellcheckers configured solr, per [reference documentation](https://cwiki.apache.org/confluence/display/solr/spell+checking). #### facets `@since oak 1.3.14` order enable proper usage facets solr index following dynamic field needs added _schema.xml_ <dynamicfield name="*_facet" type="string" indexed="false" stored="false" docvalues="true" multivalued="true"/> dedicated _copyfields_ specific properties. <copyfield source="jcr:primarytype" dest="jcr:primarytype_facet"/> <!-- facet jcr:primarytype field/property --> #### persisted configuration `@since oak 1.4.0` possible create (multiple) solr indexes via persisted configuration. persisted oak solr index created whenever index definition _type = solr_ child node named _server_ child node _solrservertype_ property set (to either _embedded_ _remote_). child node exists, oak solr index created upon explicit registration [solrserverprovider] e.g. via osgi. [oaksolrconfiguration](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/index/solr/configuration/oaksolrconfiguration.html) [solrserverconfiguration](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/index/solr/configuration/solrserverconfiguration.html) properties exposed configurable, see also [oaksolrnodestateconfiguration#properties](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/oaksolrnodestateconfiguration.java#l245) [nodestatesolrserverconfigurationprovider#properties](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-solr-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/nodestatesolrserverconfigurationprovider.java#l94) ``` /oak:index/solrremote - jcr:primarytype = "oak:queryindexdefinition" - type = "solr" - async = "async" + server - jcr:primarytype = "nt:unstructured" - solrservertype = "remote" - httpurl = "http://localhost:8983/solr/oak" ``` configurations exists repository [nodestatesolrserversobserver](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/index/solr/configuration/nodestate/nodestatesolrserversobserver.html) registered (e.g. via [nodestatesolrserversobserverservice](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/index/solr/osgi/nodestatesolrserversobserverservice.html) osgi service). #### notes oak version 1.0.0: * solr index support search using relative properties, see [oak-1835](https://issues.apache.org/jira/browse/oak-1835). * lucene used full-text queries, solr used full-text search _and_ jcr queries involving path, property primary type restrictions. oak version 1.2.0: * solr index support index time aggregation, query time aggregation * lucene solr used full text, property path restrictions # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/index-management.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## index management oak, indexes managed using jcr api. ## index management using oak-run `@since 1.6.0` oak-run support managing indexes using "branch-less" mode, avoids branch commits, relatively slow mongodb. case, repository must accessed standalone mode, meaning cluster nodes must run concurrently. tool supports running scripts contain index definition changes, well interative mode, development. developing scripts, typically good idea verify [json valid](http://jsonlint.com/). start interactive mode, branch-less commit option, mongodb, use: java -jar oak-run-*.jar json-index --disablebranches --script - \ mongodb://localhost:27017/oak --user admin --password admin using segment store, use: java -jar oak-run-*.jar json-index --disablebranches --script - \ repository/segmentstore --read-write --user admin --password admin open repository allow write read repository. example script creates index "test", re-indexes it: {"addnode": "/oak:index/test", "node": { "jcr:primarytype": "oak:queryindexdefinition", "type": "property", "{name}propertynames": ["test"] }} {"session": "save"} {"xpath": "/jcr:root/oak:index/test", "depth": 2} {"setproperty": "/oak:index/test/reindex", "value": true} {"session": "save"} {"xpath": "/jcr:root/oak:index/test", "depth": 2} index re-indexed follows (note reindexing typically needed index definition changes): {"setproperty": "/oak:index/test/reindex", "value": true} {"session": "save"} {"xpath": "/jcr:root/oak:index/test", "depth": 2} ### command reference following commands available: * add node: `{"addnode": "<path>", "node": { ... }}`. adding child nodes supported. property types "string" "boolean" automatically detected, property types use property name prefix `{<properttypename>}`. ignored node already exists. * add node: `{"removenode": "<path>"}`. ignored node exist. * set property: `{"setproperty": "<path>/<propertyname>", "value": <value>}`. ignored node exist. use value `null` remove property. * save changes: `{"session": "save"}`. * query using xpath: `{"xpath": "<query>"}`. optionally, specify `"depth"` returned nodes. use `"quiet": true` disable output. result stored variable `$result`, number rows stored variable `$resultsize`. * query using sql-2: `{"sql": "<query>"}`. otherwise `xpath`. * print: `{"session": "<message>"}`. * set variable: `{"$<variablename>": <value>}`. variable global. variable names used instead values queries. indirect addressing available using `$$`. * loop: `{"for": "$<variablename>", "do": [ <commands> ]}"`. * endless loop: `{"loop": [ <commands> ]}"`. exit setting variable `{"$break": true}`. * conditional commands: `{<command>, "if": <a>, "=" <b>}`. used commands. ### examples #### reindex counter index following script reindexes counter index (in synchronous mode), switches back async mode. // reindex-counter.txt // reindex counter index {"print": "reindex count counter index:"} {"sql": "select [reindexcount] [nt:base] [jcr:path] = '/oak:index/counter'"} {"setproperty": "/oak:index/counter/async", "value": null} {"setproperty": "/oak:index/counter/reindex", "value": true} {"print": "reindexing counter index..."} {"session": "save"} {"print": "switch async"} {"setproperty": "/oak:index/counter/async", "value": "async"} {"session": "save"} {"print": "reindex count counter index now:"} {"sql": "select [reindexcount] [nt:base] [jcr:path] = '/oak:index/counter'"} {"print": "done"} exit scripts typically stored text file (here `reindex-counter.txt`), executed follows: java -jar oak-run-1.6-snapshot.jar json-index --disablebranches \ --script reindex-counter.txt mongodb://localhost:27017/oak #### create index following script created index externalid: // create-externalid.txt // create unique index externalid {"print": "check externalid already exists"} {"xpath": "/jcr:root/oak:index/externalid"} {"if": "$resultsize", "=": 1, "print": "index externalid already exists"} {"$create": []} {"if": "$resultsize", "=": 0, "$create": [1]} {"for": "$create", "do": [ {"print": "does exist; creating..."}, {"addnode": "/oak:index/externalid", "node": { "jcr:primarytype": "oak:queryindexdefinition", "{name}propertynames": ["rep:externalid"], "type": "property", "unique": true }}, {"session": "save"}, {"print": "done; index now:"}, {"xpath": "/jcr:root/oak:index/externalid", "depth": 2} ]} exit #### create nodes testing tool also used testing queries, creating nodes. following creates 1000 nodes `/test/n<x>`, saving every 100 nodes: // create-nodex.txt // create 1000 nodes /test/n<x> {"removenode": "/test"} {"session": "save"} {"addnode": "/test", "node":{"jcr:primarytype": "oak:unstructured"}} {"$commit": 100} {"$y": 0} {"$x": 0} {"loop": [ {"$x": "$x", "+": 1}, {"if": "$x", "=": 1000, "$break": true}, {"$y": "$y", "+": 1}, {"if": "$y", "=": "$commit", "session": "save"}, {"if": "$y", "=": "$commit", "print": "$x"}, {"if": "$y", "=": "$commit", "$y": 0}, {"$p": "/test/n", "+": "$x"}, {"addnode": "$p", "node":{"jcr:primarytype": "oak:unstructured"}} ]} {"session": "save"} {"print": "done"} exit #### estimate number nodes following estimate number nodes given subtree. {"xpath": "explain measure /jcr:root/content//* option(traversal ok)"} exit field "cost" contain number estimated nodes. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/query/lucene-old.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## lucene index **following details applicable oak release 1.0.8 earlier. current documentation refer [current lucene documentation](lucene.html)** oak supports lucene based indexes support property constraint full text constraints ### lucene full-text index full-text index handles 'contains' type queries: //*[jcr:contains(., 'text')] full-text index configured, queries full-text condition use full-text index, matter conditions indexed, matter path restriction. full-text index configured, queries full-text conditions may work expected. (the query engine basic verification place full-text conditions, support features lucene does, traverses nodes indexed constraints). full-text index update asynchronous via background thread, see `oak#withasyncindexing`. means full-text searches work small window time: background thread runs every 5 seconds, plus time takes run diff run text-extraction process. async update status reflected `oak:index` node help properties, see [oak-980](https://issues.apache.org/jira/browse/oak-980) todo node aggregation [oak-828](https://issues.apache.org/jira/browse/oak-828) index definition node lucene-based full-text index: * must type `oak:queryindexdefinition` * must `type` property set __`lucene`__ * must contain `async` property set value `async`, sends index update process background thread _optionally_ add * subset property types included index via `includepropertytypes` property * blacklist property names: property excluded index via `excludepropertynames` property * `reindex` flag set `true`, triggers full content re-index. example: { nodebuilder index = root.child("oak:index"); index.child("lucene") .setproperty("jcr:primarytype", "oak:queryindexdefinition", type.name) .setproperty("type", "lucene") .setproperty("async", "async") .setproperty(propertystates.createproperty("includepropertytypes", immutableset.of( propertytype.typename_string, propertytype.typename_binary), type.strings)) .setproperty(propertystates.createproperty("excludepropertynames", immutableset.of( "jcr:createdby", "jcr:lastmodifiedby"), type.strings)) .setproperty("reindex", true); } __note__ oak lucene index index _strings_ _binaries_ default. need add another data type, need add _includepropertytypes_ setting, forget set _reindex_ flag true. ### lucene property index (since 1.0.8) oak uses lucene creating index support queries involve property constraint full-text select * [nt:base] [alias] = '/admin' define property index subtree query add index definition ```js "uuid" : { "jcr:primarytype": "oak:queryindexdefinition", "type": "lucene", "async": "async", "fulltextenabled": false, "includepropertynames": ["alias"] } ``` index definition node lucene-based full-text index: * must type `oak:queryindexdefinition` * must `type` property set __`lucene`__ * must contain `async` property set value `async`, sends index update process background thread * must `fulltextenabled` set `false` * must provide whitelist property names indexed via `includepropertynames` _note compared [property index](query.html#property-index) lucene property index always configured async mode hence might lag behind reflecting current repository state performing query_ taking another example. ``` select * [app:asset] [jcr:content/jcr:lastmodified] > cast('2014-10-01t00:00:00.000+02:00' date) [jcr:content/metadata/format] = 'image' order jcr:content/jcr:lastmodified ``` enable faster execution query create following lucene property index ``` "assetindex": { "jcr:primarytype":"oak:queryindexdefinition", "declaringnodetypes":"app:asset", "includepropertynames":["jcr:content/jcr:lastmodified" , "jcr:content/metadata/format"], "type":"lucene", "async":"async", "reindex":true, "fulltextenabled":false, "orderedprops":["jcr:content/jcr:lastmodified"] "properties": { "jcr:primarytype":"oak:unstructured", "jcr:content": { "jcr:primarytype":"oak:unstructured", "jcr:lastmodified": { "jcr:primarytype":"oak:unstructured", "type":"date" } } } } ``` index definition makes use various features supported property index * `declaringnodetypes` - query involves nodes type `app:asset` index restricted index nodes type `app:asset` * `orderedprops` - query performs sorting via `order by` clause index configured property names used sorting * `properties` - ordering work properly need tell type property implementation details refer [oak-2005][oak-2005]. following sections would provide details supported features ### index definition lucene index definition managed via `nodestore` supports following attributes type : required always `lucene` async : required always `async` fulltextenabled : lucene based property index *always* set `false` declaringnodetypes : node type names whose properties indexed. specified nodes would indexed properties defined `includepropertynames`. smaller efficient indexes recommended `declaringnodetypes` specified according query needs includepropertynames : list property name indexed. property name relative e.g. `jcr:content/jcr:lastmodified` orderedprops : list property names would used `order by` clause query includepropertytypes : used lucene fulltext index : full text index defaults `string, binary` : list property types indexed. values one specified [propertytype names][1] [blobsize][oak-2201] : default value 32768 (32kb) : size bytes used splitting index files storing nodestore functionname : name used enable index usage [native query support](#native-query) ### property definition cases property specific configurations required. example typically performing order query user specify property type. cases need specify property type explicitly. property definition nodes created per property name `properties` node index definition node. relative properties would need create required path structure `properties` node. e.g. property `jcr:content/metadata/format` need create property node path `<index definition node>/properties/jcr:content/jcr:lastmodified` ``` "properties": { "jcr:primarytype":"oak:unstructured", "jcr:content": { "jcr:primarytype":"oak:unstructured", "jcr:lastmodified": { "jcr:primarytype":"oak:unstructured", "type":"date" } } } ``` type : jcr property type. one `date`, `boolean`, `double` `long` boost : boost value. defaults 1.0 : since 1.0.9 ### ordering lucene property index provides efficient sorting support based lucene docvalue fields. configure specify list property names used `order by` clause part `orderedprops` property. property type string must specify property definition `type` details refer [lucene based sorting][oak-2196] details. <a name="osgi-config"></a> ### luceneindexprovider configuration runtime aspects oak lucene support configured via osgi configuration. configuration needs done pid `org.apache .jackrabbit.oak.plugins.index.lucene.luceneindexproviderservice` ![osgi configuration](lucene-osgi-config.png) enablecopyonreadsupport : enable copying lucene index local file system improve query performance. see [copy indexes read](#copy-on-read) localindexdir : directory used copy index files local file system. specified `enablecopyonreadsupport` enabled debug : boolean value. defaults `false` : enabled lucene logging would integrated slf4j <a name="non-root-index"></a> ### non root index definitions lucene index definition defined location repository need always defined root. example query involves path restrictions like select * [app:asset] isdescendantnode(a, '/content/companya') [format] = 'image' create required index definition say `assetindex` `/content/companya/oak:index/assetindex`. case index would contain data subtree `/content/companya` <a name="native-query"></a> ### native query index selection oak query engine supports native queries like //*[rep:native('lucene', 'name:(hello world)')] multiple lucene based indexes enabled system need make use specific lucene index like `/oak:index/assetindex` specify index name via `functionname` attribute index definition. example assetindex definition like ``` { "jcr:primarytype":"oak:queryindexdefinition", "type":"lucene", ... "functionname" : "lucene-assetindex", } ``` executing following query would ensure lucene index `assetindex` used //*[rep:native('lucene-assetindex', 'name:(hello world)')] ### persisting indexes filesystem default lucene indexes stored `nodestore`. required stored file system directly ``` { "jcr:primarytype":"oak:queryindexdefinition", "type":"lucene", ... "persistence" : "file", "path" : "/path/to/store/index" } ``` store lucene index file system, lucene index definition node, set property `persistence` `file`, set property `path` directory index stored. start reindexing setting `reindex` `true`. note setup would non cluster `nodestore`. backend `nodestore` supports clustering index data would accessible cluster nodes <a name="copy-on-read"></a> ### copyonread lucene indexes stored `nodestore`. oak lucene provides custom directory implementation enables lucene load index `nodestore`. might cause performance degradation `nodestore` storage remote. case oak lucene provide `copyonreaddirectory` copies index content local directory enables lucene make use local directory based indexes performing queries. runtime various details related copy read features exposed via `copyonreadstats` mbean. indexes jcr path e.g. `/oak:index/assetindex` would copied `<index dir>/<hash jcr path>`. determine mapping local index directory jcr path refer mbean details ![copyonreadstats](lucene-copy-on-read.png) details refer [oak-1724][oak-1724]. feature enabled via [lucene index provider service configuration](#osgi-config) ### lucene index mbeans oak lucene registers jmx bean `luceneindex` provide details index content e.g. size index, number documents present index etc ![lucene index mbean](lucene-index-mbean.png) <a name="luke"></a> ### analyzing created lucene index [luke] handy development diagnostic tool, accesses already existing lucene indexes allows display index details. oak lucene index files stored `nodestore` hence directly accessible. enable analyzing index files via luke follow mentioned steps 1. download luke version includes matching lucene jars used oak. oak 1.0.8 release lucene version used 4.7.1. download jar [here](https://github.com/dmitrykey/luke/releases) $wget https://github.com/dmitrykey/luke/releases/download/4.7.0/luke-with-deps.jar 2. use [oak console][oak-console] dump lucene index `nodestore` filesystem directory. use `lc dump` command $ java -jar oak-run-*.jar console /path/to/oak/repository apache jackrabbit oak 1.1-snapshot jackrabbit oak shell (apache jackrabbit oak 1.1-snapshot, jvm: 1.7.0_55) type ':help' ':h' help. ------------------------------------------------------------------------- /> lc info /oak:index/lucene index size : 74.1 mb number documents : 235708 number deleted documents : 231 /> lc dump info /> lc dump /path/to/dump/index/lucene /oak:index/lucene copying lucene indexes [/path/to/dump/index/lucene] copied 74.1 mb 1.209 /> lc dump /path/to/dump/index/slingalias /oak:index/slingalias copying lucene indexes [/path/to/dump/index/lucene-index/slingalias] copied 8.5 mb 218.7 ms /> 3. post dump open index via luke. oak lucene uses [custom codec][oak-1737]. oak-lucene jar needs included luke classpath display index details $ java -xx:maxpermsize=512m luke-with-deps.jar:oak-lucene-1.0.8.jar org.getoptuke.luke luke ui shown access various details. ### index performance following best practices get good performance lucene based indexes 1. make use [non root indexes](#non-root-index). query always perform search certain paths create index definition paths only. might helpful multi tenant deployment tenant data stored specific repository path queries made path. 2. index required data. depending requirement create multiple lucene indexes. example majority cases querying various properties specified `<node>/jcr:content/metadata` node belong certain specific nodetype create single index definition listing properties restrict nodetype. size index via mbean [1]: https://s.apache.org/jcr-2.0-javadoc/constant-values.html#javax.jcr.propertytype.typename_string [oak-2201]: https://issues.apache.org/jira/browse/oak-2201 [oak-1724]: https://issues.apache.org/jira/browse/oak-1724 [oak-2196]: https://issues.apache.org/jira/browse/oak-2196 [oak-2005]: https://issues.apache.org/jira/browse/oak-2005 [oak-1737]: https://issues.apache.org/jira/browse/oak-1737 [luke]: https://code.google.com/p/luke/ [oak-console]: https://github.com/apache/jackrabbit-oak/tree/trunk/oak-run#console # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/coldstandby/coldstandby.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> #cold standby ### it? *cold standby* feature allows one clients connect primary instance ensure automatic on-the-fly synchronization repository state master client(s). sync process one-way only. data stored master never changed. purpose client installation(s) guarantee (almost live) data copy enable quick switch master client installation without data loss. ### *cold standby* feature guarantee file, filesystem even repository **integrity**! content tar file corrupted, file missing anything similar happens locally stored files installation break situations checked, detected treated! ### works master tcp port opened listening incoming messages. currently four messages implemented: * give segment id current head * give segment data segment specified id * give segment ids referenced segment specified id * give blob data blob specified id clients periodically request segment id current head master. segment locally unknown retrieved. already present segments compared referenced segments blobs (if necessary) requested, too. ### prerequisites oak installation using segmentnodestore. ### setup 1. perform filesystem based copy master repository. 2. master activate feature specifying runmode `primary`. 3. client(s) activate feature specifying runmode `standby` (add additional parameters desired) specify path repository. 4. start master client(s). add additional configuration option `secure=true` like ssl secured connection client master. must garantueed **all** clients master either use secure standard connections! mixed configuration definitely fail. clients specify master host using `host` (default `localhost`) `port` (default `8023`) configuration options. monitoring reasons (see below) client(s) must distinctable. therefore generic uuid automatically created running client uuid used identify client master. want specify name client set system property `standbyid`. master define tcp port feature listening (default `8023`) using `port` configuration option. want restrict communication specify list allowed ips ip ranges. ### robustness data flow designed detect handle connection network related problems automatically. packets bundled checksums soon problems connection damaged packets occur retry mechanisms triggered. ### monitoring *cold standby* feature exposes information using jmx/mbeans. so, inspect current state client(s) master using standard tools like `jconsole` `jmc` (if running jdk 1.7 higher). information found look `org.apache.jackrabbit.oak:type="standby"` mbean named `status`. #####client observing client notice exactly one node (the id either generic uuid name specified `standbyid` system property). node five readonly attributes: * `running`: boolean indicating whether sync process running * `mode`: always `client: ` followed id described * `status`: textual representation current state (like `running`, `stopped` others) * `failedrequests`: number consecutive errors * `secondssincelastsuccess`: number seconds since last successful communication server -1 none also two invokable methods: * `start()`: start sync process * `stop()`: stop sync process ######examples typical communication server look like (the server contacted every five seconds error all): ![screenshot showing mbeans working server](client_mbean_server_working.png) server contacted anymore: ![screenshot showing mbeans server died](client_mbean_server_died.png) server live reachable errors everything running again: ![screenshot showing mbeans server working again](client_mbean_server_works_again.png) #####master observing master exposes general (non client-specific) information via mbean whose id value port number `cold standby` service using (usually `8023`). almost attributes methods described above, values differ: * `mode`: always constant value `master` * `status`: values like `got message` * `failedrequests`: available master mode * `secondssincelastsuccess`: available master mode furthermore, information (up 10) clients retrieved. mbean id name client (see above). invokable methods mbeans, useful readonly attributes: * `name`: id client * `lastseentimestamp`: timestamp last request textual representation * `lastrequest`: last request client * `remoteaddress`: ip address client * `remoteport`: (generic) port client used last request * `transferredsegments`: total number segments transferred client * `transferredsegmentbytes`: total number bytes transferred client typical state might look like this: ![screenshot showing mbeans](mbeans.png) ### performance ##### master running master, enabling *cold standby* feature almost measurable impact performance. additional cpu consumption low extra harddisk network io drawbacks. ##### client things look differently client! sync process expect least one cpu core running close 100% time. due fact procedure multithreaded can't speed process using multiple cores. data changed/transferred measurable activity. expected throughput 700 kb / sec. obviously number vary depending hardware network environment, depend size repository whether use ssl encryption not. keep mind estimating time needed initial sync much data changed meantime master node. ### one word security assuming client(s) master run intranet security zone **should** security issue enabling *cold standby* feature. nevertheless, add extra security enabling ssl connections client(s) master (see above). reduces possibility data compromised man-in-the-middle. furthermore, specify allowed client(s) restricting ip-address incoming requests. help garantuee one intranet copy repository (by accident). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/overview.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # node storage oak comes two node storage flavours: [segment](segment/overview.html) [document](documentmk.html). segment storage optimised maximal performance standalone deployments, document storage optimised maximal scalability clustered deployments. ## nodestore api node storage implement `nodestore` apis. ultimately representations [node state model](../architecture/nodestate.html). `nodestore` exposes functionality pure java api, suited work java, lower performance memory overhead. ## microkernel api `microkernel` api deprecated oak 1.2 dropped project oak 1.3.0. used exposes functionality string (json) api. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/compositens.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # oak composite nodestore **the documentation composite nodestore implementation work-in-progress. please ask oak-dev things missing unclear.** ## overview `compositenodestore` `nodestore` implementation wraps multiple `nodestore` instances exposes single api. possible, instance, store data `documentnodestore` instance relocate `/libs` `/apps` `segmentnodestore` instance. node stored wrapped composite node store instance called _mount_. `compositenodestore` configured one mounts, owning defined set paths, _default mount_, owning rest repository. ## design limitations ### read-only mounts implementation allows default mount, read-write, number additional mounts, read-only. limitation design expected removed future oak version. two major aspects limitation 1. commit run accross two multiple node stores complicated terms implementation. atomic commits hard ensure performant manner across multiple stores. additionally, impose implementation burders nodestore order support special-case scenario. 1. multiple oak subsystems composite-aware would need changed happen, would complicate implementation special-case scenario. ### referenceable nodes referenceable nodes permitted non-default mounts. reason cross-mount references become invalid scenarios set mounts changes. consider following scenario: mounts: * default mount `d` * non-default mount `n1`, currently mounted /tmp * non-default mount `n2`, currently mounted repository, node `/content/bar` references referenceable node `/tmp/foo` (from n1). repository shut reconfigureed use n2 instead n1, reference broken unless ensure reference stores used n1 n2 same. happen today. constraint also means that: * versionable nodes permitted non-default mounts, referenceable * `nt:resource` nodes (usually found children `nt:file` nodes) permitted. recommended replace `oak:resource` ( see also [oak-4567](https://issues.apache.org/jira/browse/oak-4567) ). ## checking read-only access composite nodestore mounts various node stores read-only mode. since read-only mode enfored via permissions, may queried via `session.haspermission`. instead, read-only status surfaced via `session.hascapability`. see [oak-6563][oak-6563] details. [oak-6563]: https://issues.apache.org/jira/browse/oak-6563 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/persistent-cache.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> ## persistent cache document storage optionally uses persistent cache. cache acts like in-memory cache old revisions, addition keeping recently used nodes memory, also stores disk. way, many reads storage backend (for example mongodb) replaced reads local disk. specially useful reads local disk faster reads storage backend. addition that, persistent cache reduces load storage backend. ### osgi configuration default osgi configuration persistent cache is: org.apache.jackrabbit.oak.plugins.document.documentnodestoreservice persistentcache="cache" oak version 1.4 persistent cache disabled default, equivalent configuration entry set empty string. starting oak 1.6, persistent cache enabled default disabled setting configuration entry `"-"`. ### configuration options persistent cache configuration setting string number comma separated elements. first element directory cache stored. example: "cache" case, data stored directory "cache", relative `repository.home` directory. repository home directory configured, directory relative current working directory. oak versions prior 1.6 always resolve current working directory ignore `repository.home` configuration. default, two files (two generations) name "cache-x.data", x incrementing number (0, 1,...). file 1 gb default. file larger, next file created, two files, oldest one removed. data older file accessed, copied latest file. way, data recently read eventually removed. following configuration options available: * size. file 1 gb default. change maximum size file, use "size=x", x size mb. * node caching. default, nodes revisions cached. disable option, use "-nodes". * children caching. default, list children node cached. disable option, use "-children". * diff caching. default, list differences two revisions cached. disable option, use "-diff". * compaction. cache file compacted compressed (at rate around 100 mb per second) closed. way, disk space used efficiently. enable option, use "+compact". (please note feature enabled default versions 1.2.1, 1.0.13, older.) * compression. default, cache compressed, saving space. disable option, use "-compress". * binary caching (removed oak 1.10). using blobstore, binaries smaller 1 mb stored persistent cache default. maximum size changed using setting "binary=x", x size bytes. disable binary cache, use "binary=0". setting appended persistent cache configuration string. example configuration is: "cache,size\=2048,-compact,-compress" disable persistent cache entirely oak 1.6 newer, use following configuration: org.apache.jackrabbit.oak.plugins.document.documentnodestoreservice persistentcache="-" oak version 1.4, either omit persistentcache entry set empty string disable persistent cache. ### journal cache since oak 1.6. diff cache entries also stored separate persistent cache configured independently needed. done osgi configuration like following example: org.apache.jackrabbit.oak.plugins.document.documentnodestoreservice persistentcache="cache,size\=2048" journalcache="diff-cache,size\=1024" configuration options `persistentcache`, options unrelated diff cache type ignored. default configuration `journalcache="diff-cache"` disabled way regular persistent cache dash: `journalcache="-"`. ### cache statistics persistent cache expose access statistics `cachestatsmbean` via `consolidatedcachestatsmbean`. fields exposed persistent caches meaningful values. are: `totalloadtime`, `averageloadpenalty`, `evictioncount`, `elementcount` `maxtotalweight`. ### dependencies internally, persistent cache uses key-value store (basically java.util.map), persisted disk. current key-value store backend [h2 mvstore](http://www.h2database.com/html/mvstore.html). library needed persistent cache configured. version 1.4.185 newer needed. <dependency> <groupid>com.h2database</groupid> <artifactid>h2-mvstore</artifactid> <version>1.4.185</version> </dependency> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/documentmk.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # oak document storage * [oak document storage](#oak-document-storage) * [new 1.10](#new-1.10) * [new 1.8](#new-1.8) * [new 1.6](#new-1.6) * [backend implementations](#backend-implementations) * [content model](#content-model) * [node content model](#node-content-model) * [revisions](#revisions) * [commit root](#commit-root) * [branches](#branches) * [sweep revision](#sweep-revision) * [previous documents](#previous-documents) * [clock requirements](#clock-requirements) * [node bundling](#node-bundling) * [background operations](#background-operations) * [renew cluster id lease](#renew-cluster-id-lease) * [background document split](#background-document-split) * [background writes](#background-writes) * [background reads](#bg-read) * [metrics monitoring](#metrics) * [cluster node metadata](#cluster-node-metadata) * [acquire cluster node id](#acquire-a-cluster-node-id) * [update lease cluster node id](#update-lease-for-a-cluster-node-id) * [recovery cluster node id](#recovery-for-a-cluster-node-id) * [specifying read preference write concern](#rw-preference) * [caching](#cache) * [cache invalidation](#cache-invalidation) * [cache configuration](#cache-configuration) * [unlock upgrade](#unlockupgrade) * [revision garbage collection](#revision-gc) * [pending topics](#pending-topics) * [conflict detection handling](#conflict-detection-and-handling) one plugins oak stores data document oriented format. plugin implements low level `nodestore` interface. document storage optionally uses [persistent cache](persistent-cache.html) reduce read operations backend storage. ## <a name="new-1.10"></a> new 1.10 * use mongodb client sessions. see also [read preference](document/mongo-document-store.html#read-preference). * [greedy cluster node info][oak-7316]. see also [acquire cluster node id](#acquire-a-cluster-node-id). ## <a name="new-1.8"></a> new 1.8 * [sweep revision](#sweep-revision) * [unlock upgrade](#unlockupgrade) * [continuous oak-run triggered revision gc](#revision-gc) ## <a name="new-1.6"></a> new 1.6 * [node bundling](#node-bundling) * [secondary store](#secondary-store) ## <a name="backend-implementations"></a> backend implementations documentnodestore supports number backends, storage abstraction called `documentstore`: * [`mongodocumentstore`](document/mongo-document-store.html): stores documents mongodb. * [`rdbdocumentstore`](document/rdb-document-store.html): stores documents relational data base. * `memorydocumentstore`: keeps documents memory. implementation used testing purposes. remaining part document focus `mongodocumentstore` explain illustrate concepts documentnodestore. ## <a name="content-model"></a> content model repository data stored two collections: `nodes` collection node data, `blobs` collection binaries. `journal` collection contains log changes applied repository. entries older 24 hours automatically purged repository. `clusternodes` collection contains document documentnodestore connected mongodb read-write mode. documentnodestore uses documents collection discover instances. cluster wide information stored `settings` collection. includes checkpoints, journal revision gc status, format version current cluster view. data viewed using mongodb shell: > show collections blobs clusternodes journal nodes settings ### <a name="node-content-model"></a> node content model `documentnodestore` stores node separate mongodb document updates node stored adding new revision/value pairs document. way previous state node preserved still retrieved session looking given snapshot (revision) repository. basic mongodb document node oak looks like this: { "_id" : "1:/node", "_deleted" : { "r13f3875b5d1-0-1" : "false" }, "_lastrev" : { "r0-0-1" : "r13f3875b5d1-0-1" }, "_modified" : numberlong(1371041805), "_modcount" : numberlong(1), "_children" : boolean(true), "_revisions" : { "r13f3875b5d1-0-1" : "c" } } fields document metadata exposed oak api. documentnodestore two types fields. simple fields key/value pairs like `_id` `_modified` field. versioned fields kept sub-documents key revision paired value revision. `_id` field used primary key consists combination depth path path itself. optimization align sibling keys index. `_deleted` sub-document contains revision node created in. example root node created revision `r13f3875b5d1-0-1`. node later deleted, `_deleted` sub-document get new field revision node deleted in. sub-document `_lastrev` contains last revision written node cluster node. example documentnodestore cluster node id `1` modified node last time revision `r13f3875b5d1-0-1`, created node. revision key `_lastrev` sub-document synthetic information actually used documentnodestore clusterid. `_lastrev` sub-document updated non-branch commits merge, changes become visible readers. starting oak 1.2 `_lastrev` value cluster node updated corresponding entry `_revisions` `_commitroot`. is, node changed descendant node added, removed modified. `_modified` field contains indexed low-resolution timestamp node last modified. time resolution five seconds. field also updated branch commit modifies node. `_modcount` field contains modification counter, incremented every change document. field allows documentnodestore perform conditional updates without requesting whole document. `_children` field boolean flag indicate node child nodes. default node would field. node gets added child node would set true. used optimize access child nodes allows documentnodestore omit calls fetch child nodes leaf nodes. finally, `_revisions` sub-document contains commit information changes marked revision. e.g. single entry document tells us everything marked revision `r13f3875b5d1-0-1` committed therefore valid. case change done branch value would base revision. added nodes happen commit root given commit. adding property `prop` value `foo` node next step result following document: { "_deleted" : { "r13f3875b5d1-0-1" : "false" }, "_id" : "1:/node", "_lastrev" : { "r0-0-1" : "r13f38818ab6-0-1" }, "_modified" : numberlong(1371042580), "_modcount" : numberlong(2), "_revisions" : { "r13f3875b5d1-0-1" : "c", "r13f38818ab6-0-1" : "c" }, "prop" : { "r13f38818ab6-0-1" : "\"foo\"" } } document contains new sub-document name new property. value property annotated revision property set. successful commit node, new field added `_revisions` sub-document. similarly `_lastrev` sub-document `_modified` field updated. node deleted document looks like this: { "_deleted" : { "r13f3875b5d1-0-1" : "false", "r13f38835063-2-1" : "true" }, "_id" : "1:/node", "_lastrev" : { "r0-0-1" : "r13f38835063-2-1" }, "_modified" : numberlong(1371042695), "_modcount" : numberlong(3), "_revisions" : { "r13f3875b5d1-0-1" : "c", "r13f38818ab6-0-1" : "c", "r13f38835063-2-1" : "c" }, "prop" : { "r13f38818ab6-0-1" : "\"foo\"" "r13f38835063-2-1" : null } } `_deleted` sub-document contains `r13f38835063-2-1` field marking node deleted revision. reading node previous revisions still possible, even marked deleted revision `r13f38835063-2-1`. ### <a name="revisions"></a> revisions seen examples above, revision string may look like this: `r13f38835063-2-1`. consists three parts: * timestamp derived system time machine generated on: `13f38835063` * counter distinguish revisions created timestamp: `-2` * cluster node id revision created: `-1` ### <a name="commit-root"></a> commit root examples far showed changes committed simple case scope changes limited single node / document. case commit information `_revisions` sub-document stored document changes. scope commit spans multiple documents, commit information located nearest common ancestor changed documents. consider commit creates two nodes `/content/en/hello` `/content/de/hallo`. documents could look like this: { "_id" : "3:/content/en/hello", "_commitroot" : { "r16b03ec48a2-0-1" : "1" }, "_deleted" : { "r16b03ec48a2-0-1" : "false" }, "_modcount" : numberlong(1), "_modified" : numberlong(1559138945) } { "_id" : "3:/content/de/hallo", "_commitroot" : { "r16b03ec48a2-0-1" : "1" }, "_deleted" : { "r16b03ec48a2-0-1" : "false" }, "_modcount" : numberlong(1), "_modified" : numberlong(1559138945) } commit information located different document. reference document contains commit information stored entry `_commitroot` sub-document. example, entry `"r16b03ec48a2-0-1" : "1"` tells us document is. ancestor current document depth one: `1:/content`. find `_revisions` entry commit information: { "_id" : "1:/content", "_commitroot" : { "r1672b446f0a-0-1" : "0" }, "_deleted" : { "r1672b446f0a-0-1" : "false" }, "_modcount" : numberlong(24), "_modified" : numberlong(1559138945), "_children" : true, "_lastrev" : { "r0-0-1" : "r16b03ec48a2-0-1" }, "_revisions" : { "r16b03ec48a2-0-1" : "c" } } ### <a name="branches"></a> branches documentnodestore implementation support branches, allows stage multiple commits make visible single merge call. documentnodestore implementation creates branch automatically 100'000 changes pending. something controlled application code. see also osgi [configuration](../osgi_config.html#document-node-store) `documentnodestoreservice`. branch commit looks similar regular commit, instead setting value entry `_revisions` `c` (committed), marks base revision branch commit. contrast regular commits commit root common ancestor nodes modified commit, commit root branch commit always root node. branch likely multiple commits commit root must already known first commit happens branch. make sure following branch commits use commit root, documentnodestore simply picks root node, always works case. root node may look like this: { "_deleted" : { "r13fcda88ac0-0-1" : "false", }, "_id" : "0:/", "_lastrev" : { "r0-0-1" : "r13fcda91720-0-1" }, "_modified" : numberlong(1373544975), "_modcount" : numberlong(2), "_revisions" : { "r13fcda88ac0-0-1" : "c", "r13fcda91720-0-1" : "c" }, "prop" : { "r13fcda91720-0-1" : "\"foo\"" } } root node created revision `r13fcda88ac0-0-1` later revision `r13fcda91720-0-1` property `prop` set `foo`. keep example simple, assume branch created based revision root node last modified branch commit done modify existing property. branch commit root node looks like this: { "_deleted" : { "r13fcda88ac0-0-1" : "false", }, "_id" : "0:/", "_lastrev" : { "r0-0-1" : "r13fcda91720-0-1" }, "_modified" : numberlong(1373544975), "_modcount" : numberlong(3), "_revisions" : { "r13fcda88ac0-0-1" : "c", "r13fcda91720-0-1" : "c", "r13fcda919eb-0-1" : "r13fcda91720-0-1" }, "_bc" : { "r13fcda919eb-0-1" : "true" }, "prop" : { "r13fcda91720-0-1" : "\"foo\"", "r13fcda919eb-0-1" : "\"bar\"", } } note, `_bc` sub-document introduced oak 1.8 present older versions. branch commit revision added `_bc` whenever change done document branch commit. helps documentnodestore easily identify branch commit changes. point modified property visible reader reads branch revision `r13fcda919eb-0-1` revision marked base version commit `_revisions` sub-document. note, `_lastrev` updated branch commits branch merged. branch later merged, root node look like this: { "_deleted" : { "r13fcda88ac0-0-1" : "false", }, "_id" : "0:/", "_lastrev" : { "r0-0-1" : "r13fcda91b12-0-1" }, "_modified" : numberlong(1373544975), "_modcount" : numberlong(4), "_revisions" : { "r13fcda88ac0-0-1" : "c", "r13fcda91720-0-1" : "c", "r13fcda919eb-0-1" : "c-r13fcda91b12-0-1" }, "_bc" : { "r13fcda919eb-0-1" : "true" }, "prop" : { "r13fcda91720-0-1" : "\"foo\"", "r13fcda919eb-0-1" : "\"bar\"", } } now, changed property visible readers revision equal newer `r13fcda91b12-0-1`. logic used changes nodes belong branch commit. documentnodestore internally resolves commit revision modification decides whether reader able see given change. ### <a name="sweep-revision"></a> sweep revision `@since oak 1.8` oak 1.8 concept sweep revision introduced documentnodestore. sweep revision documentnodestore indicates revision non-branch changes guaranteed committed. allows optimize read operations lookup commit root document avoided cases. also means revision garbage collector remove previous documents contain `_revisions` entries older sweep revision. sweep revision maintained per clusterid root document. root document already presented above, amended sweep revision. { "_deleted" : { "r13fcda88ac0-0-1" : "false", }, "_id" : "0:/", "_lastrev" : { "r0-0-1" : "r13fcda91720-0-1" }, "_modified" : numberlong(1373544975), "_modcount" : numberlong(2), "_revisions" : { "r13fcda88ac0-0-1" : "c", "r13fcda91720-0-1" : "c" }, "_sweeprev" : { "r0-0-1" : "r13fcda91720-0-1", }, "prop" : { "r13fcda91720-0-1" : "\"foo\"" } } noted already, sweep revision apply branch commits. branch commits shortcut tell whether change given revision committed. changes always required look commit root document determine merge revision. also reason revision garbage collector cannot remove documents kind commit information. ### <a name="previous-documents"></a> previous documents time size document grows documentnodestore adds data document every modification, never deletes anything keep history. old data moved 100 commits moved document bigger 1 mb. document reference old data looks like this: { "_deleted" : { "r13fcda88ac0-0-1" : "false", }, "_id" : "0:/", "_lastrev" : { "r0-0-1" : "r13fcda91b12-0-1" }, "_modified" : numberlong(1373544975), "_modcount" : numberlong(1004), "_revisions" : { "r13fcda88ac0-0-1" : "c", "r13fcda91720-0-1" : "c", "r13fcda919eb-0-1" : "c-r13fcda91b12-0-1" }, "_bc" : { "r13fcda919eb-0-1" : "true" }, "_prev" : { "r13fcda91710-0-1" : "r13fcda88ae0-0-1/0" }, "prop" : { "r13fcda91720-0-1" : "\"foo\"", "r13fcda919eb-0-1" : "\"bar\"", } } optional sub-document `_prev` contains list revision pairs, indicating range commit revisions previous document contains. example one document previous commits `r13fcda88ae0-0-1` `r13fcda91710-0-1`. id previous document derived upper bound range, id/path current document height previous document tree. later. id previous document `r13fcda91710-0-1` `0:/` height zero `2:p/r13fcda91710-0-1/0` may looks like this: { "_id" : "2:p/r13fcda91710-0-1/0", "_modcount" : numberlong(1), "_sdtype" : numberlong(70), "_sdmaxrevtime" : numberlong(1373544975), "_revisions" : { "r13fcda88ae0-0-1" : "c", "r13fcda88af0-0-1" : "c", ... "r13fcda91710-0-1" : "c" }, "prop" : { "r13fcda88ae0-0-1" : "\"foo\"", "r13fcda88af0-0-1" : "\"bar\"", ... "r13fcda91710-0-1" : "\"baz\"" } } previous documents contain immutable data, means contains committed merged `_revisions`. also means previous ranges committed data may overlap branch commits moved previous documents branch merged. previous documents contain metadata present main document. previous document `_sdtype`, plays role revision garbage collector whether previous document collected later. `_sdtype` values defined enum [splitdoctype](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.12.0/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/nodedocument.java#l268). term "split document" used synonym "previous document". commonly used types (`_sdtype` parentheses): * default(10): contains kinds changes commit information. * intermediate(40): intermediate document creates tree split documents. * default_leaf(50): contains changes nodes leafs node tree. * commit_root_only(60): contains changes commit root document itself. * default_no_branch(70): contains kind changes commit information, except branches. revision garbage collection collect `_sdtype` values 40, 50, 60 70 previous documents older 24 hours (this configurable). previous documents `_sdtype` 10 currently kept forever. time main document accumulate reference previous documents. prevent unlimited growth main document, documentnodestore also move `_prev` entries new previous document type intermediate(40). happens whenever 10 `_prev` entries clusterid height. first intermediate previous document therefore created ten previous documents height 0 exist. { "_deleted" : { "r13fcda88ac0-0-1" : "false", }, "_id" : "0:/", "_lastrev" : { "r0-0-1" : "r13fcdb0190a-0-1" }, "_modified" : numberlong(1373544975), "_modcount" : numberlong(2404), "_revisions" : { "r13fcda88ac0-0-1" : "c", "r13fcda919eb-0-1" : "c-r13fcda91b12-0-1" }, "_bc" : { "r13fcda919eb-0-1" : "true" }, "_prev" : { "r13fcda91710-0-1" : "r13fcda88ae0-0-1/0", "r13fcda9293a-0-1" : "r13fcda91720-0-1/0", "r13fcdab07a4-0-1" : "r13fcdaa03ab-0-1/0", "r13fcdac4984-0-1" : "r13fcdac0389-0-1/0", "r13fcdac7a91-0-1" : "r13fcdac509a-0-1/0", "r13fcdad0a12-0-1" : "r13fcdac7c41-0-1/0", "r13fcdad940a-0-1" : "r13fcdad302d-0-1/0", "r13fcdae0a94-0-1" : "r13fcdade914-0-1/0", "r13fcdaef0a0-0-1" : "r13fcdae4d03-0-1/0", "r13fcdb0190a-0-1" : "r13fcdaf10f3-0-1/0", }, "prop" : { "r13fcda919eb-0-1" : "\"bar\"", } } would turned into: { "_deleted" : { "r13fcda88ac0-0-1" : "false", }, "_id" : "0:/", "_lastrev" : { "r0-0-1" : "r13fcdb0190a-0-1" }, "_modified" : numberlong(1373544975), "_modcount" : numberlong(2405), "_revisions" : { "r13fcda88ac0-0-1" : "c", "r13fcda919eb-0-1" : "c-r13fcda91b12-0-1" }, "_bc" : { "r13fcda919eb-0-1" : "true" }, "_prev" : { "r13fcdb0190a-0-1" : "r13fcda88ae0-0-1/1", }, "prop" : { "r13fcda919eb-0-1" : "\"bar\"", } } new intermediate split document: { "_id" : "2:p/r13fcdb0190a-0-1/1", "_prev" : { "r13fcda91710-0-1" : "r13fcda88ae0-0-1/0", "r13fcda9293a-0-1" : "r13fcda91720-0-1/0", "r13fcdab07a4-0-1" : "r13fcdaa03ab-0-1/0", "r13fcdac4984-0-1" : "r13fcdac0389-0-1/0", "r13fcdac7a91-0-1" : "r13fcdac509a-0-1/0", "r13fcdad0a12-0-1" : "r13fcdac7c41-0-1/0", "r13fcdad940a-0-1" : "r13fcdad302d-0-1/0", "r13fcdae0a94-0-1" : "r13fcdade914-0-1/0", "r13fcdaef0a0-0-1" : "r13fcdae4d03-0-1/0", "r13fcdb0190a-0-1" : "r13fcdaf10f3-0-1/0", }, "_sdtype" : numberlong(40), "_sdmaxrevtime" : numberlong(1373545435), "_modcount" : numberlong(1) } ## <a name="clock-requirements"></a> clock requirements revisions used documentnodestore identify sequence changes done items repository. also done across cluster nodes revisions different cluster node ids. requires system clocks machines running oak backend system approximately sync. recommended run ntp daemon similar service keep clock synchronized. oak allows clock differences 2 seconds machine oak running machine backend store (mongodb rdbms) running. oak may refuse start detects larger clock difference. clock differences machines running oak cluster result delayed propagation changes cluster nodes warnings log files. ## <a name="node-bundling"></a> node bundling `@since oak 1.6` refer [node bundling](document/node-bundling.html) ## <a name="background-operations"></a> background operations documentnodestore instance connecting database mongo server performs certain background task. ### <a name="renew-cluster-id-lease"></a> renew cluster id lease cluster node uses unique cluster node id, last part revision id. cluster node lease cluster node id, described section [cluster node metadata](#cluster_node_metadata). ### <a name="background-document-split"></a> background document split documentnodestore periodically checks documents size necessary splits moves old data previous document. done background documentnodestore instance data created. ### <a name="background-writes"></a> background writes performing commits certain nodes modified become part commit. example node /a/b/c updated `_lastrev` property ancestors also need updated commit revision. changes accumulated flushed periodically asynchronous job. ### <a name="bg-read"></a> background reads documentnodestore periodically picks changes documentnodestore instances polling root node changes `_lastrev`. happens every second. ## <a name="metrics"></a> metrics monitoring see [documentnodestore documentstore metrics](document/metrics.html). ## <a name="cluster-node-metadata"></a> cluster node metadata cluster node metadata stored `clusternodes` collection. one entry cluster node running, may entries cluster nodes running past. old entries kept cluster node started again, gets cluster node id (which strictly needed consistency, nice support, one would want find change originated cluster node). starting oak 1.10, acquiring cluster node id changed slightly. cluster node may also acquire inactive cluster node id created another cluster node. entries `clusternodes` collection may look like this: > db.clusternodes.find().pretty() { "_id" : "1", "_modcount" : numberlong(490), "state" : "active", "leaseend" : numberlong("1390465250135"), "instance" : "/home/oak", "machine" : "mac:20c9d043f141", "info" : "...pid: 983, uuid: 6b6e8e4f-8322-4b19-a2b2-de0c573620b9 ..." } { "_id" : "2", "_modcount" : numberlong(492), "state" : "active", "leaseend" : numberlong("1390465255192"), "instance" : "/home/oak", "machine" : "mac:30c3d053f247", "info" : "...pid: 843, uuid: 28ada13d-ec9c-4d48-aeb9-cef53aa4bb9e ..." } example, two active cluster nodes running ids `1` `2`. `_id` corresponds last part revisions generated cluster node. please note, `_id` representation base 10, id part revision base 16! `instance` current working directory `machine` lowest number active network adapter's mac address. active network adapter available, value `machine` field random uuid. `info` field contains info string, plus additional information like process id. diagram shows different states cluster node entry in. ![cluster node id state diagram](document/cluster-node-lease.png) ### <a name="acquire-a-cluster-node-id"></a> acquire cluster node id different ways cluster node acquires id. simple case existing entries `clusternodes` collection cluster node create new active entry `_id="1"`. `leaseend` already set value higher current time. entry considered active use. similarly, second cluster node starts up, create new active entry `_id="2"` cluster nodes. cluster node shut down, cluster node id released put inactive state. reflected entry `state` `leaseend` field set `null`. startup, cluster node re-acquire entry `machine` `instance` field match environment. immediately restarting crashed cluster node lead somewhat delayed startup, cluster node find matching active cluster node id. case, cluster node wait lease expires (up two minutes process crashed right lease extended) run recovery process cluster node id. depending timing, recovery may also started another active cluster node. case, starting cluster node would wait one minute recovery finish. either way, recovery successful, cluster node id transitioned inactive state acquired described before. new cluster node started inactive entry, cluster node try acquire it, even environment match `machine` `instance` fields. behaviour new introduced oak 1.10. previous versions ignore entries match environment would create new entry. ### <a name="update-lease-for-a-cluster-node-id"></a> update lease cluster node id running cluster node updates `leaseend` time cluster node id every ten seconds, ensure cluster node uses different cluster node id. time number milliseconds since 1970 every update `leaseend` set two minutes ahead current time. lease mechanism allows cluster nodes identify active, inactive crashed cluster nodes. starting oak 1.4 documentnodestore invoke lease failure handler unable renew lease time. deployed osgi container, `documentnodestoreservice` implements lease failure handler stop bundle documentnodestore implementation. point appropriate monitoring system detect situation restart process. addition calling lease failure handler, documentnodestore also reject future access underlying `documentstore` `documentstoreexception`. initial lease update mechanism implemented oak 1.4 somewhat lenient. implementation allows lease update actually knows lease expired. reason decision developer friendliness. debugging system often means jvm suspended while, may result expired lease. situation, documentnodestore gives background lease update thread chance still update lease. oak 1.10 new lease update mode introduced: `strict`. new default immediately rejects access documentstore calls failure handler, detects expired lease. previous behaviour still available `lenient` mode. see also osgi [configuration](../osgi_config.html#document-node-store) `documentnodestoreservice`. testing purposes also possible disable lease check entirely system property: `-doak.documentmk.disableleasecheck=true`. ### <a name="recovery-for-a-cluster-node-id"></a> recovery cluster node id recovery becomes necessary lease cluster node id entry expires. usually happens process acquired cluster node id crashes, lease may also expire cluster node fails extend lease time. latter case, cluster node obligated stop operations document store. current implementation blocking operations document store level stopping oak-store-document bundle detects outdated lease. active cluster nodes restarted cluster node responsible running recovery relevant cluster node id setting state back inactive. cluster node run recovery process, recovery lock cluster node id entry must acquired. lock protected lease detect crashed cluster node performing recovery left behind recovery lock. cluster nodes therefore check whether cluster node id identified `recoveryby` still active try break recovery lock recovering cluster node considered inactive expired. special case starting cluster node performs recovery itself. is, cluster node id wants acquire first run recovery it. case lease updated cluster node entry id entry needs recovery. happens recovery lock set entry. starting cluster node must finish recovery within initial lease deadline, otherwise recovery considered failed starting cluster node acquire different (potentially new) id. failed recovery performed later background job one active cluster nodes. ### <a name="rw-preference"></a> specifying read preference write concern see [configuration](document/mongo-document-store.html#configuration) `mongodocumentstore`. ## <a name="cache"></a> caching `documentnodestore` maintains multiple caches provide optimum performance. default cached instances kept heap memory caches backed [persistent cache](persistent-cache.html). 1. `documentcache` - document cache used caching `nodedocument` instance. memory representation persistent state. example case mongo maps mongo document `nodes` collection rdb maps row `nodes` table. class `nodedocument` (leaf level split documents) which, since `1.3.15` cached `prevdoccache` (see below) depending `documentstore` implementation different heuristics applied invalidating cache entries based changes backend 2. `prevdoccache` - previous document cache used caching `nodedocument` instance representing leaf level split documents. unlike type `nodedocument`, immutable hence require invalidation. configured, cache exploit persistent cache well. similar `nodedocument` also memory representation persistent state. (since `1.3.15`) depending `documentstore` implementation different heuristics applied invalidating cache entries based changes backend 3. `docchildrencache` - document children cache used cache children state given parent node. invalidated completely upon every background read. cache removed 1.5.6. 4. `nodecache` - node cache used cache `documentnodestate` instances. **immutable** view `nodedocument` seen given revision hence consistency checks performed 5. `childrencache` - children cache used cache children given node. also **immutable** represent state children given parent certain revision 5. `diffcache` - caches diff changes done successive revision. local changes done diff add cache upon commit external changes diff entries added upon computation diff part observation call caches managed heap. last 3 `nodecache`, `childrencache` `diffcache` oak provides support [persistent cache] (persistent-cache.html). enabling persistent cache feature oak manage much larger cache heap thus avoid freeing heap memory application usage. ### <a name="cache-invalidation"></a> cache invalidation `documentcache` `docchildrencache` containing mutable state requires consistency checks performed keep sync backend persisted state. oak uses mvcc model maintains consistent view given node given revision. allows using local cache instead using global clustered cache changes made cluster node need instantly reflected nodes. cluster node periodically performs [background reads](#bg-read) pickup changes done cluster nodes. time performs [consistency check] [oak-1156] ensure cached instance state reflect state backend persisted state. performing check would take time would proportional number entries present cache. repository work properly important ensure background reads consume much time [work underway][oak-2646] improve current approach. _to ensure background operation (which include cache invalidation checks) perform quickly one set large size caches_. caches consist immutable state hence cache invalidation needs performed them. reason caches backed persistent cache even large number entries caches would matter concern. ### <a name="cache-configuration"></a> cache configuration default setup [documentnodestoreservice][osgi-config] takes single config `cache` internally distributed among various caches following way 1. `nodecache` - 35% (was 25% 1.5.14) 2. `prevdoccache` - 4% 3. `childrencache` - 15% (was 10% 1.5.14) 4. `diffcache` - 30% (was 4% 1.5.14) 5. `documentcache` - given rest i.e. 16% 6. `docchildrencache` - 0% (removed 1.5.6, default 3%) lately [options provided][oak-2546] fine grained control distribution. see [cache allocation][cache-allocation] distributing ensure cache left `documentcache` large i.e. prefer keep ~500 mb max lower. large `documentcache` lead increase time taken perform cache invalidation. make use persistent cache. reduces pressure gc keeping instances heap slight decrease performance compared keeping heap. ## <a name="unlockupgrade"></a> unlock upgrade startup documentnodestore checks version compatible format version currently use. read-only documentnodestore read current version well older versions. read-write documentnodestore hand write documentstore format version matches version. documentnodestore maintains format version `settings` collection accessible cluster nodes. upgrading newer oak version may therefore first require update format version newer version documentnodestore started existing data. oak-run tools contains `unlockupgrade` mode perform operation. use oak-run tool version matching target upgrade version unlock upgrade following command. example unlocks upgrade 1.8 documentnodestore mongodb: > java -jar oak-run-1.8.0.jar unlockupgrade mongodb://example.com:27017/oak please note unlocking upgrade possible cluster nodes inactive, otherwise command refuse change format version. see also detailed instructions various [upgrade](document/upgrade.html) paths. ## <a name="secondary-store"></a> secondary store `@since oak 1.6` refer [secondary store](document/secondary-store.html) ## <a name="revision-gc"></a> revision garbage collection described section [node content model](#node-content-model), documentnodestore overwrite existing data adds existing document property updated. cleaning old data, needed anymore done process called `revision garbage collection`. depending deployment process run automatically must triggered periodically application. garbage collection process adds pressure system, application trigger convenient. e.g. night, systems usually busy. usually sufficient run day. several ways revision garbage collection triggered: * call `startrevisiongc()` [repositorymanagementmbean](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/api/jmx/repositorymanagementmbean.html) * call [gc()](http://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/document/versiongarbagecollector.html#gc-long-java.util.concurrent.timeunit-) `versiongarbagecollector` obtained `documentnodestore` instance * use oak-run runnable jar file `revisions` run mode (`@since oak 1.8`). first two options described detail, simple method calls. third option comes sub commands described oak-run `revisions` run mode invoked without parameters options: revisions mongodb://host:port/database <sub-command> [options] (or, rdbmk instances, use "jdbc:..."). sub-command one info give information revisions state without performing modifications collect perform garbage collection reset clear persisted metadata sweep clean uncommitted changes option description ------ ----------- -?, -h, --help show help --cachesize <integer> cache size (default: 0) --clusterid <integer> documentmk clusterid (default: 0) --continuous run continuously (collect only) --delay <double> introduce delays reduce impact system (default: 0.0) --disablebranches disable branches --limit <integer> collect limit documents (default: -1) --olderthan <long> collect docs older n seconds (default: 86400) --once 1 iteration --rdbjdbcpasswd rdb jdbc password (default: ) --rdbjdbcuser rdb jdbc user (default: ) --timelimit <long> cancel garbage collection n seconds (default: -1) --verbose print info messages console revision garbage collection invoked system online running. using oak-run runnable jar, revision gc system using mongodb backend initiated with: java -jar oak-run-1.8.0.jar revisions mongodb://localhost:27017/oak collect collect changes identified garbage, older 24 hours. starting oak 1.8 documentnodestoreservice trigger revision garbage collection (rgc) automatically. default schedule depends type backend. rdb service schedule rgc, behavior previous oak versions. whereas mongodb rgc runs every five seconds. latter also known `continuous revision garbage collection`. mode, rgc log every run write info message every hour summarizing gc cycles past hour. details, see also [osgi configuration][osgi-config] page. ## <a name="pending-topics"></a> pending topics ### <a name="conflict-detection-and-handling"></a> conflict detection handling [oak-1156]: https://issues.apache.org/jira/browse/oak-1156 [oak-2646]: https://issues.apache.org/jira/browse/oak-2646 [oak-2546]: https://issues.apache.org/jira/browse/oak-2546 [oak-7316]: https://issues.apache.org/jira/browse/oak-7316 [osgi-config]: ../osgi_config.html#document-node-store [cache-allocation]: ../osgi_config.html#cache-allocation # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/segmentmk.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> segment storage design overview ========================= *note:* information page applies older version tarmk mainly historical interest. documentation current versions see [oak segment tar](segment/overview.html). segmentnodestore oak storage backend stores content various types *records* within larger *segments*. one *journals* used track latest state repository. tar implementation one "root" journal used. segmentnodestore designed ground based following key principles: * immutability. segments immutable, makes easy cache frequently accessed segments. also makes less likely programming system errors cause repository inconsistencies, simplifies features like backups master-slave clustering. * compactness. formatting records optimized size reduce io costs fit much content caches possible. node stored segmentnodestore typically consumes fraction size would bundle jackrabbit classic. * locality. segments written related records, like node immediate children, usually end stored segment. makes tree traversals fast avoids cache misses typical clients access one related node per session. document describes overall design segmentnodestore. see source code javadocs `org.apache.jackrabbit.oak.plugins.segment` full details. segments ======== content tree revisions stored collection immutable segments. segment identified uuid typically contains continuous subset content tree, example node properties closest child nodes. segments might also used store commonly occurring property values shared data. segments 256kib size. segments come two types: data bulk segments. type segment encoded uuid thus determined already reading segment. following bit patterns used (each `x` represents four random bits): * `xxxxxxxx-xxxx-4xxx-axxx-xxxxxxxxxxxx` data segment uuid * `xxxxxxxx-xxxx-4xxx-bxxx-xxxxxxxxxxxx` bulk segment uuid (this encoding makes segment uuids appear syntactically valid version 4 random uuids specified rfc 4122.) bulk segments ------------- bulk segments contain raw binary data, interpreted simply sequence block records headers extra metadata: [block 1] [block 2] ... [block n] bulk segment whose length `n` bytes consists `n div 4096` block records 4kib followed possibly block record `n mod 4096` bytes, still remaining bytes segment. structure bulk segment thus determined based segment length. data segments ------------- data segment contain types records, may refer content segments, comes segment header guides parsing segment. overall structure data segment is: [segment header] [record 1] [record 2] ... [record n] header record zero-padded make size multiple four bytes align next record four-byte boundary. segment header consists following fields: +--------+--------+--------+--------+--------+--------+--------+--------+ | magic bytes: "0ak" ascii |version |reserved|idcount |rootcount | +--------+--------+--------+--------+--------+--------+--------+--------+ | blobrefcount | reserved (set 0) | +--------+--------+--------+--------+--------+--------+--------+--------+ | referenced segment identifiers (idcount x 16 bytes) | | | | ...... | | | +--------+--------+--------+--------+--------+--------+--------+--------+ | root record references (rootcount x 3 bytes) | | | | ...... +--------+--------+--------+ | | | +--------+--------+--------+--------+--------+ + | external blob record references (blobrefcount x 2 bytes) | | | | ...... +--------+--------+--------+ | | padding (set 0) | +--------+--------+--------+--------+--------+--------+--------+--------+ first three bytes segment always contain ascii string "0ak", intended make binary segment data format easily detectable. next byte indicates version segment format, set 10 segments follow format described here. `idcount` byte indicates many segments referenced records within segment. identifiers segments listed starting offset 16 segment header. lookup table 255 segment identifiers used optimize garbage collection avoid repeat 16-byte uuids whenever references records segments made. 16-bit `rootcount` field indicates number root record references follow segment identifier lookup table. root record references debugging recovery aid, needed normal operation. identify types locations records within segment accessible following references records within segment. <s>these root references give enough context parsing records within segment without external information.</s> see [oak-2498](https://issues.apache.org/jira/browse/oak-2498). 16-bit `blobrefcount` field indicates number external blob record references follow root record references. external blobs binary values stored external data store, blobref list makes possible quickly find references without full traversal repository content. list active references given data store garbage collection collect referenced binaries. segment compaction ------------------ segment compaction needed repository size grows unmanageable size. growth happen lot repository write operations might create considerable amount content revisions need get garbage collected. simplest solution schedule revision garbage collection exposed jmx operation via `revisiongarbagecollection` mbean. non-blocking operation, set internal flag compaction next `flush` call. workaround case size already big, might want run manual compaction using [oak run](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-run/readme.md) tool. journals ======== journals special, atomically updated documents record state repository sequence references successive root node records. small system (like tar) could use single journal would serialize repository updates atomic updates journal. larger system needs write throughput journals, linked tree hierarchy. commits journals lower levels tree proceed concurrently, need periodically merged back root journal. potential conflicts resulting data loss inconsistency caused merges avoided always committing root journal. root node references stored journals used starting point garbage collection. assumed content currently visible clients must accessible least one journals. client wants keep reference old content revision that's longer referenced one main journals, create empty private branch based revision keep refreshing branch content longer needed. records ======= content inside segment divided records different types: blocks, lists, maps, values, templates nodes. record types internal structures described subsections below. record uniquely addressable location within segment uuid segment. single segment contain 256kib data references 256 segments (including itself). since records aligned four-byte boundaries, 16 bits needed address possible record locations within segment. thus three bytes needed store reference record segment (1 byte identify segment, 2 bytes record offset): +--------+--------+--------+ | refid | offset | +--------+--------+--------+ `refid` filed number referenced segment identifier, refid zero interpreted reference current segment refids 1-255 segment identifiers stored lookup table segment header. block records ------------- blocks binary records 4kb. they're used building blocks large binary (or string) values stored as-is extra metadata structure. blocks record type can't contain references records. block records typically stored *bulk segments* consist block records thus easily identifiable containing zero references segments. list records ------------ list records used components complex record types. lists used storing arrays values multi-valued properties sequences blocks large binary values. list references split pieces 255 references pieces stored records. 255 pieces like that, higher-level list created references pieces. process continued resulting list less 255 entries. +--------+--------+--------+-----+ | sub-list id 1 | ... | +--------+--------+--------+-----+ | v +--------+--------+--------+-----+--------+--------+--------+ | record id 1 | ... | record id 255 | +--------+--------+--------+-----+--------+--------+--------+ result hierarchically stored immutable list element accessed o(log n) time size overhead updating appending list elements (and thus creating new immutable list) also o(log n). map records ----------- like lists, maps components complex record types. maps store unordered sets key-value pairs record references used nodes large number properties child nodes. maps stored using hash array mapped trie (hamt) data structure. hash code key split pieces 5 bits keys sorted 32 (2^5) buckets based first 5 bits. bucket contains less 32 entries, stored directly list key-value pairs. otherwise keys split sub-buckets based next 5 bits hash codes. buckets stored, list top-level bucket references gets stored along total number entries map. result hierarchically stored immutable map element accessed o(log n) time size overhead updating inserting list elements also o(log n). todo: links hamt documentation value records ------------- value records byte arrays used storing names values content tree. since item names thought name values since jcr oak values expressed binary form (strings encoded utf-8), easiest simply use form storing values. size overhead form small value types like booleans dates amortized facts types used minority values typical content trees repeating copies value stored once. four types value records: small, medium, long external. small- medium-sized values stored inline form, prepended one two bytes indicate length value. long values two exabytes (2^61) stored list block records. finally external value record contains length value string reference (up 4kb length) external storage location. type value record encoded high-order bits first byte record. bit patterns are: * `0xxxxxxx`: small value, length (0 - 127 bytes) encoded 7 bits * `10xxxxxx`: medium value length (128 - 16511 bytes) encoded 6 + 8 bits * `110xxxxx`: long value, length (up 2^61 bytes) encoded 5 + 7*8 bits * `1110xxxx`: external value, reference string length encoded 4 + 8 bits template records ---------------- template record describes common structure family related nodes. since structures nodes typical content tree fall small set common templates, makes sense store templates separately instead repeating information separately node. example, property names types well child node names nt:file nodes typically same. presence mixins different subtypes increases number different templates, they're typically still far fewer nodes repository. template record consists set n (exact size tbd, n ~ 256) property name type pairs. additionally, since nodes empty contain single child node common, template record also contains information whether node zero, one many child nodes. case single child node, template also contains name node. example, template typical mix:versionable nt:file nodes would (using cnd-like notation): - jcr:primarytype (name) - jcr:mixintypes (name) multiple - jcr:created (date) - jcr:uuid (string) - jcr:versionhistory (reference) - jcr:predecessors (reference) multiple - jcr:baseversion (reference) + jcr:content names used template stored separate value records included reference. way multiple templates example contain "jcr:primarytype" property name need repeatedly store it. node records ------------ overall structure content tree stored node records. node records hold actual content structure repository. typical node record consists template reference followed property value references (list references multivalued properties) zero, one child node entries indicated template. node one child nodes, entries stored array name-node pairs references. node contains n properties child nodes (exact size tbd, ~ 1k) stored differently, using map records properties child nodes. way node become arbitrarily large still remain reasonably efficient access modify. main downside alternative storage layout ordering child nodes lost. tar ===== todo: - tar entry checksums - graph index entries - recovery mechanism - tar generations / cleanup - journal.log - compaction - cleanup - backup - slow startup / journal.log # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/segment/onrc-memoirs.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> memoirs garbage collection ============================= brief outline history online revision garbage collection oak. linking details necessary historical context helps making sense various bits information scattered across jira issues, wikis, source code etc. refer [oak segment tar](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html) jackrabbit oak wiki general overview segment store, design, data structures inner workings. background ---------- online revision cleanup (onrc) refers technique employed segment store reclaim disk space longer use. implementation structured three phases: * estimation: heuristic determine whether enough garbage accumulated warrant running garbage collection all. * compaction: records segment store's current head state rewritten new, structurally equal head state. records rewritten head state compact within segment rewriting skips records reachable root node state. * cleanup: reclaimable segments removed. reclaimability determined either reachability segment graph age segment depending version oak. oak 1.0 - 1.4 ------------- online revision garbage collection work including oak 1.4 able collect garbage. version onrc relied upon false premises one hand impacted bug [(oak-3348)](https://issues.apache.org/jira/browse/oak-3348) hand. [compaction](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/filestore.java#l1045) phase uses instance [`compactor`](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/compactor.java#l54) class [rewriting](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/filestore.java#l1061) current head state repository. `compactor` works [comparing](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/compactor.java#l160) `before` state `after` state applying differences `onto` state. initial pass current head state repository passed `after` state [empty node](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/emptynodestate.java#l37) passed `before` `onto`. initial phase completes attempt made [set](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/filestore.java#l1075) repository's head state resulting node state via atomic compare set operation. fails case concurrent write operations repository changed head state meanwhile. case retry loop entered additional changes [compacted](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/filestore.java#l1082) top previously compacted head state. configurable (default 5) numbers retires final attempt made [force compact](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/filestore.java#l1099) remaining changes blocking writes repository configurable (default 1 minute) time. force compacting also fails compaction considered failed. compaction finished, either successfully not, [`cleanup`](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/filestore.java#l869) tries remove content reachable more. however, record graph repository grows large quickly. avoid traversing large record graphs, cleanup phase operates segment graph induced record graph. is, two segments `s1` `s2`, edge `s1` `s2` `s1` contains record references record `s2`. construction segment graph contains far less vertices record graph. speed traversal pre-calculated cached segment headers graph entry tar file. segment graph sufficiently small efficient traversal, also extremely dense. fact turned reflexive, transitive closure entire graph time. reason seen looking example segment contains single reachable record `n` unreachable records. case single reachable record makes segment reachable preventing reclaimed along `n` non reachable records. make matters worse, segments referenced segment also stay reachable set, although single reachable record might outgoing references all. traversing segment graph starts set [root segments](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/filestore.java#l887). segments currently references jvm (i.e. ultimately use code either within oak within client). set referenced segments determined [`tarreader`](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/tarreader.java#l58) [cleaned up](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/tarreader.java#l752) individually. new tar file containing still referenced segments generated unless [space saving worth it](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/tarreader.java#l789). [oak-1828](https://issues.apache.org/jira/browse/oak-1828) complicated process determining segment graph improvements done issue inadvertently introduced potential cycles segment graph. idea introduce [pool `segmentbufferwriter`](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/segmentwriter.java#l796) instances avoid contention single instance concurrently writing segment store. however, depending writes interleaved scheduled `segmentbufferwriter` instances pool opened possibility [cycles segment graph](https://issues.apache.org/jira/browse/oak-3864), `cleanup` needs take [consideration](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/filestore.java#l900) determining segment graph. even though online compaction rewrites records current head state new compact representation repository's head separate set segments, presence open sessions referencing older revisions prevents reclaimed. addition [oak-3348](https://issues.apache.org/jira/browse/oak-3348) could cause segments compacted revision still reference segments pre-compacted revision. together segment graph dense prevented almost segment reclaimed oak 1.4 earlier. see also annotated slides [into tar pit: tarmk deep dive](https://adapt.to/2016/en/schedule/into-the-tar-pit--a-tarmk-deep-dive.html) illustrations topic. oak 1.6 ------- oak 1.6 first version workable onrc overcoming problems open sessions keeping references previous revisions fixing [(oak-3348)](https://issues.apache.org/jira/browse/oak-3348). required changes persistence format forcing existing customers [migrate](https://helpx.adobe.com/experience-manager/6-3/sites/deploying/using/revision-cleanup.html#onlinerevisioncleanupfrequentlyaskedquestions) deployments. ### generational garbage collection oak 1.6 changed mechanism used determine reclaimability segments. previous versions used reachability segment graph starting set gc roots consisting segment containing current head node state segments containing records currently referenced jvm (i.e. open sessions). oak 1.6 introduced concept [gc generation](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segment.java#l380). gc generation integer starting 0 increasing run onrc. segment records current gc generation time segment created [segment header](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentbufferwriter.java#l200-l203). current gc generation repository gc generation segment containing current head state. compactor [reads](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l845) current gc generation repository [rewrites](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l864) head state using next gc generation number segments created process. compactor finished rewriting current head state newly created, compact head state [atomically set](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l876) new head state repository, implicitly atomically increasing gc generation repository time. default configuration [cleanup](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l1055) phase retains segments current gc generation previous one reclaiming older segments. default daily onrc execution results minimal segment retention time 24 hours. sessions open point time onrc runs automatically [refresh](https://issues.apache.org/jira/browse/oak-2407) next access reduce risk reference content segments reclaimed. since [bulk segments](http://jackrabbit.apache.org/oak/docs/nodestore/segment/records.html#bulk_segments) segment header thus cannot record gc generation, cleanup phase still uses [reachability](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/tarreader.java#l754) segment graph determine whether bulk segment reclaimable. is, bulk segment reclaimable reachable segment graph non reclaimable data segments starting initial set [root segment ids](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l1076). ### preventing references segments different gc generations generation based garbage collection approach disallows references segments different gc generations otherwise reclaiming older generation would render newer one incomplete potentially causing [`segmentnotfoundexception`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentnotfoundexception.java#l27)s subsequently. unfortunately oak 1.4 references segments different gc generations could introduced sessions acquired onrc cycle completed. sessions would reference records segments previous gc generations base state. session subsequently saves changes written segments new gc generation effectively creating references gc generation previous one. see [(oak-3348)](https://issues.apache.org/jira/browse/oak-3348) full story. prevent reference segments different gc generations references need detected affected records rewritten current gc generation. is, whenever node state written [`segmentwriter`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentwriter.java#l85) references existing records [checked](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentwriter.java#l1188) records rewritten refer current generation. rewriting potentially expensive base state [`nodebuilder`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/state/nodebuilder.java) might cover (a previous revision) whole repository. expensive terms cpu io cycles term extra disk space hold rewritten base state. however situation occurs records base state likely already rewritten onrc: recent compacted head state rewritten onrc node state recent revision base state, likely sharing many records. avoid rewriting records multiple times `segmentwriter` employs [deduplication caches](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentwriter.java#l128) [node records](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/writercachemanager.java#l108), [string records](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/writercachemanager.java#l94) [template records](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/writercachemanager.java#l101). deduplication caches indexed gc generation records [evicted](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestorebuilder.java#l441) caches generation. eviction happens [older generations](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestorebuilder.java#l448) needed [onrc succeeded](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l935). eviction happens [generation created](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestorebuilder.java#l457) onrc case [failure](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l834). string records template records [deduplication caches](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/recordcache.java) ultimately backed [hash map](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/recordcache.java#l171-l181) lru eviction policy. node records situation complicated determining structural equality means traversal potentially large subtree rooted record. also relying [`recordid`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/recordid.java) work equality `recordid`s necessary condition structural equality node records sufficient one. is, node record rewritten compaction clone structurally equal original yet different `recordid`. overcome problem [stable id](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentnodestate.java#l119) would change rewriting node state introduced. stable id used `segmentwriter` [cache key](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentwriter.java#l1157) deduplicating node records. finally node deduplication cache backed custom [prioritycache](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/prioritycache.java#l60) implementation. cache uses efficient rehashing array resolve hash clashes time using [cost measure](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/prioritycache.java#l200-l230) avoid evicting expensive items. [cost](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentwriter.java#l1004) node increases number child nodes, increases chance nodes stay cache. put everything together onrc oak 1.6 uses different approach [compaction](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l983) offrc. latter uses [`compactor`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java) class like previous versions oak, former passes current head state [`segmentwriter.writenode`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentwriter.java#l343) `segmentwriter` next gc generation. causes head state rewritten segments next gc generation filling deduplication caches process. oak 1.8 ------- oak 1.8 introduced two main improvements top gc generation based garbage collection approach oak 1.6: sequential rebasing checkpoints top tail compaction, lighter variant compaction roughly comparable jvm's young generation garbage collection. ### sequential checkpoint rebasing segment store implements checkpoints links (previous) root node states [child node](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/scheduler/lockbasedscheduler.java#l383) `checkpoints` node super root. oak 1.6 compaction concerned checkpoints rather treated regular nodes solely relying [node deduplication cache](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/defaultsegmentwriter.java#l967) prevent exploded. approach scale well could lead [high io rates](https://issues.apache.org/jira/browse/oak-6984). oak 1.8 improved aspect considering checkpoints compaction instead relying node deduplication cache. done using [`compactor`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java#l56) sequentially rebase [checkpoints repository root](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/checkpointcompactor.java#l119) [top other](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/checkpointcompactor.java#l160) subsequently reassembling right [super-root structure](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/checkpointcompactor.java#l128-l138). additional optimisation already compacted checkpoints [cached](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/checkpointcompactor.java#l249) prevent passed compactor common case changes checkpoints. ### tail compaction full compaction whole repository effective way remove accumulated garbage. achieve this, full compaction rewrites content regardless whether updates causing fragmentation not. result approach resource intensive (mainly wrt. io) take lot time complete. oak 1.8 introduced another compaction mode termed [tail compaction](https://issues.apache.org/jira/browse/oak-3349). contrast full compaction, tail compaction compact whole repository revisions updated since last compaction. tail compaction implemented compacting current head state repository top [previously compacted head state](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l730). range revisions starting previously compacted head state current head state covers updates since last compaction, effectively making tail compaction cover revisions updated since last compaction. tail compaction also regarded generalisation full compaction. latter current head state [compacted top empty node state](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l723). former current head state [compacted top previously compacted head state](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/filestore.java#l730). since tail compaction relies previously compacted head state subsequent cleanup phase needs take consideration. is, cleanup needs aware type compaction created certain segment determine reclaimability. required generalising gc generation simple integer [`gcgeneration` class](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/tar/gcgeneration.java#l52) captures concept full tail compaction. instances class represent garbage collection generation related information segment. consists segment's generation, full generation compaction flag. segment's generation records number garbage collection cycles segment went incremented every garbage collection regardless type. segment's full generation records number full garbage collection cycles segment went through. incremented full garbage collection cycles. segment's compaction flag set segments created compaction operation. never set segments created normal write operations. segments written normal repository writes inherit generation full generation segment written previous compaction process compacted flag cleared. information recorded way allows determine reclaimability status segment looking `gcgeneration` instances segment segment containing repository head: let `s` segment, `h` segment containing current repository head `n` number retained generations: * `s` old `h.generation - s.generation >= n` * `s` compaction tail like `h` `s.iscompacted && s.fullgeneration == h.fullgeneration` * `s` reclaimable `s` old `s` compaction tail like `h`. logic captured respective implementations [reclaim predicate](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/reclaimers.java#l61) [`reclaimers` class](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/reclaimers.java#l33). > *note:* oak 1.8.0 [bug](https://issues.apache.org/jira/browse/oak-7132) implementation reclamation mechanism described. bug fixed oak 1.8.1, version oak section referring to. ### compactor strikes back oak 1.6 removed [`compactor` class](https://github.com/apache/jackrabbit-oak/blob/1.4/oak-segment/src/main/java/org/apache/jackrabbit/oak/plugins/segment/compactor.java#l54) favour directly rewriting node states [`segmentwriter`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.6.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentwriter.java#l85) solely relying deduplication caches deduplicating records. implement sequential checkpoint rebasing tail compaction oak 1.8 reintroduced new implementation [`compactor` class](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java#l56). implementation deal two additional requirements compared previous implementation: tracking assigning stable ids able cope large number direct child nodes node. done tracking changes [`memorynodebuilder`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java#l163) instead using `nodebuilder` acquired calling `nodestate.builder`. new [`segmentwriter.write`](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/segmentwriter.java#l130) method extra argument stable used [write](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java#l175) compacted node states including stable id. addition number updates `memorynodebuilder` [tracked](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java#l154-l160) [intermediate node written](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java#l156) avoid keeping many updates memory [update limit](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java#l62) exceeded. updates tracked fresh `memorynodebuilder` instance uses [intermediate node base](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.8.1/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/compactor.java#l157). oak 1.10 -------- oak 1.6 oak 1.8 observed running compaction first increases repository cleanup runs subsequently removes generation become reclaimable. oak 1.10 improved aspect running cleanup *before* compaction thus levelling bump repository size cause compaction phase. effort included refactorings making garbage collection modular: * [oak-7377](https://issues.apache.org/jira/browse/oak-7377) generalised [garbage collector](https://github.com/apache/jackrabbit-oak/blob/jackrabbit-oak-1.10.0/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/garbagecollector.java#l46) allowing multiple implementations. * [oak-7440](https://issues.apache.org/jira/browse/oak-7440), [oak-7434](https://issues.apache.org/jira/browse/oak-7434) [oak-7436](https://issues.apache.org/jira/browse/oak-7436) factored estimation, compaction cleanup independent components. * [oak-7445](https://issues.apache.org/jira/browse/oak-7445) introduced new cleanup compaction garbage collection strategy. * [oak-7550](https://issues.apache.org/jira/browse/oak-7550) eventually set cleanup compaction strategy new default oak 1.10. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/segment/overview.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # oak segment tar * [overview](#overview) * [garbage collection](#garbage-collection) * [generational garbage collection](#generational-garbage-collection) * [estimation, compaction cleanup](#estimation-compaction-cleanup) * [offline garbage collection](#offline-garbage-collection) * [online garbage collection](#online-garbage-collection) * [monitoring](#monitoring) * [tools](#tools) * [segment-copy](#segment-copy) * [backup](#backup) * [restore](#restore) * [check](#check) * [compact](#compact) * [debug](#debug) * [iotrace](#iotrace) * [diff](#diff) * [history](#history) * [recover journal](#recover-journal) ## <a name="overview"/> overview oak segment tar oak storage backend stores content various types *records* within larger *segments*. segments collected within *tar files* along auxiliary information. *journal* used track latest state repository. based following key principles: * *immutability*. segments immutable, makes easy cache frequently accessed segments. also makes less likely programming system errors cause repository inconsistencies, simplifies features like backups master-slave clustering. * *compactness*. formatting records optimized size reduce io costs fit much content caches possible. * *locality*. segments written related records, like node immediate children, usually end stored segment. makes tree traversals fast avoids cache misses typical clients access one related node per session. content tree revisions stored collection immutable *records* within *segments*. segment identified uuid typically contains continuous subset content tree, example node properties closest child nodes. segments might also used store commonly occurring property values shared data. segments 256kib size. see [segments records](records.html) detailed description segments records. segments collectively stored *tar files* check-summed ensure integrity. tar files also contain index tar segments, graph segment references segments contains index external binaries referenced segments tar file. see [structure tar files](tar.html) details. *journal* special, atomically updated file records state repository sequence references successive root node records. crash resiliency journal always updated new reference referenced record flushed disk. recent root node reference stored journal used starting point garbage collection. content currently visible clients must accessible reference. oak segment tar evolution [previous implementation](../segmentmk.html). upgrading requires [migrating](../../migration.html) [new storage format](changes.html). see [design oak segment tar](classes.html) high level design overview oak segment tar. ## <a name="garbage-collection"/> garbage collection garbage collection set processes techniques employed oak segment tar eliminate unused persisted data, thus limiting memory disk footprint system. operations repository data generate certain amount garbage. garbage byproduct repository operations consists leftover data usable user. left unchecked, garbage would pile up, consume disk space pollute in-memory data structures. avoid this, oak segment tar defines garbage collection procedures eliminate unnecessary data. implementation garbage collection oak evolved heavily oak 1.0 oak 1.8. see [memoirs garbage collection](onrc-memoirs.html) historical account. ### <a name="generational-garbage-collection"/> generational garbage collection process implemented oak segment tar eliminate unnecessary data generational garbage collection algorithm. idea behind algorithm system assigns generation every piece data generated user. generation number monotonically increasing. system first starts, every piece data created user belongs first generation. garbage collection runs, second generation started. soon second generation place, data first generation still used user copied second generation. moment on, new data assigned second generation. system contains data first second generation, data second generation used. garbage collector remove every piece data first generation. removal safe, every piece data still use copied second generation garbage collection started. process creating new generation, migrating data new generation removing old generation usually referred "garbage collection cycle". system goes many garbage collection cycles lifetime, every cycle removes unused data older generations. ### <a name="estimation-compaction-cleanup"/> estimation, compaction cleanup previous section describes idea behind garbage collection, section introduces building blocks top garbage collection implemented. oak segment tar splits garbage collection process three phases: estimation, compaction cleanup. estimation first phase garbage collection. phase, system estimates much garbage actually present system. enough garbage justify creation new generation, rest garbage collection process skipped. output phase reports amount garbage beyond certain threshold, system creates new generation goes next phase. compaction executes new generation created. purpose compaction create compact representation current generation. current generation copied new generation leaving anything current generation reachable anymore. starting oak 1.8 compaction operate either two modes: full compaction tail compaction. full compaction copies revisions pertaining current generation new generation. contrast tail compaction copies recent ones. two compaction modes differ usage system resources much time consume. full compaction thorough overall, usually requires much time, disk space disk io tail compaction. cleanup last phase garbage collection kicks soon compaction done. relevant data safe new generation, old unused data previous generation removed. phase locates outdated pieces data one oldest generations removes system. phase data actually deleted disk space finally freed. amount freed disk space depends preceding compaction operation. general cleanup free less space tail compaction full compaction. however, usually becomes effective garbage collection cycle system retains total two generations default. ### <a name="offline-garbage-collection"/> offline garbage collection offline garbage collection procedure followed oak segment tar execute garbage collection taking exclusive control repository. offline garbage collection runs standalone java tool manually semi-automatically started command line. way offline garbage collection works simpler online version. assumed human operator charge deciding offline compaction needed. case, human operator take offline - hence name - system using repository start compaction utility command line. since offline garbage collection requires human intervention run, estimation phase executed all. human operator decides run offline garbage collection decided garbage repository exceeding arbitrary threshold. since decision comes human operator, offline garbage collection charge implementing heuristics decide garbage collection run. offline garbage collection process consist compaction cleanup phases only. always employs full compaction subsequent cleanup retaining single generation. main drawback offline garbage collection process take exclusive control repository. nevertheless, also strength. exclusive access repository, offline garbage collection usually faster effective online counterpart. this, offline garbage collection (and always be) important tool repository management. ### <a name="online-garbage-collection"/> online garbage collection online garbage collection procedure followed oak segment tar execute garbage collection running system. online garbage collection procedure aims removing garbage minimal interruption system. online garbage collection runs background process regular intervals time, potentially removing unused data iteration. main benefit online garbage collection runs concurrently system activities: require user shut system work. #### <a name="monitoring-the-log"/> monitoring log online garbage collection prints lots useful information system log. section groups log messages function, provide useful reference understand different activities performed online garbage collection. please note following messages used example only. make examples clear, information like date time, name thread, name logger removed. information depends configuration logging framework. moreover, messages contain data change one execution other. every log message generated garbage collection process includes sequence number indicating many times garbage collection ran since system started. sequence number always printed beginning message like following example. ``` tarmk gc #2: ... ``` ##### <a name="when-did-garbage-collection-start"/> garbage collection start? soon garbage collection triggered, following message printed. ``` tarmk gc #2: started ``` ##### <a name="when-did-estimation-start"/> estimation start? soon estimation phase garbage collection starts, following message printed. ``` tarmk gc #2: estimation started ``` ##### <a name="is-estimation-disabled"/> estimation disabled? estimation phase disabled configuration. case, system prints following message. ``` tarmk gc #2: estimation skipped explicitly disabled ``` estimation also skipped compaction disabled system. case, following message printed instead. ``` tarmk gc #2: estimation skipped compaction paused ``` ##### <a name="was-estimation-cancelled"/> estimation cancelled? execution estimation phase cancelled manually user automatically certain events occur. estimation cancelled, following message printed. ``` tarmk gc #2: estimation interrupted: ${reason}. skipping compaction. ``` placeholder `${reason}` actually printed message, substituted specific description reason brought estimation premature halt. stated before, external events terminate estimation, e.g. enough memory disk space host system. moreover, estimation also cancelled shutting system explicitly cancelling via administrative interfaces. cases, reason estimation cancelled printed log. ##### <a name="when-did-estimation-complete"/> estimation complete? estimation terminates, either external cancellation successful execution, following message printed. ``` tarmk gc #2: estimation completed 961.8 (0 ms). ${result} ``` moreover, duration estimation phase printed readable format milliseconds. placeholder `${result}` stands message depends estimation strategy. ##### <a name="when-did-compaction-start"/> compaction start? compaction phase garbage collection process starts, following message printed. ``` tarmk gc #2: compaction started, gc options=segmentgcoptions{paused=false, estimationdisabled=false, gcsizedeltaestimation=1, retrycount=5, forcetimeout=3600, retainedgenerations=2, gcsizedeltaestimation=1} ``` message includes dump garbage collection options used compaction phase. ##### <a name="what-is-the-compaction-type"/> compaction type? type compaction phase determined configuration. log message indicates compaction type used. ``` tarmk gc #2: running ${mode} compaction ``` ${mode} either `full` `tail`. circumstances (e.g. first garbage collection run) tail compaction scheduled run system needs fall back full compaction. indicated log via following message: ``` tarmk gc #2: base state available, running full compaction instead ``` ##### <a name="is-compaction-disabled"/> compaction disabled? compaction phase skipped pausing garbage collection process. compaction paused, following message printed. ``` tarmk gc #2: compaction paused ``` long compaction paused, neither estimation phase compaction phase executed. ##### <a name="was-compaction-cancelled"/> compaction cancelled? compaction phase cancelled manually user automatically external events. compaction cancelled, following message printed. ``` tarmk gc #2: compaction cancelled: ${reason}. ``` placeholder `${reason}` actually printed message, substituted specific description reason brought compaction premature halt. stated before, external events terminate compaction, e.g. enough memory disk space host system. moreover, compaction also cancelled shutting system explicitly cancelling via administrative interfaces. cases, reason compaction cancelled printed log. ##### <a name="when-did-compaction-complete"/> compaction complete? compaction complete successfully, following message printed. ``` tarmk gc #2: compaction succeeded 6.580 min (394828 ms), 2 cycles ``` time shown log message relative compaction phase only. reference amount cycles spent compaction phase explained detail below. compaction complete successfully, following message printed instead. ``` tarmk gc #2: compaction failed 32.902 min (1974140 ms), 5 cycles ``` message mean unrecoverable error, compaction gave certain amount attempts. case error occurs, following message printed instead. ``` tarmk gc #2: compaction encountered error ``` message followed stack trace exception caught compaction phase. also special message printed thread running compaction phase interrupted. ``` tarmk gc #2: compaction interrupted ``` ##### <a name="how-does-compaction-deal-with-checkpoints"/> compaction deal checkpoints? since checkpoints share lot common data actual content, compaction handles individually, deduplicating much content possible. following messages printed log process. ``` tarmk gc #2: found checkpoint 4b2ee46a-d7cf-45e7-93c3-799d538f85e6 created wed nov 29 15:31:43 cet 2017. tarmk gc #2: found checkpoint 5c45ca7b-5863-4679-a7c5-6056a999a6cd created wed nov 29 15:31:43 cet 2017. tarmk gc #2: compacting checkpoints/4b2ee46a-d7cf-45e7-93c3-799d538f85e6/root. tarmk gc #2: compacting checkpoints/5c45ca7b-5863-4679-a7c5-6056a999a6cd/root. tarmk gc #2: compacting root. ``` ##### <a name="how-does-compaction-make-use-of-multithreading"/> compaction make use multithreading? parallel compactor adds initial exploration phase compaction process, scans splits content tree multiple parts processed simultaneously. efficient, tree expanded pre-defined (currently 10,000) number nodes reached. ``` tarmk gc #2: compacting 8 threads. tarmk gc #2: exploring content tree find subtrees parallel compaction. tarmk gc #2: target node count expansion 10000. tarmk gc #2: found 1 nodes depth 0. tarmk gc #2: found 3 nodes depth 1. tarmk gc #2: found 48 nodes depth 2. tarmk gc #2: found 663 nodes depth 3. tarmk gc #2: found 66944 nodes depth 4. ``` ##### <a name="how-does-compaction-works-with-concurrent-writes"/> compaction work concurrent writes? compaction runs part online garbage collection, work concurrently rest system. means that, compaction tries copy useful data new generation, concurrent commits repository writing data old generation. cope this, compaction tries catch concurrent writes incorporating changes new generation. compaction first tries setup new generation, following message printed. ``` tarmk gc #2: compaction cycle 0 completed 6.580 min (394828 ms). compacted 3e3b35d3-2a15-43bc-a422-7bd4741d97a5.0000002a 348b9500-0d67-46c5-a683-3ea8b0e6c21c.000012c0 ``` message shows long took compact data new generation. also prints record identifiers two head states. head state left belongs previous generation, one right new. concurrent commits detected, compaction tries incorporate changes new generation. case, following message printed. ``` tarmk gc #2: compaction detected concurrent commits compacting. compacting commits. cycle 1 5 ``` message means new compaction cycle automatically started. compaction try incorporate new changes certain amount cycles, exact amount cycles configuration option. every compaction cycle, following message printed. ``` tarmk gc #2: compaction cycle 1 completed 6.580 min (394828 ms). compacted 4d22b170-f8b7-406b-a2fc-45bf782440ac.00000065 3e3b35d3-2a15-43bc-a422-7bd4741d97a5.0000002a 72e60037-f917-499b-a476-607ea6f2735c.00000d0d ``` message contains three record identifiers instead two. initial state compacted evolved different one due concurrent commits. message makes clear concurrent changes referenced first record identifier, changes referenced second identifier, moved new generation referenced third identifier. system heavy load many concurrent commits generated, compaction might fail catch up. case, message like following printed. ``` tarmk gc #2: compaction gave compacting concurrent commits 5 cycles. ``` message means compaction tried compact repository data new generation five times, every time concurrent changes prevented compaction completion. prevent system overloaded background activity, compaction stopped configured amount cycles. point system configured obtain exclusive access system force compaction complete. means compaction gave configured number cycles, would take full control repository block concurrent writes. system configured behave way, following message printed. ``` tarmk gc #2: trying force compact remaining commits 60 seconds. concurrent commits store blocked. ``` if, taking exclusive control repository specified amount time, compaction completes successfully, following message printed. ``` tarmk gc #2: compaction succeeded force compact remaining commits 56.7 (56722 ms). ``` sometimes amount time allocated compaction phase exclusive mode enough. might happen compaction able complete work allocated time. happens, following message printed. ``` tarmk gc #2: compaction failed force compact remaining commits 6.580 min (394828 ms). likely compaction get exclusive access store. ``` even compaction takes exclusive access repository, still interrupted. case, following message printed. ``` tarmk gc #2: compaction failed force compact remaining commits 6.580 min (394828 ms). compaction cancelled: ${reason}. ``` placeholder `${reason}` substituted detailed description reason compaction stopped. ##### <a name="when-did-cleanup-start"/> clean-up start? cleanup phase garbage collection process starts, following message printed. ``` tarmk gc #2: cleanup started. ``` ##### <a name="was-cleanup-cancelled"/> cleanup cancelled? cleanup cancelled, following message printed. ``` tarmk gc #2: cleanup interrupted ``` way cancel cleanup manually. time cleanup cancel shutting repository. ##### <a name="when-did-cleanup-complete"/> cleanup complete? cleanup completes, following message printed. ``` tarmk gc #2: cleanup completed 16.23 min (974079 ms). post cleanup size 10.4 gb (10392082944 bytes) space reclaimed 84.5 gb (84457663488 bytes). ``` message includes time cleanup phase took complete, human readable format milliseconds. next final size repository shown, followed amount space reclaimed cleanup phase. final size reclaimed space shown human readable form bytes. ##### <a name="what-happened-during-cleanup"/> happened cleanup? first thing cleanup printing current size repository message similar following. ``` tarmk gc #1: current repository size 89.3 gb (89260786688 bytes) ``` that, cleanup phase iterate every tar file figure segments still use ones reclaimed. cleanup phase scanned repository, tar files purged unused segments. cases, tar file would end containing segments all. case, tar file marked deletion following message printed. ``` tarmk gc #2: cleanup marking files deletion: data00000a.tar ``` please note message mean cleanup physically remove file right now. file marked deletable. another background task periodically kick remove unused files disk. happens, following message printed. ``` removed files data00000a.tar,data00001a.tar,data00002a.tar ``` output message vary. depends amount segments cleaned up, many tar files emptied often background activity removes unused files. #### <a name="monitoring"/> monitoring segment store exposes certain pieces information via jmx. allows clients easily access statistics segment store, connect segment store whatever monitoring infrastructure place. moreover, jmx useful execute low-level operations manual fashion. * session exposes [sessionmbean](#sessionmbean) instance, contains counters like number rate reads writes session. * [repositorystatsmbean](#repositorystatsmbean) exposes endpoints monitor number open sessions, session login rate, overall read write load across sessions, overall read write timings across sessions overall load timings queries observation. * [segmentnodestorestatsmbean](#segmentnodestorestatsmbean) exposes endpoints monitor commits: number rate, number queued commits queuing times. * [filestorestatsmbean](#filestorestatsmbean) exposes endpoints reflecting amount data written disk, number tar files disk total footprint disk. * [segmentrevisiongarbagecollection](#segmentrevisiongarbagecollection) mbean tracks statistics garbage collection. ##### <a name="sessionmbean"/> sessionmbean session exposes `sessionmbean` instance, contains counters like number rate reads writes session: * **getinitstacktrace (string)** stack trace session acquired. * **authinfo (authinfo)** `authinfo` instance user associated session. * **logintimestamp (string)** time stamp session acquired. * **lastreadaccess (string)** time stamp last read access * **readcount (long)** number read accesses session * **readrate (double)** read rate number reads per second session * **lastwriteaccess (string)** time stamp last write access * **writecount (long)** number write accesses session * **writerate (double)** write rate number writes per second session * **lastrefresh (string)** time stamp last refresh session * **refreshstrategy (string)** refresh strategy session * **refreshpending (boolean)** boolean indicating whether session refreshed next access. * **refreshcount (long)** number refresh operations session * **refreshrate (double)** refresh rate number refreshes per second session * **lastsave (string)** time stamp last save session * **savecount (long)** number save operations session * **saverate (double)** save rate number saves per second session * **sessionattributes (string[])** attributes associated session * **lastfailedsave (string)** stack trace last exception occurred save operation * **refresh** refresh session. ##### <a name="repositorystatsmbean"/> repositorystatsmbean `repositorystatsmbean` exposes endpoints monitor number open sessions, session login rate, overall read write load across sessions, overall read write timings across sessions overall load timings queries observation. * **sessioncount (compositedata)** number currently logged sessions. * **sessionlogin (compositedata)** number calls sessions logged in. * **sessionreadcount (compositedata)** number read accesses session. * **sessionreadduration (compositedata)** total time spent reading sessions nano seconds. * **sessionreadaverage (compositedata)** average time spent reading sessions nano seconds. sum read durations divided number reads respective time period. * **sessionwritecount (compositedata)** number write accesses session. * **sessionwriteduration (compositedata)** total time spent writing sessions nano seconds. * **sessionwriteaverage (compositedata)** average time spent writing sessions nano seconds. sum write durations divided number writes respective time period. * **querycount()** number queries executed. * **queryduration (compositedata)** total time spent evaluating queries milli seconds. * **queryaverage (compositedata)** average time spent evaluating queries milli seconds. sum query durations divided number queries respective time period. * **observationeventcount (compositedata)** total number observation {@code event} instances delivered observation listeners. * **observationeventduration (compositedata)** total time spent processing observation events observation listeners nano seconds. * **observationeventaverage** average time spent processing observation events observation listeners nano seconds. sum observation durations divided number observation events respective time period. * **observationqueuemaxlength (compositedata)** maximum length observation queue respective time period. ##### <a name="segmentnodestorestatsmbean"/> segmentnodestorestatsmbean `segmentnodestorestatsmbean` exposes endpoints monitor commits: number rate, number queued commits queuing times. * **commitscount (compositedata)** time series number commits * **queuingcommitscount (compositedata)** time series number commits queuing * **committimes (compositedata)** time series commit times * **queuingtimes (compositedata)** time series commit queuing times ##### <a name="filestorestatsmbean"/> filestorestatsmbean `filestorestatsmbean` exposes endpoints reflecting amount data written disk, number tar files disk total footprint disk. * **approximatesize (long)** approximate disk footprint segment store. * **tarfilecount (int)** number tar files segment store. * **writestats (compositedata)** time series writes repository * **repositorysize (compositedata)** time series writes repository * **storeinfoasstring (string)** human readable descriptive representation values exposed mbean. * **journalwritestatsascount (long)** number writes journal segment store. * **journalwritestatsascompositedata (compositedata)** time series writes journal segment store. ##### <a name="segmentrevisiongarbagecollection"/> segmentrevisiongarbagecollection mbean `segmentrevisiongarbagecollection` mbean tracks statistics garbage collection. statistics specific specific phases garbage collection process, others widely applicable. mbean also exposes management operations start cancel garbage collection options influence outcome garbage collection. use mbean great care. following options collectively called "garbage collection options", since used tweak behaviour garbage collection process. options readable writable, take effect start next garbage collection process. * **pausedcompaction (boolean)** determines garbage collection paused. value set `true`, garbage collection performed. compaction effectively skipped even invoked manually scheduled maintenance tasks. * **retrycount (int)** determines many completion attempts compaction phase try giving up. parameter influences behaviour compaction phase concurrent writes detected. * **forcetimeout (int)** amount time (in seconds) compaction phase take exclusive control repository. parameter used compaction configured take exclusive control repository instead giving many concurrent writes. * **retainedgenerations (int)** many generations preserved cleaning segment store. cleanup phase runs, latest `retainedgenerations` generations kept intact. older generations deleted. *deprecated*: oak 1.8 value fixed 2 generations cannot modified. * **gcsizedeltaestimation (long)** size (in bytes) new content added repository since end last garbage collection would trigger another garbage collection run. parameter influences behaviour estimation phase. * **estimationdisabled (boolean)** determines estimation phase disabled. parameter set `true`, estimation phase skipped compaction run unconditionally. * **gctype ("full" "tail")** determines type garbage collection run invoking `startrevisiongc` operation. * **revisiongcprogresslog (long)** number processed nodes progress message logged. `-1` indicates logging. * **memorythreshold (int)** number `0` `100` represents percentage heap memory always free compaction. amount free memory falls provided percentage, compaction interrupted. following options read-only expose runtime statistics garbage collection process. * **lastcompaction (string)** formatted timestamp end last successful compaction phase. * **lastcleanup (string)** formatted timestamp end last cleanup phase. * **lastrepositorysize (long)** size repository (in bytes) last cleanup phase. * **lastreclaimedsize (long)** amount data (in bytes) reclaimed last cleanup phase. * **lasterror (string)** last error encountered compaction, human readable form. * **lastlogmessage (string)** last log message produced garbage collection. * **status (string)** current status garbage collection process. property assume values `idle`, `estimation`, `compaction`, `compaction-retry-n` (where `n` number current retry iteration), `compaction-force-compact` `cleanup`. * **revisiongcrunning (boolean)** indicates whether online revision garbage collection currently running. * **compactednodes (long)** number compacted nodes previous garbage collection * **estimatedcompactablenodes (long)** estimated number nodes compact next garbage collection. `-1` indicates estimated value available. * **estimatedrevisiongccompletion (int)** estimated percentage completed current garbage collection run. `-1` indicates estimated percentage available. `segmentrevisiongarbagecollection` mbean also exposes following management operations. * **cancelrevisiongc** garbage collection currently running, schedule cancellation. garbage collection process interrupted soon safe without losing data corrupting system. garbage collection running, operation effect. * **startrevisiongc** start garbage collection. garbage collection already running, operation effect. ## <a name="tools"/> tools oak segment tar exposes number command line tools used perform different tasks repository. tools exposed sub-commands [oak run](https://github.com/apache/jackrabbit-oak/tree/trunk/oak-run). following sections assume built module compiled version it. ### <a name="remote-segment-stores"/> remote segment stores besides local storage tar files (previously known tarmk), support remote segment store(s) introduced apache oak. connecting remote segment store, `cloud-prefix:uri` argument needs provided. applies wherever `path` segment store needed. **connection instructions**: * **microsoft azure** `cloud-prefix` ms azure `az`, therefore valid connection argument would `az:https://myaccount.blob.core.windows.net/container/repository`, part `:` azure url identifier _repository_ directory inside specified _container_ _myaccount_ azure storage account. default authentication microsoft entra id service principal credentials supplied via `azure_client_id`, `azure_client_secret` `azure_tenant_id` environment variables attempted first. former environment variables provided, default authentication secret key provided `azure_secret_key` attempted. * **amazon aws** `cloud-prefix` amazon aws `aws`, therefore valid connection argument would `aws:bucket;root_directory;journal_table;lock_table` part `:` defines _root_directory_ inside specified _bucket_ s3 _journal_table_ _lock_table_ tables within dynamodb services. portion connect aws credentials supplied placing credentials file ~/.aws folder. ### <a name="segment-copy"/> segment-copy ``` java -jar oak-run.jar segment-copy source destination [--last <rev_count>] [--flat] [--append] [--max-size-gb <max_size_gb>] ``` `segment-copy` command allows "translation" segment store `source` one persistence type (e.g. local tarmk segment store) different persistence type (e.g. remote azure aws segment store), saving resulted segment store `destination`. unlike sidegrade peformed `oak-upgrade` (see [repository migration](#../../migration.md)) includes current head state, translation includes __all previous revisions persisted segment store__, therefore retaining entire history. `--last` option present, tool start recent revision copy <rev_count> journal revisions. `source` must valid path/uri existing segment store. `destination` must valid path/uri resulting segment store. specified `path | cloud-prefix:uri`. please refer [remote segment stores](#remote-segment-stores) section details correctly specify connection uris. optional `--last [integer]` argument used control maximum number revisions copied journal (default 1). optional `--flat` argument specified allowing copy process write segments `destination` flat hierarchy, without writing tar archives. optional `--append` argument specified running segment copy append mode. causes existing segments `destination` skipped instead overwritten. optional `--max-size-gb <max_size_gb>` argument used specifying copy `max_size_gb` segments `source`. enable logging segment copy logback configuration file injected via `logback.configurationfile` property. ##### example following command uses `logback-segment-copy.xml` configure logback logging segment-copy console. ``` java -dlogback.configurationfile=logback-segment-copy.xml -jar oak-run.jar segment-copy cloud-prefix:uri some/local/path ``` logback-segment-copy.xml: ``` <?xml version="1.0" encoding="utf-8"?> <configuration scan="true"> <appender name="console" class="ch.qos.logback.core.consoleappender"> <encoder> <pattern>%d{hh:mm:ss.sss} [%thread] %-5level %logger{36} - %msg%n</pattern> </encoder> </appender> <logger name="org.apache.jackrabbit.oak.segment.azure.tool.segmentstoremigrator" level="info"/> <root level="warn"> <appender-ref ref="console"/> </root> </configuration> ``` ### <a name="backup"/> backup ``` java -jar oak-run.jar backup original backup ``` `backup` tool performs backup segment store `original` saves folder `backup`. `original` must path existing, valid segment store. `backup` must valid path folder file system. `backup` exist, created. `backup` exists, must path existing, valid segment store. tool assumes `original` segment store use external blob store. case, necessary set `oak.backup.usefakeblobstore` system property `true` command line shown below. ``` java -doak.backup.usefakeblobstore=true -jar oak-run.jar backup ... ``` backup performed, `backup` points existing segment store, content different `original` copied. similar incremental backup performed level content. incremental backup performed, tool automatically try cleanup eventual garbage `backup` segment store. ### <a name="restore"/> restore ``` java -jar oak-run.jar restore original backup ``` `restore` tool restores state `original` node store previous backup `backup`. tool counterpart `backup`. ### <a name="check"/> check ``` java -jar oak-run.jar check path [--mmap] [--journal journal] [--notify secs] [--bin] [--last <rev_count>] [--head] [--checkpoints | cp1[,cp2,..,cpn]] [--filter path1[,path2,..,pathn]] [--io-stats] ``` `check` tool inspects existing segment store `path` eventual inconsistencies. algorithm implemented tool traverses every revision journal, recent oldest, stopping first consistent occurence. actual nodes properties traversed, verifying every piece data reachable undamaged. `--last` option present, tool start recent revision go back history `<rev_count>` revisions. moreover, `--head` `--checkpoints` options used, scope traversal limited head state and/or subset checkpoints. deep scan content tree, traversing every node every property performed default. default scope includes head state checkpoints. optional `--mmap [boolean]` argument used control file access mode. set `true` memory mapped access `false` file access (default `true`). `--journal` option specified, tool use journal file `journal` instead picking one contained `path`. `journal` must path valid journal file segment store. `--notify` option specified, tool print progress information messages every `secs` seconds. specified, progress information messages disabled. `secs` equals `0`, every progress information message printed. `--bin` option specified, tool scan full content binary properties. specified, binary properties traversed. `--bin` option effect binary properties stored external blob store. optional `--last [integer]` argument used control maximum number revisions verified (default `1`). optional `--fail-fast` argument used stop check soon inconsistency found. specified, tool continue check entire journal. `--head` option specified, tool scan **only** head state, ignoring available checkpoints. `--checkpoints` option specified, tool scan **only** specified checkpoints, ignoring head state. least one argument expected option; multiple arguments need comma-separated. checkpoints traversed order specified. order scan checkpoints, correct argument option `all` (i.e. `--checkpoints all`). mentioned paragraph above, default, head state checkpoints checked. words, equivalent options, `--head` `--checkpoints all`, specified. `--filter` option specified, tool traverse absolute paths specified arguments. least one argument expected option; multiple arguments need comma-separated. paths traversed order specified. filtering applies head state and/or checkpoints, depending scope scan. example, `--head --filter path1` limit traversal `path1` head state, `--checkpoints cp1 --filter path2` limit traversal `path2` `cp1`, `--filter path3` limit `path3`, **for head state checkpoints**. option specified, full traversal repository (rooted `/`) performed. `--io-stats` option specified, tool print statistics i/o operations performed execution check command. option optional disabled default. optional `--persistent-cache-path persistent_cache_path` argument allows specify path persistent disk cache. `persistent_cache_path` must valid path. optional `--persistent-cache-size-gb <persistent_cache_size_gb>` argument allows limit maximum size persistent disk cache `<persistent_cache_size_gb>`. specified, default size limited `50` gb. ### <a name="compact"/> compact ``` java -jar oak-run.jar compact [--force] [--mmap] [--tail] [--compactor] [--threads] source [--target-path destination] [--persistent-cache-path persistent_cache_path] [--persistent-cache-size-gb <persistent_cache_size_gb>] ``` `compact` command performs offline compaction local/remote segment store `source`. `source` must valid path/uri existing segment store. currently, azure segment store aws segment store supported remote segment stores. please refer [remote segment stores](#remote-segment-stores) section details correctly specify connection uris. optional `--tail` flag, tail compaction performed instead full repository. optional `--force` flag set, tool ignores non-matching segment store version. *caution*: upgrade segment store latest version, incompatible older versions. *there way downgrade accidentally upgraded segment store*. optional `--mmap [boolean]` argument used control file access mode. set `true` memory mapped access `false` file access. specified, memory mapped access used 64-bit systems file access used 32-bit systems. windows, regular file access always enforced option ignored. optional `--compactor [string]` argument used pick compactor type used. valid choices *classic*, *diff* *parallel*. *classic* slower, might stable, due lack optimisations employed *diff* compactor compacts checkpoints top *parallel* compactor, additionally divides repository multiple parts process parallel. specified, *parallel* compactor used. optional `--threads [integer]` argument specifies number threads use compaction. applicable *parallel* compactor. specified, defaults number available processors. order speed offline compaction remote segment stores, three new options introduced configuring destination segment store compacted archives written also configure persistent disk cache speeding segments reading compaction. three options detailed **apply remote segment stores**. required `--target-path destination` argument allows specify destination compacted segments written. `destination` must valid path/uri new compacted segment store. required `--persistent-cache-path persistent_cache_path` argument allows specify path persistent disk cache. `persistent_cache_path` must valid path. optional `--persistent-cache-size-gb <persistent_cache_size_gb>` argument allows limit maximum size persistent disk cache `<persistent_cache_size_gb>`. specified, default size limited `50` gb. enable logging offline compaction logback configuration file injected via `logback.configurationfile` property. addition `compaction-progress-log` property controls number compacted nodes logged. default value 150000. ##### example following command uses `logback-compaction.xml` configure logback logging compaction progress every 1000 nodes console. ``` java -dlogback.configurationfile=logback-compaction.xml -dcompaction-progress-log=1000 -jar oak-run.jar compact /path/to/segmenstore ``` logback-compaction.xml: ``` <?xml version="1.0" encoding="utf-8"?> <configuration scan="true"> <appender name="console" class="ch.qos.logback.core.consoleappender"> <encoder> <pattern>%d{hh:mm:ss.sss} [%thread] %-5level %logger{36} - %msg%n</pattern> </encoder> </appender> <logger name="org.apache.jackrabbit.oak.segment.file.filestore" level="info"/> <root level="warn"> <appender-ref ref="console" /> </root> </configuration> ``` ### <a name="debug"/> debug ``` java -jar oak-run.jar debug path java -jar oak-run.jar debug path items... ``` `debug` command prints diagnostic information segment store individual segment store items. `path` mandatory must valid path existing segment store. path specified - first example - general debugging information segment store printed. `items` sequence one tar file name, segment id, node record id range node record id. one items specified - second example - general debugging information segment store printed. instead, detailed information specified items shown. tar file specified name. every string `items` ending in`.tar` assumed name tar file. segment id specified uuid representation, e.g. `333dc24d-438f-4cca-8b21-3ebf67c05856`. node record id specified concatenation uuid record number, e.g. `333dc24d-438f-4cca-8b21-3ebf67c05856:12345`. record id must point valid node record. node record id optionally followed path, like `333dc24d-438f-4cca-8b21-3ebf67c05856:12345/path/to/child`. node record id provided, tool print information node record pointed it. path specified, tool additionally print information every child node identified path. node record id range specified pair record ids separated hyphen (`-`), e.g. `333dc24d-438f-4cca-8b21-3ebf67c05856:12345-46116fda-7a72-4dbc-af88-a09322a7753a:67890`. record ids must point valid node records. pair record ids followed path, like `333dc24d-438f-4cca-8b21-3ebf67c05856:12345-46116fda-7a72-4dbc-af88-a09322a7753a:67890/path/to/child`. node record id range specified, tool perform diff two nodes pointed record ids, optionally following provided path. result diff printed jsop format. ### <a name="iotrace"/> iotrace ```` java -jar oak-run.jar iotrace path --trace depth|breadth [--depth depth] [--mmap mmap] [--output output] [--path path] [--segment-cache segment_cache] usage: iotrace path/to/segmentstore <options> option (* = required) description --------------------- ----------- --count <integer> number paths access applies random (default: 1000) --depth <integer> maximal depth traversal. applies breadth, depth (default: 5) --mmap <boolean> use memory mapping file store (default: true) --output <file> output file io trace written (default: iotrace.csv) --path <string> starting path traversal. applies breadth, depth (default: /root) --paths <file> file containing list paths traverse. applies random (default: paths.txt) --seed <long> seed generating random numbers. applies random (default: 0) --segment-cache <integer> size segment cache mb (default: 256) * --trace <traces> type traversal. either [depth, breadth, random] ```` `iotrace` command collects io traces read accesses segment store's back-end (e.g. disk). traffic patterns specified via `--trace` option. permissible values `depth` depth first traversal, `breadth` breadth first traversal `random` random access. `--depth` option limits maximum number levels traversed. `--path` option specifies node traversal starts (from super root). `--mmap` `--segment-cache` options configure memory mapping segment cache size segment store, respectively. `--paths` option specifies list paths access. file must contain single path per line. `--seed` option specifies seed used randomly choosing paths. `--output` options specifies file io trace stored. io traces stored csv format following form: ``` timestamp,file,segmentid,length,elapsed 1522147945084,data01415a.tar,f81378df-b3f8-4b25-0000-00000002c450,181328,171849 1522147945096,data01415a.tar,f81378df-b3f8-4b25-0000-00000002c450,181328,131272 1522147945097,data01415a.tar,f81378df-b3f8-4b25-0000-00000002c450,181328,142766 ``` ### <a name="diff"/> diff ``` java -jar oak-run.jar tarmkdiff [--output output] --list path java -jar oak-run.jar tarmkdiff [--output output] [--incremental] [--path node] [--ignore-snfes] --diff revs path ``` `diff` command prints content diffs revisions segment store `path`. `--output` option instructs command print output file `output`. option specified, tool print `.log` file augmented current timestamp. default file saved current directory. `--list` option specified, command prints list revisions available segment store. equivalent first command line specification example above. `--list` option specified, `tarmkdiff` prints one content diff pair revisions. case, command line specification second example above. `--diff` option specifies interval revisions `revs`. interval specified couple revisions separated two dots, e.g. `333dc24d-438f-4cca-8b21-3ebf67c05856:12345..46116fda-7a72-4dbc-af88-a09322a7753a:67890`. place two revisions, placeholder `head` used. `head` placeholder substituted (in case-insensitive way) recent revision segment store. `--path` option used restrict diff portion content tree. value `node` must valid path content tree. flag `--incremental` specified, output contain incremental diff every pair successive revisions occurring interval specified `--diff`. parameter useful interested every change content every commit happened specified range. `--ignore-snfes` flag used combination `--incremental` ignore errors might occur generating incremental diff damaged old content. flag specified error occurs generating incremental diff, tool stops immediately reports error. ### <a name="history"/> history ``` java -jar oak-run.jar history [--journal journal] [--path node] [--depth depth] path ``` `history` command shows content node sub-tree changed time segment store `path`. history node computed based revisions reported journal segment store. different set revisions needs used, possible specify custom journal file using `--journal` option. option used, `journal` must path valid journal file. `--path` parameter specifies node whose history printed. specified, history root node printed. `node` must valid path node segment store. `--depth` parameter determines content single node printed, content sub-tree rooted node printed instead. `depth` must positive integer specifying deep printed content be. option specified, depth assumed `0`, i.e. information node printed. ### <a name="recover-journal"/> recover journal ``` java -jar oak-run.jar recover-journal [--help] path ``` `recover-journal` command rebuilds journal scanning content segment store `path`. command performs following steps: - scans content segments potential head states. - sorts found head states older newer. - checks consistency found head states first consistent head state found. consistency check, segments might missing. command outputs stack trace stderr every time finds new missing segment. command finds segment missing once, stack traces suppressed. last revision recovered journal guaranteed consistent head state. sake speed, checkpoints **not** checked. moreover, since consistency check stops soon finds consistent head state, older revisions recovered journal might still inconsistent. deeper analysis consistency recovered journal, see `check` command. `recover-journal` command destructive tries best leave segment store folder consistent, usable state. creating new journal, old one backed segment store folder `journal.log.bak.xxx`, `xxx` monotonically increasing, three-digit number. backup old journal successful, command installs recovered journal canonical `journal.log`. error occurs process, command roll old journal back discard backup. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/segment/classes.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # design oak segment tar section gives high level overview design oak segment tar, important classes, purpose relationship. depth information available javadoc individual classes. ## overview ![class diagram](classes.png) `segmentnodestore` oak segment tar's implementation [nodestore api](../overview.html). uses `revisions` instance accessing setting current head state, `segmentreader` reading records segments, `segmentwriter` writing records segments `blobstore` reading writing binaries. `segmentstore` serves persistence backend `segmentnodestore`. responsible providing concrete implementations `revisions`, `segmentreader` `blobstore` former. `filestore` implementation `segmentstore` persists segments tar files. `memorystore` (not shown above) alternative implementation, stores segments memory only. used testing. `filestore` depends `tarfiles` management tar files file system. `tarfiles` aggregation one `tarwriter` zero `tarreader`. design represents foundation append-only store implemented `filestore`, data appended one `tarwriter` archived many `tarreader` time. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/segment/changes.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # changes data format document describes changes storage format introduced oak segment tar module. purpose document enumerate changes, also explain rationale behind them. pointers jira issues provided much terse description changes. changes presented chronological order. ## generation segment headers * jira issue: [oak-3348](https://issues.apache.org/jira/browse/oak-3348) * since: oak segment tar 0.0.2 gc algorithm implemented oak segment tar based fundamental idea grouping records generations. gc performed, records belonging older generations removed, records belonging newer generations retained. fact record belongs certain generation needs persisted across restarts system. incur size penalty persisting generation per record, persisted header respective segment. thus, generation record defined generation segment containing record. original specification data format segment header left space future extensions. new format generation saved offsets 10 13 4-byte integer value. ## stable identifiers * jira issue: [oak-3348](https://issues.apache.org/jira/browse/oak-3348) * since: oak segment tar 0.0.2 fastest way compare two node records compare addresses. addresses equal, two node records guaranteed equal. transitively, given records immutable, subtrees identified node records guaranteed equal. situation gets complicated generation-based gc algorithm copies node record new generation save deleted. situation, two copies node record live two different generations, two different segments two different addresses. figure whether two node records equal sufficient compare addresses. overcome problem, stable identifier added every node record: new node record serialized, address serialized becomes stable identifier. stable identifier included node record becomes part serialized format. node record copied new generation new segment, address inevitably change. stable identifier instead, part node record itself, change. enables fast comparison different copies node records comparing stable identifiers. stable identifier serialized 18-bytes-long string record. record, turn, referenced node record adding additional 3-bytes-long reference field it. conclusion, stable identifiers add overhead 21 bytes every node record worst case. best case, 18-bytes-long string record shared node records possible, aforementioned overhead represents upper limit. ## binary references index * jira issue: [oak-4201](https://issues.apache.org/jira/browse/oak-4201) * since: oak segment tar 0.0.4 original data format oak segment mandates every segment maintains list references external binaries. every time record references external binary - i.e. piece binary data stored blob store - new binary reference added segment. list references external binaries inspected periodically blob store gc algorithm determine binaries currently use. blob store gc algorithm removes every binary reported used segment store. retrieving comprehensive list external binaries whole repository expensive operation wrt. i/o. worst case, every segment every tar file read disk list references external binaries parsed. even segment contain references external binaries, read memory first system figure out. make process faster ease pressure i/o, oak segment tar introduces index references external binaries every tar file. index aggregates required information every segment contained tar file. blob store gc performed, instead reading parsing every segment, read parse index files. optimization reduces amount i/o operations significantly. ## simplified segment record format * jira issue: [oak-4631](https://issues.apache.org/jira/browse/oak-4631) * since: oak segment tar 0.0.10 former data format limited number references segments segment could have. limitation caused sub-optimal segment space utilization record referencing data many different segments written. case records quickly exhausted hard limit number references segments, causing premature flush non-full segment. oak segment tar relaxed limit number segments point considered irrelevant. avoids problem non optimal segment space utilization. tests show change place possible store amount data smaller amount better utilized segments. jira issue referenced paragraph proposes changes one discussed here. changes proposed issue subsequently reverted never made code base high toll disk space. comments issue referenced email thread provide detailed insight various trade-offs considerations. ## storage format versioning * jira issue: [oak-4295](https://issues.apache.org/jira/browse/oak-4295) * since: oak segment tar 0.0.10 avoid (old) oak segment (new) oak segment tar step other's toes, improved versioning mechanism data format introduced. first all, version field segment header incremented 11 oak segment 12 oak segment tar. prevents oak segment tar accessing segments written older implementations oak segment accessing segments written newer implementations. strategy improved adding manifest file every data folder created oak segment tar. manifest file supposed source metadata whole repository. oak segment tar checks presence manifest file time data folder open. manifest file there, metadata compatible current version currently executing code. repositories written oak segment generate manifest file written oak segment tar do. difference enables fail-fast approach: oak segment opens data folder containing manifest, immediately fails complaining data format new. oak segment tar opens non-empty data folder without manifest, immediately fails complaining data format old. ## logic record ids * jira issue: [oak-4659](https://issues.apache.org/jira/browse/oak-4659) * since: oak segment tar 0.0.14 previous implementation (oak segment) position record segment fixed. written, address consists identifier segment followed offset within segment. offset effective position record segment. way addressing records implies record can't moved within segment without changing address. moving record means changing segment, position results reference broken. gain flexibility storing records, new level indirection introduced replacing offsets logic identifiers. instead referencing record segment identifier offset segment, segment identifier record number used. record number logic address record segment local segment. solution record moved within segment without breaking references it. change enables number different algorithms comes garbage collection. example, records removed segment segment shrunk moving every remaining record next other. operation would change position remaining record segment, logic record identifier. change introduced new translation table segment header map record numbers record offsets. table occupies 9 bytes per record (4 bytes record number, 1 byte record type 4 bytes record offset). moreover, new 4-bytes-long integer field added segment header containing number entries translation table. ## root record types * jira issue: [oak-2498](https://issues.apache.org/jira/browse/oak-2498) * since: oak segment tar 0.0.16 record number translation table mentioned previous paragraph contains 1-byte field every record. field determines type record referenced row table. change paragraph improving information stored type field record number translation table. bulk change introduction new record type identifying records pointing external binary data, e.g. data contained external blob store. important information hand, allows oak segment tar efficiently reconstruct populate index binary references. able cheaply identify references external binaries paramount importance recovery operation performed crash data corruption. recovery algorithm access whole repository, needs work segment time. additional record type allows recovery algorithm correctly recover index binary references even segment hand considered without context. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/segment/tar.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # structure tar files described physical layout tar file used apache oak. first, brief introduction tar format given. next, details provided low level information written tar entries. finally, described oak saves graph data structure inside tar file representation optimized fast retrieval. ## organization tar file physically speaking, tar file linear sequence blocks. tar file terminated two blocks containing zero bytes. every block size 512 bytes. logically speaking, tar file linear sequence entries. every entry represented two blocks. first block always contains entry header. subsequent blocks store content file. ![overview tar file](tar.png) entry header composed following fields: - file name (100 bytes) - name file stored entry. - file mode (8 bytes) - string representation octal file mode. - owner's numeric id (8 bytes) - string representation user id owner file. - group's numeric id (8 bytes) - string representation group id owner file. - file size (12 bytes) - string representation octal size file. - last modification time (12 bytes) - string representation octal time stamp file last modified. - checksum (8 bytes) - checksum header data. - file type (1 byte) - type file stored entry. field specifies file regular file, hard link symbolic link. - name linked file (1 byte) - case file stored entry link, field stores name file pointed link. ## tar file used oak fields used oak. particular, oak sets file mode, owner's numeric id, group's numeric id, checksum, name linked file uninteresting values. meaningful values assigned fields entry header are: - file name: name data file. different data files used oak. described below. - file size: size data file. value assigned field trivially computed amount information stored data file. - last modification time: time stamp entry written. four kinds files stored tar file: - segments: type file contains data segment segment store. kind file file name form `uuid.crc2`, `uuid` 128 bit uuid represented hexadecimal string `crc2` zero- padded numeric string representing crc2 checksum raw segment data. - binary references: file name ending `.brf` represents catalog blobs (i.e. value records) referenced segments tar file. catalog indexed generation segments contains. - graph: file name ending `.gph` contains segment graph segments tar file. graph represented adjacency list uuids. - index: file name ending `.idx` contains sorted list every segment contained tar file. ## oak tar file layout delving details, words oak names tar files. convention always start `data00000a.tar` file. data written repository, new tar files added increasing numbers, thus ending `data00001a.tar`, `data00002a.tar` on. time compaction cycle ends, cleanup phase segments old generation purged. tar files shrink least 25% rewritten new tar generation, skipping reclaimed segments. shrunk tar file increases tail generation character, e.g. `data00000a.tar` `data00000b.tar`. layout tar file used oak engineered performance read operations. particular, important information stored bottom entries. reading entries bottom file, encounter first index, graph, binary references finally segment files. idea index must read first, provides fast tool locate segments rest file. next comes graph, describes segments relate other. binary references index stored. last come segments, whose relative order ignored. time, layout tar file allows fast append-only operations writing. since relative order segment files important, segment entries written first come, first served basis. index end file provide fast way access even scattered around file. picture presents building blocks tar file used oak. illustration purposes, hypothetical tar file called `data00000a.tar` dissected. ![overview oak tar file](oaktar.png) ## segment files segment files contain raw data segment. even multiple kinds segments, tar file distinguishes data bulk segments. bulk segment always saved as-is tar file, without processing. data segment, instead, inspected extract references segments binary content. data segment contain references segments. references simply stored list uuids. referenced segments stored inside current tar file outside it. first case, referenced segment found inspecting index. second case, external agent responsible find segment another tar file. list segments referenced data segment end graph file. speed process locating segment list referenced segment, list maintained ordered. data segment file divided two parts. first header second contains actual records contained segment. data segment header divided three parts: - fixed part (32 bytes) containing: - magic number (3 bytes): identifies beginning data segment. - version (1 byte): segment version. - empty bytes (6 bytes): reserved future use. - generation (4 bytes): generation segment, serialized big endian integer. - number references (4 bytes): number references external segments, serialized big endian integer. - number records (4 bytes): number records segment, serialized big endian integer. - empty bytes (10 bytes): reserved future use. - second part header variable list references external segments. list uuids - one per referenced segment - matching number references specified first part header. - third last part header consists list record header entries, matching number records specified first part header. record header consists of: - record number (4 bytes), serialized big endian integer. - record type (1 byte): one *leaf*, *branch*, *bucket*, *list*, *value*, *block*, *template*, *node* *blob_id*. - record offset (4 bytes), serialized big endian integer: offset record counting end segment. actual position record obtained computing `(segment size - offset)`. segment header, actual records stored, offsets advertised corresponding record header stored last part segment header. see [segments records](records.html) description various record types format. ## binary references files binary references file represents index binary references (blobs) tar file. index groups references generation first segment id next. format binary references file optimized reading. file stored reverse order maintain important information end file. strategy inline overall layout entries tar file. binary references file divided two parts. first header second contains real data catalog. binary references header contains following fields: - magic number (4 bytes): identifies beginning binary references file. - size whole binary references mapping (4 bytes): number bytes occupied entire structure holding binary references (per generation, per segment). - number generations (4 bytes): number different generations segments refer blobs. - checksum (4 bytes): crc2 checksum content binary references file. immediately graph header, index data stored. storage scheme used following: - generation following segments. - number segment binary references mappings current generation. - mapping have: - uuid referencing segment. - number referenced blobs. - unordered enumeration blob ids representing blobs referenced current segment. ## graph files graph file represents relationships segments stored inside outside tar file. graph stored adjacency list uuids, uuid represents segment. like binary references file, graph file also stored backwards. content graph file divided two parts: graph header graph adjacency list. graph header contains following fields: - magic number (4 bytes): identifies beginning graph file. - size graph adjacency list (4 bytes): number bytes occupied graph adjacency list. - number entries (4 bytes): many adjacency lists stored. - checksum (4 bytes): crc2 checksum content graph file. immediately graph header, graph adjacency list stored. storage scheme used following: - uuid source segment. - size adjacency list source segment. - unordered enumeration uuids representing target segments referenced source segment. ## index files index file ordered list references entries contained tar file. references ordered uuid point position file entry stored. like graph file, index file also stored backwards. index file divided two parts. first index header, second contains real data index. index header contains following fields: - magic number (4 bytes): identifies beginning index file. - size index (4 bytes): number bytes occupied index data. size also contains padding bytes added index make align tar block boundary. - number entries (4 bytes): many entries index contains. - checksum (4 bytes): crc32 checksum content index file. header, content index starts. every entry contained index, following information stored: - significant bits uuid (8 bytes). - least significant bits uuid (8 bytes). - offset tar file tar entry containing segment located. - size entry tar file. - generation entry. since entries index sorted uuid, since uuids assigned entries uniformly distributed, searching entry uuid efficient algorithm called interpolation search used. algorithm variation binary search. binary search search space (in case, array entry) halved every iteration, interpolation search exploits distribution keys remove portion search space potentially bigger half it. interpolation search natural approximation way person searches phone book. name search begins letter t, example, makes sense open phone book half. way efficient, instead, open phone book close bottom quarter, since names starting letter likely distributed part phone book. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/segment/records.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # segments records [tar files](tar.html) segments coarse-grained mechanism divide repository content manageable pieces, real information stored inside segments finer-grained records. page details structure segments show binary representation data stored oak. ## segments segments created equal. oak, fact, distinguishes data bulk segments, former used store structured data (e.g. information node properties), latter contains unstructured data (e.g. value binary properties long strings). possible tell apart bulk segment data segment looking identifier. segment identifier randomly generated uuid. segment identifiers 16 bytes long, oak uses 4 bits set apart bulk segments data segments. following bit patterns used (each `x` represents four random bits): * `xxxxxxxx-xxxx-4xxx-axxx-xxxxxxxxxxxx` data segment uuid * `xxxxxxxx-xxxx-4xxx-bxxx-xxxxxxxxxxxx` bulk segment uuid (this encoding makes segment uuids appear syntactically valid version 4 random uuids specified rfc 4122.) ## bulk segments bulk segments contain raw binary data, interpreted simply sequence block records headers extra metadata: [block 1] [block 2] ... [block n] bulk segment whose length `n` bytes consists `n div 4096` block records 4kib followed possibly block record `n mod 4096` bytes, still remaining bytes segment. structure bulk segment thus determined based segment length. ## data segments data segment roughly divided two parts, header data section. header contains management information segment itself, data section stores actual repository data. repository data split records different types. every type specialized storing specific piece information: node records, template records, map records, list records, etc. record contiguous sequence bytes stored specific offset inside segment. record references records, referenced records stored segment not. since records reference other, segment actually stores graph records. segment header also maintains set references *root records*: records referenced records segment. overall structure data segment is: [segment header] [record 1] [record 2] ... [record n] segment header record zero-padded make size multiple four bytes align next record four-byte boundary. segment header consists following fields. integers stored big endian format. +---------+---------+---------+---------+---------+---------+---------+---------+ | magic bytes: "0ak" | version | reserved +---------+---------+---------+---------+---------+---------+---------+---------+ reserved | generation | segrefcount +---------+---------+---------+---------+---------+---------+---------+---------+ segrefcount | reccount | reserved +---------+---------+---------+---------+---------+---------+---------+---------+ reserved | +---------+---------+---------+---------+---------+---------+---------+---------+ | referenced segment identifiers (segrefcount x 16 bytes) | | | | ...... | | | +---------+---------+---------+---------+---------+---------+---------+---------+ | record headers (reccount x 9 bytes) | | | | ...... +---------+---------+---------+ | | padding (set 0) | +---------+---------+---------+---------+---------+---------+---------+---------+ first three bytes segment always contain ascii string "0ak", intended make binary segment data format easily detectable. next byte indicates version segment format currently set 12. `generation` field indicates segment's generation wrt. garbage collection. field used garbage collector determine whether segment needs retained collected. `segrefcount` field indicates many segments referenced records within segment. identifiers segments listed starting offset 32 segment header. lookup table used optimize garbage collection avoid repeat 16-byte uuids whenever references records segments made. `reccount` field indicates number records segment. record headers record follow segment identifier lookup table. header consists record number (4 bytes), record type (1 byte) record offset (4 bytes) end segment. ## record numbers offsets records need mechanism reference other, inside segment across different segments. mechanism used reference record (unsurprisingly) record identifier. record identifier composed *segment field* *record number field*. segment field two-bytes short integer identifies segment referenced record stored. record number field number record inside segment identified segment field. peculiarities segment position field may immediately obvious. picture shows segment looks like. ![overview segment](segment.png) segment field two bytes long, segment identifier 16 bytes long. bridge gap, segment header contains array segment identifiers used look-up table. array store `integer.max_value` entries, two bytes enough access every element array practice. fact, segment field record identifier index array segment identifiers used look-up table. segment field special value `0`. segment field `0`, referenced record stored current segment. record number field logical identifier record. logical identifier used lookup key record references table segment identified segment field. correct row record references table found, record offset used locate position record segment. offset relative beginning theoretical segment defined 256 kib. since records added bottom segment top (i.e. higher lower offsets), since segments could shrunk smaller 256 kib, offset normalized following formula. ``` size - 256 kib + offset ``` `size` actual size segment inspection, `offset` offset looked record references table. normalized offset used locate position record current segment. ## records content inside segment divided records different types: blocks, lists, maps, values, templates nodes. record types internal structures described subsections below. ### block records block record simplest form record, plain sequence bytes 4kb. even contain length: writer record store length elsewhere. adjustment performed data alignment. implementation makes sure written sequence bytes stored position multiple four. block records used building blocks large binary string values. record type can't contain references records. block records typically stored *bulk segments* consist block records thus easily identifiable containing zero references segments. ### value records value records structure block records store data additional length optional references records. implementation represents value records different ways depending length data written. data short enough, record written simplest way possible: length field data inlined directly record. data big, instead, split block records written block segments. reference block records stored list record (see next section), whose identifier stored inside value record. means value record represent good compromise writing binary string data. data short enough, written way used straight away without reads segment. data long, instead, stored separated repository content impact performance readers segment. value records used storing names values content tree. since item names thought name values since jcr oak values expressed binary form (strings encoded utf-8), easiest simply use form storing values. size overhead form small value types like booleans dates amortized facts types used minority values typical content trees repeating copies value stored once. four types value records: small, medium, long external. small- medium-sized values stored inline form, prepended one two bytes indicate length value. long values two exabytes (2^61) stored list block records. finally external value record contains length value string reference (up 4kb length) external storage location. type value record encoded high-order bits first byte record. bit patterns are: * `0xxxxxxx`: small value, length (0 - 127 bytes) encoded 7 bits * `10xxxxxx`: medium value length (128 - 16511 bytes) encoded 6 + 8 bits * `110xxxxx`: long value, length (up 2^61 bytes) encoded 5 + 7*8 bits * `1110xxxx`: external value, reference string length encoded 4 + 8 bits ### list records list records represent general-purpose list record identifiers. used building blocks types records, saw value records see template records node records. list record logical record using two different types physical records represent itself: - bucket record: recursive record representing list 255 references. bucket record reference bucket records, hierarchically, record identifiers elements stored list. bucket record maintain information exception record identifiers. - list record: top-level record maintains size list integer field record identifier pointing bucket. +--------+--------+--------+-----+ | sub-list id 1 | ... | +--------+--------+--------+-----+ | v +--------+--------+--------+-----+--------+--------+--------+ | record id 1 | ... | record id 255 | +--------+--------+--------+-----+--------+--------+--------+ result hierarchically stored immutable list element accessed o(log n) time size overhead updating appending list elements (and thus creating new immutable list) also o(log n). list records useful store list references records. list big, split different bucket records may stored segment across segments. guarantees good performance small lists, without loosing capability store lists big number elements. ### map records map records implement general-purpose unordered map strings record identifiers. used nodes large number properties child nodes. lists represented using two types physical record: - leaf record: number elements map small, stored leaf record. covers simplest case small maps. - branch record: number elements map big, original map split smaller maps based hash function applied keys map. branch record recursive, reference branch records sub-maps big need split again. maps stored using hash array mapped trie (hamt) data structure. hash code key split pieces 5 bits keys sorted 32 (2^5) buckets based first 5 bits. bucket contains less 32 entries, stored directly list key-value pairs. otherwise keys split sub-buckets based next 5 bits hash codes. buckets stored, list top-level bucket references gets stored along total number entries map. result hierarchically stored immutable map element accessed o(log n) time size overhead updating inserting list elements also o(log n). map records also optimized small changes. example, one element previously stored map modified, map stored again, "diff" map stored. prevents full storage modified map, save considerable amount space original map big. _warning: map record store 2^29 - 1 (i.e. 536.870.911) entries! order avoid reaching number possibly running issues surpassing it, log messages printed reaching 400.000.000 entries writing beyond 500.000.000 entries allowed unless boolean system property `oak.segmentnodestore.allowwritesonhugemaprecord` set. finally, segment store allow writing map records 536.000.000 entries._ ### template records template record stores metadata nodes that, average, change often. template record stores information like primary type, mixin types, property names property types node. information stored away node prevents write change node changes. example, average, node created certain primary type and, optionally, mixin types. usually, primary type, node already created set initial properties. that, value properties change, structure node itself. template record allows oak handle simple modifications nodes efficient way possible. template record describes common structure family related nodes. since structures nodes typical content tree fall small set common templates, makes sense store templates separately instead repeating information separately node. example, property names types well child node names nt:file nodes typically same. presence mixins different subtypes increases number different templates, they're typically still far fewer nodes repository. template record consists set n (exact size tbd, n ~ 256) property name type pairs. additionally, since nodes empty contain single child node common, template record also contains information whether node zero, one many child nodes. case single child node, template also contains name node. example, template typical mix:versionable nt:file nodes would (using cnd-like notation): - jcr:primarytype (name) - jcr:mixintypes (name) multiple - jcr:created (date) - jcr:uuid (string) - jcr:versionhistory (reference) - jcr:predecessors (reference) multiple - jcr:baseversion (reference) + jcr:content names used template stored separate value records included reference. way multiple templates example contain "jcr:primarytype" property name need repeatedly store it. ### node records node record single important type record, capable storing data associated node structure content tree. node record always maintains reference template record. stated before, template record defines overall structure node, variable part maintained node record itself. variable part node represented list property values map child nodes. list property values implemented list record identifiers. property node, value written segment. record identifiers referencing values properties packed together list record. identifier list record stored part node record. value properties change, previous record identifier reused. map child nodes implemented map record identifiers. every child node, node record identifier stored map indexed name. map persisted map record, identifier stored node record. thanks optimizations implemented map record, small changes map children node create lot overhead segment. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/document/rdb-document-store.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # rdb documentstore `rdbdocumentstore` one backend implementations [documentnodestore](../documentmk.html). uses relational databases persist nodes documents, mainly emulating native capabilities [mongodocumentstore](mongo-document-store.html). note [api docs rdbdocumentstore](/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/document/rdb/rdbdocumentstore.html) contain implementation details. ## supported databases code written database-agnostic possible. said, vendor-specific code paths. adding support new database type however relatively straighforward. database-specific code resides `rdbdocumentstoredb` class. following databases supported sense recognized tested with: testing purposes: - apache derby - h2db production use: - ibm db2 (luw) - microsoft sql server - mysql (mariadb) - oracle - postgresql supported databases, `rdbdocumentstoredb` knowledge supported versions (and likewise supported jdbc drivers). watch log messages system startup might warn outdated versions (the system attempt start anyway): ~~~ 12:20:20.864 error [main] rdbdocumentstore.java:1014 unsupported apache derby version: 9.14, expected least 10.11 ~~~ ## <a name="initialization"></a> initialization recommended method initialize `documentnodestore` `rdbdocumentstore` using osgi container configure `documentnodestoreservice`. see corresponding [repository osgi configuration](../../osgi_config.html#document-node-store). also require deploying [sling datasource provider](https://sling.apache.org/documentation/bundles/datasource-providers.html) furthermore associated jdbc driver osgi bundle. details latter vary database: 1. jdbc driver already osgi bundle, deployed is. case apache derby, h2db, ibm db2, microsoft sql server, mysql, postgresql. drivers also implement [osgi data service specification jdbc](https://osgi.org/specification/osgi.cmpn/7.0.0/service.jdbc.html) , case `org.osgi.service.jdbc-1.0.0.jar` needs deployed well (this case ibm db2, microsoft sql server, postgresql). 2. otherwise (e.g., oracle), osgi wrapper needs built. see [below](#wrap-osgi). alternatively rdb based documentnodestore created help `rdbdocumentnodestorebuilder`. datasource datasource = rdbdatasourcefactory.forjdbcurl(jdbcurl, user, pw); documentnodestore store = rdbdocumentnodestorebuilder().newrdbdocumentnodestorebuilder() .setrdbconnection(datasource).build(); // something store nodestate root = store.getroot(); // dispose done store.dispose(); ### <a name="wrap-osgi"></a> example: creating osgi bundle oracle jdbc driver 1. make sure local copy jdbc driver, instance `ojdbc8-12.2.0.1.jar`. 2. get bnd command line tool https://repo1.maven.org/maven2/biz/aqute/bnd/biz.aqute.bnd/4.3.1/biz.aqute.bnd-4.3.1.jar 3. create bnd `ora.bnd` below: ~~~ -classpath: ojdbc8-12.2.0.1.jar bundle-symbolicname: com.oracle.jdbc.ojdbc8 ver: 12.2.0.1 -output: ${bsn}-${ver}.jar bundle-version: ${ver} include-resource: @ojdbc8-12.2.0.1.jar import-package: *;resolution:=optional ~~~ run `java -jar biz.aqute.bnd-4.3.1.jar ora.bnd`; create osgi bundle `com.oracle.jdbc.ojdbc8-12.2.0.1.jar`. ## <a name="database-creation"></a> database creation `rdbdocumentstore` relies jdbc, thus, general, create database instances (that said, certain dbs apache derby h2db create database automatically yet - consult db documentation general jdbc url syntax specifically). general, administrator take care creating database. requirements database, critical correct operation: - character fields must able store unicode code point - utf-8 encoding recommended - collation character fields needs sort unicode code points - blobs need support sizes ~16mb subsections give examples found work development `rdbdocumentstore`. ### <a name="database-creation-db2"></a> db2 creating database called `oak`: ~~~ create database oak using codeset utf-8 territory default collate using identity; ~~~ verify, check info level log message written `rdbdocumentstore` upon startup. example: ~~~ 14:47:20.332 info [main] rdbdocumentstore.java:1065 rdbdocumentstore (snapshot) instantiated database db2/nt64 sql11014 (11.1), using driver: ibm data server driver jdbc sqlj 4.19.77 (4.19), connecting to: jdbc:db2://localhost:50276/oak, properties: {db2admin.codepage=1208, db2admin.collationschema=sysibm, db2admin.collationname=identity}, transaction isolation level: transaction_read_committed (2), db2admin.nodes: id varchar(512), modified bigint, hasbinary smallint, deletedonce smallint, modcount bigint, cmodcount bigint, dsize bigint, version smallint, sdtype smallint, sdmaxrevtime bigint, data varchar(16384), bdata blob(1073741824) /* {bigint=-5, blob=2004, smallint=5, varchar=12} */ /* index db2admin.nodes_mod db2admin.nodes (modified asc) (#0, p0), unique index db2admin.nodes_pk db2admin.nodes (id asc) clustered (#0, p0), index db2admin.nodes_sdm db2admin.nodes (sdmaxrevtime asc) (#0, p0), index db2admin.nodes_sdt db2admin.nodes (sdtype asc) (#0, p0), index db2admin.nodes_vsn db2admin.nodes (version asc) (#0, p0) */ ~~~ ### <a name="database-creation-mysql"></a> mysql creating database called `oak`: ~~~ create database oak default character set utf8mb4 collate utf8mb4_unicode_ci; ~~~ also make sure configure `max_allowed_packet` parameter server (mysqld) value greater 4m (such 8388608). verify, check info level log message written `rdbdocumentstore` upon startup. example: ~~~ 13:40:46.637 info [main] rdbdocumentstore.java:1065 rdbdocumentstore (snapshot) instantiated database mysql 8.0.15 (8.0), using driver: mysql connector/j mysql-connector-java-8.0.15 (revision: 79a4336f140499bd22dd07f02b708e163844e3d5) (8.0), connecting to: jdbc:mysql://localhost:3306/oak?servertimezone=utc, properties: {character_set_database=utf8mb4, character_set_client=utf8mb4, character_set_connection=utf8mb4, character_set_results=, max_allowed_packet=8388608, collation_database=utf8mb4_unicode_ci, character_set_system=utf8, collation_server=utf8mb4_0900_ai_ci, collation=utf8mb4_unicode_ci, character_set_filesystem=binary, character_set_server=utf8mb4, collation_connection=utf8mb4_0900_ai_ci}, transaction isolation level: transaction_repeatable_read (4), .nodes: id varbinary(512), modified bigint(20), hasbinary smallint(6), deletedonce smallint(6), modcount bigint(20), cmodcount bigint(20), dsize bigint(20), version smallint(6), sdtype smallint(6), sdmaxrevtime bigint(20), data varchar(16000), bdata longblob(2147483647) /* {bigint=-5, longblob=-4, smallint=5, varbinary=-3, varchar=12} */ /* unique index oak.primary nodes (id asc) (#0, p0), index oak.nodes_mod nodes (modified asc) (#0, p0), index oak.nodes_sdm nodes (sdmaxrevtime asc) (#0, p0), index oak.nodes_sdt nodes (sdtype asc) (#0, p0), index oak.nodes_vsn nodes (version asc) (#0, p0) */ ~~~ ### <a name="database-creation-oracle"></a> oracle creating database called `oak`: ...is different compared databases. see https://docs.oracle.com/cd/b28359_01/server.111/b28310/create003.htm information. defaults work. verify, check info level log message written `rdbdocumentstore` upon startup. example: ~~~ 13:26:37.073 info [main] rdbdocumentstore.java:1067 rdbdocumentstore (snapshot) instantiated database oracle oracle database 12c enterprise edition release 12.2.0.1.0 - 64bit production (12.2), using driver: oracle jdbc driver 12.2.0.1.0 (12.2), connecting to: jdbc:oracle:thin:@localhost:1521:orcl, properties: {nls_characterset=al32utf8, nls_comp=binary}, transaction isolation level: transaction_read_committed (2), .: id varchar2(512), modified number, hasbinary number, deletedonce number, modcount number, cmodcount number, dsize number, version number, sdtype number, sdmaxrevtime number, data varchar2(4000), bdata blob(-1) /* {blob=2004, number=2, varchar2=12} */ /* index nodes_mod system.nodes (modified) clustered (#0, p0), index nodes_sdm system.nodes (sdmaxrevtime) clustered (#0, p0), index nodes_sdt system.nodes (sdtype) clustered (#0, p0), index nodes_vsn system.nodes (version) clustered (#0, p0), unique index sys_c008093 system.nodes (id) clustered (#0, p0) */ ~~~ ### <a name="database-creation-postgresql"></a> postgresql creating database called `oak`: ~~~ create database "oak" template = template0 encoding = 'utf8' lc_collate = 'c' lc_ctype = 'c'; ~~~ verify, check info level log message written `rdbdocumentstore` upon startup. example: ~~~ 16:26:28.172 info [main] rdbdocumentstore.java:1065 rdbdocumentstore (snapshot) instantiated database postgresql 10.6 (10.6), using driver: postgresql jdbc driver 42.2.5 (42.2), connecting to: jdbc:postgresql:oak, properties: {datcollate=c, pg_encoding_to_char(encoding)=utf8}, transaction isolation level: transaction_read_committed (2), .nodes: id varchar(512), modified int8, hasbinary int2, deletedonce int2, modcount int8, cmodcount int8, dsize int8, version int2, sdtype int2, sdmaxrevtime int8, data varchar(16384), bdata bytea(2147483647) /* {bytea=-2, int2=5, int8=-5, varchar=12} */ /* index nodes_mod public.nodes (modified asc) (#0, p1), unique index nodes_pkey public.nodes (id asc) (#0, p1), index nodes_sdm public.nodes (sdmaxrevtime asc) (#0, p1), index nodes_sdt public.nodes (sdtype asc) (#0, p1), index nodes_vsn public.nodes (version asc) (#0, p1) */ ~~~ ### <a name="database-creation-sqlserver"></a> sql server creating database called `oak`: ~~~ create database oak; ~~~ verify, check info level log message written `rdbdocumentstore` upon startup. example: ~~~ 16:59:12.726 info [main] rdbdocumentstore.java:1067 rdbdocumentstore (snapshot) instantiated database microsoft sql server 13.00.5081 (13.0), using driver: microsoft jdbc driver 7.2 sql server 7.2.1.0 (7.2), connecting to: jdbc:sqlserver://localhost:1433;usebulkcopyforbatchinsert=false;cancelquerytimeout=-1;sslprotocol=tls;jaasconfigurationname=sqljdbcdriver;statementpoolingcachesize=0;serverpreparedstatementdiscardthreshold=10;enableprepareonfirstpreparedstatementcall=false;fips=false;sockettimeout=0;authentication=notspecified;authenticationscheme=nativeauthentication;xopenstates=false;sendtimeasdatetime=true;truststoretype=jks;trustservercertificate=false;transparentnetworkipresolution=true;servernameasace=false;sendstringparametersasunicode=true;selectmethod=direct;responsebuffering=adaptive;querytimeout=-1;packetsize=8000;multisubnetfailover=false;logintimeout=15;locktimeout=-1;lastupdatecount=true;encrypt=false;disablestatementpooling=true;databasename=oak;columnencryptionsetting=disabled;applicationname=microsoft jdbc driver sql server;applicationintent=readwrite;, properties: {collation_name=latin1_general_ci_as}, transaction isolation level: transaction_read_committed (2), .: id varbinary(512), modified bigint, hasbinary smallint, deletedonce smallint, modcount bigint, cmodcount bigint, dsize bigint, version smallint, sdtype smallint, sdmaxrevtime bigint, data nvarchar(4000), bdata varbinary(2147483647) /* {bigint=-5, nvarchar=-9, smallint=5, varbinary=-3} */ /* index nodes.nodes_mod dbo.nodes (modified asc) (#0, p0), unique index nodes.nodes_pk dbo.nodes (id asc) clustered (#0, p0), index nodes.nodes_sdm dbo.nodes (sdmaxrevtime asc) (#0, p0), index nodes.nodes_sdt dbo.nodes (sdtype asc) (#0, p0), index nodes.nodes_vsn dbo.nodes (version asc) (#0, p0) */ ~~~ ## <a name="table-creation"></a> table creation implementation try create tables indices present yet. course requires configured database user actually permission so. example system log: ~~~ 12:20:22.705 info [main] rdbdocumentstore.java:1063 rdbdocumentstore (snapshot) instantiated database apache derby 10.14.2.0 - (1828579) (10.14), using driver: apache derby embedded jdbc driver 10.14.2.0 - (1828579) (10.14), connecting to: jdbc:derby:./target/derby-ds-test, transaction isolation level: transaction_read_committed (2), sa.nodes: id varchar(512), modified bigint, hasbinary smallint, deletedonce smallint, modcount bigint, cmodcount bigint, dsize bigint, version smallint, sdtype smallint, sdmaxrevtime bigint, data varchar(16384), bdata blob(1073741824) /* {bigint=-5, blob=2004, smallint=5, varchar=12} */ /* index nodes_mod sa.nodes (modified asc) (#0, p0), index nodes_sdm sa.nodes (sdmaxrevtime asc) (#0, p0), index nodes_sdt sa.nodes (sdtype asc) (#0, p0), index nodes_vsn sa.nodes (version asc) (#0, p0), unique index sql190131122022490 sa.nodes (id asc) (#0, p0) */ 12:20:22.705 info [main] rdbdocumentstore.java:1070 tables created upon startup: [clusternodes, nodes, settings, journal] ~~~ not, system start provide diagnostics log file. administrators want create tables upfront so. ddl statements supported databases dumped using [rdbhelper](/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/document/rdb/rdbhelper.html) or, recently, using `oak-run rdbddldump` (see [below](#rdbddldump)). ## <a name="upgrade"></a> upgrade earlier versions oak 1.8, database layout slightly extended (see [api docs rdbdocumentstore](/oak/docs/apidocs/org/apache/jackrabbit/oak/plugins/document/rdb/rdbdocumentstore.html#apidocs.versioning) details). upon startup "old" database instance, `rdbdocumentstore` try upgrade tables. example (for `nodes`): ~~~ 12:05:54.146 info [main] rdbdocumentstore.java:1369 upgraded nodes db level 1 using 'alter table nodes add version smallint' 12:05:54.166 info [main] rdbdocumentstore.java:1369 upgraded nodes db level 2 using 'alter table nodes add sdmaxrevtime bigint' 12:05:54.167 info [main] rdbdocumentstore.java:1369 upgraded nodes db level 2 using 'create index nodes_vsn nodes (version)' 12:05:54.167 info [main] rdbdocumentstore.java:1369 upgraded nodes db level 2 using 'create index nodes_sdt nodes (sdtype)' 12:05:54.167 info [main] rdbdocumentstore.java:1369 upgraded nodes db level 2 using 'create index nodes_sdm nodes (sdmaxrevtime)' ~~~ fails, continue using "old" layout, log diagnostics failed upgrade: ~~~ 12:05:56.746 info [main] rdbdocumentstore.java:1379 attempted upgrade nodes db level 1 using 'alter table nodes add version smallint', failed sqlexception 'table alter statement rejected: alter table nodes add version smallint' (code: 17/state: abcde) - continue without. 12:05:56.955 info [main] rdbdocumentstore.java:1379 attempted upgrade nodes db level 2 using 'alter table nodes add sdtype smallint', failed sqlexception 'table alter statement rejected: alter table nodes add sdtype smallint' (code: 17/state: abcde) - continue without. 12:05:56.955 info [main] rdbdocumentstore.java:1379 attempted upgrade nodes db level 2 using 'alter table nodes add sdmaxrevtime bigint', failed sqlexception 'table alter statement rejected: alter table nodes add sdmaxrevtime bigint' (code: 17/state: abcde) - continue without. 12:05:56.964 info [main] rdbdocumentstore.java:1379 attempted upgrade nodes db level 2 using 'create index nodes_sdt nodes (sdtype)', failed sqlexception ''sdtype' column table vti 'nodes'.' (code: 20000/state: 42x14) - continue without. 12:05:56.964 info [main] rdbdocumentstore.java:1379 attempted upgrade nodes db level 2 using 'create index nodes_sdm nodes (sdmaxrevtime)', failed sqlexception ''sdmaxrevtime' column table vti 'nodes'.' (code: 20000/state: 42x14) - continue without. ~~~ upgrade done later point time executing required ddl statements. ## <a name="rdbddldump"></a> oak-run rdbddldump `@since oak 1.8.12` `@since oak 1.10.1` `@since oak 1.12` `rdbddldump` prints ddl statements oak would use create update database. used create tables upfront, obtain ddl statements needed upgrade newer schema version. default, print ddl statements supported databases, target latest schema version. `--db` switch used specify database type (note precise spelling needed, otherwise code fall back generic database type). `--initial` switch selects initial database schema (and defaults recent one). `--upgrade` switch selects target database schema (and defaults recent one). selecting higher "upgrade" version "initial" version causes tool create separate ddl statements initial table schema (which may already there), add individual statements upgrade target schema. instance: ~~~ java -jar oak-run-*.jar rdbddldump --db db2 --initial 0 --upgrade 2 ~~~ dump statements db2, initially creating schema version 0 tables, include ddl statements upgrade version 2 (the latter would applicable installation needed upgraded oak version older 1.8 1.8 newer). ~~~ -- db2 -- creating table clusternodes schema version 0 create table clusternodes (id varchar(512) null, modified bigint, hasbinary smallint, deletedonce smallint, modcount bigint, cmodcount bigint, dsize bigint, data varchar(16384), bdata blob(1073741824)) create unique index clusternodes_pk clusternodes ( id ) cluster alter table clusternodes add constraint clusternodes_pk primary key ( id ) create index clusternodes_mod clusternodes (modified) -- upgrading table clusternodes schema version 1 alter table clusternodes add version smallint -- upgrading table clusternodes schema version 2 alter table clusternodes add sdtype smallint alter table clusternodes add sdmaxrevtime bigint create index clusternodes_vsn clusternodes (version) create index clusternodes_sdt clusternodes (sdtype) exclude null keys create index clusternodes_sdm clusternodes (sdmaxrevtime) exclude null keys -- creating table journal schema version 0 create table journal (id varchar(512) null, modified bigint, hasbinary smallint, deletedonce smallint, modcount bigint, cmodcount bigint, dsize bigint, data varchar(16384), bdata blob(1073741824)) create unique index journal_pk journal ( id ) cluster alter table journal add constraint journal_pk primary key ( id ) create index journal_mod journal (modified) -- upgrading table journal schema version 1 alter table journal add version smallint -- upgrading table journal schema version 2 alter table journal add sdtype smallint alter table journal add sdmaxrevtime bigint create index journal_vsn journal (version) create index journal_sdt journal (sdtype) exclude null keys create index journal_sdm journal (sdmaxrevtime) exclude null keys -- creating table nodes schema version 0 create table nodes (id varchar(512) null, modified bigint, hasbinary smallint, deletedonce smallint, modcount bigint, cmodcount bigint, dsize bigint, data varchar(16384), bdata blob(1073741824)) create unique index nodes_pk nodes ( id ) cluster alter table nodes add constraint nodes_pk primary key ( id ) create index nodes_mod nodes (modified) -- upgrading table nodes schema version 1 alter table nodes add version smallint -- upgrading table nodes schema version 2 alter table nodes add sdtype smallint alter table nodes add sdmaxrevtime bigint create index nodes_vsn nodes (version) create index nodes_sdt nodes (sdtype) exclude null keys create index nodes_sdm nodes (sdmaxrevtime) exclude null keys -- creating table settings schema version 0 create table settings (id varchar(512) null, modified bigint, hasbinary smallint, deletedonce smallint, modcount bigint, cmodcount bigint, dsize bigint, data varchar(16384), bdata blob(1073741824)) create unique index settings_pk settings ( id ) cluster alter table settings add constraint settings_pk primary key ( id ) create index settings_mod settings (modified) -- upgrading table settings schema version 1 alter table settings add version smallint -- upgrading table settings schema version 2 alter table settings add sdtype smallint alter table settings add sdmaxrevtime bigint create index settings_vsn settings (version) create index settings_sdt settings (sdtype) exclude null keys create index settings_sdm settings (sdmaxrevtime) exclude null keys -- creating blob store tables create table datastore_meta (id varchar(64) null primary key, lvl int, lastmod bigint) create table datastore_data (id varchar(64) null primary key, data blob(2097152)) ~~~ ## <a name="oak-run"></a> using oak-run `oak-run` jar file include jdbc driver needed access database. thus, small amount classpath surgery needed. assuming following two jar files current directory: - oak-run-1.14.0.jar - db2-4.19.77.jar ...the invocation would be: ~~~ $ java -cp "oak-run-1.14.0.jar:db2-4.19.77.jar" org.apache.jackrabbit.oak.run.main ~~~ (where path separator windows would ";"). general, commands applicable `mongodocumentstore` available `rdbdocumentstore` well. simply substitute "mongdb:..." identifier jdbc "url", also specify db credentials using `--rdbjdbcuser` `--rdbjdbcpasswd`. like that: ~~~ $ java -cp "oak-run-1.14.0.jar:db2-4.19.77.jar" org.apache.jackrabbit.oak.run.main clusternodes jdbc:db2://localhost:50276/oak --rdbjdbcuser user --rdbjdbcpasswd passwd --verbose apache jackrabbit oak 1.14.0 id state started leaseend left recoveryby lastrootrev oakversion 1 inactive 20190125t110237z - - - r16884ad047c-0-1 1.12-snapshot ~~~ note oak versions prior june 2019, `oak-run` also contain artefacts `tomcat-jdbc` `tomcat-juli`, thus need added classpath well (see oak-8341 details). ## <a name="reading-log-files"></a> reading log files certain log messages look investigating problems, also may cause unneeded confusion. see below. ### <a name="startup-messages"></a> startup message as: ~~~ 16:26:28.172 info [main] rdbdocumentstore.java:1065 rdbdocumentstore (snapshot) instantiated database postgresql 10.6 (10.6), using driver: postgresql jdbc driver 42.2.5 (42.2), connecting to: jdbc:postgresql:oak, properties: {datcollate=c, pg_encoding_to_char(encoding)=utf8}, transaction isolation level: transaction_read_committed (2), .nodes: id varchar(512), modified int8, hasbinary int2, deletedonce int2, modcount int8, cmodcount int8, dsize int8, version int2, sdtype int2, sdmaxrevtime int8, data varchar(16384), bdata bytea(2147483647) /* {bytea=-2, int2=5, int8=-5, varchar=12} */ /* index nodes_mod public.nodes (modified asc) (#0, p1), unique index nodes_pkey public.nodes (id asc) (#0, p1), index nodes_sdm public.nodes (sdmaxrevtime asc) (#0, p1), index nodes_sdt public.nodes (sdtype asc) (#0, p1), index nodes_vsn public.nodes (version asc) (#0, p1) */ ~~~ information dumped essential diagnosing issues included bug reports. includes: - oak's version number - database type version - jdbc driver version - jdbc "url" - certain db-specific properties - jdbc transaction isolation level - schema "nodes" table (other tables reported; ought same) - information database indices ### <a name="long-running-queries"></a> "long running queries" rdbdocumentstore log info message query takes longer 10s, frequently indicates configuration problem. ~~~ info ... org.apache.jackrabbit.oak.plugins.document.rdb.rdbdocumentstorejdbc - long running query nodes 100 hits (limited 100), elapsed time 11361ms (configured querytimelimit 10000), params minid 'null' maxid 'null' excludekeypatterns [] conditions [_modified >= 1554909530] limit 100. result range: '0:/'...'12:/...'. read 26126 chars data 0 bytes bdata. check calling method. java.lang.exception: call stack ~~~ call stack dumped identify piece code executed query. important understand error, logged diagnostic purposes. ### <a name="tomcat-jdbc-pool-interceptor"></a> tomcat jdbc pool interceptor messages using tomcat jdbc connection pool, default "slow" "failed" queries logged warn level. latter category bit problematic, tomcat thinks failure might completely normal expected behavior. instance: ~~~ warn [...] org.apache.tomcat.jdbc.pool.interceptor.slowqueryreport failed query report sql=update nodes set modified = case ? > modified ? else modified end, hasbinary = ?, deletedonce = ?, modcount = ?, cmodcount = ?, dsize = dsize + ?, version = 2, data = case len(data) < ? (data + cast(? nvarchar(4000))) else (data + cast(data nvarchar(max))) end id = ? modcount = ?; time=1 ms; ~~~ indicates update operation made conditional happen condition met. another example insert operations, done "optimistically", automatically retried updates upon failure. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/document/mongo-document-store.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # mongodb documentstore `mongodocumentstore` one backend implementations [documentnodestore](../documentmk.html). mongodocumentstore use mongodb persist nodes documents. ## <a name="recommendations"></a> recommendations deploying mongodocumentstore mongodb, make sure recommendations described [production notes](https://docs.mongodb.com/manual/administration/production-notes/) applied. recommended mongodb version depends oak release. table lists recommended mongodb version oak release. recent mongodb versions may also work, untested. oak release | mongodb version ------------|---------------- 1.4.0 - 1.4.22 | 3.2.x 1.4.23 newer | 3.6.x 1.6.0 - 1.6.13 | 3.2.x 1.6.14 newer | 3.6.x 1.8.0 - 1.8.6 | 3.4.x 1.8.7 newer | 3.6.x 1.22.x newer | 4.0.x 1.62.0 newer | 5.0 (soon 6.0) production deployments use replica-set least three mongod instances majority write concern. fewer three instances (e.g. two instances arbiter) may lead data loss primary fails. using mongodb 3.4 newer, set [maxstalenessseconds](https://docs.mongodb.com/manual/core/read-preference/#maxstalenessseconds) option mongodb uri `90`. additional safeguard prevent reads secondary far behind. initializing documentnodestore mongodb default values also use mongodb store blobs. convenient development tests, use mongodb blob store production recommended. mongodb replicates changes single op-log. large blobs lead significantly reduced op-log window cause delay replicating changes replica-set members. see available [blob stores](../../plugins/blobstore.html) alternatives production use. ## <a name="initialization"></a> initialization recommended method initialize `documentnodestore` `mongodocumentstore` using osgi container configure `documentnodestoreservice`. see corresponding [repository osgi configuration](../../osgi_config.html). alternatively mongodb based documentnodestore created help `mongodocumentnodestorebuilder`. documentnodestore store = newmongodocumentnodestorebuilder() .setmongodb("mongodb://localhost:27017", "oak", 0).build(); // something store nodestate root = store.getroot(); // dispose done store.dispose(); please note, even though default store blobs mongodb, recommended setup. see also [recommendations](#recommendations). ## <a name="read-preference"></a> read preference without read preference specified mongodb uri, read operations directed mongodb primary ensure consistent reads. functionality like revision garbage collection strict requirement therefore scan (read) garbage read preference `secondarypreferred`. takes pressure primary. `mongodocumentstore` configured explicit read preference via mongodb uri, read preference considered hint. implementation may still read primary cannot guarantee consistent read secondary. may case secondary lags behind read happens document recently modified. common use case setting read preference nearby secondary. achieved `readpreferencetags` mongodb uri. example prefer secondary tag _dc:ny,rack:1_. secondary available, read operation target secondary tag _dc:ny_ secondary available either, available secondary chosen. final fallback read served primary. mongodb://example1.com,example2.com,example3.com/?readpreference=secondarypreferred&readpreferencetags=dc:ny,rack:1&readpreferencetags=dc:ny&readpreferencetags= refer [read preference options][3] [write concern options][4] details. starting oak 1.9.3 `mongodocumentstore` automatically uses client sessions causal consistency running mongodb 3.6 newer. feature disabled setting system property: `-doak.mongo.clientsession=false`. causal consistent client sessions allows `mongodocumentstore` always read secondary configured relevant read preference time guarantee required consistency. useful distributed deployment multiple oak processes connected mongodb replica-set. putting mongodb secondary close oak process ensures low read latency oak configured always read nearby mongodb secondary. `mongodocumentstore` periodically estimates replication lag secondaries replica-set may decide read primary even read preference configured otherwise. prevent high query times secondary must wait replication catch state required client session. estimate rather rough switch primary lag estimated five seconds. ## <a name="configuration"></a> configuration independent whether documentnodestore initialized via osgi service builder, implementation automatically take care appropriate default mongodb client parameters. includes write concern, controls many mongodb replica-set members must acknowledge write operation. without explicit write concern specified mongodb uri, implementation set write concern based mongodb topology. mongodb setup replica-set, oak use `majority` write concern. running single standalone mongodb instance, write concern set 'acknowledged'. similarly, read concern set automatically, unless explicitly specified mongodb uri. `majority` read concern set supported, enabled mongodb server majority write concern use. otherwise read concern set `local`. oak log warn messages deems read write concerns given via mongodb uri insufficient. addition specifying [read preference][1] [write concern][2] mongodb uri, two parameters also set changed runtime setting property `readwritemode` cluster node metadata. cluster node pick change within ten seconds (when renews lease cluster node id). string property format `'readpreference=<preference>&w=<writeconcern>'` similar way used mongodb uri. include option details. following mongodb shell command set read preference `primary` write concern `majority` cluster nodes: > db.clusternodes.update({}, {$set: {readwritemode:'readpreference=primary&w=majority'}}, {multi: true}) [1]: http://docs.mongodb.org/manual/core/read-preference/ [2]: http://docs.mongodb.org/manual/core/write-concern/ [3]: http://docs.mongodb.org/manual/reference/connection-string/#read-preference-options [4]: http://docs.mongodb.org/manual/reference/connection-string/#write-concern-options # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/document/node-bundling.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # bundling nodes * [bundling nodes](#bundling-nodes) * [usage](#bundling-usage) * [bundling pattern](#bundling-pattern) * [bundling examples ](#bundling-example) * [bundling nt:file ](#bundling-usage-file) * [bundling app:asset](#bundling-usage-file) * [design considerations](#bundling-design-considerations) * [benefits limitations](#bundling-benefits-limits) * [benefits](#bundling-benefits) * [limitations](#bundling-limits) `@since oak 1.6` document nodestore stores jcr nodes document underlying `documentstore`. depending backend document stored following way * mongodb - 1 jcr node mapped 1 mongodb document `nodes` collection * rdb - 1 jcr node mapped 1 row `nodes` table remaining part document focus `mongodocumentstore` explain illustrate bundling concepts. fine grained content many nodes properties per node efficient bundle multiple nodes single mongodb document. bundling mostly benefits reading less round-trips backend. time storage footprint lower metadata overhead per document. specially important various indexes like `_id` `_modified_1__id_1` less entries indexed. ## <a name="bundling-usage"></a> usage bundling enabled per nodetype basis. bundling definitions defined content repository `/jcr:system/rep:documentstore/bundlor`. ~~~ + < node type name > - pattern - multi ~~~ example content structure enables bundling nodes type `nt:file` `app:asset` ~~~ + jcr:system + rep:documentstore + bundlor + nt:file (oak:unstructured) - pattern = ["jcr:content"] + app:asset - pattern = ["jcr:content/metadata", "jcr:content/renditions", "jcr:content"] ~~~ done node type `nt:file` created _after_ stored bundled format. nodes created _before_ configuration added affected underlying documents rewritten. * _bundling roots_ - nodes type bundling patterns defined * _bundling pattern_ - pattern defined bundling config path governs relative nodes bundled * _micro tree_ - refers content structure bundled. content structures _micro_ tree multiple micro tree form whole repository tree * _bundling ratio_ - ratio number jcr nodes bundled part bundling root node. example nt:file 2 key points note 1. bundling patterns defined either jcr:mixintypes jcr:primarytype. 2. bundling pattern defined mixins take precedence defined primary node type. 3. bundling impacts content created bundling pattern set. 4. existing content modified. 5. feature enabled disabled anytime. 6. bundling disable later prevents bundling nodes created disabling. existing bundled nodes remain bundled. 7. bundling pattern baked created node. bundling pattern changed later, affects new bundled roots created change. 8. writes `/jcr:system/rep:documentstore/bundlor` restricted system admin important configuration mis configuration severe adverse impact repository. 9. selecting bundling rule node node type inheritance _not_ considered. bundling pattern selected based exact match jcr:mixintypes jcr:primarytype names. ### <a name="bundling-pattern"></a> bundling pattern bundling pattern multi value value property. pattern elements list relative node paths bundled part _bundling root_. relative node paths following type: * static - like 'jcr:content', 'jcr:content/metadata'. * wildcard _(experimental feature)_ - like 'jcr:content/renditions/**'. would bundle nodes relative paths 'jcr:content/renditions' **support wildcard patterns currently experimental** ## <a name="bundling-example"></a> bundling examples ### <a name="bundling-usage-file"></a> bundling nt:file lets take example `nt:file` node like ~~~ + /content/book.jpg - jcr:createdby = "admin" - jcr:primarytype = "nt:file" + jcr:content - jcr:data = < blob id > - jcr:mimetype = "text/plain" - jcr:uuid = "56befaee-f5fe-4252-87f8-0dcc8a624dd5" - jcr:lastmodifiedby = "admin" - jcr:primarytype = "nt:resource" ~~~ ![bundling nodes](node-bundling-file.png) jcr node structure would stored mongodb 2 documents { "_id" : "2:/content/book.jpg", "jcr:created" : {"r151ce899ac3-0-1" : "\"dat:2015-12-23t16:41:43.055+05:30\""}, "_modified" : numberlong(1450869100), "_deleted" : { "r151ce899ac3-0-1" : "false"}, "jcr:createdby" : { "r151ce899ac3-0-1" : "\"admin\""}, "_commitroot" : { "r151ce899ac3-0-1" : "0"}, "_children" : true, "jcr:primarytype": { "r151ce899ac3-0-1" : "\"nam:nt:file\""}, "_modcount" : numberlong(1) }, { "_id" : "3:/content/book.jpg/jcr:content", "_bin" : numberlong(1), "_modified" : numberlong(1450869100), "jcr:lastmodified" : { "r151ce899ac3-0-1" : "\"dat:2015-12-23t16:41:43.056+05:30\""}, "_deleted" : { "r151ce899ac3-0-1" : "false" }, "jcr:data" : { "r151ce899ac3-0-1" : "\":blobid:xxx\""}, "_commitroot" : { "r151ce899ac3-0-1" : "0" }, "jcr:mimetype" : { "r151ce899ac3-0-1" : "\"text/plain\""}, "jcr:uuid" : { "r151ce899ac3-0-1" : "\"56befaee-f5fe-4252-87f8-0dcc8a624dd5\""}, "jcr:lastmodifiedby": { "r151ce899ac3-0-1" : "\"admin\""}, "jcr:primarytype" : { "r151ce899ac3-0-1" : "\"nam:nt:resource\""}, "_modcount" : numberlong(1) } bundling pattern like ~~~ + jcr:system + rep:documentstore + bundlor + nt:file (oak:unstructured) - pattern = ["jcr:content"] ~~~ would bundle 2 nodes nt:file node structure mongodb document { "_id" : "2:/content/book.jpg", "jcr:primarytype" : { "r15866f15753-0-1" : "\"nam:nt:file\""}, "jcr:content/jcr:primarytype" : { "r15866f15753-0-1" : "\"nam:nt:resource\""}, "_bin" : numberlong(1), ":doc-pattern" : { "r15866f15753-0-1" : "[\"str:jcr:content\"]"}, "jcr:content/jcr:data" : { "r15866f15753-0-1" : "\":blobid:xxx\""}, "_commitroot" : { "r15866f15753-0-1" : "0" }, "jcr:content/jcr:uuid" : { "r15866f15753-0-1" : "\"ee045709-81c5-4164-ba08-c03b9c61b102\""}, "jcr:content/jcr:lastmodifiedby" : { "r15866f15753-0-1" : "\"admin\""}, "_deleted" : { "r15866f15753-0-1" : "false"}, "jcr:created" : { "r15866f15753-0-1" : "\"dat:2016-11-15t13:14:02.304+05:30\""}, "jcr:content/:doc-self-path" : {"r15866f15753-0-1" : "\"str:jcr:content\""}, "jcr:createdby" : {"r15866f15753-0-1" : "\"admin\""}, "jcr:content/jcr:lastmodified" : {"r15866f15753-0-1" : "\"dat:2016-11-15t13:14:02.305+05:30\""}, ":doc-has-child-bundled" : {"r15866f15753-0-1" : "true"}, "jcr:content/jcr:mimetype" : {"r15866f15753-0-1" : "\"text/plain\""}, "_modified" : numberlong(1479195840), "_modcount" : numberlong(1) } bundling 1 nt:file would create 1 mongodb document. 10m nt:file instance would create 10m mongodb documents instead 20m (without bundling) ### <a name="bundling-usage-file"></a> bundling app:asset lets take complex content structure. assume nodetype `app:asset` following content ~~~ /content/banner.png - jcr:primarytype = "app:asset" + jcr:content - jcr:primarytype = "app:assetcontent" + metadata - status = "published" + xmp + 1 - softwareagent = "adobe photoshop" - author = "david" + renditions (nt:folder) + original (nt:file) + jcr:content - jcr:data = ... + comments (nt:folder) ~~~ structure following characteristics * consist **static structure** like 'jcr:content', 'jcr:content/metadata' * consist **bounded structure** like 'jcr:content/renditions'. renditions max 5 type nt:file node * **unbounded relative nodes** like 'jcr:content/comments' 'jcr:content/metadata/xmp'. nodes paths unbounded content * static bounded structure take upto ~15 jcr nodes (assuming 5 types renditions) 1 asset ~ 15 jcr nodes ~ 15 mongodb documents. thus default 10m assets would lead 150m+ mongodb documents. structure make use node bundling reduce storage ratio. lets define bundling pattern like ~~~ + jcr:system + rep:documentstore + bundlor + nt:file (oak:unstructured) - pattern = ["jcr:content"] + app:asset - pattern = ["jcr:content/metadata", "jcr:content/renditions/**", "jcr:content"] ~~~ bundling pattern app:asset structure would stored 1 mongodb document excluding 'comments' 'xmp' nodes { "_children": true, "_modified": 1469081925, "_id": "2:/test/book.jpg", "_commitroot": {"r1560c1b3db8-0-1": "0"}, "_deleted": {"r1560c1b3db8-0-1": "false"}, ":doc-pattern": { "r1560c1b3db8-0-1": "[\"str:jcr:content/metadata\",\"str:jcr:content/renditions\",\"str:jcr:content/renditions/**\",\"str:jcr:content\"]" }, "jcr:primarytype": {"r1560c1b3db8-0-1": "\"str:app:asset\""}, //relative node jcr:content "jcr:content/:doc-self-path": {"r1560c1b3db8-0-1" : "\"str:jcr:content\""}, "jcr:content/jcr:primarytype": {"r1560c1b3db8-0-1": "\"nam:oak:unstructured\""}, //relative node jcr:content/metadata "jcr:content/metadata/:doc-self-path": {"r1560c1b3db8-0-1" : "\"str:jcr:content/metadata\""}, "jcr:content/metadata/status": {"r1560c1b3db8-0-1": "\"published\""}, "jcr:content/metadata/jcr:primarytype": {"r1560c1b3db8-0-1": "\"nam:oak:unstructured\""}, //relative node jcr:content/renditions "jcr:content/renditions/:doc-self-path": {"r1560c1b3db8-0-1" : "\"str:jcr:content/renditions\""}, "jcr:content/renditions/jcr:primarytype": {"r1560c1b3db8-0-1": "\"nam:nt:folder\""}, //relative node jcr:content/renditions/original "jcr:content/renditions/original/:doc-self-path": {"r1560c1b3db8-0-1" : "\"str:jcr:content/renditions/original\""}, "jcr:content/renditions/original/jcr:primarytype": {"r1560c1b3db8-0-1": "\"nam:nt:file\""}, //relative node jcr:content/renditions/original/jcr:content "jcr:content/renditions/original/jcr:content/:doc-self-path": {"r1560c1b3db8-0-1" : "\"str:jcr:content/renditions/original/jcr:content\""}, "jcr:content/renditions/original/jcr:content/jcr:primarytype": {"r1560c1b3db8-0-1": "\"nam:nt:resource\""}, "jcr:content/renditions/original/jcr:content/jcr:data": {"r1560c1b3db8-0-1": "\"<data>\""}, } ## <a name="bundling-design-considerations"></a> design considerations enabling bundling consider following points: **enable bundling static bounded relative node paths** bundled nodes stored single mongodb document care must taken bundled document size within reasonable limits otherwise mongodb (or rdb) would reject heavy documents. bundling pattern include relative node paths static bounded. example app:asset would wrong bundle nodes 'jcr:content/comments' comments unlimited would bloat bundled document. however bundling nodes 'jcr:content/renditions' fine application logic ensures max would 4-5 renditions nodes type nt:file. take account content structure setting bundling pattern. **make use custom mixins mark unstructured content** content structure mostly made nodes type `nt:unstrcutured` `oak:unstructured` try identify subtree consistent structure define marker mixin mark subtrees. bundling pattern defined mixins. details bundling implemented refer [oak-1312][oak-1312] ## <a name="bundling-benefits-limits"></a> benefits limitations ### <a name="bundling-benefits"></a> benefits * **reduced latency traversal** - structure like aap:asset traversal done would involve lots queries child nodes jcr level traversal done read relative nodes like 'jcr:content/renditions. bundling queries avoided. * **reduced number documents persistent store** - currently nodetype like app:asset 1 app:asset = 15 jcr nodes. 10m assets would consuming 150 documents mongodb. bundling ratio reduced say 1-5 would reduce actual number documents mongo. fewer documents means reduces size _id {_modified, _id} index. reduced index size allows storing lot mongodb documents index size key factor sizing mongodb setups. ### <a name="bundling-limits"></a> limitations currently bundling logic fallback case bundle document size exceeds size imposed persistent store. try ensure bundling limited bundle lots nodes. [oak-1312]: https://issues.apache.org/jira/browse/oak-1312 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/document/metrics.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # metrics `documentnodestore` underlying `documentstore` expose number metrics used monitor running system. depending `statisticsprovider` use oak, metrics accessed via jmx bridged [apache sling metrics](https://sling.apache.org/documentation/bundles/metrics.html). different types metrics used `documentnodestore` `documentstore`: - counter: monotonically increasing number. though, value reset zero oak restarted. - meter: measures rate event action per second. - timer: measures rate event action per second provides information distribution duration (percentiles). ## documentnodestore following `documentnodestore` counter metrics available, independent underlying `documentstore` use (mongodb, rdb, etc.): name | description | unit -----|-------------|----- cachestats.document-documents.element | number elements (documents) documents cache. | | cachestats.document-documents.eviction | number evictions documents cache. | | cachestats.document-documents.hit | number cache hits documents cache. | | cachestats.document-documents.loadtime | accumulated load time documents cache miss. | nanoseconds | cachestats.document-documents.miss | number cache misses documents cache. | | cachestats.document-documents.request | number lookup requests made documents cache. sum cache hits misses. | | cachestats.document-localdiff.element | number elements localdiff cache. | | cachestats.document-localdiff.eviction | number evictions localdiff cache. | | cachestats.document-localdiff.hit | number cache hits localdiff cache. | | cachestats.document-localdiff.loadtime | accumulated load time localdiff cache. please note, localdiff cache pro-actively populated never loads cache miss. value always zero. | nanoseconds | cachestats.document-localdiff.miss | number cache misses localdiff cache. | | cachestats.document-localdiff.request | number lookup requests made localdiff cache. sum cache hits misses. | | cachestats.document-memorydiff.element | number elements memorydiff cache. | | cachestats.document-memorydiff.eviction | number evictions memorydiff cache. | | cachestats.document-memorydiff.hit | number hits memorydiff cache. | | cachestats.document-memorydiff.loadtime | accumulated load time memorydiff cache. | nanoseconds | cachestats.document-memorydiff.miss | number cache misses memorydiff cache. | | cachestats.document-memorydiff.request | number lookup requests made memorydiff cache. sum cache hits misses. | | cachestats.document-nodechildren.element | number elements nodechildren cache. | | cachestats.document-nodechildren.eviction | number evictions nodechildren cache. | | cachestats.document-nodechildren.hit | number hits nodechildren cache. | | cachestats.document-nodechildren.loadtime | accumulated load time nodechildren cache. | nanoseconds | cachestats.document-nodechildren.miss | number cache misses nodechildren cache. | | cachestats.document-nodechildren.request | number lookup requests made nodechildren cache. sum cache hits misses. | | cachestats.document-nodestate.element | number elements nodestate cache. | | cachestats.document-nodestate.eviction | number evictions nodestate cache. | | cachestats.document-nodestate.hit | number hits nodestate cache. | | cachestats.document-nodestate.loadtime | accumulated load time nodestate cache. | nanoseconds | cachestats.document-nodestate.miss | number cache misses nodestate cache. | | cachestats.document-nodestate.request | number lookup requests made nodestate cache. sum cache hits misses. | | cachestats.document-prevdocuments.element | number elements (documents) prevdocuments cache. | | cachestats.document-prevdocuments.eviction | number evictions prevdocuments cache. | | cachestats.document-prevdocuments.hit | number hits prevdocuments cache. | | cachestats.document-prevdocuments.loadtime | accumulated load time prevdocuments cache. | nanoseconds | cachestats.document-prevdocuments.miss | number cache misses prevdocuments cache. | | cachestats.document-prevdocuments.request | number lookup requests made prevdocuments cache. sum cache hits misses. | | information cachestats also available [cachestatsmbean](https://jackrabbit.apache.org/oak/docs/apidocs/org/apache/jackrabbit/oak/api/jmx/cachestatsmbean.html) oak api. following meters available, exposing cumulative count various rates event (mean, one minute, five minute, fifteen minute): name | description | rate unit -----|-------------|---------- document_ns_bgr_lag | approximate lag milliseconds external changes async background reader pulls cluster nodes. | average lag milliseconds document_ns_bgr_num_changes_rate | number changes async background reader pulls cluster nodes. necessarily mean cluster node reads documents changes, must least invalidate affected documents cache.| changes per second document_ns_bgw_num_write_rate | number documents async background writer updates pushes documentstore. | updates per second document_ns_branch_commit_count | number branch commits performed documentnodestore. | branch commits per second document_ns_merge_branch_commit_count | number branch commits merged. count lower branch commit count branch commits yet merged never merged. | branch commits merged per second document_ns_merge_changes_rate | number changes merged. change defined update insert document. | changes per second document_ns_merge_failed_exclusive | number failed merges holding merge lock exclusively. | failed merges per second document_ns_merge_success_count | number successful merges | merges per second document_ns_merge_success_exclusive | number successful merges holding merge lock exclusively. | merges per second document_ns_merge_success_suspended | number successful merges previously suspended yet visible conflict another cluster node. | merges per second > note: merge operation documentnodestore level roughly equivalent jcr session save() operation. `documentnodestore` also exposes following timers different percentiles duration operation. timings include latency oak backend store like mongodb. name | description -----|------------ document_ns_bgr_cache_invalidate | time takes invalidate affected cache entries background read operation. document_ns_bgr_diff_cache | time takes populate diff cache external changes background read operation. document_ns_bgr_dispatch | time takes `documentnodestore` dispatch external changes background read operation. document_ns_bgr_lock | time takes acquire locks background read operation. document_ns_bgr_read_head | time takes read root document background read operation. document_ns_bgr_total_time | total time background read operation. document_ns_bgw_clean | time takes clean orphaned branches collisions background write operation. document_ns_bgw_lock | time takes acquire locks background write operation. document_ns_bgw_split | time takes split documents background write operation. document_ns_bgw_sweep | time takes sweep documents background write operation. document_ns_bgw_total_time | total time background write operation. document_ns_lease_update | time takes update lease. document_ns_merge_success_time | time takes successful merge complete. include merge attempts failed. document_ns_merge_success_normalized_time | normalized time takes successful merge complete. normalization done dividing merge time number merged changes. document_ns_head_of_queue_wait_time | time merge wait commit queue head queue could proceed. document_ns_merge_suspend_time | time merge suspended due conflicting write another cluster node. document_ns_merge_lock_time | time took acquire merge lock. document_ns_merge_commit_hook_time | time took run commit hook changes merge. document_ns_merge_changes_applied_time | time took apply changes documentstore. > note: oak tracks duration timers millisecond microsecond accuracy, tools may translate duration percentiles different units. `documentnodestore` configured persistent caches, following meters available: name | description | rate unit -----|-------------|---------- persistentcache.nodecache.children.broadcast_recv | number broadcast messages received `children` persistent cache. | messages per second persistentcache.nodecache.children.cache_put | number entries put `children` persistent cache. | entries per second persistentcache.nodecache.children.hits | number hits `children` persistent cache. | hits per second persistentcache.nodecache.children.invalidate_all | number invalidate operations `children` persistent cache. | events per second persistentcache.nodecache.children.invalidate_one | number times entry `children` persistent cache explicitly invalidated. | entries per second persistentcache.nodecache.children.load_exceptions | number times loader threw exception cache miss `children` persistent cache. | exceptions per second persistentcache.nodecache.children.put_rejected_secondary_cache | number rejected put operations `children` persistent cache configuration excludes key. | rejects per second persistentcache.nodecache.children.requests | number lookup requests made `children` persistent cache. include lookup operations keys excluded configuration. | requests per second persistentcache.nodecache.diff.broadcast_recv | number broadcast messages received `diff` persistent cache. | messages per second persistentcache.nodecache.diff.cache_put | number entries put `diff` persistent cache. | entries per second persistentcache.nodecache.diff.hits | number hits `diff` persistent cache. | hits per second persistentcache.nodecache.diff.invalidate_all | number invalidate operations `diff` persistent cache. | events per second persistentcache.nodecache.diff.invalidate_one | number times entry `diff` persistent cache explicitly invalidated. | entries per second persistentcache.nodecache.diff.load_exceptions | number times loader threw exception cache miss `diff` persistent cache. | exceptions per second persistentcache.nodecache.diff.put_rejected_secondary_cache | number rejected put operations `diff` persistent cache configuration excludes key. | rejects per second persistentcache.nodecache.diff.requests | number lookup requests made `diff` persistent cache. include lookup operations keys excluded configuration. | requests per second persistentcache.nodecache.local_diff.broadcast_recv | number broadcast messages received `local_diff` persistent cache. | messages per second persistentcache.nodecache.local_diff.cache_put | number entries put `local_diff` persistent cache. | entries per second persistentcache.nodecache.local_diff.hits | number hits `local_diff` persistent cache. | hits per second persistentcache.nodecache.local_diff.invalidate_all | number invalidate operations `local_diff` persistent cache. | events per second persistentcache.nodecache.local_diff.invalidate_one | number times entry `local_diff` persistent cache explicitly invalidated. | entries per second persistentcache.nodecache.local_diff.load_exceptions | number times loader threw exception cache miss `local_diff` persistent cache. | exceptions per second persistentcache.nodecache.local_diff.put_rejected_secondary_cache | number rejected put operations `local_diff` persistent cache configuration excludes key. | rejects per second persistentcache.nodecache.local_diff.requests | number lookup requests made `local_diff` persistent cache. include lookup operations keys excluded configuration. | requests per second persistentcache.nodecache.node.broadcast_recv | number broadcast messages received `node` persistent cache. | messages per second persistentcache.nodecache.node.cache_put | number entries put `node` persistent cache. | entries per second persistentcache.nodecache.node.hits | number hits `node` persistent cache. | hits per second persistentcache.nodecache.node.invalidate_all | number invalidate operations `node` persistent cache. | events per second persistentcache.nodecache.node.invalidate_one | number times entry `node` persistent cache explicitly invalidated. | entries per second persistentcache.nodecache.node.load_exceptions | number times loader threw exception cache miss `node` persistent cache. | exceptions per second persistentcache.nodecache.node.put_rejected_secondary_cache | number rejected put operations `node` persistent cache configuration excludes key. | rejects per second persistentcache.nodecache.node.requests | number lookup requests made `node` persistent cache. include lookup operations keys excluded configuration. | requests per second persistentcache.nodecache.prev_document.broadcast_recv | number broadcast messages received `prev_document` persistent cache. | messages per second persistentcache.nodecache.prev_document.cache_put | number entries put `prev_document` persistent cache. | entries per second persistentcache.nodecache.prev_document.hits | number hits `prev_document` persistent cache. | hits per second persistentcache.nodecache.prev_document.invalidate_all | number invalidate operations `prev_document` persistent cache. | events per second persistentcache.nodecache.prev_document.invalidate_one | number times entry `prev_document` persistent cache explicitly invalidated. | entries per second persistentcache.nodecache.prev_document.load_exceptions | number times loader threw exception cache miss `prev_document` persistent cache. | exceptions per second persistentcache.nodecache.prev_document.put_rejected_secondary_cache | number rejected put operations `prev_document` persistent cache configuration excludes key. | rejects per second persistentcache.nodecache.prev_document.requests | number lookup requests made `prev_document` persistent cache. include lookup operations keys excluded configuration. | requests per second > note: broadcast feature persistent cache disabled default, means number received broadcast messages zero case. ## revision gc basic revision gc monitored following counters: name | description -----|------------ revisiongc.counter | number revision gc cycles performed `documentnodestore`. cluster one `documentnodestore` instances perform revision gc show increasing value counter. revisiongc.failure | number times revision gc failed. detailed insight provided meters, exposing cumulative count various rates event (mean, one minute, five minute, fifteen minute): name | description -----|------------ revisiongc.delete_doc | total number documents deleted revision gc `documentnodestore`. include types documents deleted revision gc. revisiongc.delete_int_split_doc | number intermediate split documents deleted revision gc `documentnodestore`. revisiongc.delete_leaf_doc | number leaf documents deleted revision gc `documentnodestore`. revisiongc.delete_split_doc | number split/previous documents deleted revision gc `documentnodestore`. revisiongc.read_doc | number documents read revision gc `documentnodestore`. revisiongc.reset_deleted_flag | number documents revision gc reset `_deletedonce` flag. following timers available revision gc, different percentiles duration operation. timings include latency oak backend store like mongodb. name | description -----|------------ revisiongc.active_timer | total time revision gc active one cycle. revisiongc.check_deleted_timer | time takes check documents whether deleted revision gc one cycle. revisiongc.delete_doc_timer | time takes delete documents one revision gc cycle. includes types documents delete. revisiongc.delete_split_doc_timer | time takes collect delete split/previous documents one revision gc cycle. revisiongc.read_doc_timer | time takes read candidate documents `documentstore` one revision gc cycle. revisiongc.reset_deleted_flag_timer | time takes reset `_deletedonce` flag documents revision gc cycle. revisiongc.sort_ids_timer | time takes sort `_id` values documents delete one revision gc cycle. > note: oak tracks duration timers microsecond accuracy, many tools translate duration percentiles milliseconds. ## documentstore every `documentstore` exposes following meters cumulative count various rates operations (mean, one minute, five minute, fifteen minute): name | description | rate unit -----|-------------|---------- document_journal_create | number documents created `journal` collection `documentstore`. | documents per second document_journal_query | number documents read `journal` collection `documentstore`. | documents per second document_nodes_create | number documents created `nodes` collection `documentstore`. | documents per second document_nodes_create_split | number split/previous documents created `nodes` collection `documentstore`. | documents per second document_nodes_create_upsert | number documents upserted `nodes` collection `documentstore`. | documents per second document_nodes_find_cached | number documents `nodes` collection served cache. | documents per second document_nodes_find_missing | number document reads `nodes` collection return document. | reads per second document_nodes_find_primary | number document reads `nodes` collection served primary. | reads per second document_nodes_find_slave | number document reads `nodes` collection served slave/secondary. | reads per second document_nodes_find_split | number split/previous document reads `nodes` collection. | reads per second document_nodes_prefetch | number documents prefetched `nodes`collection. | documents per second document_nodes_query_find | number documents returned queries `nodes` collection. | documents per second document_nodes_query_lock | number times queries `nodes` collection acquire lock `documentstore`. | locks per second document_nodes_query_primary | number queries `nodes` collection targeting primary. | queries per second document_nodes_query_slave | number queries `nodes` collection targeting slave/secondary. | queries per second document_nodes_remove | number documents removed `nodes` collection `documentstore`. | documents per second document_nodes_update | number documents updated `nodes` collection `documentstore`. | documents per second document_nodes_update_failure | number failed updates document `nodes` collection `documentstore`. | failures per second document_nodes_update_retry | number times update document `nodes` collection retried `documentstore`. | retries per second > note: terms _primary_ _slave_ relevant `documentstore` implementation works replicated data, like mongodb. implementations make distinction report calls _primary_. > note: update failures retries relevant rdb documentstore. mongodb documentstore, values always zero. addition meters, `documentstore` also exposes following timers different percentiles duration operation. timings include latency oak backend store like mongodb. name | description -----|------------ document_journal_create_timer | time takes create entry `journal` collection. document_journal_query_timer | time takes perform query `journal` collection. document_nodes_create_timer | time takes create document `nodes` collection. document_nodes_create_upsert_timer | time takes upsert document `nodes` collection. document_nodes_find | time takes lookup document `nodes` collection. include lookups documents exist. document_nodes_find_missing_timer | time takes lookup document `nodes` collection exist. document_nodes_prefetch_timer | time takes perform prefetch `nodes` collection. document_nodes_query | time takes perform query `nodes` collection without additional filters. queries put constraint `_id` field. document_nodes_query_filter | time takes perform query `nodes` collection additional filters. additional filters could e.g. include constraint `_modified` field. document_nodes_query_lock_timer | time query spent `documentstore` waiting lock executed. document_nodes_remove_timer | time takes remove document `nodes` collection. document_nodes_update_timer | time takes update document `nodes` collection. > note: oak tracks duration timers nanosecond accuracy, many tools translate duration percentiles milliseconds. ## mongodocumentstore addition general metrics `documentstore`, `mongodocumentstore` also exposes following counters: name | description | unit -----|-------------|----- mongodb.blobs.count | number documents `blobs` collection. | | mongodb.blobs.size | total size documents `blobs` collection without indexes. | bytes | mongodb.blobs.storagesize | total amount storage allocated `blobs` collection. value may smaller `size` mongodb uses compression stores documents disk. | bytes | mongodb.blobs.totalindexsize | total size indexes `blobs` collection. | bytes | mongodb.clusternodes.count | number documents `clusternodes` collection. | | mongodb.clusternodes.size | total size documents `clusternodes` collection without indexes. | bytes | mongodb.clusternodes.storagesize | total amount storage allocated `clusternodes` collection. value may smaller `size` mongodb uses compression stores documents disk. | bytes | mongodb.clusternodes.totalindexsize | total size indexes `clusternodes` collection. | bytes | mongodb.journal.count | number documents `journal` collection. | | mongodb.journal.size | total size documents `journal` collection without indexes. | bytes | mongodb.journal.storagesize | total amount storage allocated `journal` collection. value may smaller `size` mongodb uses compression stores documents disk. | bytes | mongodb.journal.totalindexsize | total size indexes `journal` collection. | bytes | mongodb.nodes.count | number documents `nodes` collection. | | mongodb.nodes.size | total size documents `nodes` collection without indexes. | bytes | mongodb.nodes.storagesize | total amount storage allocated `nodes` collection. value may smaller `size` mongodb uses compression stores documents disk. | bytes | mongodb.nodes.totalindexsize | total size indexes `nodes` collection. | bytes | mongodb.settings.count | number documents `settings` collection. | | mongodb.settings.size | total size documents `settings` collection without indexes. | bytes | mongodb.settings.storagesize | total amount storage allocated `settings` collection. value may smaller `size` mongodb uses compression stores documents disk. | bytes | mongodb.settings.totalindexsize | total size indexes `settings` collection. | bytes | mongodb.fsusedsize | disk space use partition mongodb stores data. since 1.18. | bytes | mongodb.fstotalsize | disk capacity partition mongodb stores data. since 1.18.| bytes | ## monitoring metrics described page necessary monitor `documentnodestore`, still advised collect data metrics. case problem, metrics valuable source historical data analyze problem gain insight system behaved time. essential metrics monitored are: - background read write operations. operations scheduled run every second. interval gets long, changes cluster nodes get picked delay, result failed merges conflicts. general rule thumb, background operations take longer ten seconds analyzed. possible reasons unusually long background operation may increased load system many changes write read `documentstore`, general slow jvm increased java gc activity overloaded backend store. - background read lag rate. similar schedule background read write operations. one minute rate usually 1000 milliseconds analyzed rate higher ten seconds. - lease update rate duration. `documentnodestore` updates lease roughly every 10 seconds. lease update lightweight operation usually complete quickly. increased update time may indicate network problem overloaded backend store. system analyzed lease update rate drops 3 updates per minute requires immediate attention rate one update per minute lower. please note, `documentnodestore` shut lease expires (the default lease time two minutes). - revision gc rate duration. starting oak 1.8, revision gc mongodb runs every five seconds. also known continuous revision gc. rate duration revision gc cycle monitored analyzed duration five seconds couple cycles. - revision gc failure. occur require immediate attention. log files provide details case revision gc failed. - number merges exclusive lock suspended. periods increased merges exclusive locks suspended merges indicate conflicts usually caused application multiple sessions try write conflicting changes. application analyzed prevent write patterns. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/document/secondary-store.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # secondary nodestore * [secondary nodestore](#secondary-node-store) * [read flow](#read-flow) * [write flow](#write-flow) * [local changes](#write-flow-local-changes) * [external changes](#write-flow-external-changes) * [startup sync](#write-flow-startup-sync) * [setup ](#usage) * [setup considerations](#setup-considerations) * [administration](#administration) * [maintenance](#secondary-store-maintenance) * [new cluster member](#secondary-store-cluster) `@since oak 1.6` `experimental feature` compared segmentnodestore documentnodestore higher latency reads data present cache. happens due multiple round trips required serve hierarchical read access remote storage. e.g. reading content path _/content/assets/nature/sunrise.jpg_ would require around 4 remote calls path content present local cache. [persistent cache](../persistent-cache.html) helped improving enabling caching lot content heap compared limited inmemory cache. new [secondary nodestore][oak-1312] support possible configure segmentnodestore secondary store store content certain set paths locally. segmentnodestore act local copy remote repository (secondary store) like local git repo gets updated primary store (remote mongo storage) via observation. writes still routed primary store reads served local secondary store. ![secondary store setup](secondary-store.png) setup 2 oak cluser nodes connect mongo server. oak instance segmentnodestore configured secondary store. store gets updated observer. **experimental feature** feature currently experimental. following feature item currently pending * [oak-5352][oak-5352] - support maintenance task secondary nodestore ## <a name="read-flow"></a> read flow reading /a/b revision r1 would happen like ![secondary store read flow](secondary-store-read.png) key points * secondary nodestore configured stored content certain paths * read would first attempted configured secondary nodestore. 1. secondary nodestore would check stores content path. note configured path inclusions 2. checks whether root revision later revision read requested 3. nodestate given path revision found returned * read possible secondary nodestore read done memory may turn read remote mongo case cache miss * read successful secondary nodestore based segmentnodestore child read path would directly handled segmentnodestore passing documentnodestore altogether. /a/b@r1 found secondary read /a/b/c@r1 would directly handled secondary store note even root revision secondary store lagging behind current head possible read /a/b handled secondary store /a modified recently. parts repo recently modified would likely served secondary nodestore avoid remote calls mongo. ## <a name="write-flow"></a> write flow updates secondary store happen 3 ways ![secondary store write flow](secondary-store-write.png) key points * writes done nodestore caller i.e. jcr layer always done primary store i.e. mongo * secondary nodestore updated via oak observation support nodestate diff * secondary nodestore configured path filter would interested changes configured paths ### <a name="write-flow-local-changes"></a> local changes local changes done cluster nodes writes applied part observation call documentnodestore send content change callback registered observers. secondary nodestore registers observer listed callback. upon local change gets callback latest state root paths. performs diff local head revision new head revision applies changes onto local store ### <a name="write-flow-external-changes"></a> external changes documentnodestore periodically performs [background reads](../documentmk.html#bg-read) pickup changes cluster node. change pushed registered observer external change. secondary nodestore uses flow local changes update state. diff based update mechanism would read content remote changed paths paths secondary nodestore interested ### <a name="write-flow-startup-sync"></a> startup sync cluster node shutdown later started time start secondary nodestore would try synchronize state remote storage performing diff local head revision remote head revision. done asynchronously block startup ## <a name="usage"></a> setup enabling feature following osgi configurations done **1. configure segmentnodestore secondary role** create osgi config file `org.apache.jackrabbit.oak.segment.segmentnodestorefactory-secondary.config` following content role="secondary" would create segmentnodestore secondary role uses default `segmentstore-secondary` directory store segment files. refer [config options](../../osgi_config.html#config-segmentnodestoreservice) details. note options `segmentnodestoreservice` applicable `segmentnodestorefactory` **2. configure secondarystorecacheservice (optional)** default secondary nodestore would activated based previous config only. however tweaked creating osgi config file `org.apache.jackrabbit.oak.plugins.document.secondary.secondarystorecacheservice.config` includedpaths=[ \ "/libs", \ "/apps", \ "/content" ] config would enable secondary nodestore paths '/libs, /apps /content' ## <a name="setup-considerations"></a> setup considerations enabling secondary nodestore feature following aspects needs considered * segmentnodestore used secondary nodestore would compete system resource like memory along memory caches documentnodestore lucene index files. system must sufficient memory 3 components * segmentnodestore copied existing cluster node new node. * enabled existing setup initial sync would take time. take account planning enable feature * best performance include paths repository accessed end user. specially content paths read write ratio high. ## <a name="administration"></a> administration ### <a name="secondary-store-maintenance"></a> maintenance certain maintenance like [online revisiongc](../segment/overview.html#garbage-collection) secondary nodestore i.e. segmentnodestore need enabled. (this feature currently pending [oak-5352][oak-5352]). would ensure older revision gets garbage collected ### <a name="secondary-store-cluster"></a> new cluster member new oak server joined cluster done cloning secondary nodestore existing cluster member otherwise initial sync would take long time complete [oak-5352]: https://issues.apache.org/jira/browse/oak-5352 [oak-1312]: https://issues.apache.org/jira/browse/oak-1312 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-doc/src/site/markdown/nodestore/document/upgrade.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> # documentnodestore upgrade instructions general oak aims provide smooth upgrade path allows new version oak simply run data written older version oak. cases additional manual steps needed recommended ensure performance reduce downtime system minimum. ## upgrade oak-9176 oak-9176 introduces fix sweep functionality. original sweep prior fix cases could missing setting branch commit ("_bc") properties appropriately. oak-9176 fixes new sweep. however, documents went sweep prior oak-9176 might missing "_bc" entries. order resolve this, oak-9176 introduces one-time sweep2. sweep2 automatically runs startup oak upgraded detects whether needs run. needs run, background, occupying 50% cpu max - however, travers repository therefore take time. sweep2 finished (or determined necessary), stores information settings collection. subsequent startups therefore skip sweep2. sweep2 disabled explicitly one reason another, eg causes problems, done via system property: -doak.documentmk.disablesweep2=true. ## <a name="1.8"></a>upgrade 1.8 oak 1.8 introduced changes documentnodestore require one-time sweep documentstore per cluster node. sweep triggered automatically startup oak detects upgrade older version. depending size repository, sweep operation may take time prolong downtime system upgrade. alternatively, one-time sweep operation also triggered inactive cluster node oak-run tool remaining cluster nodes active use application. recommended approach minimizes downtime. ### prerequisites * create backup system * new oak version and/or application bundles uses oak * oak-run tool version used updated application * successful test run steps clone production system applied production. ### instructions following instructions assume cluster two nodes c1 c2 running oak 1.6 older. * remove documents potentially created [oak-4345][0]. issue affected deployments based mongodb. connect database mongodb shell execute: > db.nodes.remove({_id:{$type:7}}) * stop cluster node c1. possible, cluster node shut gracefully next step executed c1 considered inactive. recovery c1 otherwise necessary forcefully killed. happens automatically active nodes cluster, initiated lease c1 timed out. documentnodestore mbean active cluster node inspected find whether cluster node considered inactive (see inactiveclusternodes attribute). * run revisions sweep command using oak-run tool c1. sweep run inactive cluster node, otherwise command refuse run. assuming c1 used clusterid 1, command line would look like this: > java -xmx2g -jar oak-run-1.8.0.jar revisions mongodb://localhost:27017/oak sweep --clusterid 1 larger repositories recommended generous cache size, speed sweep operation: `--cachesize 1024` detailed progress available `--verbose` added. finished tool print summary: updated sweep revision r15d12cb1836-0-1. branch commit markers added 8907 documents. reverted uncommitted changes 19 documents. (7.94 min) * c1 ready upgrade oak 1.8. * stop cluster node c2. downtime system starts. * unlock repository upgrade oak 1.8. step possible *all* nodes cluster inactive. see also [unlock upgrade](../documentmk.html) section. point previous oak version cannot use documentstore anymore. restore backup necessary following steps fail reason upgrade needs rolled back. * start cluster node c1 new version oak application. * run revisions sweep command using oak-run tool c2 (assuming used clusterid 2): > java -xmx2g -jar oak-run-1.8.0.jar revisions mongodb://localhost:27017/oak sweep --clusterid 2 * start cluster node c2 new version oak application. * create recommended indexes mongodb remove old ones. efficient revision gc, existing indexes `_deletedonce` `_sdtype` replaced. please note, partial index `_deletedonce` `_modified` requires least mongodb 3.2. > db.nodes.createindex({_sdtype:1, _sdmaxrevtime:1}, {sparse:true}) { "createdcollectionautomatically" : false, "numindexesbefore" : 5, "numindexesafter" : 6, "ok" : 1 } > db.nodes.dropindex("_sdtype_1") { "nindexeswas" : 6, "ok" : 1 } > db.nodes.createindex({_deletedonce:1, _modified:1}, {partialfilterexpression:{_deletedonce:true}}) { "createdcollectionautomatically" : false, "numindexesbefore" : 5, "numindexesafter" : 6, "ok" : 1 } > db.nodes.dropindex("_deletedonce_1") { "nindexeswas" : 6, "ok" : 1 } see also instructions [build indexes replica set][1] minimize impact system. [0]: https://issues.apache.org/jira/browse/oak-4345 [1]: https://docs.mongodb.com/manual/tutorial/build-indexes-on-replica-sets/#index-building-replica-sets # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-api/readme.md # --- oak api ======= api accessing core oak functionality located `org.apache.jackrabbit.oak.api` package consists following key interfaces: * contentrepository * contentsession * root / tree `contentrepository` interface represents entire oak content repository. repository may local remote, cluster size. deployment details hidden behind interface. starting stopping `contentrepository` instances responsibility particular deployment covered interfaces. repository clients use deployment-specific mechanism (jndi, osgi service, etc.) acquire references `contentrepository` instances. content repository accessed authenticated sessions acquired `contentrepository.login()` method. method takes explicit access credentials login details and, assuming credentials valid, returns `contentsession` instance encapsulates information. session instances `closeable` need closed release associated resources longer used. recommended access pattern is: contentrepository repository = ...; contentsession session = repository.login(...); try { ...; // use session } finally { session.close(); } `contentrepository` `contentsession` instances thread-safe. authenticated `contentsession` gives properly authorized access hierarchical content tree inside repository instances `root` `tree` interfaces. `getcurrentroot()` method returns snapshot current state content tree: contentsession session = ...; root root = session.getcurrentroot(); tree tree = root.gettree("/"); returned `tree` instance belongs client state modified response method calls made client. `tree` instances *not* thread-safe write access, writing clients need ensure accessed concurrently multiple threads. `tree` instances *are* however thread-safe read access, implementations need ensure reading clients see coherent state. content trees recursive data structures consist named properties subtrees share namespace, accessed separate methods like outlined below: tree tree = ...; (propertystate property : tree.getproperties()) { ...; } (tree subtree : tree.getchildren()) { ...; } repository content snapshot exposed `tree` instance may become invalid time due garbage collection old content, point outdated snapshot start throwing `illegalstateexceptions` indicate snapshot longer available. access recent content, client either call `contentsession.getcurrentroot()` acquire fresh new content snapshot use `refresh()` method update given `root` latest state content repository: root root = ...; root.refresh(); addition reading repository content, client also make modifications content tree. content changes remain local particular `root` instance (and related subtrees) explicitly committed. example, following code creates commits new subtree containing nothing simple property: contentsession session = ...; root root = session.getcurrentroot(); tree tree = root.gettree("/"); tree subtree = tree.addchild("hello"); subtree.setproperty("message", "hello, world!"); root.commit(); even `root` instances acquired `contentsession` see changes they've committed trees refreshed. allows client track multiple parallel sets changes single authenticated session. license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-upgrade/src/main/resources/upgrade_usage.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. usage: ${command} [options] jcr2_source [destination] (to upgrade jcr 2 repository) ${command} [options] source destination (to migrate oak repository) # jcr2_source path repository directory optionally repository.xml file, instance: crx-quickstart/repository my-instance/repository somewhere-else/repository.xml destination, repository converted segment node store in-place. old files moved repository/crx2 directory. # source / destination descriptor oak node store. possible options: * path segment-tar store * az:https://myaccount.blob.core.windows.net/container/repo (don't forget set azure_secret_key env variable) * segment-old:/path/to/classic/segment * jdbc:... (requires passing username password separate parameters) * mongodb://host:port/database # node store options --cache <int> cache size mb (default: 256) --disable-mmap disable memory mapped file access segment store --src-password source rdb password --src-user source rdb user --user target rdb user --password target rdb password # migration options --copy-binaries copy binary content. use disable use existing datastore new repo --early-shutdown shutdown source jcr2 repository nodes copied commit hooks applied --fail-on-error fail completely nodes can't read source repo --ignore-missing-binaries proceed migration even binaries missing # version store options --copy-orphaned-versions allows skip copying orphaned versions. parameters: { true | false | yyyy-mm-dd }. defaults true. --copy-versions copy version storage. parameters: { true | false | yyyy-mm-dd }. defaults true. # paths options --include-paths comma-separated list paths include copy. --merge-paths comma-separated list paths merge copy. --exclude-paths comma-separated list paths exclude copy. # source blob store options --src-datastore datastore directory used source filedatastore --src-fileblobstore datastore directory used source fileblobstore --src-s3datastore datastore directory used source s3 --src-s3config configuration file source s3datastore # destination blob store options --datastore datastore directory used target filedatastore --fileblobstore datastore directory used target fileblobstore --s3datastore datastore directory used target s3 --s3config configuration file target s3datastore # options -?, -h, --help show help --skip-init initialize destination repository --skip-name-check look long-named nodes beginning migration # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-exercise/readme.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> jackrabbit oak - exercise ======================================================= oak module providing exercises developers wish become familiar oak code base understand design principals implementation details. note: module suited reference 'best-practises' jcr jackrabbit api consumers. instead often uses low-level implementation access illustrate particular pattern detail. mandatory preparation --------------------- apart exercise code, need following source packges installed please make sure following source code computer setup preferred ide - oak (http://svn.apache.org/repos/asf/jackrabbit/oak/trunk/, https://github.com/apache/jackrabbit-oak) - jcr 2.0 (https://svn.java.net/svn/jsr-283~svn/trunk/src/) - jackrabbit api (http://svn.apache.org/repos/asf/jackrabbit/trunk/jackrabbit-api/, https://github.com/apache/jackrabbit) - jackrabbit commons (http://svn.apache.org/repos/asf/jackrabbit/trunk/jackrabbit-jcr-commons/, https://github.com/apache/jackrabbit) recommended reading ------------------- preparation introduction recommended take look security related sections jsr283 make familiar security related areas api well extensions defined apache jackrabbit. jsr 283 : content repository java technology api specification v2.0 following sections specification deal security particular authentication authorization. - 4.2 login (https://s.apache.org/jcr-2.0-spec/4_connecting.html#4.2%20login) - 4.3 impersonate (https://s.apache.org/jcr-2.0-spec/4_connecting.html#4.3%20impersonate) - 4.4.1 user (https://s.apache.org/jcr-2.0-spec/4_connecting.html#4.4.1%20user) - 9 permissions capabilities (https://s.apache.org/jcr-2.0-spec/9_permissions_and_capabilities.html) - 16 access control management (https://s.apache.org/jcr-2.0-spec/16_access_control_management.html) also find correspoding parts api documentation: - login impersonation https://s.apache.org/jcr-2.0-javadoc/javax/jcr/repository.html#login%28javax.jcr.credentials,%20java.lang.string%29 https://s.apache.org/jcr-2.0-javadoc/javax/jcr/session.html#impersonate%28javax.jcr.credentials%29 - credentials https://s.apache.org/jcr-2.0-javadoc/javax/jcr/credentials.html https://s.apache.org/jcr-2.0-javadoc/javax/jcr/guestcredentials.html https://s.apache.org/jcr-2.0-javadoc/javax/jcr/simplecredentials.html - permission discovery jcr action constants https://s.apache.org/jcr-2.0-javadoc/javax/jcr/session.html https://s.apache.org/jcr-2.0-javadoc/javax/jcr/session.html#haspermission%28java.lang.string,%20java.lang.string%29 https://s.apache.org/jcr-2.0-javadoc/javax/jcr/session.html#checkpermission%28java.lang.string,%20java.lang.string%29 - access control management https://s.apache.org/jcr-2.0-javadoc/javax/jcr/security/package-summary.html #### apache jackrabbit : api extensions jsr 283 javadoc latest jackrabbit api (2.10) found http://jackrabbit.apache.org/api/2.10/ - authentication (tokencredentials) http://jackrabbit.apache.org/api/2.10/org/apache/jackrabbit/api/security/authentication/token/tokencredentials.html - access control management http://jackrabbit.apache.org/api/2.10/org/apache/jackrabbit/api/security/package-summary.html - privilege management http://jackrabbit.apache.org/api/2.10/org/apache/jackrabbit/api/security/authorization/privilegemanager.html - principal management http://jackrabbit.apache.org/api/2.10/org/apache/jackrabbit/api/security/principal/package-summary.html - user management http://jackrabbit.apache.org/api/2.10/org/apache/jackrabbit/api/security/user/package-summary.html #### oak documentation exists documentation oak security http://jackrabbit.apache.org/oak/docs/security/overview.html. cover everything looked introduction. references java authentication authorization service (jaas) note make use authentication part jaas. nevertheless following documents might useful consult dealing authentication. - reference guide http://docs.oracle.com/javase/7/docs/technotes/guides/security/jaas/jaasrefguide.html - develop loginmodule http://docs.oracle.com/javase/7/docs/technotes/guides/security/jaas/jaaslmdevguide.html #### java api references following api references authentication related classes keep referring talking security repository general security - principal (http://docs.oracle.com/javase/7/docs/api/java/security/principal.html) - group (http://docs.oracle.com/javase/7/docs/api/java/security/acl/group.html) #### authentication - logincontext (http://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/logincontext.html ) - loginmodule (http://docs.oracle.com/javase/7/docs/api/javax/security/auth/spi/loginmodule.html) - configuration (http://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/configuration.html) - subject (http://docs.oracle.com/javase/7/docs/api/javax/security/auth/subject.html) using exercise module ------------------------- exercise module consists training material form test-cases 'fixed' based instructions description test-method (exercise comments). addition module comes examples customizations extensions adjusted plugged test repository advanced learners. verify solutions ---------------------------- instructions exercise comments indicate tests need adjusted. run tests ide verify pass check solution correct. note: module default skips test execution. enable test verification intend verify solutions 'mvn clean install'. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-auth-ldap/readme.md # --- oak ldap authentication support =============================== license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-auth-ldap/src/test/scripts/del_user.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # [ -z "$1" ]; echo "usage: $0 userid" exit fi ldapdelete -v -h localhost -p 10389 -d uid=admin,ou=system -w secret "cn=test user $1,ou=people,o=sevenseas,dc=com" # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-auth-ldap/src/test/scripts/add_user.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # [ -z "$1" ]; echo "usage: $0 userid" exit fi ldapadd -h localhost -p 10389 -d uid=admin,ou=system -w secret <<eof dn: cn=test user $1,ou=people,o=sevenseas,dc=com objectclass: top objectclass: inetorgperson objectclass: person objectclass: organizationalperson cn: test user $1 sn: user $1 description: user test stuff givenname: test mail: $10@mail.com uid: $1 userpassword:: e3noyx1uvtrlstcxymnuqkdxzu8wddl0whzzmxu1b1e9 eof # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/util/test.json # --- { "a":"aqq", "b":"bqq", "arr":[1,2,3,0.2, true, null, "quc"], "obj":{ "q":0.02, "n":null, "bool": { "t":true, "f":false }, "":{"":{"":{"":{"":{"":{"":{"":{"":{"":{"":{"":{"":{}}}}}}}}}}}}}, "1":{ "test-node" : { "jcr:primarytype" : "sling:propertysettestnodetype", "string" : "sling", "strings" : ["apache", "sling"], "long" : 42, "longs" : [4, 8, 15, 16, 23, 42], "boolean" : true, "booleans" : [true, false], "uri" : "http://www.google.com/", "uris" : ["http://sling.apache.org/", "http://www.google.com/"], "name" : "sling:test", "names" : ["jcr:base", "sling:test"], "path" : "/sling-test/initial-content-folder/folder-content-test", "paths" : ["/sling-test/initial-content-folder/folder-content-test", "/apps"] } } } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/sql2_index.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters explain select [jcr:path], [jcr:score], * [nt:base] lower([test]) <> 'lower' [nt:base] [a] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ explain select * [nt:base] [jcr:uuid] <> '1' [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ explain select * [nt:base] left outer join [nt:base] b a.x=b.y a.y null b.z = 1 [nt:base] [a] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ left outer join [nt:base] [b] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ [a].[x] = [b].[y] explain select * [nt:base] right outer join [nt:base] b a.x=b.y a.y null b.z = 1 [nt:base] [b] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ left outer join [nt:base] [a] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ [a].[x] = [b].[y] explain select * [nt:base] (p=1 p=2) (p=3 p=4) [nt:base] [nt:base] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ explain select * [nt:base] [jcr:uuid] like '%' [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ explain select e.[jcr:path] [nt:base] inner join [nt:base] b ischildnode(b, a) inner join [nt:base] c ischildnode(c, b) inner join [nt:base] ischildnode(d, c) inner join [nt:base] e ischildnode(e, d) name(a) = 'a' isdescendantnode(a, '/') name(b) = 'c' name(c) = 'd' name(d) = 'e' (e.[jcr:uuid] = '1' e.[jcr:uuid] = '2' e.[jcr:uuid] = '3' e.[jcr:uuid] = '4') [nt:base] [e] /* property uuid indexdefinition: /oak:index/uuid values: '1', '2', '3', '4' estimatedcost: 6.0 */ inner join [nt:base] [d] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ ischildnode([e], [d]) inner join [nt:base] [c] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ ischildnode([d], [c]) inner join [nt:base] [b] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ ischildnode([c], [b]) inner join [nt:base] [a] /* traverse alldescendents: / estimatedentries: 1.0e8 */ ischildnode([b], [a]) explain select e.[jcr:path] [nt:base] inner join [nt:base] b ischildnode(b, a) inner join [nt:base] c ischildnode(c, b) inner join [nt:base] ischildnode(d, c) inner join [nt:base] e ischildnode(e, d) name(a) = 'a' isdescendantnode(a, '/') name(b) = 'c' name(c) = 'd' name(d) = 'e' (e.[jcr:uuid] = '1' e.[jcr:uuid] = '2' e.[jcr:uuid] = '3' e.[jcr:uuid] = '4') [nt:base] [e] /* property uuid indexdefinition: /oak:index/uuid values: '1', '2', '3', '4' estimatedcost: 6.0 */ inner join [nt:base] [d] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ ischildnode([e], [d]) inner join [nt:base] [c] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ ischildnode([d], [c]) inner join [nt:base] [b] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ ischildnode([c], [b]) inner join [nt:base] [a] /* traverse alldescendents: / estimatedentries: 1.0e8 */ ischildnode([b], [a]) explain select excerpt(.) [nt:resource] contains(*, 'jackrabbit') [nt:resource] [nt:resource] /* traverse allnodes (warning: slow) estimatedentries: infinity */ explain select excerpt(.) [nt:resource] contains(*, 'jackrabbit') contains(*, 'jackrabbit') [nt:resource] [nt:resource] /* traverse allnodes (warning: slow) estimatedentries: infinity */ explain select excerpt(.) [nt:resource] (contains(*, 'jackrabbit') contains(*, 'jackrabbit')) x = '1' [nt:resource] [nt:resource] /* traverse allnodes (warning: slow) estimatedentries: infinity */ explain select * [nt:base] [jcr:uuid]=1 [b]=2 [nt:base] [nt:base] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ explain select b.[jcr:uuid] [nt:base] inner join [nt:base] b isdescendantnode(b, a) (a.[jcr:uuid] = '1' a.[jcr:uuid] = '2') [nt:base] [a] /* property uuid indexdefinition: /oak:index/uuid values: '1', '2' estimatedcost: 4.0 */ inner join [nt:base] [b] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ isdescendantnode([b], [a]) explain select b.[jcr:uuid] [nt:base] inner join [nt:base] b isdescendantnode(b, a) (a.[jcr:uuid] = '1' a.[jcr:uuid] = '2') b.[jcr:uuid] null [nt:base] [a] /* property uuid indexdefinition: /oak:index/uuid values: '1', '2' estimatedcost: 4.0 */ inner join [nt:base] [b] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ isdescendantnode([b], [a]) explain select * [nt:base] length([jcr:uuid])=1 upper([jcr:uuid])='1' lower([jcr:uuid])='3' [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ explain select * [nt:base] [jcr:uuid] = '1' ([jcr:uuid] = '2' [b] = '3') [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: '1', '2' estimatedcost: 4.0 */ explain select * [nt:base] [jcr:uuid] in('1', '2') [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: '1', '2' estimatedcost: 4.0 */ explain select * [nt:base] [jcr:uuid] = '1' [jcr:uuid] = '2' [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: '1', '2' estimatedcost: 4.0 */ explain select * [nt:base] [jcr:uuid] = '123' [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: '123' estimatedcost: 2.0 */ explain select * [nt:base] [jcr:uuid] null [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ explain select * [nt:base] inner join [nt:base] b isdescendantnode(b, a) a.[jcr:uuid] null b.[jcr:uuid] null [nt:base] [a] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ inner join [nt:base] [b] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ isdescendantnode([b], [a]) explain select * [nt:base] inner join [nt:base] b isdescendantnode(b, a) (a.[jcr:uuid]=1 a.[jcr:uuid]=2) (b.[jcr:uuid]=3 b.[jcr:uuid]=4) [nt:base] [a] /* property uuid indexdefinition: /oak:index/uuid values: '1', '2' estimatedcost: 4.0 */ inner join [nt:base] [b] /* property uuid indexdefinition: /oak:index/uuid values: '3', '4' estimatedcost: 4.0 */ isdescendantnode([b], [a]) explain select * [nt:base] inner join [nt:base] b isdescendantnode(b, a) a.[jcr:uuid] null b.[x] null [nt:base] [a] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ inner join [nt:base] [b] /* traverse allnodes (warning: slow) estimatedentries: 1.0e8 */ isdescendantnode([b], [a]) explain select [rep:excerpt] [nt:base] [jcr:uuid] null [nt:base] [nt:base] /* property uuid indexdefinition: /oak:index/uuid values: values index (warning: may slow) estimatedcost: 12.0 */ commit / + "test": { "jcr:uuid": "xyz", "a": { "jcr:uuid": "123" } } select [jcr:path] [nt:base] [jcr:uuid] null /test /test/a select [jcr:path] [nt:base] [jcr:uuid] = '123' union select [jcr:path] [nt:base] [jcr:uuid] = '312' union select [jcr:path] [nt:base] [jcr:uuid] = '231' /test/a select [jcr:path] [nt:base] [jcr:uuid] = '123' union select [jcr:path] [nt:base] [jcr:uuid] = '312' /test/a select [jcr:path] [nt:base] [jcr:uuid] = 'xyz' /test commit / - "test" # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/xpath.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters # xpath2sql /jcr:root/content//element(*, nt:base)[fn:path() >= $lastvalue] order fn:path() select [jcr:path], [jcr:score], * [nt:base] path(a) >= @lastvalue isdescendantnode(a, '/content') order path(a) /* xpath ... */ xpath2sql /jcr:root/content//element(*, nt:base)[jcr:first(@vanitypath) >= $lastvalue] order jcr:first(@vanitypath), @jcr:path select [jcr:path], [jcr:score], * [nt:base] first([vanitypath]) >= @lastvalue isdescendantnode(a, '/content') order first([vanitypath]), [jcr:path] /* xpath ... */ xpath2sql /jcr:root/content//element(*, nt:base)[@jcr:lastmodified >= $lastmodified] order @jcr:lastmodified, @jcr:path select [jcr:path], [jcr:score], * [nt:base] [jcr:lastmodified] >= @lastmodified isdescendantnode(a, '/content') order [jcr:lastmodified], [jcr:path] /* xpath ... */ xpath2sql /jcr:root//element(*, nt:base)[jcr:contains(., 'hello')]/rep:excerpt() select [jcr:path], [jcr:score], [rep:excerpt] [nt:base] contains(*, 'hello') isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root//element(*, nt:base)[jcr:contains(., 'hello')]/rep:excerpt(.) select [jcr:path], [jcr:score], [rep:excerpt] [nt:base] contains(*, 'hello') isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root//element(*, nt:base)[jcr:contains(., 'hello')]/rep:excerpt(@jcr:title) select [jcr:path], [jcr:score], [rep:excerpt(jcr:title)] [nt:base] contains(*, 'hello') isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root//element(*, nt:base)[jcr:contains(., 'hello')]/rep:excerpt(par1/@title) select [jcr:path], [jcr:score], [rep:excerpt(par1/title)] [nt:base] contains(*, 'hello') isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root//element(*, nt:base)[jcr:contains(., 'hello')]/(rep:excerpt()) select [jcr:path], [jcr:score], [rep:excerpt] [nt:base] contains(*, 'hello') isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root//element(*, nt:base)[jcr:contains(., 'hello')]/(rep:excerpt(.)) select [jcr:path], [jcr:score], [rep:excerpt] [nt:base] contains(*, 'hello') isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root//element(*, nt:base)[jcr:contains(., 'hello')]/(rep:excerpt(jcr:content/@jcr:description) | | rep:excerpt(@jcr:title) | rep:excerpt(.)) select [jcr:path], [jcr:score], [rep:excerpt(jcr:content/jcr:description)], [rep:excerpt(jcr:title)], [rep:excerpt] [nt:base] contains(*, 'hello') isdescendantnode(a, '/') /* xpath ... */ # oak-7131 xpath2sql /jcr:root/content[@a=1 @b=2] order @foo option(traversal ok) select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/content') [a] = 1 union select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/content') [b] = 2 order [foo] option(traversal ok) /* xpath ... */ xpath2sql /jcr:root/(content | dam)[@a=1 @b=2] order @foo select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/content') [a] = 1 union select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/content') [b] = 2 /* xpath ... */ union select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/dam') [a] = 1 union select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/dam') [b] = 2 /* xpath ... */ order [foo] xpath2sql //(element(*, type1) | element(*, type2))[@a='b' @c='d'] order @foo option(traversal ok) select [jcr:path], [jcr:score], * [type1] [a] = 'b' union select [jcr:path], [jcr:score], * [type1] [c] = 'd' /* xpath ... */ union select [jcr:path], [jcr:score], * [type2] [a] = 'b' union select [jcr:path], [jcr:score], * [type2] [c] = 'd' /* xpath ... */ order [foo] option(traversal ok) # oak-7151 xpath2sql //*[@a='b']/rep:excerpt(.) select [jcr:path], [jcr:score], [rep:excerpt] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(.)) select [jcr:path], [jcr:score], [rep:excerpt] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/rep:excerpt(@a) select [jcr:path], [jcr:score], [rep:excerpt(a)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(@a)) select [jcr:path], [jcr:score], [rep:excerpt(a)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/rep:excerpt(a/@b) select [jcr:path], [jcr:score], [rep:excerpt(a/b)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(a/@b)) select [jcr:path], [jcr:score], [rep:excerpt(a/b)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/rep:excerpt(a/b/@c) select [jcr:path], [jcr:score], [rep:excerpt(a/b/c)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(a/b/@c)) select [jcr:path], [jcr:score], [rep:excerpt(a/b/c)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(@a) | rep:excerpt(@b)) select [jcr:path], [jcr:score], [rep:excerpt(a)], [rep:excerpt(b)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(@a) | rep:excerpt(@b) | rep:excerpt(@c)) select [jcr:path], [jcr:score], [rep:excerpt(a)], [rep:excerpt(b)], [rep:excerpt(c)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(rel/@a) | rep:excerpt(rel/@b)) select [jcr:path], [jcr:score], [rep:excerpt(rel/a)], [rep:excerpt(rel/b)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(.) | rep:excerpt(@a)) select [jcr:path], [jcr:score], [rep:excerpt], [rep:excerpt(a)] [nt:base] [a] = 'b' /* xpath ... */ xpath2sql //*[@a='b']/(rep:excerpt(.) | rep:excerpt(rel/@a) | rep:excerpt(rel/@b)) select [jcr:path], [jcr:score], [rep:excerpt], [rep:excerpt(rel/a)], [rep:excerpt(rel/b)] [nt:base] [a] = 'b' /* xpath ... */ # oak-6792 xpath2sql /jcr:root//*/(rep:facet(jcr:data/jcr:createdby)) select [jcr:path], [jcr:score], [rep:facet(jcr:data/jcr:createdby)] [nt:base] isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root//*/(rep:facet(jcr:createdby)) select [jcr:path], [jcr:score], [rep:facet(jcr:createdby)] [nt:base] isdescendantnode(a, '/') /* xpath ... */ # oak-6778 xpath2sql explain /jcr:root/content/(activities|people)//element(*, acme:asset) explain select [jcr:path], [jcr:score], * [acme:asset] isdescendantnode(a, '/content/activities') /* xpath ... */ union select [jcr:path], [jcr:score], * [acme:asset] isdescendantnode(a, '/content/people') /* xpath ... */ xpath2sql explain measure /jcr:root/content/(activities|people)//element(*, acme:asset) explain measure select [jcr:path], [jcr:score], * [acme:asset] isdescendantnode(a, '/content/activities') /* xpath ... */ union select [jcr:path], [jcr:score], * [acme:asset] isdescendantnode(a, '/content/people') /* xpath ... */ # oak-937 xpath2sql /jcr:root/content//* option(index tag a, index name b) select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') option(index name [b], index tag [a]) /* xpath ... */ select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') option(index tag [a-b]) java.text.parseexception: query: select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') option(index tag [a-b](*)); expected: a-z, a-z, 0-9, _ # oak-5949 xpath2sql /jcr:root/home//element(*,rep:authorizable)[jcr:like(@rep:authorizableid,'@')] select [jcr:path], [jcr:score], * [rep:authorizable] [rep:authorizableid] like '@' isdescendantnode(a, '/home') /* xpath ... */ # oak-4387 xpath2sql /jcr:root/content/text/element/rep:excerpt/jcr:content//element(*,nt:unstructured) select [jcr:path], [jcr:score], * [nt:unstructured] isdescendantnode(a, '/content/text/element/rep:excerpt/jcr:content') /* xpath ... */ # oak-4376 xpath2sql //element(*, oak:queryindexdefinition)/* select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [oak:queryindexdefinition] inner join [nt:base] b ischildnode(b, a) /* xpath ... */ xpath2sql //element(*, oak:queryindexdefinition)//* select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [oak:queryindexdefinition] inner join [nt:base] b isdescendantnode(b, a) /* xpath ... */ # nested conditions converted union xpath2sql /jcr:root/test//element(*, nt:unstructured)[ ( jcr:contains(., 'cinema') @tags = 1 ) ( ( not(@types) ( not(@types = 'a') not(@types = 'b') not(@types = 'c') ) ) )] select [jcr:path], [jcr:score], * [nt:unstructured] isdescendantnode(a, '/test') contains(*, 'cinema') [types] null union select [jcr:path], [jcr:score], * [nt:unstructured] isdescendantnode(a, '/test') contains(*, 'cinema') not([types] = 'a') not([types] = 'b') not([types] = 'c') union select [jcr:path], [jcr:score], * [nt:unstructured] isdescendantnode(a, '/test') [tags] = 1 [types] null union select [jcr:path], [jcr:score], * [nt:unstructured] isdescendantnode(a, '/test') [tags] = 1 not([types] = 'a') not([types] = 'b') not([types] = 'c') /* xpath ... */ xpath2sql /jcr:root//*[(@a=1 @b=1) (@c=2 (@c=3 @c=4))] select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/') [a] = 1 [c] = 2 union select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/') [a] = 1 [c] = 3 [c] = 4 union select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/') [b] = 1 [c] = 2 union select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/') [b] = 1 [c] = 3 [c] = 4 /* xpath ... */ # multiple primary types xpath2sql /jcr:root/content//*[jcr:contains(., 'abc') (((@jcr:primarytype = 'page')) ((@jcr:primarytype = 'asset'))) ] select [jcr:path], [jcr:score], * [page] contains(*, 'abc') isdescendantnode(a, '/content') [jcr:primarytype] = 'page' union select [jcr:path], [jcr:score], * [asset] contains(*, 'abc') isdescendantnode(a, '/content') [jcr:primarytype] = 'asset' /* xpath ... */ # single primary type xpath2sql //*[(@jcr:primarytype = 'a' @jcr:primarytype = 'b' @jcr:primarytype = 'c')] select [jcr:path], [jcr:score], * [a] [jcr:primarytype] = 'a' union select [jcr:path], [jcr:score], * [b] [jcr:primarytype] = 'b' union select [jcr:path], [jcr:score], * [c] [jcr:primarytype] = 'c' /* xpath ... */ xpath2sql /jcr:root/content//*[jcr:contains(., 'abc') @jcr:primarytype = 'page'] select [jcr:path], [jcr:score], * [page] contains(*, 'abc') [jcr:primarytype] = 'page' isdescendantnode(a, '/content') /* xpath ... */ # order @jcr:score xpath2sql /jcr:root/content//*[jcr:contains(., 'x')] order @jcr:score descending select [jcr:path], [jcr:score], * [nt:base] contains(*, 'x') isdescendantnode(a, '/content') /* xpath ... */ xpath2sql /jcr:root/content//*[jcr:contains(., 'x')] order @jcr:score ascending select [jcr:path], [jcr:score], * [nt:base] contains(*, 'x') isdescendantnode(a, '/content') order [jcr:score] /* xpath ... */ xpath2sql /jcr:root/content//*[jcr:contains(., 'x')] order @title select [jcr:path], [jcr:score], * [nt:base] contains(*, 'x') isdescendantnode(a, '/content') order [title] /* xpath ... */ # "or" problem xpath2sql /jcr:root/content//*[(@i = '1' @i = '2') (@t = 'a' @t = 'b')] select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [i] in('1', '2') union select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [t] in('a', 'b') /* xpath ... */ # "or" problem xpath2sql /jcr:root/content//*[((@i = '1' @i = '2') (@s = 'x')) (@t = 'a' @t = 'b')] select [jcr:path], [jcr:score], * [nt:base] [t] in('a', 'b') isdescendantnode(a, '/content') [i] in('1', '2') union select [jcr:path], [jcr:score], * [nt:base] [t] in('a', 'b') isdescendantnode(a, '/content') [s] = 'x' /* xpath ... */ xpath2sql /jcr:root/content//*[((@i = '1' @i = '2') (@s = 'x')) (@t = 'a')] select [jcr:path], [jcr:score], * [nt:base] [t] = 'a' isdescendantnode(a, '/content') [i] in('1', '2') union select [jcr:path], [jcr:score], * [nt:base] [t] = 'a' isdescendantnode(a, '/content') [s] = 'x' /* xpath ... */ xpath2sql /jcr:root/content//*[((@i = '1' @i = '2') (@s = 'x'))] select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [i] in('1', '2') union select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [s] = 'x' /* xpath ... */ # "or" "order by" problem xpath2sql /jcr:root/content//*[((@i = '1' @i = '2') (@s = 'x')) (@t = 'a' @t = 'b')] order @a select [jcr:path], [jcr:score], * [nt:base] [t] in('a', 'b') isdescendantnode(a, '/content') [i] in('1', '2') union select [jcr:path], [jcr:score], * [nt:base] [t] in('a', 'b') isdescendantnode(a, '/content') [s] = 'x' order [a] /* xpath ... */ xpath2sql /jcr:root/content//*[((@i = '1' @i = '2') (@s = 'x')) (@t = 'a')] order @a select [jcr:path], [jcr:score], * [nt:base] [t] = 'a' isdescendantnode(a, '/content') [i] in('1', '2') union select [jcr:path], [jcr:score], * [nt:base] [t] = 'a' isdescendantnode(a, '/content') [s] = 'x' order [a] /* xpath ... */ xpath2sql /jcr:root/content//*[((@i = '1' @i = '2') (@s = 'x'))] order @a select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [i] in('1', '2') union select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [s] = 'x' order [a] /* xpath ... */ # "or" problem (oak-1432) xpath2sql /jcr:root/content//element(*, nt:unstructured) [((@p1 = 'x1' @p2 = 'x2') @p3 = 'x3')] select [jcr:path], [jcr:score], * [nt:unstructured] isdescendantnode(a, '/content') [p1] = 'x1' union select [jcr:path], [jcr:score], * [nt:unstructured] isdescendantnode(a, '/content') [p2] = 'x2' union select [jcr:path], [jcr:score], * [nt:unstructured] isdescendantnode(a, '/content') [p3] = 'x3' /* xpath ... */ xpath2sql //*[((@jcr:primarytype = 'nt:unstructured' (@p1 = 'x' @p2 = 'x')) (@p3 = 'x' @jcr:primarytype = 'nt:folder')) ] select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' [p1] = 'x' union select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' [p2] = 'x' union select [jcr:path], [jcr:score], * [nt:folder] [p3] = 'x' [jcr:primarytype] = 'nt:folder' /* xpath ... */ # use optimal join order (oak-1372) xpath2sql /jcr:root/testroot//b/c/d/* [@jcr:uuid='1' @jcr:uuid='2'] select d.[jcr:path] [jcr:path], d.[jcr:score] [jcr:score], d.* [nt:base] inner join [nt:base] b ischildnode(b, a) inner join [nt:base] c ischildnode(c, b) inner join [nt:base] ischildnode(d, c) name(a) = 'b' isdescendantnode(a, '/testroot') name(b) = 'c' name(c) = 'd' d.[jcr:uuid] in('1', '2') /* xpath ... */ # property names missing @ xpath2sql /jcr:root/test/*[@a='1' b='2' jcr:contains(c, '3') jcr:contains(., '4') jcr:contains(@d, '5')] order e select [jcr:path], [jcr:score], * [nt:base] [a] = '1' [b] = '2' contains([c/*], '3') contains(*, '4') contains([d], '5') ischildnode(a, '/test') order [e] /* xpath ... */ # wildcards relative property paths xpath2sql /jcr:root/etc/test//*[@size='m' */@size='m'] select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/etc/test') [size] = 'm' union select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/etc/test') [*/size] = 'm' /* xpath ... */ # union (complex) xpath2sql //*[((@jcr:primarytype = 'nt:unstructured') (@resources = '/data' @resolved = '/data'))] select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' [resources] = '/data' union select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' [resolved] = '/data' /* xpath ... */ xpath2sql //*[(((@jcr:primarytype = 'nt:unstructured') (@resources = '/data' @resolved = '/data')) (@content = '/data' (@jcr:primarytype = 'nt:folder'))) ] select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' [resources] = '/data' union select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' [resolved] = '/data' union select [jcr:path], [jcr:score], * [nt:folder] [content] = '/data' [jcr:primarytype] = 'nt:folder' /* xpath ... */ # union must used "contains contains" xpath2sql //*[((@jcr:primarytype = 'nt:unstructured') (jcr:contains(., 'hello') jcr:contains(., 'world')))] select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' contains(*, 'hello') union select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' contains(*, 'world') /* xpath ... */ xpath2sql //*[(((@jcr:primarytype = 'nt:unstructured') (jcr:contains(., 'hello') jcr:contains(., 'world'))) (@content = '/data' (@jcr:primarytype = 'nt:folder'))) ] select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' contains(*, 'hello') union select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' contains(*, 'world') union select [jcr:path], [jcr:score], * [nt:folder] [content] = '/data' [jcr:primarytype] = 'nt:folder' /* xpath ... */ # de-escape _x00.._ xpath2sql /jcr:root//_x002e_test/element(*,rep:user) [_x002e_tokens/@jcr:primarytype] select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [rep:user] b ischildnode(b, a) name(a) = '.test' isdescendantnode(a, '/') b.[.tokens/jcr:primarytype] null /* xpath ... */ # union in(..) xpath2sql //*[@x = 1 @x = 2] select [jcr:path], [jcr:score], * [nt:base] [x] in(1, 2) /* xpath ... */ xpath2sql //*[@x = 1 @x = 2 @x = 3] select [jcr:path], [jcr:score], * [nt:base] [x] in(1, 2, 3) /* xpath ... */ xpath2sql //*[@x = 1 @y = 2] select [jcr:path], [jcr:score], * [nt:base] [x] = 1 union select [jcr:path], [jcr:score], * [nt:base] [y] = 2 /* xpath ... */ xpath2sql //*[@x = 1 @x = 2 @y = 3] select [jcr:path], [jcr:score], * [nt:base] [x] in(1, 2) union select [jcr:path], [jcr:score], * [nt:base] [y] = 3 /* xpath ... */ # xpath name escaping xpath2sql //my_x0020_documents select [jcr:path], [jcr:score], * [nt:base] name(a) = 'my documents' /* xpath ... */ xpath2sql //*[fn:name() = 'my documents'] select [jcr:path], [jcr:score], * [nt:base] upper(name(a)) = 'never matches' /* xpath ... */ xpath2sql //*[fn:name() = 'my_x0020_documents'] select [jcr:path], [jcr:score], * [nt:base] name(a) = 'my documents' /* xpath ... */ xpath2sql //*[fn:name() <> 'my_x0020_documents'] select [jcr:path], [jcr:score], * [nt:base] name(a) <> 'my documents' /* xpath ... */ xpath2sql //*[fn:upper-case(fn:name()) > 'my_x0020_docs'] select [jcr:path], [jcr:score], * [nt:base] upper(name(a)) > 'my docs' /* xpath ... */ xpath2sql //*[fn:lower-case(fn:name()) < 'my_x0020_docs'] select [jcr:path], [jcr:score], * [nt:base] lower(name(a)) < 'my docs' /* xpath ... */ xpath2sql //*[fn:lower-case(fn:upper-case(fn:name())) >= 'my_x0020_docs'] select [jcr:path], [jcr:score], * [nt:base] lower(upper(name(a))) >= 'my docs' /* xpath ... */ xpath2sql //*[fn:upper-case(fn:lower-case(fn:name())) <= 'my_x0020_docs'] select [jcr:path], [jcr:score], * [nt:base] upper(lower(name(a))) <= 'my docs' /* xpath ... */ xpath2sql //*[jcr:like(fn:name(), '%my documents%')] select [jcr:path], [jcr:score], * [nt:base] name(a) like '%my documents%' /* xpath ... */ # jackrabbit test queries xpath2sql /*[jcr:contains(., 'hello')]/rep:excerpt(.) select [jcr:path], [jcr:score], [rep:excerpt] [nt:base] contains(*, 'hello') issamenode(a, '/') /* xpath ... */ xpath2sql testroot//child/..[@foo1] select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(a, b) name(a) = 'child' isdescendantnode(a, '/testroot') b.[foo1] null /* xpath ... */ xpath2sql //*[@jcr:uuid='1' @jcr:uuid='2']//*[@jcr:uuid]/(@jcr:uuid) select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.[jcr:uuid] [jcr:uuid] [nt:base] inner join [nt:base] b isdescendantnode(b, a) a.[jcr:uuid] in('1', '2') b.[jcr:uuid] null /* xpath ... */ xpath2sql testroot//child/.[@foo1] select [jcr:path], [jcr:score], * [nt:base] [foo1] null name(a) = 'child' isdescendantnode(a, '/testroot') /* xpath ... */ xpath2sql testroot//child[@foo1] select [jcr:path], [jcr:score], * [nt:base] [foo1] null name(a) = 'child' isdescendantnode(a, '/testroot') /* xpath ... */ xpath2sql test.root//ch.ild[@fo.o1] select [jcr:path], [jcr:score], * [nt:base] [fo.o1] null name(a) = 'ch.ild' isdescendantnode(a, '/test.root') /* xpath ... */ xpath2sql /jcr:root/testroot/node11 select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/testroot/node11') /* xpath ... */ xpath2sql /jcr:root/testroot/./node11 select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) ischildnode(a, '/testroot') name(b) = 'node11' /* xpath ... */ xpath2sql /jcr:root/testroot/././node11 select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) ischildnode(a, '/testroot') name(b) = 'node11' /* xpath ... */ xpath /jcr:root/testroot//*[0] java.text.parseexception: /jcr:root/testroot//*[0] converted sql-2 query: select [jcr:path], [jcr:score], * [nt:base] 0(*)is null isdescendantnode(a, '/testroot') /* xpath: /jcr:root/testroot//*[0] */; expected: not, ( xpath2sql /test select [jcr:path], [jcr:score], * [nt:base] name(a) = 'test' issamenode(a, '/') /* xpath ... */ xpath2sql / invalid: query: (*)/; expected: jcr:root, /, *, @, (, . xpath2sql /[@name='data'] invalid: query: /[(*)@name='data']; expected: jcr:root, /, *, @, (, . xpath2sql //[@name='data'] invalid: query: //[(*)@name='data']; expected: *, @, (, . xpath2sql //child/[@id='2.1'] invalid: query: //child/[(*)@id='2.1']; expected: jcr:root, /, *, @, (, . xpath2sql // invalid: query: /(*)/; expected: *, @, (, . xpath2sql [@name='data'] invalid: query: [(*)@name='data']; expected: /, *, @, (, . xpath2sql test select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/test') /* xpath ... */ xpath2sql jcr:root select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/jcr:root') /* xpath ... */ xpath2sql /jcr:root select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/') /* xpath ... */ xpath2sql //jcr:root select [jcr:path], [jcr:score], * [nt:base] name(a) = 'jcr:root' /* xpath ... */ xpath2sql * select [jcr:path], [jcr:score], * [nt:base] ischildnode(a, '/') /* xpath ... */ xpath2sql /* select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/') /* xpath ... */ xpath2sql //* select [jcr:path], [jcr:score], * [nt:base] /* xpath ... */ xpath2sql //element(hello, nt:base) select [jcr:path], [jcr:score], * [nt:base] name(a) = 'hello' /* xpath ... */ xpath2sql test/* select [jcr:path], [jcr:score], * [nt:base] ischildnode(a, '/test') /* xpath ... */ xpath2sql element(*, nt:folder) select [jcr:path], [jcr:score], * [nt:folder] ischildnode(a, '/') /* xpath ... */ xpath2sql //test select [jcr:path], [jcr:score], * [nt:base] name(a) = 'test' /* xpath ... */ xpath2sql /jcr:root[@foo = 'does-not-exist'] select [jcr:path], [jcr:score], * [nt:base] [foo] = 'does-not-exist' issamenode(a, '/') /* xpath ... */ xpath2sql select [jcr:path], [jcr:score], * [nt:base] name(a) = 'jcr:root' /* xpath ... */ xpath2sql /jcr:root/testroot/*/node11 select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) ischildnode(a, '/testroot') name(b) = 'node11' /* xpath ... */ # eq can't currently supported equivalent sql-2 # (the behavior different = one operands multi-valued property) xpath2sql //testroot/*[@jcr:primarytype='nt:unstructured' @text eq 'foo'] invalid: query: //testroot/*[@jcr:primarytype='nt:unstructured' @text eq(*)'foo']; expected: ] xpath2sql //testroot/*[@text = 'foo'] select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) name(a) = 'testroot' b.[text] = 'foo' /* xpath ... */ xpath2sql /testroot/*[@jcr:primarytype='nt:unstructured' fn:not(@mytext)] select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:unstructured] b ischildnode(b, a) name(a) = 'testroot' issamenode(a, '/') b.[jcr:primarytype] = 'nt:unstructured' b.[mytext] null /* xpath ... */ xpath2sql /jcr:root/testroot/*[jcr:contains(., '"quick brown" -cat')] select [jcr:path], [jcr:score], * [nt:base] contains(*, '"quick brown" -cat') ischildnode(a, '/testroot') /* xpath ... */ xpath2sql //element(*,rep:authorizable) [(((jcr:contains(profile/givenname,'**') jcr:contains(profile/familyname,'**')) jcr:contains(profile/email,'**')) (jcr:like(rep:principalname,'%%') jcr:like(fn:name(.),'%%')))] order rep:principalname ascending select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/givenname/*], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/familyname/*], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/email/*], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] [rep:principalname] like '%%' union select [jcr:path], [jcr:score], * [rep:authorizable] name(a) like '%%' order [rep:principalname] /* xpath ... */ xpath2sql //element(*,rep:authorizable) [(((jcr:contains(profile/givenname,'**') jcr:contains(profile/familyname,'**')) jcr:contains(profile/email,'**')) (jcr:like(@rep:principalname,'%%') jcr:like(fn:name(.),'%%')))] order @rep:principalname ascending select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/givenname/*], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/familyname/*], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/email/*], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] [rep:principalname] like '%%' union select [jcr:path], [jcr:score], * [rep:authorizable] name(a) like '%%' order [rep:principalname] /* xpath ... */ xpath2sql //*[@a=1 @b=1]/sub[@c=1] select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) b.[c] = 1 name(b) = 'sub' a.[a] = 1 union select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) b.[c] = 1 name(b) = 'sub' a.[b] = 1 /* xpath ... */ xpath2sql //*[@a=1 @b=1]/sub[@c=1 @d=1] select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) name(b) = 'sub' a.[a] = 1 b.[c] = 1 union select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) name(b) = 'sub' a.[a] = 1 b.[d] = 1 union select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) name(b) = 'sub' a.[b] = 1 b.[c] = 1 union select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(b, a) name(b) = 'sub' a.[b] = 1 b.[d] = 1 /* xpath ... */ xpath2sql //element(*,rep:authorizable) [(((jcr:contains(profile/@givenname,'**') jcr:contains(profile/@familyname,'**')) jcr:contains(profile/@email,'**')) (jcr:like(@rep:principalname,'%%') jcr:like(fn:name(.),'%%')))] order @rep:principalname ascending select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/givenname], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/familyname], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] contains([profile/email], '**') union select [jcr:path], [jcr:score], * [rep:authorizable] [rep:principalname] like '%%' union select [jcr:path], [jcr:score], * [rep:authorizable] name(a) like '%%' order [rep:principalname] /* xpath ... */ xpath2sql /jcr:root/testroot//*[jcr:contains(@jcr:data, 'lazy')] select [jcr:path], [jcr:score], * [nt:base] contains([jcr:data], 'lazy') isdescendantnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[jcr:contains(jcr:content, 'lazy')] select [jcr:path], [jcr:score], * [nt:base] contains([jcr:content/*], 'lazy') ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[jcr:contains(*, 'lazy')] select [jcr:path], [jcr:score], * [nt:base] contains([*/*], 'lazy') ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[jcr:contains(*/@jcr:data, 'lazy')] select [jcr:path], [jcr:score], * [nt:base] contains([*/jcr:data], 'lazy') ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[jcr:contains(*/@*, 'lazy')] select [jcr:path], [jcr:score], * [nt:base] contains([*/*], 'lazy') ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[@prop1 = 1 jcr:like(fn:name(), 'f%')] select [jcr:path], [jcr:score], * [nt:base] [prop1] = 1 name(a) like 'f%' ischildnode(a, '/testroot') /* xpath ... */ # todo support rep:similar()? how? xpath2sql /jcr:root/testroot/*[jcr:contains(., 'jackrabbit')]/(@my:title|@my:x) select [jcr:path], [jcr:score], [my:title], [my:x] [nt:base] contains(*, 'jackrabbit') ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[jcr:contains(., 'jackrabbit')]/@my:title select [jcr:path], [jcr:score], [my:title] [nt:base] contains(*, 'jackrabbit') ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[jcr:contains(., 'jackrabbit')]/rep:excerpt(.) select [jcr:path], [jcr:score], [rep:excerpt] [nt:base] contains(*, 'jackrabbit') ischildnode(a, '/testroot') /* xpath ... */ xpath2sql //testroot/*[@jcr:primarytype='nt:unstructured' fn:not(@mytext)] select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:unstructured] b ischildnode(b, a) name(a) = 'testroot' b.[jcr:primarytype] = 'nt:unstructured' b.[mytext] null /* xpath ... */ xpath2sql /jcr:root/testroot/people/jcr:deref(@worksfor, '*') invalid: query: /jcr:root/testroot/people/jcr:deref(@(*)worksfor, '*') xpath2sql //*[@jcr:primarytype='nt:unstructured' jcr:like(@foo,"%ar'ba%")] select [jcr:path], [jcr:score], * [nt:unstructured] [jcr:primarytype] = 'nt:unstructured' [foo] like '%ar''ba%' /* xpath ... */ xpath2sql /jcr:root/testroot/*[fn:lower-case(@prop1) = 'foo'] select [jcr:path], [jcr:score], * [nt:base] lower([prop1]) = 'foo' ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[fn:lower-case(@prop1) != 'foo'] select [jcr:path], [jcr:score], * [nt:base] lower([prop1]) <> 'foo' ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[fn:lower-case(@prop1) <= 'foo'] select [jcr:path], [jcr:score], * [nt:base] lower([prop1]) <= 'foo' ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[fn:lower-case(@prop1) >= 'foo'] select [jcr:path], [jcr:score], * [nt:base] lower([prop1]) >= 'foo' ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[fn:lower-case(@prop1) < 'foo'] select [jcr:path], [jcr:score], * [nt:base] lower([prop1]) < 'foo' ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[fn:lower-case(@prop1) > 'foo'] select [jcr:path], [jcr:score], * [nt:base] lower([prop1]) > 'foo' ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[fn:lower-case(@prop1) <> 'foo'] select [jcr:path], [jcr:score], * [nt:base] lower([prop1]) <> 'foo' ischildnode(a, '/testroot') /* xpath ... */ xpath2sql /jcr:root/testroot/*[@prop1 = 1 fn:name() = 'node1'] select [jcr:path], [jcr:score], * [nt:base] [prop1] = 1 name(a) = 'node1' ischildnode(a, '/testroot') /* xpath ... */ # sling queries xpath2sql //element(*,mix:language) [fn:lower-case(@jcr:language)='en'] //element(*,sling:message) [@sling:message]/(@sling:key|@sling:message) select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.[sling:key] [sling:key], b.[sling:message] [sling:message] [mix:language] inner join [sling:message] b isdescendantnode(b, a) lower(a.[jcr:language]) = 'en' b.[sling:message] null /* xpath ... */ xpath2sql //element(*,mix:language) [fn:upper-case(@jcr:language)='en'] //element(*,sling:message) [@sling:message]/(@sling:key|@sling:message) select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.[sling:key] [sling:key], b.[sling:message] [sling:message] [mix:language] inner join [sling:message] b isdescendantnode(b, a) upper(a.[jcr:language]) = 'en' b.[sling:message] null /* xpath ... */ # jboss example queries xpath2sql //element(*,my:type) select [jcr:path], [jcr:score], * [my:type] /* xpath ... */ xpath2sql //element(*,my:type)/rep:excerpt(.) select [jcr:path], [jcr:score], [rep:excerpt] [my:type] /* xpath ... */ xpath2sql //element(*,my:type)/@my:title select [jcr:path], [jcr:score], [my:title] [my:type] /* xpath ... */ xpath2sql //element(*,my:type)/(@my:title | @my:text) select [jcr:path], [jcr:score], [my:title], [my:text] [my:type] /* xpath ... */ # queries xpath2sql /jcr:root/testdata/node[@jcr:primarytype] select [jcr:path], [jcr:score], * [nt:base] [jcr:primarytype] null issamenode(a, '/testdata/node') /* xpath ... */ xpath2sql //testroot/*[@jcr:primarytype='nt:unstructured'] order @prop2, @prop1 select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:unstructured] b ischildnode(b, a) name(a) = 'testroot' b.[jcr:primarytype] = 'nt:unstructured' order b.[prop2], b.[prop1] /* xpath ... */ xpath2sql /jcr:root/test//jcr:xmltext select [jcr:path], [jcr:score], * [nt:base] name(a) = 'jcr:xmltext' isdescendantnode(a, '/test') /* xpath ... */ xpath2sql /jcr:root/test//text() select [jcr:path], [jcr:score], * [nt:base] name(a) = 'jcr:xmltext' isdescendantnode(a, '/test') /* xpath ... */ xpath2sql /jcr:root/test/jcr:xmltext select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/test/jcr:xmltext') /* xpath ... */ xpath2sql /jcr:root/test/text() select [jcr:path], [jcr:score], * [nt:base] issamenode(a, '/test/jcr:xmltext') /* xpath ... */ xpath2sql //*[@name='hello'] select [jcr:path], [jcr:score], * [nt:base] [name] = 'hello' /* xpath ... */ xpath2sql /jcr:root//*[@name='hello'] select [jcr:path], [jcr:score], * [nt:base] [name] = 'hello' isdescendantnode(a, '/') /* xpath ... */ xpath2sql content/* select [jcr:path], [jcr:score], * [nt:base] ischildnode(a, '/content') /* xpath ... */ xpath2sql content//* select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') /* xpath ... */ xpath2sql content//*[@name='hello'] select [jcr:path], [jcr:score], * [nt:base] [name] = 'hello' isdescendantnode(a, '/content') /* xpath ... */ xpath2sql /jcr:root/content//*[@name='hello'] select [jcr:path], [jcr:score], * [nt:base] [name] = 'hello' isdescendantnode(a, '/content') /* xpath ... */ xpath2sql //*[jcr:contains(., 'test')] order @jcr:score select [jcr:path], [jcr:score], * [nt:base] contains(*, 'test') order [jcr:score] /* xpath ... */ xpath2sql /jcr:root//*[jcr:contains(., 'test')] order @jcr:score select [jcr:path], [jcr:score], * [nt:base] contains(*, 'test') isdescendantnode(a, '/') order [jcr:score] /* xpath ... */ xpath2sql /jcr:root//element(*, test) select [jcr:path], [jcr:score], * [test] isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root//element(*, user)[test/@jcr:primarytype] select [jcr:path], [jcr:score], * [user] [test/jcr:primarytype] null isdescendantnode(a, '/') /* xpath ... */ xpath2sql /jcr:root/content//*[(@sling:resourcetype = 'start')] select [jcr:path], [jcr:score], * [nt:base] [sling:resourcetype] = 'start' isdescendantnode(a, '/content') /* xpath ... */ xpath2sql /jcr:root/content//*[(@sling:resourcetype = 'page')] select [jcr:path], [jcr:score], * [nt:base] [sling:resourcetype] = 'page' isdescendantnode(a, '/content') /* xpath ... */ xpath2sql /jcr:root/content//* [@offtime > xs:datetime('2012-03-28t15:56:18.327+02:00') @ontime > xs:datetime('2012-03-28t15:56:18.327+02:00')] select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [offtime] > cast('2012-03-28t15:56:18.327+02:00' date) union select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/content') [ontime] > cast('2012-03-28t15:56:18.327+02:00' date) /* xpath ... */ xpath2sql /jcr:root/content/campaigns//*[@jcr:primarytype='page'] order jcr:content/@lastmodified descending select [jcr:path], [jcr:score], * [page] [jcr:primarytype] = 'page' isdescendantnode(a, '/content/campaigns') order [jcr:content/lastmodified] desc /* xpath ... */ xpath2sql /jcr:root/content/campaigns//element(*, pagecontent) [((@sling:resourcetype = 'teaser' @sling:resourcetype = 'newsletter') (@teaserpagetype = 'newsletter' @teaserpagetype = 'tweet')) ((@ontime < xs:datetime('2012-04-01t00:00:00.000+02:00')) not(@ontime)) ((@offtime >= xs:datetime('2012-02-26t00:00:00.000+01:00')) not(@offtime))] order @ontime select [jcr:path], [jcr:score], * [pagecontent] isdescendantnode(a, '/content/campaigns') [sling:resourcetype] in('teaser', 'newsletter') [ontime] < cast('2012-04-01t00:00:00.000+02:00' date) [offtime] >= cast('2012-02-26t00:00:00.000+01:00' date) union select [jcr:path], [jcr:score], * [pagecontent] isdescendantnode(a, '/content/campaigns') [sling:resourcetype] in('teaser', 'newsletter') [ontime] < cast('2012-04-01t00:00:00.000+02:00' date) [offtime] null union select [jcr:path], [jcr:score], * [pagecontent] isdescendantnode(a, '/content/campaigns') [sling:resourcetype] in('teaser', 'newsletter') [ontime] null [offtime] >= cast('2012-02-26t00:00:00.000+01:00' date) union select [jcr:path], [jcr:score], * [pagecontent] isdescendantnode(a, '/content/campaigns') [sling:resourcetype] in('teaser', 'newsletter') [ontime] null [offtime] null union select [jcr:path], [jcr:score], * [pagecontent] isdescendantnode(a, '/content/campaigns') [teaserpagetype] in('newsletter', 'tweet') [ontime] < cast('2012-04-01t00:00:00.000+02:00' date) [offtime] >= cast('2012-02-26t00:00:00.000+01:00' date) union select [jcr:path], [jcr:score], * [pagecontent] isdescendantnode(a, '/content/campaigns') [teaserpagetype] in('newsletter', 'tweet') [ontime] < cast('2012-04-01t00:00:00.000+02:00' date) [offtime] null union select [jcr:path], [jcr:score], * [pagecontent] isdescendantnode(a, '/content/campaigns') [teaserpagetype] in('newsletter', 'tweet') [ontime] null [offtime] >= cast('2012-02-26t00:00:00.000+01:00' date) union select [jcr:path], [jcr:score], * [pagecontent] isdescendantnode(a, '/content/campaigns') [teaserpagetype] in('newsletter', 'tweet') [ontime] null [offtime] null order [ontime] /* xpath ... */ xpath2sql /jcr:root/content/dam//element(*, asset) select [jcr:path], [jcr:score], * [asset] isdescendantnode(a, '/content/dam') /* xpath ... */ xpath2sql /jcr:root/content/dam//element(*, asset) [jcr:content/metadata/@dam:scene] select [jcr:path], [jcr:score], * [asset] [jcr:content/metadata/dam:scene] null isdescendantnode(a, '/content/dam') /* xpath ... */ xpath2sql /jcr:root/etc/cloud//*[(@sling:resourcetype = 'framework')] select [jcr:path], [jcr:score], * [nt:base] [sling:resourcetype] = 'framework' isdescendantnode(a, '/etc/cloud') /* xpath ... */ xpath2sql /jcr:root/etc/cloud//*[(@sling:resourcetype = 'analytics')] select [jcr:path], [jcr:score], * [nt:base] [sling:resourcetype] = 'analytics' isdescendantnode(a, '/etc/cloud') /* xpath ... */ xpath2sql /jcr:root/etc/reports//*[@jcr:primarytype='page'] order jcr:content/@lastmodified descending select [jcr:path], [jcr:score], * [page] [jcr:primarytype] = 'page' isdescendantnode(a, '/etc/reports') order [jcr:content/lastmodified] desc /* xpath ... */ xpath2sql /jcr:root/etc/segment//*[@jcr:primarytype='page'] order jcr:content/@lastmodified descending select [jcr:path], [jcr:score], * [page] [jcr:primarytype] = 'page' isdescendantnode(a, '/etc/segment') order [jcr:content/lastmodified] desc /* xpath ... */ xpath2sql /jcr:root/etc/workflow//element(*,item) [not(meta/@archived) not(meta/@archived = true())] select [jcr:path], [jcr:score], * [item] [meta/archived] null not([meta/archived] = true) isdescendantnode(a, '/etc/workflow') /* xpath ... */ xpath2sql /jcr:root/etc/workflow//element(*,item) [not(meta/@archived) not(meta/@archived = false())] select [jcr:path], [jcr:score], * [item] [meta/archived] null not([meta/archived] = false) isdescendantnode(a, '/etc/workflow') /* xpath ... */ xpath2sql /jcr:root/etc/workflow//element(*,item) [not(meta/@archived) not(meta/@archived = true)] select [jcr:path], [jcr:score], * [item] [meta/archived] null not([meta/archived] = true) isdescendantnode(a, '/etc/workflow') /* xpath ... */ xpath2sql /jcr:root/home//element() select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/home') /* xpath ... */ xpath2sql /jcr:root/home//element(*) select [jcr:path], [jcr:score], * [nt:base] isdescendantnode(a, '/home') /* xpath ... */ # queries xpath2sql //element(*, my:type) select [jcr:path], [jcr:score], * [my:type] /* xpath ... */ xpath2sql //element(*, my:type)/@my:title select [jcr:path], [jcr:score], [my:title] [my:type] /* xpath ... */ xpath2sql //element(*, my:type)/(@my:title | @my:text) select [jcr:path], [jcr:score], [my:title], [my:text] [my:type] /* xpath ... */ xpath2sql /jcr:root/nodes//element(*, my:type) select [jcr:path], [jcr:score], * [my:type] isdescendantnode(a, '/nodes') /* xpath ... */ xpath2sql /jcr:root/some/element(nodes, my:type) select [jcr:path], [jcr:score], * [my:type] issamenode(a, '/some/nodes') /* xpath ... */ xpath2sql /jcr:root/some/nodes/element(*, my:type) select [jcr:path], [jcr:score], * [my:type] ischildnode(a, '/some/nodes') /* xpath ... */ xpath2sql /jcr:root/some/nodes//element(*, my:type) select [jcr:path], [jcr:score], * [my:type] isdescendantnode(a, '/some/nodes') /* xpath ... */ xpath2sql //element(*, my:type)[@my:title = 'jsr 170'] select [jcr:path], [jcr:score], * [my:type] [my:title] = 'jsr 170' /* xpath ... */ xpath2sql //element(*, my:type)[jcr:like(@title,'%java%')] select [jcr:path], [jcr:score], * [my:type] [title] like '%java%' /* xpath ... */ xpath2sql //element(*, my:type)[jcr:contains(., 'jsr 170')] select [jcr:path], [jcr:score], * [my:type] contains(*, 'jsr 170') /* xpath ... */ xpath2sql //element(*, my:type)[@my:title] select [jcr:path], [jcr:score], * [my:type] [my:title] null /* xpath ... */ xpath2sql //element(*, my:type)[not(@my:title)] select [jcr:path], [jcr:score], * [my:type] [my:title] null /* xpath ... */ xpath2sql //element(*, my:type)[@my:value < -1.0] select [jcr:path], [jcr:score], * [my:type] [my:value] < -1.0 /* xpath ... */ xpath2sql //element(*, my:type)[@my:value > +10123123123] select [jcr:path], [jcr:score], * [my:type] [my:value] > 10123123123 /* xpath ... */ xpath2sql //element(*, my:type)[@my:value <= 10.3e-3] select [jcr:path], [jcr:score], * [my:type] [my:value] <= 10.3e-3 /* xpath ... */ xpath2sql //element(*, my:type)[@my:value >= 0e3] select [jcr:path], [jcr:score], * [my:type] [my:value] >= 0e3 /* xpath ... */ xpath2sql //element(*, my:type)[@my:value <> 'joe''s caffee'] select [jcr:path], [jcr:score], * [my:type] [my:value] <> 'joe''s caffee' /* xpath ... */ xpath2sql //element(*, my:type)[(not(@my:title) @my:subject)] select [jcr:path], [jcr:score], * [my:type] [my:title] null [my:subject] null /* xpath ... */ xpath2sql //element(*, my:type)[not(@my:title) @my:subject] select [jcr:path], [jcr:score], * [my:type] [my:title] null union select [jcr:path], [jcr:score], * [my:type] [my:subject] null /* xpath ... */ xpath2sql //element(*, my:type) [not(@my:value > 0 @my:value < 100)] select [jcr:path], [jcr:score], * [my:type] not([my:value] > 0 [my:value] < 100) /* xpath ... */ xpath2sql //element(*, my:type) order @jcr:lastmodified select [jcr:path], [jcr:score], * [my:type] order [jcr:lastmodified] /* xpath ... */ xpath2sql //element(*, my:type) order @my:date descending, @my:title ascending select [jcr:path], [jcr:score], * [my:type] order [my:date] desc, [my:title] /* xpath ... */ xpath2sql //element(*, my:type)[jcr:contains(., 'jcr')] order jcr:score() descending select [jcr:path], [jcr:score], * [my:type] contains(*, 'jcr') order score(a) desc /* xpath ... */ xpath2sql //element(*, my:type)[jcr:contains(@my:title, 'jcr')] order jcr:score() descending select [jcr:path], [jcr:score], * [my:type] contains([my:title], 'jcr') order score(a) desc /* xpath ... */ xpath2sql [invalid/query invalid: query: [(*)invalid/query; expected: /, *, @, (, . xpath2sql //element(*, my:type)[@my:value = -'x'] invalid: query: //element(*, my:type)[@my:value = -'x'(*)] xpath2sql //element(-1, my:type) invalid: query: //element(-(*)1, my:type); expected: identifier xpath2sql //element(*, my:type)[not @my:title] invalid: query: //element(*, my:type)[not @(*)my:title]; expected: ( xpath2sql //element(*, my:type)[@my:value = +'x'] invalid: query: //element(*, my:type)[@my:value = +'x'(*)] xpath2sql //element(*, my:type)[@my:value = ['x'] invalid: query: //element(*, my:type)[@my:value = [(*)'x']; expected: @, true, false, $, -, +, *, ., @, ( xpath2sql //element(*, my:type)[jcr:strike(@title,'%java%')] invalid: query: //element(*, my:type)[jcr:strike(@(*)title,'%java%')]; expected: jcr:like | jcr:contains | jcr:score | xs:datetime | fn:lower-case | fn:upper-case | jcr:first | fn:name | fn:local-name | fn:path | rep:similar | rep:spellcheck | rep:suggest xpath2sql //element(*, my:type)[ invalid: query: //element(*, my:type)(*)[; expected: fn:not, not, (, @, true, false, $, -, +, *, ., @, ( xpath2sql //element(*, my:type)[@my:value >= %] invalid: query: //element(*, my:type)[@my:value >= %(*)]; expected: @, true, false, $, -, +, *, ., @, ( # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/sql2_explain.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters # todo current used, property prefix indexes longer supported # property type (value prefix) index commit / + "test": { "a": { "id": "ref:123" }, "b": { "id" : "str:123" }} explain select * [nt:base] property([*], 'reference') = cast('123' reference) [nt:base] [nt:base] /* traverse "*" property([nt:base].[*], 'reference') = cast('123' reference) */ explain select * [nt:base] property(id, 'reference') = cast('123' reference) [nt:base] [nt:base] /* traverse "*" property([nt:base].[id], 'reference') = cast('123' reference) */ explain select b.[jcr:path] [jcr:path], b.[jcr:score] [jcr:score], b.* [nt:base] inner join [nt:base] b ischildnode(a, b) name(a) = 'yes' isdescendantnode(a, '/test') b.[x] null [nt:base] [a] /* traverse "/test//*" (name([a]) = cast('yes' string)) (isdescendantnode([a], [/test])) */ inner join [nt:base] [b] /* traverse "/path/from/the/join" [b].[x] null */ ischildnode([a], [b]) select [jcr:path] [nt:base] property([*], 'reference') = cast('123' reference) /test/a commit /oak:index + "indexes": { "type": "property" } commit /oak:index/indexes + "prefix@ref:": {} explain select * [nt:base] property([*], 'reference') = cast('123' reference) [nt:base] [nt:base] /* prefixindex "ref:123" property([nt:base].[*], 'reference') = cast('123' reference) */ explain select * [nt:base] property(id, 'reference') = cast('123' reference) [nt:base] [nt:base] /* prefixindex "ref:123" property([nt:base].[id], 'reference') = cast('123' reference) */ select [jcr:path] [nt:base] property([*], 'reference') = cast('123' reference) /test/a select [jcr:path] [nt:base] property(id, 'reference') = cast('123' reference) /test/a commit / - "test" commit /oak:index/indexes - "prefix@ref:" # test property content index commit / + "test": { "a": { "id": "10" }, "b": { "id" : "20" }} commit /oak:index/indexes + "property@id,unique": {} # combining 'not' 'and' select [jcr:path] [nt:base] id null id = '100' id <> '20' /test/a select [jcr:path] [nt:base] id null (id = '100' id <> '20') /test/a /test/b explain select * [nt:base] id = '10' [nt:base] [nt:base] /* propertyindex "id [10..10]" [nt:base].[id] = cast('10' string) */ select [jcr:path] [nt:base] id = '10' /test/a select [jcr:path] [nt:base] id = '10' /test/a explain select * [nt:base] id > '10' [nt:base] [nt:base] /* traverse "*" [nt:base].[id] > cast('10' string) */ commit / - "test" commit /oak:index/indexes - "property@id,unique" # tests commit / + "test": { "jcr:resource": {}, "resource": { "x" : {}}} explain select * [nt:base] b ischildnode(b, '/test') [nt:base] [b] /* traverse "/test/*" ischildnode([b], [/test]) */ explain select * [nt:base] b isdescendantnode(b, '/test') [nt:base] [b] /* traverse "/test//*" isdescendantnode([b], [/test]) */ commit / - "test" commit / + "parents": { "p0": {"id": "0"}, "p1": {"id": "1"}, "p2": {"id": "2"}} commit / + "children": { "c1": {"p": "1"}, "c2": {"p": "1"}, "c3": {"p": "2"}, "c4": {"p": "3"}} explain select * [nt:base] p inner join [nt:base] c p.id = c.p [nt:base] [p] /* traverse "*" [p].[id] null */ inner join [nt:base] [c] /* traverse "*" [c].[p] null */ [p].[id] = [c].[p] explain select * [nt:base] p inner join [nt:base] p2 issamenode(p2, p) p.[jcr:path] = '/parents' [nt:base] [p] /* traverse "*" [p].[jcr:path] = cast('/parents' string) */ inner join [nt:base] [p2] /* traverse "/path/from/the/join/selector" */ issamenode([p2], [p], [.]) explain select * [nt:base] p inner join [nt:base] c p.id = c.p [nt:base] [p] /* traverse "*" [p].[id] null */ inner join [nt:base] [c] /* traverse "*" [c].[p] null */ [p].[id] = [c].[p] explain select * [nt:base] id = 1 order id [nt:base] [nt:base] /* traverse "*" [nt:base].[id] = cast('1' long) */ commit / - "parents" commit / - "children" # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/sql2_measure.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters # oak-5949 explain [select] * [nt:base] java.text.parseexception: query: explain [select](*)* [nt:base]; expected: select commit / + "testroot": { } commit /testroot + "parents": { "p0": {"id": "0"}, "p1": {"id": "1"}, "p2": {"id": "2"}} commit /testroot + "children": { "c1": {"p": "1"}, "c2": {"p": "1"}, "c3": {"p": "2"}, "c4": {"p": "3"}} select p.[jcr:path], c.[jcr:path] [nt:base] p inner join [nt:base] c p.id = c.p isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') /testroot/parents/p1, /testroot/children/c1 /testroot/parents/p1, /testroot/children/c2 /testroot/parents/p2, /testroot/children/c3 select [jcr:path] [nt:base] p p.[testroot/children/*/*] = '3' / select [jcr:path], p.[children/c1/*] [nt:base] p p.[children/c1/*] null /testroot, 1 select [jcr:path], [jcr:score], * [nt:base] ([id] = '0' [p0/id] = '0') /testroot/parents, null, null /testroot/parents/p0, null, null select [jcr:path], [jcr:score], * [nt:base] ([id] = '0' [*/id] = '0') /testroot/parents, null, null /testroot/parents/p0, null, null select c.[jcr:path], p.[jcr:path] [nt:base] c right outer join [nt:base] p p.id = c.p p.id null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') /testroot/children/c1, /testroot/parents/p1 /testroot/children/c2, /testroot/parents/p1 /testroot/children/c3, /testroot/parents/p2 measure select * [nt:base] c right outer join [nt:base] p p.id = c.p p.id null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 3 select p.[jcr:path], c.[jcr:path] [nt:base] p left outer join [nt:base] c p.id = c.p p.id null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') /testroot/parents/p1, /testroot/children/c1 /testroot/parents/p1, /testroot/children/c2 /testroot/parents/p2, /testroot/children/c3 measure select * [nt:base] p left outer join [nt:base] c p.id = c.p p.id null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 3 measure select * [nt:base] p left outer join [nt:base] c p.id = c.p p.id null c.p null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 0 measure select * [nt:base] p left outer join [nt:base] c p.id = c.p p.id null c.p null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 3 measure select * [nt:base] p inner join [nt:base] c p.id = c.p isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 3 measure select * [nt:base] c right outer join [nt:base] p p.id = c.p p.id null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 3 measure select * [nt:base] p left outer join [nt:base] c p.id = c.p p.id null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 3 measure select * [nt:base] p left outer join [nt:base] c p.id = c.p p.id null c.p null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 0 measure select * [nt:base] p left outer join [nt:base] c p.id = c.p p.id null c.p null isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 3 measure select * [nt:base] p inner join [nt:base] c p.id = c.p isdescendantnode(p, '/testroot') isdescendantnode(c, '/testroot') c, 30 p, 10 query, 3 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/sql2_native.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters commit / + "test": { "a": { "name": "hello" }, "b": { "name" : "world" }} select [jcr:path] [nt:base] native('solr', 'name:(hello world)') select [jcr:path] [nt:base] native(a, 'solr', 'path_child:\/test _val_:"recip(rord(name),1,2,3)"') select [jcr:path] [nt:base] native('solr', 'path_child:\/test _val_:"recip(rord(name),1,2,3)"') xpath2sql //*[rep:native('solr', 'xyz')] select [jcr:path], [jcr:score], * [nt:base] native(a, 'solr', 'xyz') /* xpath ... */ # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/sql1.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters # sql-1 query (nt:unstructured needs escaped sql-2) sql1 select [rep:spellcheck()] nt:base [jcr:path] = '/' spellcheck('jackrabit') sql1 select rep:spellcheck() nt:base jcr:path = '/' spellcheck('jackrabit') sql1 select prop1 nt:unstructured prop1 null order prop1 asc sql1 select excerpt(.) nt:resource contains(., 'jackrabbit') sql1 select * nt:base jcr:path like '/testroot/%' birth > timestamp '1976-01-01t00:00:00.000+01:00' sql1 select * nt:base jcr:path like '/testroot/%' value like 'foo\_bar' escape '\' sql1 select * nt:unstructured "jcr:path" = '/testroot/foo' contains(., 'fox') sql1 select * nt:unstructured "jcr:path" like '/testroot/%' contains(., 'fox test') # supported currently # sql1 select [jcr:path], [jcr:score], * [nt:base] # (0 null) isdescendantnode('/testroot') # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/sql2.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters # union, distinct commit / + "test": { "a": { "name": "hello" }, "b": { "name" : "world" }} # oak-4658 select a.[jcr:path] [nt:base] left outer join [nt:base] b ischildnode(b, a) name(b) = 'b' /test # oak-4658 select a.[jcr:path] [nt:base] left outer join [nt:base] b ischildnode(b, a) localname(b) = 'b' /test select * [nt:base] [a] = 1 [b] = 2 [b] = 3 [c] = 4 select [jcr:path] [nt:base] [a/name] = 'hello' [b/name] = 'world' /test select distinct [jcr:path] [nt:base] [a/name] = 'hello' [b/name] = 'world' /test select [jcr:path] [nt:base] [name] = 'hello' union select [jcr:path] [nt:base] [name] = 'world' /test/a /test/b select [jcr:path] [nt:base] a.[name] null isdescendantnode(a, '/test') union select b.[jcr:path] [nt:base] b b.[name] null isdescendantnode(b, '/test') /test/a /test/b select [jcr:path] [nt:base] a.[name] null isdescendantnode(a, '/test') union select b.[jcr:path] [nt:base] b b.[name] null isdescendantnode(b, '/test') /test/a /test/a /test/b /test/b commit / - "test" # test parent join commit / + "test": { "a": { "x": "1", "yes": { } }, "b": { "yes" : { } }, "c": { "x": "1", "no" : { } }} xpath test//yes/..[@x] /test/a select b.[jcr:path] [jcr:path] [nt:base] inner join [nt:base] b ischildnode(a, b) name(a) = 'yes' isdescendantnode(a, '/test') b.[x] null /test/a commit / - "test" # test spaces identifiers commit / + "test": { "space space": { "x": "1" }} select [jcr:path] [nt:base] issamenode([/test/space space]) /test/space space commit / - "test" # test multi-valued properties commit / + "test": { "a": { "name": ["hello", "world" ] }, "b": { "name" : "hello" }} select [jcr:path] [nt:base] name = 'hello' /test/a /test/b select [jcr:path] [nt:base] name = 'world' /test/a select [jcr:path] [nt:base] isdescendantnode('/test') name = 'world' /test/a commit / - "test" # expected error two selectors name select [jcr:path] [nt:base] p inner join [nt:base] p ischildnode(p, p) p.[jcr:path] = '/' java.text.parseexception: select [jcr:path] [nt:base] p inner join [nt:base] p ischildnode(p, p) p.[jcr:path] = '/': two selectors name: p # combining 'not' 'and' commit / + "test": { "a": { "id": "10" }, "b": { "id" : "20" }} select [jcr:path] [nt:base] id null id = '100' id <> '20' /test/a select [jcr:path] [nt:base] id < '1000' /test/a select [jcr:path] [nt:base] id null (id = '100' id <> '20') /test/a /test/b select [jcr:path] [nt:base] id = '10' /test/a select [jcr:path], id [nt:base] id = '10' /test/a, 10 select [jcr:path] [nt:base] id > '10' /test/b commit / - "test" # tests select [jcr:path] [nt:base] issamenode(a, '/') / commit / + "test": { "my documents": { "x" : {}}} select [jcr:path] [nt:base] name() = 'my_x0020_documents' select [jcr:path] [nt:base] name() like '%my documents%' /test/my documents select [jcr:path] [nt:base] name() = 'my documents' /test/my documents commit / - "test" commit / + "test": { "jcr:resource": {}, "resource": { "x" : {}}} select [jcr:path] [nt:base] id = -1 select [jcr:path] [nt:base] b isdescendantnode(b, '/test') /test/jcr:resource /test/resource /test/resource/x select [jcr:path] [nt:base] b ischildnode(b, '/test') /test/jcr:resource /test/resource select [jcr:path] [nt:base] b issamenode(b, '/test') /test select [jcr:path] [nt:base] name() = 'resource' /test/resource select [jcr:path] [nt:base] b localname(b) = 'resource' /jcr:system/jcr:nodetypes/nt:resource /test/jcr:resource /test/resource select [jcr:path] [nt:base] x isdescendantnode(x, '/test') /test/jcr:resource /test/resource /test/resource/x commit / - "test" commit / + "parents": { "p0": {"id": "0"}, "p1": {"id": "1"}, "p2": {"id": "2"}} commit / + "children": { "c1": {"p": "1"}, "c2": {"p": "1"}, "c3": {"p": "2"}, "c4": {"p": "3"}} # relative property select [jcr:path] [nt:base] [c1/p] = '1' /children select [jcr:path] [nt:base] p p.[jcr:path] = '/parents' /parents select [jcr:path] [nt:base] [p] [p].[jcr:path] = '/parents' /parents select p.[jcr:path], p2.[jcr:path] [nt:base] p inner join [nt:base] p2 ischildnode(p2, p) p.[jcr:path] = '/' /, /children /, /jcr:system /, /oak:index /, /parents select p.[jcr:path], p2.[jcr:path] [nt:base] p inner join [nt:base] p2 isdescendantnode(p2, p) p.[jcr:path] = '/parents' /parents, /parents/p0 /parents, /parents/p1 /parents, /parents/p2 select p.[jcr:path], p2.[jcr:path] [nt:base] p inner join [nt:base] p2 issamenode(p2, p) p.[jcr:path] = '/parents' /parents, /parents select id [nt:base] id null 0 1 2 select id [nt:base] id null order id desc 2 1 0 select c.[jcr:path], p.[jcr:path] [nt:base] c right outer join [nt:base] p p.id = c.p p.id null isdescendantnode(p, '/jcr:system') /children/c1, /parents/p1 /children/c2, /parents/p1 /children/c3, /parents/p2 null, /parents/p0 select p.[jcr:path], c.[jcr:path] [nt:base] p left outer join [nt:base] c p.id = c.p p.id null /parents/p0, null /parents/p1, /children/c1 /parents/p1, /children/c2 /parents/p2, /children/c3 select p.[jcr:path], c.[jcr:path] [nt:base] p left outer join [nt:base] c p.id = c.p p.id null c.p null /parents/p0, null select p.[jcr:path], c.[jcr:path] [nt:base] p left outer join [nt:base] c p.id = c.p p.id null c.p null /parents/p1, /children/c1 /parents/p1, /children/c2 /parents/p2, /children/c3 select p.[jcr:path], c.[jcr:path] [nt:base] p inner join [nt:base] c p.id = c.p /parents/p1, /children/c1 /parents/p1, /children/c2 /parents/p2, /children/c3 commit / - "parents" commit / - "children" commit / + "testroot": {} commit /testroot + "test": { "hello": { "x": "1" }, "world": { "x": "2" } } commit /testroot + "test2": { "id":"1", "x": "2" } select [jcr:path] [nt:base] isdescendantnode('/testroot') /testroot/test /testroot/test/hello /testroot/test/world /testroot/test2 select [jcr:path] [nt:base] id = '1' /testroot/test2 select [jcr:path] [nt:base] id = '1' x = '2' /testroot/test2 select [jcr:path] [nt:base] id = '1' x = '2' /testroot/test/world /testroot/test2 select [jcr:path] [nt:base] (id = '1' x = '2') isdescendantnode('/testroot') /testroot/test /testroot/test/hello select [jcr:path] [nt:base] x null isdescendantnode('/testroot') /testroot/test commit /testroot - "test" commit /testroot - "test2" commit /testroot + "test": { "name": "hello" } commit /testroot + "test2": { "name": "world!" } commit /testroot + "test3": { "name": "hallo" } commit /testroot + "test4": { "name": "10%" } commit /testroot + "test5": { "name": "10 percent" } commit /testroot + "test6": { "name": "brave" } select a.name [nt:base] a.name null isdescendantnode(a , '/testroot') order upper(a.name) 10 percent 10% brave hallo hello world! select [jcr:path] [nt:base] length(name) = 10 /testroot/test5 select [jcr:path] [nt:base] upper(name) = 'hello' /testroot/test select [jcr:path] [nt:base] lower(name) = 'world!' /testroot/test2 select [jcr:path] [nt:base] name like 'w%' /testroot/test2 select [jcr:path] [nt:base] name like '%e_%' /testroot/test /testroot/test5 select [jcr:path] [nt:base] name like '__llo' /testroot/test /testroot/test3 select [jcr:path] [nt:base] upper(name) like 'h_llo' /testroot/test /testroot/test3 select [jcr:path] [nt:base] upper(name) like 'h\_llo' select [jcr:path] [nt:base] upper(name) like '10%' /testroot/test4 /testroot/test5 select [jcr:path] [nt:base] upper(name) = '10%' /testroot/test4 select [jcr:path] [nt:base] upper(name) like '10\%' /testroot/test4 # errors select [jcr:path] [nt:base] name =+ 'hello' java.text.parseexception: query: select [jcr:path] [nt:base] name =+ 'hello(*)'; expected: illegal operation: + hello select [jcr:path] [nt:base] name => 'hello' java.text.parseexception: query: select [jcr:path] [nt:base] name =>(*)'hello'; expected: (, ., =, <>, <, >, <=, >=, like, in, is, # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/sql2-fulltext.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters # fulltext search commit / + "test": { "name": "hello world" } select [jcr:path] [nt:base] contains(name, 'hello') /test select [jcr:path] [nt:base] contains(*, 'hello') /test commit / - "test" # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-core/src/test/resources/org/apache/jackrabbit/oak/query/explain_result.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii characters commit / + "test": { "a": { "name": "hello" }, "b": { "name" : "world" }} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-pojosr/readme.md # --- oak pojosr ========== module demonstrates running oak outside osgi environments using built osgi support configuring oak. makes use [pojosr][1] provide osgi framework support. would enable usage oak pojo env would still enable usage osgi features customize oak components. make use following dependencies required 1. pojosr - provides osgi framework support 2. apache felix scr 3. apache felix config admin 4. apache felix fileinstall - provision configuration usage ----- jcr 2.0 specification defines pattern uses java se service loader facility find `javax.jcr.repositoryfactory` instances use get repository instance. import org.apache.jackrabbit.commons.jcrutils; map<string,string> config = new hashmap<string, string>(); config.put("org.apache.jackrabbit.repository.home", "/path/to/repo"); config.put("org.apache.jackrabbit.oak.repository.configfile", "/path/to/oak-config.json"); repository repository = jcrutils.getrepository(config); configfile json file capturing required osgi configuration { "org.apache.felix.jaas.configuration.factory-guestloginmodule": { "jaas.controlflag": "optional", "jaas.classname": "org.apache.jackrabbit.oak.spi.security.authentication.guestloginmodule", "jaas.ranking": 300 }, "org.apache.felix.jaas.configuration.factory-loginmoduleimpl": { "jaas.controlflag": "required", "jaas.classname": "org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl", "jaas.ranking": 100 }, "org.apache.felix.jaas.configuration.factory-tokenloginmodule": { "jaas.controlflag": "sufficient", "jaas.classname": "org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule", "jaas.ranking": 200 }, "org.apache.felix.jaas.configurationspi": { "jaas.defaultrealmname": "jackrabbit.oak", "jaas.globalconfigpolicy": "proxy", "jaas.configprovidername": "felixjaasprovider" }, "org.apache.jackrabbit.oak.jcr.osgi.repositorymanager": {}, "org.apache.jackrabbit.oak.segment.segmentnodestoreservice" : {} } [1]: https://code.google.com/p/pojosr/ license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-pojosr/src/test/resources/oak-tar-config.json # --- { "org.apache.jackrabbit.oak.segment.segmentnodestoreservice" : {} } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-pojosr/src/test/resources/oak-base-config.json # --- { "org.apache.felix.jaas.configuration.factory-guestloginmodule": { "jaas.controlflag": "optional", "jaas.classname": "org.apache.jackrabbit.oak.spi.security.authentication.guestloginmodule", "jaas.ranking": 300 }, "org.apache.felix.jaas.configuration.factory-loginmoduleimpl": { "jaas.controlflag": "required", "jaas.classname": "org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl", "jaas.ranking": 100 }, "org.apache.felix.jaas.configuration.factory-tokenloginmodule": { "jaas.controlflag": "sufficient", "jaas.classname": "org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule", "jaas.ranking": 200 }, "org.apache.felix.jaas.configurationspi": { "jaas.defaultrealmname": "jackrabbit.oak", "jaas.globalconfigpolicy": "proxy", "jaas.configprovidername": "felixjaasprovider" }, "org.apache.jackrabbit.oak.jcr.osgi.repositorymanager": {}, "org.apache.jackrabbit.oak.security.authorization.authorizationconfigurationimpl": { "importbehavior": "besteffort" }, "org.apache.jackrabbit.oak.security.user.userconfigurationimpl": { "groupspath": "/home/groups", "userspath": "/home/users", "defaultdepth": "1", "importbehavior": "besteffort" }, "org.apache.jackrabbit.oak.spi.security.user.action.defaultauthorizableactionprovider": { "enabledactions": ["org.apache.jackrabbit.oak.spi.security.user.action.accesscontrolaction"], "userprivilegenames": ["jcr:all"], "groupprivilegenames": ["jcr:read"] } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-examples/standalone/readme.md # --- <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> jackrabbit oak - standalone application example =============================================== example demonstrates embed oak standalone application getting started --------------- get started build build latest sources maven 3 java 6 (or higher). $ cd oak-examples/standalone $ mvn clean install done run application executing $ java -jar target/oak-standalone-*-exec.jar would start oak based repository uses filesystem storage. content would default stored `oak` folder. server would listen port 8080 support remote access via davex (at `/server`) webdav (at `/repository/default`). lets write something repository $ curl --request mkcol --data @- --user admin:admin \ http://localhost:8080/server/default/jcr:root/hello/ <<end <sv:node sv:name="hello" xmlns:sv="http://www.jcp.org/jcr/sv/1.0"> <sv:property sv:name="message" sv:type="string"> <sv:value>hello, world!</sv:value> </sv:property> <sv:property sv:name="date" sv:type="date"> <sv:value>2009-11-17t12:00:00.000z</sv:value> </sv:property> </sv:node> end would create node `hello` root. $ curl --user admin:admin http://localhost:8080/server/default/jcr:root/hello.json return json rendition node. application also web interfaces linked http://localhost:8080/ ### scripting repository application also [script console][1] http://localhost:8080/osgi/system/console/sc used execute scripts like ```java import javax.jcr.repository import javax.jcr.session import javax.jcr.simplecredentials import javax.jcr.query.queryresult import javax.jcr.query.row def querystr = '''select [jcr:path], [jcr:score], * [oak:queryindexdefinition] ''' repository repo = osgi.getservice(repository.class) session = null try { = repo.login(new simplecredentials("admin", "admin".tochararray())) def qm = s.getworkspace().getquerymanager() def query = qm.createquery(querystr,'sql') queryresult result = query.execute() result.rows.each {row r -> println r.path} } finally { s?.logout() } ``` script would dump path index definition nodes. using mongo ----------- default application uses segmentmk stores data filesystem. instead configured use mongo $ java -jar target/oak-standalone-*-exec.jar --mongo would try connect mongo server localhost 27017 port. one specify server detail also $ java -jar target/oak-standalone-*-exec.jar --mongo=mongodb://server:27017 application structure --------------------- oak uses repository home (defaults `oak`) folder current directory. oak/ bundles dav tmp repository datastore index segmentstore data00000a.tar journal.log repo.lock repository-config.json segmentmk-config.json structure 1. `bundles` - storage used osgi bundles 2. `repository` - content stored here. binary content stored `datastore` directory node content stored `segmentstore` directory 3. json file - config files used configure repository components like jaas setup, segmentstore config etc. osgi config. see config options supported go http://localhost:8080/osgi/system/console/configmgr default setup configured use filedatastore store binary content segmentmk mongomk setup ----- repository configured setup `repositoryinitializer`. startup would check repository home exist not. would copy set default config files depending options provided (like --mongo ) construct oak repository instance via `oakosgirepositoryfactory` private repository createrepository(list<string> repoconfigs, file repohomedir) throws repositoryexception { map<string,object> config = maps.newhashmap(); config.put(oakosgirepositoryfactory.repository_home, repohomedir.getabsolutepath()); config.put(oakosgirepositoryfactory.repository_config_file, commasepfilepaths(repoconfigs)); config.put(oakosgirepositoryfactory.repository_shutdown_on_timeout, false); config.put(oakosgirepositoryfactory.repository_env_spring_boot, true); config.put(oakosgirepositoryfactory.repository_timeout_in_secs, 10); //set properties used perform property substitution //osgi configs config.put("repo.home", repohomedir.getabsolutepath()); config.put("oak.mongo.db", mongodbname); config.put("oak.mongo.uri", getmongouri()); //configures bundleactivator get notified //osgi startup shutdown configureactivator(config); return new oakosgirepositoryfactory().getrepository(config); } setup 1. `repository_home` - path directory would used store repository content 2. `repository_config_file` - comma separated json config file paths standalone application based [spring boot](http://projects.spring.io/spring-boot/) thus supports features provided it. [1]: http://felix.apache.org/documentation/subprojects/apache-felix-script-console-plugin.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-examples/standalone/src/main/resources/config-templates/repository-config.json # --- { "org.apache.felix.jaas.configuration.factory-guestloginmodule": { "jaas.controlflag": "optional", "jaas.classname": "org.apache.jackrabbit.oak.spi.security.authentication.guestloginmodule", "jaas.ranking": 300 }, "org.apache.felix.jaas.configuration.factory-loginmoduleimpl": { "jaas.controlflag": "required", "jaas.classname": "org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl", "jaas.ranking": 100 }, "org.apache.felix.jaas.configuration.factory-tokenloginmodule": { "jaas.controlflag": "sufficient", "jaas.classname": "org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule", "jaas.ranking": 200 }, "org.apache.felix.jaas.configurationspi": { "jaas.defaultrealmname": "jackrabbit.oak", "jaas.globalconfigpolicy": "proxy", "jaas.configprovidername": "felixjaasprovider" }, "org.apache.jackrabbit.oak.jcr.osgi.repositorymanager": {}, "org.apache.jackrabbit.oak.plugins.blob.datastore.filedatastore": { "minrecordlength" : 4096, "path" : "${repo.home}/repository/datastore" } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-examples/standalone/src/main/resources/config-templates/segmentmk-config.json # --- { "org.apache.jackrabbit.oak.segment.segmentnodestoreservice" : { "customblobstore" : true } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-examples/standalone/src/main/resources/config-templates/mongomk-config.json # --- { "org.apache.jackrabbit.oak.plugins.document.documentnodestoreservice" : { "customblobstore" : true, "db" : "${oak.mongo.db}", "mongouri" : "${oak.mongo.uri}" } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-examples/standalone/src/main/resources/static/index.html # --- <!doctype html> <!-- licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. --> <html> <head> <title>oak standalone example application</title> <link type="text/css" rel="stylesheet" href="github-markdown.css"/> <link type="text/css" rel="stylesheet" href="stylish.css"/> </head> <body> <article class="markdown-body"> <h1>oak standalone example application</h1> <ul> <li><a href="/osgi/system/console">system console</a></li> <li><a href="/osgi/system/console/sc">script console</a></li> <li><a href="/repository/default">webdav</a></li> <li><a href="/metrics">metrics</a></li> </ul> </article> </body> </html> # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-examples/webapp/readme.txt # --- ===================================== welcome jackrabbit web application ===================================== web application component apache jackrabbit project. component provides servlets used access jackrabbit repository: * repositoryaccessservlet.java * loggingservlet.java * repositorystartupservlet.java addition, project contains 2 different webdav servlets: * simplewebdavservlet.java adds webdav support (dav 1,2) jackrabbit repository. * jcrwebdavserverservlet.java servlet used remote jsr170 calls via webdav. important: please note, servlet intended provide common webdav support repository. instead primary goal remote jsr170 calls. corresponding client see -> jackrabbit-jcr2dav (work progress). # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-examples/webapp/src/main/webapp/remoting/json.js # --- /* licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. */ function getxmlhttprequest(url, method, headers, params) { var xmlhttp = null; (window.xmlhttprequest) { // code new browsers xmlhttp = new xmlhttprequest(); } else (window.activexobject) { // code ie try { xmlhttp = new activexobject("msxml2.xmlhttp"); } catch (e) { xmlhttp = new activexobject("microsoft.xmlhttp"); } } (xmlhttp) { (!method) { method = "get"; } xmlhttp.open(method, url, false); (headers) { (var hdr headers) { xmlhttp.setrequestheader(hdr, headers[hdr]); } } xmlhttp.send(params); return xmlhttp; } else { alert("your browser support xmlhttp."); return null; } } var jsonformatter = null; (function() { jsonformatter = new object(); jsonformatter.clear = false; jsonformatter.tree = function(jsonobj, basehref) { (!jsonobj) { return ""; } var indentionlevel = 0; return jsonformatter.objecttree("", jsonobj, indentionlevel, basehref); } jsonformatter.format = function(jsonobj, clearspecial) { (!jsonobj) { return ""; } var indentionlevel = 0; clear = clearspecial; return jsonformatter.object(jsonobj, indentionlevel); } jsonformatter.addlinebreak = function(str) { return str += "<br>"; } jsonformatter.addindention = function(str, indention, indstr) { (var = 0; < indention; i++) { str += indstr; } return str; } jsonformatter.object = function(value, indentionlevel) { (value instanceof array) { return jsonformatter.array(value, indentionlevel); } var str = "{"; str = jsonformatter.addlinebreak(str); indentionlevel++; var delim = false; (var value) { var v = value[i]; (clear && i.charat(0) == ':') { // skip special prop. // todo: evaluate add display info. } else { var fnctn = jsonformatter[typeof v]; (fnctn) { v = fnctn(v, indentionlevel); (typeof v == 'string') { (delim) { str += ","; str = jsonformatter.addlinebreak(str); } str = jsonformatter.addindention(str, indentionlevel, "\t"); str += jsonformatter.string(i) + ' : ' + v; delim = true; } } } } indentionlevel--; str = jsonformatter.addlinebreak(str); str = jsonformatter.addindention(str, indentionlevel, "\t"); str += "}"; return str; } jsonformatter.array = function(value, indentionlevel) { var str = "["; var delim = false; (var value) { var arrval = value[i]; var fnctn = jsonformatter[typeof arrval]; (fnctn) { arrval = fnctn(arrval); (delim) { str += ", "; } str += arrval; delim = true; } } str += "]"; return str; } jsonformatter.boolean = function(value, indentionlevel) { return string(value); } jsonformatter.string = function(value, indentionlevel) { return '"' + value + '"'; } jsonformatter.number = function(value, indentionlevel) { return string(value); } jsonformatter.extractpropertytype = function(key, value) { (key == "::nodeiteratorsize") { return null; } else (key.charat(0) == ':' && typeof value == 'string') { return value; } else { return null; } } jsonformatter.buildkey = function(key, proptype, href) { var keystr = key; (proptype) { var href = "javascript:alert('propertytype = " + proptype + "');"; keystr = "<a href=\"" +href+ "\" alt=\""+ proptype +"\" >" + key + "</a>"; } else (key.charat(0) == ':') { // binary var propname = key.substring(1, key.length); var binhref = href + "/" + propname; keystr = "<a href=\"" +binhref+ "\" alt=\"binary\" >" + propname + "</a>"; } return keystr; } jsonformatter.objecttree = function(key, value, indentionlevel, href) { var str = "+ " + key; // + node-name (href && href.charat(href.length - 1) == '/') { href += key; } else { href += "/" + key; } indentionlevel++; var proptype; var childsize; var delim = false; (var value) { var v = value[i]; var pt = jsonformatter.extractpropertytype(i, v); (pt) { proptype = pt; continue; } else (i == "::nodeiteratorsize") { continue; } str = jsonformatter.addlinebreak(str); str = jsonformatter.addindention(str, indentionlevel, "&nbsp;&nbsp;"); (v instanceof array) { // value array - propname var key = jsonformatter.buildkey(i, proptype, href); proptype = null; str += "- " + key + ' = ' + jsonformatter.array(v, indentionlevel); } else (v instanceof object) { str += jsonformatter.objecttree(i, v, indentionlevel, href); } else { // simple value - propname var fnctn = jsonformatter[typeof v]; (fnctn) { v = fnctn(v, indentionlevel); var key = jsonformatter.buildkey(i, proptype, href); proptype = null; str += "- " + key + ' = ' + v; } } } indentionlevel--; return str; } })(); # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-examples/webapp/src/main/webapp/web-inf/templates/repository-config.json # --- { "org.apache.felix.jaas.configuration.factory-guestloginmodule": { "jaas.controlflag": "optional", "jaas.classname": "org.apache.jackrabbit.oak.spi.security.authentication.guestloginmodule", "jaas.ranking": 300 }, "org.apache.felix.jaas.configuration.factory-loginmoduleimpl": { "jaas.controlflag": "required", "jaas.classname": "org.apache.jackrabbit.oak.security.authentication.user.loginmoduleimpl", "jaas.ranking": 100 }, "org.apache.felix.jaas.configuration.factory-tokenloginmodule": { "jaas.controlflag": "sufficient", "jaas.classname": "org.apache.jackrabbit.oak.security.authentication.token.tokenloginmodule", "jaas.ranking": 200 }, "org.apache.felix.jaas.configurationspi": { "jaas.defaultrealmname": "jackrabbit.oak", "jaas.globalconfigpolicy": "proxy", "jaas.configprovidername": "felixjaasprovider" }, "org.apache.jackrabbit.oak.jcr.osgi.repositorymanager": {}, "org.apache.jackrabbit.oak.segment.segmentnodestoreservice" : {} } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks/run_concurrent_addmembers.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # title=addmemberstest_besteffort bench="addmemberstest" batch_size="10 50 100 500" import_behavior="besteffort" # ignore abort" members_cnt="1 10 100 500 1000 5000 10000" runtime=5 fixs="oak-segment-tar" threads="1,10,20,50" #"1,2,4,8,10,15,20,50" profile=true log=$title"_$(date +'%y%m%d_%h%m%s').csv" echo "benchmarks: $bench" > $log echo "fixture: $fixs" >> $log echo "runtime: $runtime" >> $log echo "concurrency: $threads" >> $log echo "profiling: $profile" >> $log echo "batch size: $batch_size" >> $log echo "import behavior: $import_behaviors" >> $log echo "number members: $members_cnt" >> $log echo "--------------------------------------" >> $log bm $bench batchsize $batch_size nomembers $members_cnt echo "executing benchmarks $nomembers members batchsize $batchsize $importbehavior" | tee -a $log echo "-----------------------------------------------------------" | tee -a $log rm -rf target/jackrabbit-* target/oak-tar-* cmd="java -xmx2048m -dprofile=$profile -druntime=$runtime -dwarmup=1 -jar target/oak-benchmarks-*-snapshot.jar benchmark --batchsize $batchsize --importbehavior $import_behavior --numberofusers $nomembers --csvfile $log --concurrency $threads --report false $bm $fixs" echo $cmd $cmd done done done echo "-----------------------------------------" echo "benchmark completed. see $log details:" cat $log # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks/run_concurrent_login.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # title=logintest bench="loginwithmembershiptest" #loginwithmemberstest loginwithmembershiptest logintest loginlogouttest logingetrootlogouttest" user="user" # admin anonymous" use_token=false # true hash_iterations="-1" expiration="200000" no_groups="1 10 100 1000" use_nested_groups=true # false runtime=5 fixs="oak-segment-tar" # jackrabbit" threads="1,10,20,50" #"1,2,4,8,10,15,20,50" profile=false num_items=1000 log=$title"_$(date +'%y%m%d_%h%m%s').csv" echo "benchmarks: $bench" > $log echo "fixtures: $fixs" >> $log echo "runtime: $runtime" >> $log echo "concurrency: $threads" >> $log echo "profiling: $profile" >> $log echo "user: $user" >> $log echo "run token: $use_token" >> $log echo "hash iterations: $hash_iterations" >> $log echo "cache expiration: $expiration" >> $log echo "number groups: $no_groups" >> $log echo "use nested groups: $use_nested_groups" >> $log echo "--------------------------------------" >> $log bm $bench nogroups $no_groups # start new vms fixture minimize memory impacts fix $fixs echo "executing benchmarks user: $user $nogroups groups (nested = $use_nested_groups) $fix" | tee -a $log echo "-----------------------------------------------------------" | tee -a $log rm -rf target/jackrabbit-* target/oak-tar-* # cmd="java -xmx2048m -xdebug -xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005 -dprofile=$profile -druntime=$runtime -dwarmup=10 -jar target/oak-benchmarks-*-snapshot.jar benchmark --noiterations $hash_iterations --runwithtoken $use_token --expiration $expiration --numberofgroups $nogroups --nestedgroups $use_nested_groups --csvfile $log --concurrency $threads --runasuser $user --report false $bm $fix" cmd="java -xmx2048m -dprofile=$profile -druntime=$runtime -dwarmup=10 -jar target/oak-benchmarks-*-snapshot.jar benchmark --noiterations $hash_iterations --runwithtoken $use_token --expiration $expiration --numberofgroups $nogroups --nestedgroups $use_nested_groups --csvfile $log --concurrency $threads --runasuser $user --report false $bm $fix" echo $cmd $cmd done done done echo "-----------------------------------------" echo "benchmark completed. see $log details:" cat $log # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks/run_everyone_acl.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # title=concurrenteveryoneacltest bench="concurrenteveryoneacltest" admin="false" runtime=5 random_user="true" fixs="oak-segment-tar" # jackrabbit" threads="1,2,4,8,10,15,20,50" profile=false num_items=1000 log=$title"_$(date +'%y%m%d_%h%m%s').csv" echo "benchmarks: $bench" > $log echo "fixtures: $fixs" >> $log echo "admin user: $admin" >> $log echo "runtime: $runtime" >> $log echo "num items: $num_items" >> $log echo "concurrency: $threads" >> $log echo "random user: $random_user" >> $log echo "profiling: $profile" >> $log echo "--------------------------------------" >> $log bm $bench user $admin # start new vms fixture minimize memory impacts fix $fixs echo "executing benchmarks admin: $user $fix" | tee -a $log echo "-----------------------------------------------------------" | tee -a $log rm -rf target/jackrabbit-* target/oak-tar-* cmd="java -xmx2048m -dprofile=$profile -druntime=$runtime -dwarmup=5 -jar target/oak-benchmarks-*-snapshot.jar benchmark --itemstoread $num_items --csvfile $log --concurrency $threads --runasadmin $user --report false --randomuser $random_user $bm $fix" echo $cmd $cmd done done done echo "-----------------------------------------" echo "benchmark completed. see $log details:" cat $log # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks/run_azure_datastore.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # title=azuredatastoretest bench="readbinarypropertiestest" admin="false" # true" runtime=360 random_user="true" fixs="oak-segment-azure" profile=false #debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 debug="" azurite="defaultendpointsprotocol=http;accountname=devstoreaccount1;accountkey=...;blobendpoint=http://127.0.0.1:10000/devstoreaccount1" # set datastore connection string using ds_azure_connection_string environment variable. set, defaults azurite default test credentials datastore_azure_connection=${ds_azure_connection_string:-$azurite} # set segmentstore connection string using azure_connection_string environment variable. set, defaults azurite default test credentials azure_connection=${azure_connection_string:-$azurite} azure_container="segment" azure_root_path="/aem" datastore_class="org.apache.jackrabbit.oak.blob.cloud.azure.blobstorage.azuredatastore" binaries_threshold="512" tree_max_nodes=300 tree_binary_size=100000 log=$title"_$(date +'%y%m%d_%h%m%s').csv" echo "benchmarks: $bench" > $log echo "fixtures: $fixs" >> $log echo "admin user: $admin" >> $log echo "runtime: $runtime" >> $log echo "random user: $random_user" >> $log echo "profiling: $profile" >> $log echo "tree - max nodes: $tree_max_nodes" >> $log echo "tree - binary value size: $tree_binary_size" >> $log echo "--------------------------------------" >> $log rm -rf target/oak-benchmarks-*-tests.jar # remove unused conflicting jar, present # generate datastore config file. escape `=` connection string echo "azureconnectionstring=\"$datastore_azure_connection\"" | sed -e 's/=/\\=/g' -e 's/\\=/=/1' > target/datastore.properties # set datastore#minrecordlength value binaries_threshold force writing binary records blobstore instead keeping memory echo "minrecordlength=\"$binaries_threshold\"" >> target/datastore.properties # disable local caching binary data echo "cachesize=\"0\"" >> target/datastore.properties bm $bench user $admin # start new vms fixture minimize memory impacts fix $fixs echo "executing benchmarks admin: $user $fix" | tee -a $log echo "-----------------------------------------------------------" | tee -a $log rm -rf target/$fixs-* # remove dangling local repository caches, cmd="java $debug -xmx2048m -dprofile=$profile -druntime=$runtime -dskipwarmup=true -dmaxnodes=$tree_max_nodes -dbinaryvaluesize=$tree_binary_size -ddatastore=$datastore_class -dds.config=target/datastore.properties -jar target/oak-benchmarks-*.jar benchmark --csvfile $log --runasadmin $user --report false --randomuser $random_user --binariesinlinethreshold $binaries_threshold --azure $azure_connection --azurecontainername $azure_container --azurerootpath $azure_root_path $bm $fix" echo $cmd $cmd done done done echo "-----------------------------------------" echo "benchmark completed. see $log details:" cat $log # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks/readme.md # --- oak benchmark jar ================= jar runnable contains test related run modes. following runmodes currently available: * benchmark : run benchmark tests different oak repository fixtures. * scalability : run scalability tests different oak repository fixtures. see subsections details use modes. benchmark mode -------------- benchmark mode used executing various micro-benchmarks. invoked like this: $ java -jar oak-benchmarks-*.jar benchmark [options] [testcases] [fixtures] following benchmark options (with default values) currently supported: --azure - azure connection string (default: defaultendpointsprotocol=http; accountname=devstoreaccount1; accountkey=eby8vdm02xnocqflquwjpllmetlcdxj1ouzft50usrz6ifsufq2uvercz4i6tq/k1szfptotr/kbhbeksogmgw==; blobendpoint=http://127.0.0.1: 10000/devstoreaccount1;) --azurecontainername - azure container name (default: oak) --azurerootpath - azure root path (default: /oak) --host localhost - mongodb host --port 27101 - mongodb port --db <name> - mongodb database (default generated name) --mongouri - mongodb uri (takes precedence host, port db) --dropdbaftertest true - whether drop mongodb database test --base target - path base file (tar setup), --mmap <64bit?> - tarmk memory mapping (the default 64 bit jvms) --cache 100 - cache size (in mb) --wikipedia <file> - wikipedia dump --runasadmin false - run test admin session --itemstoread 1000 - number items read --report false - whether output intermediate results --csvfile <file> - optional csv file report benchmark results --concurrency <levels> - comma separated list concurrency levels --metrics false - enable metrics based stats collection --rdbjdbcuri - jdbc url rdb persistence (defaults local file-based h2) --rdbjdbcuser - jdbc username (defaults "") --rdbjdbcpasswd - jdbc password (defaults "") --rdbjdbctableprefix - rdb persistence: prefix table names (defaults "") --vgcmaxage - continuous documentnodestore versiongc max age sec (rdb only) --throttlingenabled - whether throttling enabled document store not. default false. (currently supported mongo document store) please run `--help` list options. options passed test cases repository fixtures need them. example wikipedia dump option needed wikipediaimport test case mongodb address information mongomk segmentmk -based repository fixtures. cache setting controls bundle cache size jackrabbit, nodestate cache size mongomk, segment cache size segmentmk. `--concurrency` levels specified comma separated list values, eg: `--concurrency 1,4,8`, execute test number respective threads. note `beforesuite()` `aftersuite()` executed concurrency loop. eg. example above, execution order is: `beforesuite()`, 1x `runtest()`, 4x `runtest()`, 8x `runtest()`, `aftersuite()`. tests create background threads, executed `--concurrency 1` default. use extra jvm options like `-xmx` settings better control benchmark environment. also possible attach jvm profiler better understand benchmark results. example, i'm using `-agentlib:hprof=cpu=samples,depth=100` basic profiling tool, whose results processed `perl analyze-hprof.pl java.hprof.txt` produce somewhat easier-to-read top-down bottom-up summaries execution time distributed across benchmarked codebase. system properties also used control benchmarks. example: -dwarmup=5 - warmup time (in seconds) -druntime=60 - long single benchmark run (in seconds) -dprofile=true - collect print profiling data test case names like `readpropertytest`, `smallfilereadtest` `smallfilewritetest` indicate specific test case run. specify one test cases benchmark command line, oak-run execute benchmark sequence. benchmark code located `org.apache.jackrabbit.oak.benchmark` oak-run component. test case tries exercise tightly scoped aspect repository. might remember many tests jackrabbit benchmark reports like http://people.apache.org/~jukka/jackrabbit/report-2011-09-27/report.html used produce earlier. finally benchmark runner supports following repository fixtures: | fixture | description | |------------------------------|----------------------------------------------------------------| | jackrabbit | jackrabbit default embedded derby bundle pm | | oak-memory | oak default in-memory storage | | oak-memoryns | oak default in-memory nodestore | | oak-mongo | oak default mongo backend | | oak-mongo-ds | oak default mongo backend datastore | | oak-mongons | oak mongo nodestore | | oak-segment-tar | oak segment tar backend | | oak-segment-tar-ds | oak segment tar backend datastore | | oak-segment-azure | oak azure segment backend | | oak-rdb | oak documentmk/rdb persistence | | oak-rdb-ds | oak documentmk/rdb persistence datastore | | oak-composite-store | oak composite node store segment tar backend | | oak-composite-memory-store | oak composite node store in-memory nodestore | | oak-composite-mongo-store | oak composite node store mongo backend | (note oak-rdb, required jdbc drivers either need embedded oak-run, specified separately class path. furthermore, dropdbaftertest interpreted drop *tables*, database itself, auto-created) started, benchmark runner execute listed test case listed repository fixtures. starting repository preparing test environment, test case first executed times warm caches measurements started. test case run repeatedly one minute number milliseconds used execution recorded. done, following statistics computed reported: | column | description | |-------------|-------------------------------------------------------| | c | concurrency level | | min | minimum time (in ms) taken test run | | 10% | time (in ms) fastest 10% test runs | | 50% | time (in ms) taken median test run | | 90% | time (in ms) fastest 90% test runs | | max | maximum time (in ms) taken test run | | n | total number test runs one minute (or more) | useful numbers probably 90% figure, shows time majority test runs completed thus kind performance could reasonably expected normal usage scenario. however, reason different numbers reported, instead 90% one, often seeing distribution time across test runs helpful identifying things like whether bigger cache might help. finally, importantly, like benchmarking, numbers produced tests taken large dose salt. directly indicate kind application performance could expect (the current state of) oak. instead designed isolate implementation-level bottlenecks help measure profile performance specific, isolated features. add new benchmark -------------------------- add new test case benchmark suite, need implement `benchmark` interface add instance new test `allbenchmarks` array `benchmarkrunner` class `org.apache.jackrabbit.oak.benchmark` package. best way implement `benchmark` interface extend `abstracttest` base class takes care benchmarking details. outline benchmark is: class mytest extends abstractest { @override protected void beforesuite() throws exception { // optional, run iterations, // included performance measurements } @override protected void beforetest() throws exception { // optional, run runtest() iteration, // included performance measurements } @override protected void runtest() throws exception { // required, run repeatedly benchmark, // time iteration measured. // ideal execution time method // hundred thousand milliseconds. // use loop operation hoping measure // faster that. } @override protected void aftertest() throws exception { // optional, run runtest() iteration, // included performance measurements } @override protected void aftersuite() throws exception { // optional, run iterations, // included performance measurements } } rough outline benchmark run is: test.beforesuite(); (...) { test.beforetest(); recordstarttime(); test.runtest(); recordendtime(); test.aftertest(); } test.aftersuite(); use `loginwriter()` `loginreader()` methods create admin anonymous sessions. there's need logout sessions (unless relevant benchmark) automatically closed benchmark completed `aftersuite()` method called. similarly, use `addbackgroundjob(runnable)` method add background tasks run concurrently main benchmark executing. relevant background thread works like this: (running) { runnable.run(); thread.yield(); } see, `run()` method background task gets invoked repeatedly. threads automatically close test iterations done, `aftersuite()` method called. scalability mode -------------- scalability mode used executing various scalability suites test performance various associated tests. invoked like this: $ java -jar oak-benchmarks-*.jar scalability [options] [suites] [fixtures] following scalability options (with default values) currently supported: --host localhost - mongodb host --port 27101 - mongodb port --db <name> - mongodb database (default generated name) --dropdbaftertest true - whether drop mongodb database test --base target - path base file (tar setup), --mmap <64bit?> - tarmk memory mapping (the default 64 bit jvms) --cache 100 - cache size (in mb) --csvfile <file> - optional csv file report benchmark results --rdbjdbcuri - jdbc url rdb persistence (defaults local file-based h2) --rdbjdbcuser - jdbc username (defaults "") --rdbjdbcpasswd - jdbc password (defaults "") options passed various suites repository fixtures need them. example mongodb address information mongomk segmentmk -based repository fixtures. cache setting controls nodestate cache size mongomk, segment cache size segmentmk. use extra jvm options like `-xmx` settings better control scalability suite test environment. also possible attach jvm profiler better understand benchmark results. example, i'm using `-agentlib:hprof=cpu=samples,depth=100` basic profiling tool, whose results processed `perl analyze-hprof.pl java.hprof.txt` produce somewhat easier-to-read top-down bottom-up summaries execution time distributed across benchmarked codebase. scalability suite creates relevant repository load starting tests. test case tries benchmark profile specific aspect repository. scalability suite configured run number related tests require base load available repository. either entire suite executed individual tests within suite run. suite names specified like `scalabilityblobsearchsuite` tests configured suite executed. execute particular tests suite, suite names appended tests form `suite:test1,test2` must specified like `scalabilityblobsearchsuite:formatsearcher,nodetypesearcher`. specify one suites scalability command line, oak-run execute suite sequence. finally scalability runner supports following repository fixtures: | fixture | description | |-----------------------|----------------------------------------------------------------| | oak-memory | oak default in-memory storage | | oak-memoryns | oak default in-memory nodestore | | oak-mongo | oak default mongo backend | | oak-mongo-ds | oak default mongo backend datastore | | oak-mongons | oak mongo nodestore | | oak-segment-tar | oak tar backend (aka segment nodestore) | | oak-segment-tar-ds | oak tar backend (aka segment nodestore) datastore | | oak-rdb | oak documentmk/rdb persistence | | oak-rdb-ds | oak documentmk/rdb persistence datastore | (note oak-rdb, required jdbc drivers either need embedded oak-run, specified separately class path.) started, scalability runner execute listed suite listed repository fixtures. starting repository preparing test environment, scalability suite executes configured tests warm caches measurements started. configured test within suite run number milliseconds used execution recorded. done, following statistics computed reported: | column | description | |-------------|-------------------------------------------------------| | min | minimum time (in ms) taken test run | | 10% | time (in ms) fastest 10% test runs | | 50% | time (in ms) taken median test run | | 90% | time (in ms) fastest 90% test runs | | max | maximum time (in ms) taken test run | | n | total number test runs one minute (or more) | also, test, execution times reported iteration/load configured. | column | description | |-------------|-------------------------------------------------------| | load | time (in ms) taken test run | latter useful numbers shows individual execution times scaling load. add new scalability suite -------------------------- scalability code located `org.apache.jackrabbit.oak.scalabiity` oak-run component. add new scalability suite, need implement `scalabilitysuite` interface add instance new suite `allsuites` array `scalabilityrunner` class, along test benchmarks, `org.apache.jackrabbit.oak.scalability` package. implement test benchmarks, required extend `scalabilitybenchmark` abstract class implement `execute()` method. addition, methods `beforeexecute()` `afterexecute()` overridden processing benchmark executes. best way implement `scalabilitysuite` interface extend `scalabilityabstractsuite` base class takes care benchmarking details. outline suite is: class mytestsuite extends scalabilityabstractsuite { @override protected void beforesuite() throws exception { // optional, run iterations, // included performance measurements } @override protected void beforeiteration(executioncontext) throws exception { // optional, typically, configured create additional // loads iteration. // method called test iteration begins } @override protected void executebenchmark(scalabilitybenchmark benchmark, executioncontext context) throws exception { // required, executes specified benchmark } @override protected void afteriteration() throws exception { // optional, executed runiteration(), // included performance measurements } @override protected void aftersuite() throws exception { // optional, run iterations complete, // included performance measurements } } rough outline individual suite run is: test.beforesuite(); (iteration...) { test.beforeiteration(); (benchmarks...) { recordstarttime(); test.executebenchmark(); recordendtime(); } test.afteriteration(); } test.aftersuite(); specify context information test benchmarks using executioncontext object passed parameter `beforeiteration()` `executebenchmark()` methods. `executionbenchmark` exposes two methods `getmap()` `setmap()` used pass context information. use `loginwriter()` `loginreader()` methods create admin anonymous sessions. there's need logout sessions (unless relevant test) automatically closed suite complete `aftersuite()` method called. similarly, use `addbackgroundjob(runnable)` method add background tasks run concurrently test benchmark executing. relevant background thread works like this: (running) { runnable.run(); thread.yield(); } see, `run()` method background task gets invoked repeatedly. threads automatically close test iterations done, `aftersuite()` method called. `scalabilityabstractsuite` defines system properties used control suites extending : -dincrements=10,100,1000,1000 - defines varying loads test iteration -dprofile=true - collect print profiling data -ddebug=true - output intermediate results suite run license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks/run_concurrent_login_principal_cache.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # title=logintest bench="loginwithmembershiptest" #loginwithmemberstest loginwithmembershiptest logintest loginlogouttest logingetrootlogouttest" user="user" # admin anonymous" use_token=false # true hash_iterations="-1" expiration="5" no_groups="10" use_nested_groups=false runtime=5 fixs="oak-segment-tar" # jackrabbit" threads="500" #"1,2,4,8,10,15,20,50" profile=false num_items=1 log=$title"_$(date +'%y%m%d_%h%m%s').csv" echo "benchmarks: $bench" > $log echo "fixtures: $fixs" >> $log echo "runtime: $runtime" >> $log echo "concurrency: $threads" >> $log echo "profiling: $profile" >> $log echo "user: $user" >> $log echo "run token: $use_token" >> $log echo "hash iterations: $hash_iterations" >> $log echo "cache expiration: $expiration" >> $log echo "number groups: $no_groups" >> $log echo "use nested groups: $use_nested_groups" >> $log echo "--------------------------------------" >> $log bm $bench nogroups $no_groups # start new vms fixture minimize memory impacts fix $fixs echo "executing benchmarks user: $user $nogroups groups (nested = $use_nested_groups) $fix" | tee -a $log echo "-----------------------------------------------------------" | tee -a $log rm -rf target/jackrabbit-* target/oak-tar-* # cmd="java -xmx2048m -xdebug -xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005 -dprofile=$profile -druntime=$runtime -dwarmup=10 -jar target/oak-benchmarks-*-snapshot.jar benchmark --noiterations $hash_iterations --runwithtoken $use_token --expiration $expiration --numberofgroups $nogroups --nestedgroups $use_nested_groups --csvfile $log --concurrency $threads --runasuser $user --report false $bm $fix" cmd="java -xmx2048m -dprofile=$profile -druntime=$runtime -dwarmup=10 -jar target/oak-benchmarks-*-snapshot.jar benchmark --noiterations $hash_iterations --runwithtoken $use_token --expiration $expiration --numberofgroups $nogroups --nestedgroups $use_nested_groups --csvfile $log --concurrency $threads --runasuser $user --report false $bm $fix" echo $cmd $cmd done done done echo "-----------------------------------------" echo "benchmark completed. see $log details:" cat $log # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks/run_writeacl.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # title=concurrentwriteacltest bench="concurrentwriteacltest" admin="true" runtime=10 random_user="true" fixs="oak-mongo" # jackrabbit" threads="1,2,4,8,10,15,20,50" profile=false num_items=10 log=$title"_$(date +'%y%m%d_%h%m%s').csv" echo "benchmarks: $bench" > $log echo "fixtures: $fixs" >> $log echo "admin user: $admin" >> $log echo "runtime: $runtime" >> $log echo "num items: $num_items" >> $log echo "concurrency: $threads" >> $log echo "random user: $random_user" >> $log echo "profiling: $profile" >> $log echo "--------------------------------------" >> $log bm $bench user $admin # start new vms fixture minimize memory impacts fix $fixs echo "executing benchmarks admin: $user $fix" | tee -a $log echo "-----------------------------------------------------------" | tee -a $log rm -rf target/jackrabbit-* target/oak-tar-* cmd="java -xmx2048m -dprofile=$profile -druntime=$runtime -dwarmup=5 -jar target/oak-benchmarks-*-snapshot.jar benchmark --itemstoread $num_items --csvfile $log --concurrency $threads --runasadmin $user --report false --randomuser $random_user $bm $fix" echo $cmd $cmd done done done echo "-----------------------------------------" echo "benchmark completed. see $log details:" cat $log # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks/run_concurrent.sh # --- #!/bin/sh # # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # title=concurrentreadaccesscontrolledtreetest bench="concurrentreadaccesscontrolledtreetest" #concurrentreadaccesscontrolledtreetest2 concurrentreadsinglepolicytreetest manyuserreadtest concurrenttraversaltest" admin="false" # true" runtime=5 random_user="true" fixs="oak-segment-tar" # jackrabbit" threads="1,2,4,8,10,15,20,50" profile=false num_items=1000 log=$title"_$(date +'%y%m%d_%h%m%s').csv" echo "benchmarks: $bench" > $log echo "fixtures: $fixs" >> $log echo "admin user: $admin" >> $log echo "runtime: $runtime" >> $log echo "num items: $num_items" >> $log echo "concurrency: $threads" >> $log echo "random user: $random_user" >> $log echo "profiling: $profile" >> $log echo "--------------------------------------" >> $log bm $bench user $admin # start new vms fixture minimize memory impacts fix $fixs echo "executing benchmarks admin: $user $fix" | tee -a $log echo "-----------------------------------------------------------" | tee -a $log rm -rf target/jackrabbit-* target/oak-tar-* cmd="java -xmx2048m -dprofile=$profile -druntime=$runtime -dwarmup=10 -jar target/oak-benchmarks-*-snapshot.jar benchmark --itemstoread $num_items --csvfile $log --concurrency $threads --runasadmin $user --report false --randomuser $random_user $bm $fix" echo $cmd $cmd done done done echo "-----------------------------------------" echo "benchmark completed. see $log details:" cat $log # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-search/src/test/resources/stopwords-snowball.txt # --- | svn.tartarus.org/snowball/trunk/website/algorithms/spanish/stop.txt | file distributed bsd license. | see http://snowball.tartarus.org/license.php | also see http://www.opensource.org/licenses/bsd-license.html | - encoding converted utf-8. | - notice added. | | note: use file stopfilterfactory, must specify format="snowball" | spanish stop word list. comments begin vertical bar. stop | word start line. | following ranked list (commonest rarest) stopwords | deriving large sample text. | extra words added end. de | from, la | the, que | who, el | en | | | los | the, del | de + el se | himself, etc las | the, por | for, by, etc un | para | con | | una | su | his, al | + el | es ser lo | como | ms | pero | pero sus | su plural le | him, ya | already | | fue ser este | | ha haber | etc porque | esta | | son ser entre | | est estar cuando | muy | sin | without sobre | | ser ser | tiene tener tambin | also | hasta | hay | is/are donde | | han haber quien | whom, | estn estar | estado estar desde | todo | nos | us durante | | estados estar todos | uno | les | ni | contra | otros | | fueron ser ese | eso | | haba haber ante | ellos | e | (variant y) esto | | antes | algunos | qu | what? unos | yo | otro | otras | otra | l | tanto | much, many esa | estos | mucho | much, many quienes | nada | nothing muchos | many cual | | sea ser poco | ella | estar | | haber haber estas | | estaba estar | estamos estar algunas | algo | something nosotros | | forms mi | mis | mi plural | thou te | thee ti | thee tu | thy tus | tu plural ellas | nosotras | vosotros | vosotras | os | mo | mine | mos | mas | tuyo | thine tuya | tuyos | tuyas | suyo | his, hers, suya | suyos | suyas | nuestro | nuestra | nuestros | nuestras | vuestro | vuestra | vuestros | vuestras | esos | esas | | forms estar, (not including infinitive): estoy ests est estamos estis estn est ests estemos estis estn estar estars estar estaremos estaris estarn estara estaras estaramos estarais estaran estaba estabas estbamos estabais estaban estuve estuviste estuvo estuvimos estuvisteis estuvieron estuviera estuvieras estuviramos estuvierais estuvieran estuviese estuvieses estuvisemos estuvieseis estuviesen estando estado estada estados estadas estad | forms haber, (not including infinitive): ha hemos habis han haya hayas hayamos hayis hayan habr habrs habr habremos habris habrn habra habras habramos habrais habran haba habas habamos habais haban hube hubiste hubo hubimos hubisteis hubieron hubiera hubieras hubiramos hubierais hubieran hubiese hubieses hubisemos hubieseis hubiesen habiendo habido habida habidos habidas | forms ser, (not including infinitive): soy eres es somos sois son sea seas seamos seis sean ser sers ser seremos seris sern sera seras seramos serais seran era eras ramos erais eran fui fuiste fue fuimos fuisteis fueron fuera fueras furamos fuerais fueran fuese fueses fusemos fueseis fuesen siendo sido | sed also means 'thirst' | forms tener, (not including infinitive): tengo tienes tiene tenemos tenis tienen tenga tengas tengamos tengis tengan tendr tendrs tendr tendremos tendris tendrn tendra tendras tendramos tendrais tendran tena tenas tenamos tenais tenan tuve tuviste tuvo tuvimos tuvisteis tuvieron tuviera tuvieras tuviramos tuvierais tuvieran tuviese tuvieses tuvisemos tuvieseis tuviesen teniendo tenido tenida tenidos tenidas tened # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-search/src/test/resources/mapping-isolatin1accent.txt # --- # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # syntax: # "source" => "target" # "source".length() > 0 (source cannot empty.) # "target".length() >= 0 (target empty.) # example: # "" => "a" # "\u00c0" => "a" # "\u00c0" => "\u0041" # "" => "ss" # "\t" => " " # "\n" => "" # => "\u00c0" => "a" # => "\u00c1" => "a" # => "\u00c2" => "a" # => "\u00c3" => "a" # => "\u00c4" => "a" # => "\u00c5" => "a" # => ae "\u00c6" => "ae" # => c "\u00c7" => "c" # => e "\u00c8" => "e" # => e "\u00c9" => "e" # => e "\u00ca" => "e" # => e "\u00cb" => "e" # => "\u00cc" => "i" # => "\u00cd" => "i" # => "\u00ce" => "i" # => "\u00cf" => "i" # => ij "\u0132" => "ij" # => "\u00d0" => "d" # => n "\u00d1" => "n" # => "\u00d2" => "o" # => "\u00d3" => "o" # => "\u00d4" => "o" # => "\u00d5" => "o" # => "\u00d6" => "o" # => "\u00d8" => "o" # => oe "\u0152" => "oe" # "\u00de" => "th" # => u "\u00d9" => "u" # => u "\u00da" => "u" # => u "\u00db" => "u" # => u "\u00dc" => "u" # => "\u00dd" => "y" # => "\u0178" => "y" # => "\u00e0" => "a" # => "\u00e1" => "a" # => "\u00e2" => "a" # => "\u00e3" => "a" # => "\u00e4" => "a" # => "\u00e5" => "a" # => ae "\u00e6" => "ae" # => c "\u00e7" => "c" # => e "\u00e8" => "e" # => e "\u00e9" => "e" # => e "\u00ea" => "e" # => e "\u00eb" => "e" # => "\u00ec" => "i" # => "\u00ed" => "i" # => "\u00ee" => "i" # => "\u00ef" => "i" # => ij "\u0133" => "ij" # => "\u00f0" => "d" # => n "\u00f1" => "n" # => "\u00f2" => "o" # => "\u00f3" => "o" # => "\u00f4" => "o" # => "\u00f5" => "o" # => "\u00f6" => "o" # => "\u00f8" => "o" # => oe "\u0153" => "oe" # => ss "\u00df" => "ss" # => th "\u00fe" => "th" # => u "\u00f9" => "u" # => u "\u00fa" => "u" # => u "\u00fb" => "u" # => u "\u00fc" => "u" # => "\u00fd" => "y" # => "\u00ff" => "y" # => ff "\ufb00" => "ff" # => fi "\ufb01" => "fi" # => fl "\ufb02" => "fl" # => ffi "\ufb03" => "ffi" # => ffl "\ufb04" => "ffl" # => ft "\ufb05" => "ft" # => st "\ufb06" => "st" # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-commons/src/test/resources/org/apache/jackrabbit/oak/commons/sort/test-file-2.txt # --- c e g j k # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-commons/src/test/resources/org/apache/jackrabbit/oak/commons/sort/test-file-1.txt # --- b c e f g h # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/readme.md # --- oak runnable jar ================ jar contains everything need simple oak installation. following runmodes currently available: * backup : backup existing oak repository * check : check filestore inconsistencies * checkpoints : manage checkpoints * clusternodes : display documentmk cluster node information * compact : segment compaction tarmk repository * console : start interactive console * datastorecacheupgrade : upgrades jr2 datastore cache * datastorecheck : consistency checker data store * datastore : maintenance operations data store * debug : print status information oak repository * documentstore-check : check documentstore inconsistencies * explore : starts gui browser based java swing * export : export repository content json * frozennoderefsbyscanning : scan nt:frozennode references via query * frozennoderefsusingindex : scan nt:frozennode references via /oak:index * garbage : identifies blob garbage documentmk repository * help : print list available runmodes * history : trace history node * iotrace : collect trace segment store read accesses * recovery : run _lastrev recovery documentmk repository * resetclusterid : resets cluster id * restore : restore backup oak repository * revisions : revision gc documentmk * server : run oak server * tarmkdiff : show changes revisions tarmk * tika : performs text extraction * unlockupgrade : unlock documentmk upgrade newer version * upgrade : migrate existing jackrabbit 2.x repository oak features related jackrabbit 2.x provided oak-run-jr2 jar. see [oak runnable jr2](#jr2) section details. logging ------- oak run uses [logback](https://logback.qos.ch/) logging. customize logging specify custom logback config file via `logback.configurationfile` system property java -dlogback.configurationfile=./logback.xml -jar oak-run-*.jar console /path/to/oak/repository see [here](https://github.com/apache/jackrabbit-oak/blob/trunk/oak-run/src/main/resources/logback.xml) default logback config file used command line format ------------------- oak run uses [joptsimple](http://jopt-simple.github.io/jopt-simple/) library parsing command line options. * option's argument occur: * `--foo=bar` - right option separated equals sign (=) * `--foo bar` - position command line option * `--foo=bar,baz` - sets multiple values option `foo` separated `,` * `--foo` - enables `foo` option foo boolean option. * commands provide help via `-h` option * argument consisting two hyphens (--) signals remaining arguments treated non-options. refer [examples](http://jopt-simple.github.io/jopt-simple/examples.html) details ---- see subsections details use modes. backup ------ see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#backup). restore ------- see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#restore). debug ----- see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#debug). iotrace ----- see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#iotrace). console ------- 'console' mode allows work interactive console browse existing oak repository. type ':help' within console get list supported commands. console currently supports tarmk mongomk. start console tarmk repository, use: $ java -jar oak-run-*.jar console /path/to/oak/repository start console documentmk/mongo repository, use: $ java -jar oak-run-*.jar console mongodb://host start console documentmk/rdb repository, see [documention oak-run rdb](https://jackrabbit.apache.org/oak/docs/nodestore/document/rdb-document-store.html#oak-run). start console connecting repository read-write mode, use either of: $ java -jar oak-run-*.jar console --read-write /path/to/oak/repository $ java -jar oak-run-*.jar console --read-write mongodb://host $ java -jar oak-run-*.jar console --read-write --rdbjdbcuser username --rdbjdbcpasswd password console jdbc:... specify fds path connecting repository, use `--fds-path` option (valid segment document repos): $ java -jar oak-run-*.jar console --fds-path /path/to-data/store /path/to/oak/repository console based [groovy shell](http://groovy.codehaus.org/groovy+shell) hence one use groovy constructs. also exposes `org.apache.jackrabbit.oak.console.consolesession` instance `session` variable. example using segmentnodestore dump current segment info file > new file("segment.txt") << session.workingnode.segment.tostring() case `workingnode` captures current `nodestate` case segment/tarmk `segmentnodestate` also load external script launch time via passing extra argument shown $ java -jar oak-run-*.jar console mongodb://host ":load /path/to/script.groovy" documentstore check ------------------- `documentstore-check` command runs consistency check documentstore based repository. invoked like this: $ java -jar oak-run-*.jar documentstore-check [options] mongodb://host:port/database (or, rdbmk instances, use "jdbc:..."). following options currently supported: option description ------ ----------- -?, -h, --help show help --baseversion [boolean] check base version reference (default: true) --cachesize <integer> cache size (default: 0) --numthreads <integer> use number threads check consistency (default: 12) --orphan [boolean] check orphaned nodes (default: true) --out <string> write output file --progress [boolean] write periodic progress messages (default: true) --rdbjdbcpasswd [string] rdb jdbc password (default: ) --rdbjdbcuser [string] rdb jdbc user (default: ) --rdbtableprefix [string] rdb table prefix --silent write output stdout --summary [boolean] write summary message end (default: true) --versionhistory [boolean] check version history reference (default: true) command uses pool threads check consistency repository. size pool determined number available cores, unless specified explicitly `--numthreads` option. explore ------- 'explore' mode starts desktop browser gui based java swing allows read-only browsing existing oak repository. $ java -jar oak-run-*.jar explore /path/to/oak/repository [--skip-size-check] microsoft azure node stores also supported using following command. secret key must supplied environment variable `azure_secret_key`. $ java -jar oak-run-*.jar explore az:https://myaccount.blob.core.windows.net/container/repository [--skip-size-check] using shared access signature, sas token appended azure uri. $ java -jar oak-run-*.jar explore az:https://myaccount.blob.core.windows.net/container/repository?<sas-token> [--skip-size-check] frozennoderefsbyscanning ------------------------ command executes potentially expensive (!) traversing query searching properties formatted uuid (incl string, reference types) verifies represent (potential) references nt:frozennode. since rather expensive command, consider using frozennoderefsusingindex (at least first) instead. used eg mongodb, consider running command secondary mongodb node, overload primary mongodb node. tool part effort change default nt:frozennode node type definition longer mix:referenceable (see oak-9134). even though existing definitions modified, tool used verify existing repository would potentially violation oak-9134 - ie existing use cases nt:frozennode mix:referenceable. frozennoderefsusingindex ------------------------ command browses /oak:index/references verifies represent references nt:frozennode. used eg mongodb, consider running command secondary mongodb node, overload primary mongodb node. tool part effort change default nt:frozennode node type definition longer mix:referenceable (see oak-9134). even though existing definitions modified, tool used verify existing repository would potentially violation oak-9134 - ie existing use cases nt:frozennode mix:referenceable. history ------- see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#history). check ----- see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#check). compact ------- see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#compact). checkpoints ----------- 'checkpoints' mode used list remove repository checkpoints start mode, use: $ java -jar oak-run-*.jar checkpoints { /path/to/oak/repository | mongodb://host:port/database } [list|rm-all|rm-unreferenced|rm <checkpoint>] 'list' option (treated default nothing specified) list existing checkpoints. 'rm-all' option wipe clean 'checkpoints' node. 'rm-unreferenced' option remove checkpoints except one referenced async indexer (/:async@async). 'rm <checkpoint>' option remove specific checkpoint repository. 'info <checkpoint>' option return metadata information given checkpoint. 'set <checkpoint> <name> \[<value>\]' option set metadata property. value omitted, property removed. <a name="tika"></a> tika ---- 'tika' mode enables performing text extraction, report generation csv generation required text extraction apache jackrabbit oak 1.4-snapshot non-option arguments: tika [extract|report|generate] report : generates summary report related binary data extract : performs text extraction generate : generates csv data file based configured nodestore/blobstore option description ------ ----------- -?, -h, --help show help --data-file <file> data file csv format containing binary metadata --fds-path <file> path directory used filedatastore --nodestore nodestore detail /path/to/oak/repository | mongodb: //host:port/database --path path repository binaries would searched --pool-size <integer> size thread pool used perform text extraction. defaults number cores system --store-path <file> path directory used store extracted text content --tika-config <file> tika config file path <a name="tika-csv"></a> ### csv file format text extraction tool reads csv file contains details regarding binary files text needs extracted. entries csv file look like ``` 43844ed22d640a114134e5a25550244e8836c00c#28705,28705,"application/octet-stream",,"/content/activities/jcr:content/folderthumbnail/jcr:content" 43844ed22d640a114134e5a25550244e8836c00c#28705,28705,"application/octet-stream",,"/content/snowboarding/jcr:content/folderthumbnail/jcr:content" ... ``` columns following order 1. blobid - value [jackrabbit contentidentity](http://jackrabbit.apache.org/api/2.0/org/apache/jackrabbit/api/jackrabbitvalue.html) 2. length 3. jcr:mimetype 4. jcr:encoding 5. path parent node csv file generated programmatically. oak based repositories generated via `generate` command. ### generate csv file required `extract` `report` generated via `generate` mode java -jar oak-run.jar tika \ --fds-path /path/to/datastore \ --nodestore /path/to/segmentstore --data-file dump.csv generate command would scan nodestore create csv file. file passed `extract` command ### report tool generate summary report [csv](#tika-csv) file java -jar oak-run.jar tika \ --data-file /path/to/binary-stats.csv report report provides summary like ``` 14:39:05.402 [main] info o.a.j.o.p.tika.textextractormain - mimetype stats total size : 89.3 mb total indexed size : 3.4 mb total count : 1048 type indexed supported count size ___________________________________________________________________________________ application/epub+zip | true| true| 1 | 3.4 mb image/png | false| true| 544 | 40.2 mb image/jpeg | false| true| 444 | 34.0 mb image/tiff | false| true| 11 | 6.1 mb application/x-indesign | false| false| 1 | 3.7 mb application/octet-stream | false| false| 39 | 1.2 mb application/x-shockwave-flash | false| false| 4 | 372.2 kb application/pdf | false| false| 3 | 168.3 kb video/quicktime | false| false| 1 | 95.9 kb ``` ### extract extraction performed via following command java -cp oak-run.jar:tika-app-1.8.jar \ org.apache.jackrabbit.oak.run.main tika \ --data-file binary-stats.csv \ --store-path ./store --fds-path /path/to/datastore extract would need provide tika-app jar contains parsers. downloaded [here](https://tika.apache.org/download.html). extraction would performed multi threaded mode. extracted text would stored `store-path` upgrade ------- 'upgrade' mode allows migrate contents existing jackrabbit 2.x repository oak. run migration, use: $ java -jar oak-run-*.jar upgrade [--datastore] \ /path/to/jackrabbit/repository [/path/to/jackrabbit/repository.xml] \ { /path/to/oak/repository | mongodb://host:port/database } source repository opened given repository directory, concurrently accessed client. repository configuration read specified configuration file, `repository.xml` file within repository directory explicit configuration file given. target repository specified either local filesystem path directory (which automatically created already exist) new tarmk repository mongodb client uri specifies location mongodb database new documentmk repository. `--datastore` option (if present) prevents copying binary data data store source repository target oak repository. instead binaries copied reference, need make source data store available new oak repository. content migration automatically adjust things like node type, privilege user account settings work bit differently oak. unsupported features like same-name-siblings migrated best-effort basis, strict guarantees completeness. warnings logged content inconsistencies might encountered; content manually reviewed migration complete. note things like search index configuration work differently oak jackrabbit 2.x, need manually recreated migration. see relevant documentation details. oak server mode --------------- oak server mode starts nodestore full oak instance standard jcr plugins makes available simple http mapping defined `oak-http` component. start mode, use: $ java -jar oak-run-*.jar server [uri] [fixture] [options] arguments specified, command starts in-memory repository makes available http://localhost:8080/. specify `uri` `fixture` argument change host name port specify different repository backend. optional fixture argument allows specify repository implementation used. following fixtures currently supported: | fixture | description | |----------------------|-------------------------------------------------------| | jackrabbit(*) | jackrabbit default embedded derby bundle pm | | oak-memory | oak default in-memory storage | | oak-memoryns | oak default in-memory nodestore | | oak-mongo | oak default mongo backend | | oak-mongo-ds | oak default mongo backend datastore | | oak-mongons | oak mongo nodestore | | oak-segment-tar | oak tar backend (aka segment nodestore) | | oak-segment-tar-ds | oak tar backend datastore | jackrabbit fixture requires [oak runnable jr2 jar](#jr2) depending fixture following options available: --cache 100 - cache size (in mb) --host localhost - mongodb host --port 27101 - mongodb port --db <name> - mongodb database (default generated name) --clusterids - cluster ids mongo setup: comma separated list integers --base <file> - tar: path base file --mmap <64bit?> - tarmk memory mapping (the default 64 bit jvms) --rdbjdbcuri - jdbc url rdb persistence --rdbjdbcuser - jdbc username (defaults "") --rdbjdbcpasswd - jdbc password (defaults "") --rdbjdbctableprefix - rdb persistence: prefix table names (defaults "") examples: $ java -jar oak-run-*.jar server $ java -jar oak-run-*.jar server http://localhost:4503 oak-segment-tar --base myoak $ java -jar oak-run-*.jar server http://localhost:4502 oak-mongo --db myoak --clusterids c1,c2,c3 see documentation `oak-http` component details available functionality. cluster nodes ============= clusternodes mode displays information status cluster nodes documentmk repository. invoked like this: $ java -jar oak-run-*.jar clusternodes [options] mongodb://host:port/database (or, rdbmk instances, use "jdbc:..."). following clusternodes options (with default values) currently supported: --clusterid - documentmk clusterid (no default) --raw - list raw entries json format --verbose - verbose example output `--verbose`: ~~~ id state started leaseend left recoveryby lastrootrev oakversion 1 inactive 20190125t110237z - - - r16884ad047c-0-1 1.12-snapshot ~~~ note `recoveryby` display cluster node id node currently recovers node, `!` recovery needed. `leaseend` `left` displayed active nodes (where `left` remaining time lease update seconds; gets negative, system trouble). recovery mode ============= recovery mode used check consistency `_lastrev` fields documentmk repository. invoked like this: $ java -jar oak-run-*.jar recovery [options] mongodb://host:port/database [dryrun] --clusterid id (or, rdbmk instances, use "jdbc:..."). following recovery options currently supported: --clusterid - documentmk clusterid (no default) recovery tool perform check fix given clusterid. tool fix documents identified, unless `dryrun` keyword specified. garbage ======= garbage mode used identify blob garbage still referenced documents documentmk repository. invoked like this: $ java -jar oak-run-*.jar garbage [options] mongodb://host:port/database (or, rdbmk instances, use "jdbc:..."). following recovery options (with default values) currently supported: --clusterid - documentmk clusterid (default: 0 -> automatic) tool scan store documents blob references print report top 100 documents blob references considered garbage. rank based size referenced blobs. <a name="jr2"></a> oak runnable jar - jr 2 =============================== jar provides jackrabbit 2.x related features following runmodes currently available: * upgrade : upgrade jackrabbit 2.x repository oak. * benchmark : run benchmark tests jackrabbit 2.x repository fixture. * server : run jr2 server. oak mongo shell helpers ======================= simplify making sense data created oak mongo javascript file oak-mongo.js provided. includes [some useful function][1] navigate data mongo $ wget https://s.apache.org/oak-mongo.js $ mongo localhost/oak --shell oak-mongo.js mongodb shell version: 2.6.3 connecting to: localhost/oak type "help" help > oak.countchildren('/oak:index/') 356787 > oak.getchildstats('/oak:index') { "count" : 356788, "size" : 127743372, "simple" : "121.83 mb" } > oak.getchildstats('/') { "count" : 593191, "size" : 302005011, "simple" : "288.01 mb" } > reporting issue related oak script provides function collect important stats dumped file $ mongo localhost/oak --eval "load('/path/to/oak-mongo.js');printjson(oak.systemstats());" --quiet > oak-stats.json [1]: http://jackrabbit.apache.org/oak/docs/oak-mongo-js/oak.html oak tarmk revision diff ======================= see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#diff). oak datastore check ------------------- consistency checker datastore. also used list blob references node store blob ids available data store. use following command: $ java -jar oak-run-*.jar datastorecheck [--id] [--ref] [--consistency] \ [--store <path>|<mongo_uri>] \ [--s3ds <s3ds_config>|--fds <fds_config>|--nods] \ [--dump <path>] \ [--repohome <local_repository_root>] [--track] [--verbose] [--verboserootpath] following options available: --id - list ids data store --ref - list blob references node store --consistency - list missing blobs consistency check atleast one specified --store - path segment store mongo uri (required --ref & --consistency option above) --dump - path dump files (optional). otherwise, files dumped user tmp directory. --s3ds - path s3datastore configuration file --azureblobds - path azuredatastore configuration file --fds - path filedatastore configuration file ('path' property mandatory) --nods - check misconfigured external references data store (use instead --s3ds --fds) --repohome - path local reposity home folder. mandatory --consistency & --track options --track - whether force override tracked ids (valid --id & --consistency options) --verbose - outputs backend friendly blobids also adds node path (for segmentnodestore) referred. options would typically slower option since, requires whole repo traversal. adds sub-directories created fds changes done s3/azure stored respective container. --verboserootpath- paths backend friendly blobids required (optional). specified, --verbose uses "/" default path. example, list blobids /oak:index /content/oak:index, use --verboserootpath /oak:index,/content/oak:index (if providing one arguments option, use comma delimiter). note: command executed s3datastore java -classpath oak-run-*.jar \ org.apache.jackrabbit.oak.run.main \ datastorecheck --id --ref --consistency \ --store <path>|<mongo_uri> \ --s3ds <s3ds_config> \ --dump <dump_path> --repohome <repo_home> config files formatted according osgi configuration admin specification e.g. cat > org.apache.jackrabbit.oak.plugins.s3datastore.config << eof accesskey="xxxxxxxxx" secretkey="yyyyyy" s3bucket="bucket1" s3region="region1" eof cat > org.apache.jackrabbit.oak.plugins.filedatastore.config << eof path="/data/datastore" eof oak datastore ------------------- maintenance commands datastore: * data store garbage collection * data store consistency check $ java -jar oak-run-*.jar datastore [--check-consistency [true]|--collect-garbage [true]] \ [--s3ds <s3ds_config>|--fds <fds_config>|--azureds <s3ds_config>|fake-ds-path <ds_path>] \ [--out-dir <output_path>] \ [--work-dir <temporary_path>] \ [--max-age <seconds>] \ [--verbose] \ [--verboserootpath] \ [--usedirlisting] \ [<store_path>|<mongo_uri>] [--metrics] [--export-metrics] following operations available: --collect-garbage - execute garbage collection data store. mark phase run specify true parameter. --check-consistency - list missing blobs consistency check. mark phase run specify true parameter, case references retrieved. --dump-ref - list blob references node store --dump-id - list ids data store --get-metadata - retrieves machine readable format gc datastore metadata e.g. <repoid>|<earliestref_start_timestamp_secs>|<earliestref_mark_timestamp_secs>|[*-] * local repo id following options available: --work-dir - path use temporary files directories (optional). otherwise, files dumped user temp directory. --out-dir - path dump files (optional). otherwise, files dumped current directory. --ds-read-write - required option open datastore read-write mode. --s3ds - path s3datastore configuration file. --azureds - path azuredatastore configuration file. --fds - path filedatastore configuration file ('path' property mandatory). --fake-ds-path - check misconfigured external references data store there. --max-age - corresponds osgi 'maxblobgcageinsecs' property specifies time interval older blobs deleted. --verbose - outputs backend friendly blobids also adds node path (for segmentnodestore) referred. options would typically slower option since, requires whole repo traversal. adds sub-directories created fds id path changes done id s3/azure stored respective container. --verboserootpath - paths backend friendly blobids required (optional). specified, --verbose uses "/" default path. example, list blobids /oak:index /content/oak:index, use --verboserootpath /oak:index,/content/oak:index (if providing one arguments option, use comma delimiter). option available collect-garbage operation. specified collect-garbage, command execution throw exception. --verbosepathinclusionregex- regex used limit scan traversal specific inclusion list nodes identified regex. example , look blob refrences specific paths /b1/b2/foo, /c1/c2/foo rootpath /a use --verboserootpath /a --verbosepathinclusionregex /*/*/foo option available --verboserootpath used. --usedirlisting - use dirlisting property efficient reading lucene index files. <store_path|mongo_uri> - path tar segment store segment azure uri specified http://jackrabbit.apache.org/oak/docs/nodestore/segment/overview.html#remote-segment-stores mongo nodestore mongo uri. --metrics - metrics captured. --export-metrics - option export captured metrics. format command type;url;key1=value1,key2=value2 currently [prometheus pushgateway](https://github.com/prometheus/pushgateway) supported e.g. --export-metrics "pushgateway;localhost:9091;key1=value1,key2=value2" --sweep-only-refs-past-retention - sweep earliest references repositories past retention period govered max-age parameter. boolean (optional). defaults false. applicable --collect-garbage --check-consistency-gc - performs consistency check immediately gc. boolean (optional). defaults false. applicable --collect-garbage note: note: using --export-metrics following additional jars downloaded support prometheus pushgatway * [simpleclient_common-0.6.0.jar](http://central.maven.org/maven2/io/prometheus/simpleclient_common/0.6.0/simpleclient_common-0.6.0.jar) * [simpleclient-0.6.0.jar](http://central.maven.org/maven2/io/prometheus/simpleclient/0.6.0/simpleclient-0.6.0.jar) * [simpleclient_pushgateway-0.6.0.jar](http://central.maven.org/maven2/io/prometheus/simpleclient_pushgateway/0.6.0/simpleclient_pushgateway-0.6.0.jar) * [simpleclient_dropwizard-0.6.0.jar](http://central.maven.org/maven2/io/prometheus/simpleclient_dropwizard/0.6.0/simpleclient_dropwizard-0.6.0.jar) command executed using option is: $ java -classpath oak-run-*.jar:simpleclient_common-0.6.0.jar:simpleclient-0.6.0.jar:simpleclient_dropwizard-0.6.0.jar:simpleclient_pushgateway-0.6.0.jar \ org.apache.jackrabbit.oak.run.main \ datastore [--check-consistency [true]|--collect-garbage [true]] \ [--s3ds <s3ds_config>|--fds <fds_config>|--azureds <s3ds_config>|fake-ds-path <ds_path>] \ [--out-dir <output_path>] \ [--work-dir <temporary_path>] \ [--max-age <seconds>] \ [--verbose] \ [<store_path>|<mongo_uri>] [--metrics] [--export-metrics] data store node store configuration mandatory. config files formatted according osgi configuration admin specification e.g. cat > org.apache.jackrabbit.oak.plugins.s3datastore.config << eof accesskey="xxxxxxxxx" secretkey="yyyyyy" s3bucket="bucket1" s3region="region1" eof cat > org.apache.jackrabbit.oak.plugins.filedatastore.config << eof path="/data/datastore" eof oak datastorecopy ------------------- command concurrently download blobs azure datastore using sas token authentication. $ java -jar oak-run-*.jar datastore-copy \ [--source-repo <source_repository_url>] \ [--include-path <paths_to_include>] \ [--file-include-path <file_with_paths_to_include>] \ [--sas-token <authentication_token>] \ [--out-dir <output_path>] \ [--concurrency <max_requests>] \ [--connect-timeout <milliseconds>] \ [--read-timeout <milliseconds>] \ [--max-retries <retries>] \ [--retry-interval <milliseconds>] \ [--fail-on-error <boolean>] \ [--slow-log-threshold <milliseconds>] following options available: --source-repo - source azure repository url. --include-path - include paths copying (separated semicolon). --file-include-path - include paths specified file (separated newline). useful number blobs big avoid command prompt limitations. --sas-token - sas token access azure storage. --out-dir - path store blobs (optional). otherwise, blobs stored current directory. --concurrency - max number concurrent requests occur (the default value equal 16 multiplied number cores). --connect-timeout - sets specific timeout value, milliseconds, used opening connection single blob (default 0, timeout). --read-timeout - sets read timeout, milliseconds reading single blob (default 0, timeout). --max-retries - max number retries blob download fails (default 3). --retry-interval - initial retry interval milliseconds (default 100). --fail-on-error - true fails execution immediately first error, otherwise continues processing blobs. false, command fail blobs downloaded (default false). --slow-log-threshold - threshold log warn message blobs taking considerable time (default 10_000ms[10s]). reset cluster id --------------- resets cluster id generated internally. use following command stopping server $ java -jar oak-run-*.jar resetclusterid \ { /path/to/oak/repository | mongodb://host:port/database | jdbc:...} cluster id removed generated next server start up. oak datastore cache upgrade --------------------------- upgrades jr2 datastore cache moving files upload staging download cache datastore. $ java -classpath oak-run-*.jar datastorecacheupgrade \ --homedir <home_directory> \ --path <path> \ --movecache <true|false> \ --deletemapfile <true|false> unlock documentmk upgrade ------------------------- see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/documentmk.html#unlockupgrade). revisions --------- see [official documentation](http://jackrabbit.apache.org/oak/docs/nodestore/documentmk.html#revision-gc). export ------ dumps repository content repository path json. also dump blobs referred dumped content java -jar oak-run-*.jar export -p /path/in/repo /path/of/segmentstore -o /path/of/output/dir would create json file `nodestates.json` output dir containing nodes content json format. blobs included via `-b=true` option. enabled blob would stored `blobs` directory output dir support various options seen help `-h` $ java -jar oak-run-*.jar export -h exports nodestate json export command supports exporting nodes repository json. also provide options export blobs stored filedatastore format option description ------ ----------- -b, --blobs [boolean] export blobs also. default blobs exported (default: false) -d, --depth [integer] max depth include output (default: 2147483647) -f, --filter <string> filter expression json filter nodes properties included exported file (default: {"properties":["*", "-:childorder"]}) --filter-file <file> filter file contains filter json expression --format <string> export format 'json' 'txt' (default: json) -n, --max-child-nodes [integer] maximum number child nodes include parent (default: 2147483647) -o, --out <file> output directory exported json blobs stored (default: .) -p, --path <string> repository path export (default: /) --pretty [boolean] pretty print json output (default: true) command connect type oak repository. refer [oak run nodestore connection][1] details license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. [1]: https://jackrabbit.apache.org/oak/docs/features/oak-run-nodestore-connection-options.html # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/test/resources/org/apache/jackrabbit/oak/index/merge/removed-property.json # --- { "build": { "/oak:index/lucene-2": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "ordered": true, "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "run": { "/oak:index/lucene-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-1-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "ordered": true, "propertyindex": true }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "expected": { "/oak:index/lucene-2": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "ordered": true, "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-2-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "merges": ["/oak:index/lucene-2", "/oak:index/lucene-1-custom-1"], "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "ordered": true, "propertyindex": true }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false } } } } } } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/test/resources/org/apache/jackrabbit/oak/index/merge/conflict-new-properties.json # --- { "build": { "/oak:index/lucene-2": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "run": { "/oak:index/lucene-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-1-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath2", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "expected": "index: /oak:index/lucene-2: conflicts detected: [could merge value; path=/indexrules/nt:base/properties/sling:vanitypath property=name; ancestor=null; custom=\"sling:vanitypath2\"; product=\"sling:vanitypath\"]" } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/test/resources/org/apache/jackrabbit/oak/index/merge/missing-child.json # --- { "build": { "/oak:index/lucene-2": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "run": { "/oak:index/lucene-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-1-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "expected": { "/oak:index/lucene-2": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-2-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "merges": ["/oak:index/lucene-2", "/oak:index/lucene-1-custom-1"], "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false } } } } } } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/test/resources/org/apache/jackrabbit/oak/index/merge/merges-base.json # --- { "build": { "/oak:index/lucene-2": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "run": { "/oak:index/lucene-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-1-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "expected": { "/oak:index/lucene-2": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-2-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "merges": ["/oak:index/lucene-2", "/oak:index/lucene-1-custom-1"], "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false } } } } } } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/test/resources/org/apache/jackrabbit/oak/index/merge/merges-multi-version.json # --- { "build": { "/oak:index/lucene-3": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "run": { "/oak:index/lucene-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-1-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } } }, "expected": { "/oak:index/lucene-3": { "jcr:primarytype": "nam:oak:queryindexdefinition", ":version": 2, "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "reindex": false, "reindexcount": 1, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" } } } } }, "/oak:index/lucene-3-custom-1": { "jcr:primarytype": "nam:oak:queryindexdefinition", "includepropertytypes": ["string", "binary"], "type": "lucene", "async": "async", "merges": ["/oak:index/lucene-3", "/oak:index/lucene-1-custom-1"], "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "nt:base": { "jcr:primarytype": "nam:nt:unstructured", "includepropertytypes": ["string", "binary"], "properties": { "jcr:primarytype": "nam:nt:unstructured", "sling:alias": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:alias", "index": false }, "jcr:lastmodifiedby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:lastmodifiedby", "index": false }, "sling:resourcetype": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:resourcetype", "index": false }, "jcr:createdby": { "jcr:primarytype": "nam:nt:unstructured", "name": "str:jcr:createdby", "index": false }, "sling:vanitypath": { "jcr:primarytype": "nam:nt:unstructured", "name": "sling:vanitypath", "index": false }, "prop0": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "propertyindex": false, "analyzed": true, "useinexcerpt": true, "isregexp": true, "name": "^[^\\/]*$" }, "myco:myproperty": { "jcr:primarytype": "nam:nt:unstructured", "name": "myco:myproperty", "index": false } } } } } } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/test/resources/org/apache/jackrabbit/oak/index/merge/merge.txt # --- {"tests": [ { "ancestor": {"value": 1, "a-old": 0}, "custom": {"value": 2, "b-new": 3}, "product": {"value": 1, "c-new": 4}, "expected": {"value": 2, "b-new": 3, "c-new": 4, "merges": ["/oak:index/test-2", "/oak:index/test-1-custom-1"] } }, { "ancestor": {"o": {"a": 1}}, "custom": {"o": {"a": 2, "c": 10}}, "product": {"o": {"a": 1, "p": 20}}, "expected": {"merges": ["/oak:index/test-2", "/oak:index/test-1-custom-1"], "o": {"a": 2, "c": 10, "p": 20 }} }, { "ancestor": {"o": {"a": 1}}, "custom": {}, "product": {"o": {"a": 2}}, "expected": {"merges": ["/oak:index/test-2", "/oak:index/test-1-custom-1"],"o": {"a": 2}} }, { "ancestor": {"a": 1}, "custom": {"a": 2}, "product": {"a": 3}, "expected": "conflicts detected: [could merge value; path= property=a; ancestor=1; custom=2; product=3]" }, { "ancestor": { "jcr:primarytype": "nam:oak:queryindexdefinition", "compatversion": 2, "includedpaths": ["/content/dam"], "type": "lucene", "async": ["async", "nrt"], "evaluatepathrestrictions": true, "aggregates": { "jcr:primarytype": "nam:nt:unstructured", "dam:asset": { "jcr:primarytype": "nam:nt:unstructured", "include0": { "jcr:primarytype": "nam:nt:unstructured", "path": "str:jcr:content" } } }, "facets": { "jcr:primarytype": "nam:nt:unstructured", "topchildren": "100", "secure": "statistical" }, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "dam:asset": { "jcr:primarytype": "nam:nt:unstructured", "properties": { "jcr:primarytype": "nam:nt:unstructured", "cqtags": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "useinsuggest": true, "propertyindex": true, "useinspellcheck": true, "name": "str:jcr:content/metadata/cq:tags" } } } } } , "custom": { // changed: facets "jcr:primarytype": "nam:oak:queryindexdefinition", "compatversion": 2, "includedpaths": ["/content/dam"], "type": "lucene", "async": ["async", "nrt"], "evaluatepathrestrictions": true, "aggregates": { "jcr:primarytype": "nam:nt:unstructured", "dam:asset": { "jcr:primarytype": "nam:nt:unstructured", "include0": { "jcr:primarytype": "nam:nt:unstructured", "path": "str:jcr:content" } } }, "facets": { "jcr:primarytype": "nam:nt:unstructured", "topchildren": "200", "secure": "exact" }, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "dam:asset": { "jcr:primarytype": "nam:nt:unstructured", "properties": { "jcr:primarytype": "nam:nt:unstructured", "cqtags": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": true, "useinsuggest": true, "propertyindex": true, "useinspellcheck": true, "name": "str:jcr:content/metadata/cq:tags" } } } } } , "product": // changed: cqtags/nodescopeindex = false { "jcr:primarytype": "nam:oak:queryindexdefinition", "compatversion": 2, "includedpaths": ["/content/dam"], "type": "lucene", "async": ["async", "nrt"], "evaluatepathrestrictions": true, "aggregates": { "jcr:primarytype": "nam:nt:unstructured", "dam:asset": { "jcr:primarytype": "nam:nt:unstructured", "include0": { "jcr:primarytype": "nam:nt:unstructured", "path": "str:jcr:content" } } }, "facets": { "jcr:primarytype": "nam:nt:unstructured", "topchildren": "100", "secure": "statistical" }, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "dam:asset": { "jcr:primarytype": "nam:nt:unstructured", "properties": { "jcr:primarytype": "nam:nt:unstructured", "cqtags": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": false, "useinsuggest": true, "propertyindex": true, "useinspellcheck": true, "name": "str:jcr:content/metadata/cq:tags" } } } } } , "expected": { "jcr:primarytype": "nam:oak:queryindexdefinition", "compatversion": 2, "includedpaths": ["/content/dam"], "type": "lucene", "async": ["async", "nrt"], "evaluatepathrestrictions": true, "aggregates": { "jcr:primarytype": "nam:nt:unstructured", "dam:asset": { "jcr:primarytype": "nam:nt:unstructured", "include0": { "jcr:primarytype": "nam:nt:unstructured", "path": "str:jcr:content" } } }, "facets": { "jcr:primarytype": "nam:nt:unstructured", "topchildren": "200", "secure": "exact" }, "indexrules": { "jcr:primarytype": "nam:nt:unstructured", "dam:asset": { "jcr:primarytype": "nam:nt:unstructured", "properties": { "jcr:primarytype": "nam:nt:unstructured", "cqtags": { "jcr:primarytype": "nam:nt:unstructured", "nodescopeindex": false, "useinsuggest": true, "propertyindex": true, "useinspellcheck": true, "name": "str:jcr:content/metadata/cq:tags" } } } }, "merges": ["/oak:index/test-2", "/oak:index/test-1-custom-1"] } } ] } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/test/resources/org/apache/jackrabbit/oak/index/merge/basic.json # --- { "run": { "/oak:index/lucene": { "a": 1, "b": 10, "x": 1, "z": 2 }, "/oak:index/lucene-custom-1": { "a": 2, "b": 10, "c": 1, "x": 1 } }, "build": { "/oak:index/lucene-2": { "a": 1, "b": 11, "d": 100, "z": 2 } }, "expected": { "/oak:index/lucene-2": { "a": 1, "b": 11, "d": 100, "z": 2 }, "/oak:index/lucene-2-custom-1": { "a": 2, "b": 11, "c": 1, "d": 100, "merges": ["/oak:index/lucene-2", "/oak:index/lucene-custom-1"] } } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/test/resources/org.apache.jackrabbit.oak.index/indexstorebuildindexdef.json # --- { "/oak:index/baseffs": { "compatversion": 2, "reindexcount": 4, "reindex": false, "type": "lucene", "async": [ "async" ], "includedpaths": [ "/" ], "jcr:primarytype": "oak:queryindexdefinition", "evaluatepathrestrictions": true } } # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run/src/main/js/oak-mongo.js # --- /* * licensed apache software foundation (asf) one * contributor license agreements. see notice file * distributed work additional information * regarding copyright ownership. asf licenses file * apache license, version 2.0 (the * "license"); may use file except compliance * license. may obtain copy license * * http://www.apache.org/licenses/license-2.0 * * unless required applicable law agreed writing, * software distributed license distributed * "as is" basis, without warranties conditions * kind, either express implied. see license * specific language governing permissions limitations * license. */ /*global print, _, db, object, objectid */ /** @namespace */ var oak = (function(global){ "use strict"; var api; api = function(){ print("oak mongo helpers"); }; /** * prints ids documents nodes collection contain changes * given revisions. example: * <p> * <pre>oak.changesforrevisions({'r16d63f52ff7-0-1':1, 'r16d63f5b605-0-1':1})</pre> * <p> * caution: method scans entire nodes collection * likely impact performance application using database. * <b>not</b> run method production system! * * @memberof oak * @method oak.changesforrevisions */ api.changesforrevisions = function(revs) { revs = revs || {}; db.nodes.find({}, {_id:1,_revisions:1, _commitroot:1}).foreach(function(doc) { (var r revs) { (doc._revisions && doc._revisions[r] || doc._commitroot && doc._commitroot[r]) { print(doc._id); } } }); }; /** * collects various stats related oak usage mongo. * * @memberof oak * @method oak.systemstats * @returns {object} system stats. */ api.systemstats = function () { var result = {}; result.nodestats = db.nodes.stats(1024 * 1024); result.blobstats = db.blobs.stats(1024 * 1024); result.clusterstats = db.clusternodes.find().toarray(); result.oakindexes = db.nodes.find({'_id': /^2\:\/oak\:index\//}).toarray(); result.hostinfo = db.hostinfo(); result.rootdoc = db.nodes.findone({'_id' : '0:/'}); return result; }; /** * collects various stats related oak indexes stored /oak:index. * * @memberof oak * @method indexstats * @returns {array} index stats. */ api.indexstats = function () { var result = []; var totalcount = 0; var totalsize = 0; db.nodes.find({'_id': /^2\:\/oak\:index\//}, {_id: 1}).foreach(function (doc) { var stats = api.getchildstats(api.pathfromid(doc._id)); stats.id = doc._id; result.push(stats); totalcount += stats.count; totalsize += stats.size; }); result.push({id: "summary", count: totalcount, size: totalsize, "simple": humanfilesize(totalsize)}); return result; }; /** * determines number child node (including sub tree) * given parent node path. would faster compared * {@link getchildstats} load doc works * index only. * * note might difference db.nodes.count() * countchildren('/') split docs, intermediate docs * accounted * * @memberof oak * @method countchildren * @param {string} path path node. * @returns {number} number children, including descendant nodes. */ api.countchildren = function(path){ (path === undefined) { return 0; } else (path != "/") { path = path + "/"; } var depth = pathdepth(path); var totalcount = 0; (true) { var count = db.nodes.count({_id: pathfilter(depth++, path)}); if( count === 0){ break; } totalcount += count; } return totalcount; }; /** * determines number direct child node (excluding sub tree) * given parent node path. * * @memberof oak * @method countdirectchildren * @param {string} path path node. * @returns {number} number children, including descendant nodes. */ api.countdirectchildren = function(path){ (path === undefined) { return 0; } else (path != "/") { path = path + "/"; } var depth = pathdepth(path); var totalcount = 0; var count = db.nodes.count({_id: pathfilter(depth + 1, path)}); totalcount += count; return totalcount; }; /** * provides stats related number child nodes * given path total size taken nodes. * * @memberof oak * @method getchildstats * @param {string} path path node. * @returns {{count: number, size: number}} statistics child nodes * including descendants. */ api.getchildstats = function(path){ var count = 0; var size = 0; this.foreachchild(path, function(doc){ count++; size += object.bsonsize(doc); }); return {"count" : count, "size" : size, "simple" : humanfilesize(size)}; }; /** * performs breadth first traversal nodes given path * invokes passed function child node. * * @memberof oak * @method foreachchild * @param {string} path path node. * @param callable function called child node including * descendant nodes. mongodb document passed single * parameter function. */ api.foreachchild = function(path, callable) { (path !== undefined && path != "/") { path = path + "/"; } var depth = pathdepth(path); (true) { var cur = db.nodes.find({_id: pathfilter(depth++, path)}); if(!cur.hasnext()){ break; } cur.foreach(callable); } }; /** * returns path part given id. * * @memberof oak * @method pathfromid * @param {string} id id document nodes collection. * @returns {string} path derived id. */ api.pathfromid = function(id) { var index = id.indexof(':'); return id.substring(index + 1); }; /** * checks _lastrev given clusterid. checks starts * given path walks root node. * * @memberof oak * @method checklastrevs * @param {string} path path node check * @param {number} clusterid id oak cluster node. * @returns {object} result check. */ api.checklastrevs = function(path, clusterid) { return checkorfixlastrevs(path, clusterid, true); }; /** * fixes _lastrev given clusterid. fix starts * given path walks root node. * * @memberof oak * @method fixlastrevs * @param {string} path path node fix * @param {number} clusterid id oak cluster node. * @returns {object} result fix. */ api.fixlastrevs = function(path, clusterid) { return checkorfixlastrevs(path, clusterid, false); }; /** * returns statistics blobs collection current database. * stats include combined bson size documents. time * run command therefore heavily depends size collection. * * @memberof oak * @method blobstats * @returns {object} statistics blobs collection. */ api.blobstats = function() { var result = {}; var stats = db.blobs.stats(1024 * 1024); var bsonsize = 0; db.blobs.find().foreach(function(doc){bsonsize += object.bsonsize(doc)}); result.count = stats.count; result.size = stats.size; result.storagesize = stats.storagesize; result.bsonsize = math.round(bsonsize / (1024 * 1024)); result.indexsize = stats.totalindexsize; return result; }; /** * find dumps _id documents document size exceeds * 15mb size. also dumps progress info every 10k docs. * * ids found grepping '^id|' pattern * * > oak.dumplargedocids({db: "aem-author"}) * * @param {object} options pass optional parameters host, port, db, filename */ api.dumplargedocids = function (options) { options = options || {}; var sizelimit = options.sizelimit || 15 * 1024 * 1024; var count = 0; var ids = []; print("using size limit: " + sizelimit); db.nodes.find().foreach(function (doc) { var size = object.bsonsize(doc); (size > sizelimit) { print("id|" + doc._id); ids.push(doc._id) } (++count % 10000 === 0) { print("traversed #" + count) } }); print("number large documents : " + ids.length); //dump export command dump large docs (ids.length > 0) { var query = json.stringify({_id: {$in: ids}}); print("using following export command tweak output"); options.db = db.getname(); print(createexportcommand(query, options)); } }; /** * converts given revision string human readable version, * also prints date. * * @memberof oak * @method formatrevision * @param {string} rev revision string. * @returns {string} human readable string representation revision. */ api.formatrevision = function(rev) { return new revision(rev).toreadablestring(); }; /** * removes complete subtree rooted given path. * * @memberof oak * @method removedescendantsandself * @param {string} path path subtree remove. */ api.removedescendantsandself = function(path) { var count = 0; var depth = pathdepth(path); var id = depth + ":" + path; // current node path var result = db.nodes.deletemany({_id: id}); count += result.deletedcount; // might long path result = db.nodes.deletemany(longpathquery(path)); count += result.deletedcount; // descendants var prefix = path + "/"; depth++; (true) { result = db.nodes.deletemany(longpathfilter(depth, prefix)); count += result.deletedcount; result = db.nodes.deletemany({_id: pathfilter(depth++, prefix)}); count += result.deletedcount; (result.deletedcount === 0) { break; } } // descendants hierarchy long path (true) { result = db.nodes.deletemany(longpathfilter(depth++, prefix)); (result.deletedcount === 0) { break; } count += result.deletedcount; } return {deletedcount : count}; }; /** * helper method find nodes based regular expression. * * @memberof oak * @method regexfind * @param {string} pattern pattern match nodes. */ api.regexfind = function(pattern) { print(db.nodes.find({_id: {$regex: pattern}})); db.nodes.find({_id: {$regex: pattern}}, {_id: 1}).foreach(function(doc) { print(doc._id); }); } /** * remove complete subtree nodes matching regex pattern. * use regexfind find nodes match pattern prior deletion. * * @memberof oak * @method removedescendantsandselfmatching * @param {string} pattern pattern match nodes removed. */ api.removedescendantsandselfmatching = function(pattern) { var count = 0; db.nodes.find({_id: {$regex: pattern}}, {_id: 1}).foreach(function(doc) { print("removing " + doc._id + " children"); var result = api.removedescendantsandself(api.pathfromid(doc._id)); count += result.deletedcount; print("nremoved : " + result.deletedcount); }); print("total removed : " + count); } /** * wrapper function clean /tmpxxxxxx nodes repository. * * @memberof oak * @method removeroottempnodes */ api.removeroottempnodes = function() { this.removedescendantsandselfmatching("^1:/tmp.+"); } /** * list nodes /tmpxxxxxx. * * @memberof oak * @method listroottempnodes */ api.listroottempnodes = function() { this.regexfind("^1:/tmp.+"); } /** * list checkpoints. * * @memberof oak * @method listcheckpoints * @returns {object} checkpoints */ api.listcheckpoints = function() { var result = {}; var doc = db.settings.findone({_id:"checkpoint"}); (doc == null) { print("no checkpoint document found."); return; } var data = doc.data; var r; (r data) { var rev = new revision(r); var exp; (data[r].charat(0) == '{') { exp = json.parse(data[r])["expires"]; } else { exp = data[r]; } result[r] = {created:rev.asdate(), expires:new date(parseint(exp, 10))}; } return result; }; /** * removes checkpoints older given revision. * * @memberof oak * @method removecheckpointsolderthan * @param {string} rev checkpoints older revision removed. * @returns {object} result mongodb update. */ api.removecheckpointsolderthan = function(rev) { (rev === undefined) { print("no revision specified"); return; } var r = new revision(rev); var unset = {}; var cps = api.listcheckpoints(); var x; var num = 0; (x cps) { (r.isnewerthan(new revision(x))) { unset["data." + x] = ""; num++; } } (num > 0) { var update = {}; update["$inc"] = {_modcount: numberlong(1)}; update["$unset"] = unset; return db.settings.update({_id:"checkpoint"}, update); } else { print("no checkpoint older " + rev); } }; /** * removes collision markers document given path * clusterid. method remove collisions clusterid * inactive. * corresponds documentnodestore.cleanrootcollisions(), * part startup normal background update. * * @memberof oak * @method removecollisions * @param {string} path path document * @param {number} clusterid collision markers clusterid removed. * @param {number} [limit=1000000] maximum number collision markers remove. * @returns {object} result mongodb update. */ api.removecollisions = function(path, clusterid, limit) { (path === undefined) { print("no path specified"); return; } (clusterid === undefined) { print("no clusterid specified"); return; } (limit === undefined) { limit = 1000000; } // refuse remove clusterid marked active var clusternode = db.clusternodes.findone({_id: clusterid.tostring()}); (clusternode && clusternode.state == "active") { print("cluster node id " + clusterid + " active!"); print("can remove collisions inactive cluster node."); return; } var doc = this.findone(path); (!doc) { print("no document path: " + path); return; } var unset = {}; var r; var num = 0; (r doc._collisions) { (new revision(r).getclusterid() == clusterid) { unset["_collisions." + r] = ""; num++; } (num >= limit) { break; } } (num > 0) { var update = {}; update["$inc"] = {_modcount: numberlong(1)}; update["$unset"] = unset; print("removing " + num + " collisions clusterid " + clusterid); return db.nodes.update({_id: pathdepth(path) + ":" + path}, update); } else { print("no collisions found clusterid " + clusterid); } }; /** * removes unmerged branches document given path * clusterid. method remove unmerged branches * clusterid inactive. * corresponds documentnodestore.cleanorphanedbranches(), * part startup normal background update. * * @memberof oak * @method removeunmergedbranches * @param {string} path path document * @param {number} clusterid collision markers clusterid removed. * @param {number} [limit=1000000] maximum number unmerged branches remove. * @returns {object} result mongodb update. */ api.removeunmergedbranches = function(path, clusterid, limit) { (path === undefined) { print("no path specified"); return; } (clusterid === undefined) { print("no clusterid specified"); return; } (limit === undefined) { limit = 1000000; } // refuse remove clusterid marked active var clusternode = db.clusternodes.findone({_id: clusterid.tostring()}); (clusternode && clusternode.state == "active") { print("cluster node id " + clusterid + " active!"); print("can remove unmerged branches inactive cluster node."); return; } var doc = this.findone(path); (!doc) { print("no document path: " + path); return; } var unset = {}; var r; var num = 0; (r doc._revisions) { (new revision(r).getclusterid() != clusterid) { continue; } (doc._revisions[r].startswith("br")) { unset["_revisions." + r] = ""; unset["_bc." + r] = ""; num++; } (num >= limit) { break; } } (num > 0) { var update = {}; update["$inc"] = {_modcount: numberlong(1)}; update["$unset"] = unset; print("removing " + num + " unmerged branches clusterid " + clusterid); return db.nodes.update({_id: pathdepth(path) + ":" + path}, update); } else { print("no unmerged branches found clusterid " + clusterid); } }; /** * prtints sizes revisions property. * useful large documents quickly see property/ies affected * * @memberof oak * @method propertysizes * @param {string} path path document * @param {number} sizelargerthan show properties larger this, defaults 1 */ api.propertysizes = function(path, sizelargerthan) { (path === undefined) { print("no path specified"); return; } (sizelargerthan == undefined) { sizelargerthan = 1; } print("loading document " + path); var doc = this.findone(path); (!doc) { print("no document path: " + path); return; } var overall = object.bsonsize(doc); print("overall size : " + overall); var prop; (prop doc) { (prop == "_id") { continue; } var hasown = doc.hasownproperty(prop) var subdoc = doc[prop]; var thetype = object.prototype.tostring.call(subdoc); var isbson = (thetype == "[object bson]"); (!isbson) { //print(" (not bson, skipping " + prop + ")"); continue; } var subdocsize = object.bsonsize(subdoc); (subdocsize <= sizelargerthan) { //print(" (too small report " + prop + ")"); continue; } print(" - property " + prop + " size : " + subdocsize); } } /** * prints count property revisions clusterid * output using pseudo-revision format used elsewhere already * timestamp count 0 - mainly point clusterid belongs * useful large documents quickly see clusterid * frequent writer. * * @memberof oak * @method propertyclusteridcounts * @param {string} path path document */ api.propertyclusteridcounts = function(path) { (path === undefined) { print("no path specified"); return; } print("loading document " + path); var doc = this.findone(path); (!doc) { print("no document path: " + path); return; } var prop; var stats = {}; (prop doc) { (prop == "_id") { continue; } var subdoc = doc[prop]; var r; var clusterids = undefined; (r subdoc) { (!subdoc.hasownproperty(r)) { continue; } var v = subdoc[r]; var clusterid = "r0-0-" + new revision(r).getclusterid(); (clusterids === undefined) { clusterids = {}; } var existing = clusterids[clusterid]; (existing === undefined) { existing = 1; } else { existing++; } clusterids[clusterid] = existing; } (clusterids !== undefined) { stats[prop] = clusterids; } } // pretty format output using stringify print(json.stringify(stats, null, 8)); } /** * prtints commit value branch commits. * * @memberof oak * @method branchcommitvalues * @param {string} path path document */ api.branchcommitvalues = function(path) { (path === undefined) { print("no path specified"); return; } print("loading document " + path); var doc = this.findone(path); (!doc) { print("no document path: " + path); return; } var num = 0; var rev; var cachedroot = this.findone("/"); (rev doc._bc) { var commitvalue = this.getcommitvalue("/", rev, cachedroot) (commitvalue && commitvalue[rev] && commitvalue[rev].startswith("c-")) { print(" - branch change " + rev + " committed"); continue; } print(" - branch change " + rev + " yet committed"); num++; } print("number unmerged branch changes : " + num); } /** * approximative calculation size * object passed. typically object bson, * time cases supported. * * @memberof oak * @method sizeof * @param {object} obj object, eg bson, string, * calculate size, approximatively */ api.sizeof = function(obj) { var thetype = object.prototype.tostring.call(obj); (thetype == "[object bson]") { return object.bsonsize(obj); } else (thetype == "[object null]") { return 0; } else (thetype == "[object string]") { return obj.length; } print("sizeof: obj bson : " + thetype); return 42; } /** * prints commit value branch commits * provided path property. * plus also prints stats summary end. * useful determine details potential garbage. * * @memberof oak * @method unmergedbranchstatsforproperty * @param {string} path path document * @param {string} property property inspect */ api.unmergedbranchstatsforproperty = function(path, property) { (path === undefined) { print("no path specified"); return; } print("loading document " + path); var doc = this.findone(path); (!doc) { print("no document path: " + path); return; } var subdoc = doc[property]; var num = 0; var totalgarbage = 0; var cachedroot = this.findone("/"); var propertygarbagesizes = {}; var rev, clusterid, clusteridgarbage; (rev doc._bc) { var commitvalue = this.getcommitvalue("/", rev, cachedroot) (commitvalue && commitvalue[rev] && commitvalue[rev].startswith("c-")) { print(" - branch change " + rev + " committed"); continue; } var garbagesize = 0; var propertyvalue = subdoc[rev]; (propertyvalue === undefined) { print(" - branch change " + rev + " unmerged property " + property + " affected"); continue; } garbagesize = this.sizeof(propertyvalue); clusterid = new revision(rev).getclusterid(); print(" - branch change " + rev + " (clusterid " + clusterid + ") unmerged size " + garbagesize); num++; totalgarbage+=garbagesize; clusteridgarbage = propertygarbagesizes[clusterid]; (clusteridgarbage === undefined) { clusteridgarbage = 0; } clusteridgarbage += garbagesize; propertygarbagesizes[clusterid] = clusteridgarbage; } print("number unmerged branch changes : " + num + " total size " + totalgarbage); print("propertygarbagesizes :"); print(json.stringify(propertygarbagesizes, null, 2)); } /** * removes unmerged branch changes document given path * clusterid. method remove unmerged branch changes * clusterid inactive. * big documents write contention advisable limit * number unmerged branch changes remove one go. otherwise mongodb * may difficulties applying change document. * * @memberof oak * @method removeunmergedbranchchanges * @param {string} path path document * @param {number} clusterid unmerged branch changes clusterid removed. * @param {number} [limit=1000000] maximum number unmerged branches remove. * @returns {object} result mongodb update. */ api.removeunmergedbranchchanges = function(path, clusterid, limit) { (path === undefined) { print("no path specified"); return; } (clusterid === undefined) { print("no clusterid specified"); return; } (limit === undefined) { limit = 1000000; } // refuse remove clusterid marked active var clusternode = db.clusternodes.findone({_id: clusterid.tostring()}); (clusternode && clusternode.state == "active") { print("cluster node id " + clusterid + " active!"); print("can remove unmerged branches inactive cluster node."); return; } var doc = this.findone(path); (!doc) { print("no document path: " + path); return; } var unset = {}; var r; var num = 0; (r doc._bc) { (new revision(r).getclusterid() != clusterid) { continue; } var commitvalue = this.getcommitvalue("/", r) (commitvalue && commitvalue[r] && commitvalue[r].startswith("c-")) { print("branch change " + r + " garbage"); continue; } (var key doc) { (doc.hasownproperty(key) && doc[key][r]) { unset[key + "." + r] = ""; } } num++; (num >= limit) { break; } } (num > 0) { var update = {}; update["$inc"] = {_modcount: numberlong(1)}; update["$unset"] = unset; print("removing " + num + " unmerged branches clusterid " + clusterid); // print(json.stringify(update)); return db.nodes.update({_id: pathdepth(path) + ":" + path}, update); } else { print("no unmerged branches found clusterid " + clusterid); } }; /** * finds document given path. * * @memberof oak * @method findone * @param {string} path path document. * @param {boolean} [longpaths=false] true, extend search * look long paths. * @returns {object} document null exist. */ api.findone = function(path, longpaths) { (path === undefined) { return null; } (longpaths === undefined || longpaths === false) { return db.nodes.findone({_id: pathdepth(path) + ":" + path}); } else { var depth = pathdepth(path); return db.nodes.findone(longpathfilter(depth, path)); } }; /** * checks history previous documents given path. orphaned * references removed previous documents counted listed * run verbose set true. * * @memberof oak * @method checkhistory * @param {string} path path document. * @param {boolean} [verbose=false] true, result object contain list * dangling references previous documents. * @param {boolean} [ignorepathlen=false] whether ignore long path * still try read mongodb. * @returns {object} result check. */ api.checkhistory = function(path, verbose, ignorepathlen) { return checkorfixhistory(path, false, verbose, ignorepathlen); }; /** * lists descendant documents given path. * * @memberof oak * @method listdescendants * @param {string} path list descendants document path. */ api.listdescendants = function(path) { (path === undefined) { return null; } var numdescendants = 0; print("listing descendants "+path); this.foreachchild(path, function(achild) { print(api.pathfromid(achild._id)); numdescendants++; }); print("found " + numdescendants + " descendants"); }; /** * lists children given path. * * @memberof oak * @method listchildren * @param {string} path list children document path. */ api.listchildren = function(path) { (path === undefined) { return null; } var numchildren = 0; print("listing children "+path); var prefix; (path == "/") { prefix = path; } else { prefix = path + "/"; } db.nodes.find({_id: pathfilter(pathdepth(path) + 1, prefix)}, {_id: 1}).foreach(function(doc) { print(api.pathfromid(doc._id)); numchildren++; }); print("found " + numchildren + " children"); }; /** * checkhistory except goes descendants well! * * @memberof oak * @method checkdeephistory * @param {string} path path document. * @param {boolean} [verbose=false] true, result object contain list * dangling references previous documents. */ api.checkdeephistory = function(path, verbose) { checkorfixdeephistory(path, false, false, verbose); }; /** * preparation step scans descendants prints * 'fixhistory' need fixing 'dangling references'. * <p> * see fixhistory parameter details. * <p> * run command via something follows: * <p> * mongo &lt;dbname> -eval "load('oak-mongo.js'); oak.preparedeephistory('/');" > fix.js * * @memberof oak * @method preparedeephistory * @param {string} path path document. * @param {boolean} [verbose=false] true, result object contain list * dangling references previous documents. */ api.preparedeephistory = function(path, verbose) { checkorfixdeephistory(path, false, true, verbose); }; /** * fixhistory except goes descendants well! * * @memberof oak * @method fixdeephistory * @param {string} path path document. * @param {boolean} [verbose=false] true, result object contain list * removed references previous documents. */ api.fixdeephistory = function(path, verbose) { checkorfixdeephistory(path, true, false, verbose); }; /** * repairs history previous documents given path. orphaned * references removed previous documents cleaned listed * run verbose set true. * * @memberof oak * @method fixhistory * @param {string} path path document. * @param {boolean} [verbose=false] true, result object contain list * removed references previous documents. * @returns {object} result fix. */ api.fixhistory = function(path, verbose) { return checkorfixhistory(path, true, verbose, true); }; /** * returns commit value entry change given revision. * * @memberof oak * @method getcommitvalue * @param {string} path path document. * @param {string} revision revision change document. * @returns {object} commit entry given revision null * none. */ api.getcommitvalue = function(path, revision) { var doc = this.findone(path); (!doc) { return null; } (revision === undefined) { print("no revision specified"); } // check _revisions var entry = getrevisionentry(doc, path, revision); (entry) { return entry; } // get commit root entry = getentry(doc, "_commitroot", revision); (!entry) { var prev = findpreviousdocument(path, "_commitroot", revision); (prev) { entry = getentry(prev, "_commitroot", revision); } } (!entry) { return null; } var commitrootpath = getcommitrootpath(path, parseint(entry[revision])); doc = this.findone(commitrootpath); (!doc) { return null; } return getrevisionentry(doc, commitrootpath, revision); }; /** * prints mongoexport command export documents related given path. * related documents refer documents hierarchy split documents. * e.g. * > oak.printmongoexportcommand("/etc", {db: "aem-author"}) * * @memberof oak * @method printmongoexportcommand * @param {string} path path document. * @param {object} options pass optional parameters host, port, db, filename * @returns {string} command line used export documents using mongoexport */ api.printmongoexportcommand = function (path, options) { return createexportcommand(json.stringify(getdocandhierarchyquery(path)), options); }; /** * prints mongoexport command export oplog entries around time represented revision. * e.g. * > oak.printoplogslicecommand("r14e64620028-0-1", {db: "aem-author"}) * note, assumed time mongo instance synchronized time oak instance. that's * case, adjust revstr account difference. * * @memberof oak * @method printoplogslicecommand * @param {string} revstr revision string around oplog exported. * @param {object} options pass optional parameters host, port, db, filename, oplogtimebuffer * @returns {string} command line used export oplog entries using mongoexport */ api.printoplogslicecommand = function (revstr, options) { options = options || {}; var host = options.host || "127.0.0.1"; var port = options.port || "27017"; var db = options.db || "oak"; var filename = options.filename || "oplog.json"; var oplogtimebuffer = options.oplogtimebuffer || 10; var rev = new revision(revstr); var revtimeinsec = rev.asdate().gettime()/1000; var startoplogtime = math.floor(revtimeinsec - oplogtimebuffer); var endoplogtime = math.ceil(revtimeinsec + oplogtimebuffer); var query = '{"ns" : "' + db + '.nodes", "ts": {"$gte": timestamp(' + startoplogtime + ', 1), "$lte": timestamp(' + endoplogtime + ', 1)}}'; var mongoexportcommand = "mongoexport" + " --host " + host + " --port " + port + " --db local" + " --collection oplog.rs" + " --out " + filename + " --query '" + query + "'"; return mongoexportcommand; }; //~--------------------------------------------------< internal > var createexportcommand = function (query, options) { options = options || {}; var host = options.host || "127.0.0.1"; var port = options.port || "27017"; var db = options.db || "oak"; var filename = options.filename || "all-required-nodes.json" return "mongoexport" + " --host " + host + " --port " + port + " --db " + db + " --collection nodes" + " --out " + filename + " --query '" + query + "'"; }; var checkorfixdeephistory = function(path, fix, prepare, verbose) { (prepare) { // issuing header } else (fix) { print("fixing "+path+" plus descendants..."); } else { print("checking "+path+" plus descendants..."); } var count = 0; var ignored = 0; var affected = 0; api.foreachchild(path, function(achild) { var p = api.pathfromid(achild._id); var result = checkorfixhistory(p, fix, verbose, true); (result) { (prepare) { var numdangling = result.numprevlinksdangling; (numdangling!=0) { print("oak.fixhistory('"+p+"');"); affected++; } } else (fix) { var numdangling = result.numprevlinksremoved; (numdangling!=0) { print(" - path: "+p+" removed "+numdangling+" dangling previous revisions"); affected++; } } else { var numdangling = result.numprevlinksdangling; (numdangling!=0) { print(" - path: "+p+" "+numdangling+" dangling previous revisions"); affected++; } } (!prepare && (++count%10000==0)) { print("[checked "+count+" far ("+affected+" affected, "+ignored+" ignored) ...]"); } } else { (!prepare) { print(" - could handle "+p); } ignored++; } }); (!prepare) { print("total: "+count+" handled, "+affected+" affected, "+ignored+" ignored (path long)"); print("done."); } }; var getrevisionentry = function (doc, path, revision) { var entry = getentry(doc, "_revisions", revision); (entry) { return entry; } var prev = findpreviousdocument(path, "_revisions", revision); (prev) { entry = getentry(prev, "_revisions", revision); (entry) { return entry; } } }; var getcommitrootpath = function(path, depth) { (depth == 0) { return "/"; } var idx = 0; (depth-- > 0 && idx != -1) { idx = path.indexof("/", idx + 1); } (idx == -1) { idx = path.length; } return path.substring(0, idx); }; var getentry = function(doc, name, revision) { var result = null; (doc && doc[name] && doc[name][revision]) { result = {}; result[revision] = doc[name][revision]; } return result; }; var findpreviousdocument = function(path, name, revision) { var rev = new revision(revision); (path === undefined) { print("no path specified"); return; } (path.length > 165) { print("path long"); return; } var doc = api.findone(path); (!doc) { return null; } var result = null; foreachprev(doc, function traverse(d, high, low, height) { var highrev = new revision(high); var lowrev = new revision(low); (highrev.getclusterid() != rev.getclusterid() || lowrev.isnewerthan(rev) || rev.isnewerthan(highrev)) { return; } var id = prevdocidfor(path, high, height); var prev = db.nodes.findone({_id: id }); (prev) { (prev[name] && prev[name][revision]) { result = prev; } else { foreachprev(prev, traverse); } } }); return result; }; var checkorfixhistory = function(path, fix, verbose, ignorepathlen) { (path === undefined) { print("no path specified"); return; } (!ignorepathlen && (path.length > 165)) { print("path long"); return; } var doc = api.findone(path); (!doc) { return null; } var result = {}; result._id = pathdepth(path) + ":" + path; (verbose) { result.prevdocs = []; (fix) { result.prevlinksremoved = []; } else { result.prevlinksdangling = []; } } result.numprevdocs = 0; (fix) { result.numprevlinksremoved = 0; } else { result.numprevlinksdangling = 0; } foreachprev(doc, function traverse(d, high, low, height) { var id = prevdocidfor(path, high, height); var prev = db.nodes.findone({_id: id }); (prev) { (result.prevdocs) { result.prevdocs.push(high + "/" + height); } result.numprevdocs++; (parseint(height) > 0) { foreachprev(prev, traverse); } } else (fix) { (result.prevlinksremoved) { result.prevlinksremoved.push(high + "/" + height); } result.numprevlinksremoved++; var update = {}; update.$inc = {_modcount : numberlong(1)}; (d._sdtype == 40) { // intermediate split doc type update.$unset = {}; update.$unset["_prev." + high] = 1; } else { update.$set = {}; update.$set["_staleprev." + high] = height; } db.nodes.update({_id: d._id}, update); } else { (result.prevlinksdangling) { result.prevlinksdangling.push(high + "/" + height); } result.numprevlinksdangling++; } }); return result; }; var foreachprev = function(doc, callable) { var staleprev = doc._staleprev; (!staleprev) { staleprev = {}; } var r; (r doc._prev) { var value = doc._prev[r]; var idx = value.lastindexof("/"); var height = value.substring(idx + 1); var low = value.substring(0, idx); (staleprev[r] == height) { continue; } callable.call(this, doc, r, low, height); } }; var checkorfixlastrevs = function(path, clusterid, dryrun) { (path === undefined) { print("need least path start check/fix."); return; } var result = []; var lastrev; (path.length == 0 || path.charat(0) != '/') { return "not valid absolute path"; } (clusterid === undefined) { clusterid = 1; } (true) { var doc = db.nodes.findone({_id: pathdepth(path) + ":" + path}); (doc) { var revstr = doc._lastrev["r0-0-" + clusterid]; (revstr) { var rev = new revision(revstr); (lastrev && lastrev.isnewerthan(rev)) { (dryrun) { result.push({_id: doc._id, _lastrev: rev.tostring(), needsfix: lastrev.tostring()}); } else { var update = {$set:{}}; update.$set["_lastrev.r0-0-" + clusterid] = lastrev.tostring(); db.nodes.update({_id: doc._id}, update); result.push({_id: doc._id, _lastrev: rev.tostring(), fixed: lastrev.tostring()}); } } else { result.push({_id: doc._id, _lastrev: rev.tostring()}); lastrev = rev; } } } (path == "/") { break; } var idx = path.lastindexof("/"); (idx == 0) { path = "/"; } else { path = path.substring(0, idx); } } return result; }; var revision = function(rev) { var dashidx = rev.indexof("-"); this.rev = rev; this.timestamp = parseint(rev.substring(1, dashidx), 16); this.counter = parseint(rev.substring(dashidx + 1, rev.indexof("-", dashidx + 1)), 16); this.clusterid = parseint(rev.substring(rev.lastindexof("-") + 1), 16); }; revision.prototype.tostring = function () { return this.rev; }; revision.prototype.isnewerthan = function(other) { (this.timestamp > other.timestamp) { return true; } else (this.timestamp < other.timestamp) { return false; } else { return this.counter > other.counter; } }; revision.prototype.toreadablestring = function () { return this.rev + " (" + this.asdate().tostring() + ")" }; revision.prototype.asdate = function() { return new date(this.timestamp); }; revision.prototype.getclusterid = function() { return this.clusterid; }; var pathdepth = function(path){ if(path === '/'){ return 0; } var depth = 0; for(var = 0; < path.length; i++){ if(path.charat(i) === '/'){ depth++; } } return depth; }; var prevdocidfor = function(path, high, height) { var p = "p" + path; (p.charat(p.length - 1) != "/") { p += "/"; } p += high + "/" + height; return (pathdepth(path) + 2) + ":" + p; }; var pathfilter = function (depth, prefix){ return new regexp("^"+ depth + ":" + escapeforregexp(prefix)); }; var longpathfilter = function (depth, prefix) { var filter = {}; filter._id = new regexp("^" + depth + ":h"); filter._path = new regexp("^" + escapeforregexp(prefix)); return filter; }; var longpathquery = function (path) { var query = {}; query._id = new regexp("^" + pathdepth(path) + ":h"); query._path = path; return query; }; //http://stackoverflow.com/a/20732091/1035417 var humanfilesize = function (size) { var = math.floor( math.log(size) / math.log(1024) ); return ( size / math.pow(1024, i) ).tofixed(2) * 1 + ' ' + ['b', 'kb', 'mb', 'gb', 'tb'][i]; }; // http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript var escapeforregexp = function(s) { return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'); }; var getdocandhierarchyquery = function (path) { var paths = gethierarchypaths(path); var ins = []; var ors = []; paths.foreach(function (path) { ins.push(pathdepth(path) + ':' + path); var depth = pathdepth(path); var splitdocregex = '^' + (depth+2) + ':p' + path + (depth==0?'':'/'); ors.push({_id : {$regex : splitdocregex}}); }); ors.push({_id : {$in : ins}}); return {$or : ors} }; var gethierarchypaths = function (path) { var pathelems = path.split("/"); var lastpath = ""; var paths = ["/"]; pathelems.foreach(function (pathelem) { //avoid empty path elems like "/".split("/")->["", ""] "/a".split("/")->["", "a"] (pathelem != "") { lastpath = lastpath + "/" + pathelem; paths.push(lastpath); } }); return paths; }; return api; }(this)); # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-benchmarks-elastic/readme.md # --- oak elastic benchmark jar ========================= jar runnable contains test related run modes. following runmodes currently available: * benchmark : run benchmark tests different oak repository fixtures. see subsections details use modes. benchmark mode -------------- benchmark mode used executing various micro-benchmarks. invoked like this: $ java -jar oak-benchmarks-*.jar benchmark [options] [testcases] [fixtures] following benchmark options required : --elastichost - elastic host server (e.g. localhost) --elasticport - elastic server port (e.g 9200) --elasticscheme - eastic server scheme (e.g. http) example command benchmark execution --------------------------------------- command executes elasticpropertyfulltextseparated `benchmark elasticpropertyfulltextseparated oak-segment-tar --wikipedia path_to_wiki_dump_xml --elastichost localhost --elasticport 9200 --elasticscheme http` available benchmarks listed [elasticbenchmarkrunner](src/main/java/org/apache/jackrabbit/oak/benchmark/elasticbenchmarkrunner.java) useful jvm parameters - `-dlogback.configurationfile=<path logback-benchmark>\logback-benchmark.xml` (useful additional logging, [sample](src/main/resources/logback-benchmark.xml)) `-druntime=180`(change benchmark execution time, default 60 seconds) `-dskipwarmup=true`(skip warmup test execution) add new benchmarks know options supported, please refer readme oak-benchmarks [0] [[0]oak-benchmarks readme](../oak-benchmarks/readme.md) license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/multiple-node-type-simple-split-with-parent.json # --- /a|{"jcr:primarytype":"nam:no-split-1"} /a/a|{"jcr:primarytype":"nam:split"} /b|{"jcr:primarytype":"nam:no-split-2"} /b/a|{"jcr:primarytype":"nam:split"} /c|{"jcr:primarytype":"nam:split"} /c/a|{"jcr:primarytype":"nam:split"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/simple-split-with-nested-parent.json # --- /a|{"jcr:primarytype":"nam:no-split"} /a/a|{"jcr:primarytype":"nam:split"} /b|{"jcr:primarytype":"nam:no-split"} /b/a|{"jcr:primarytype":"nam:split"} /b/c/a|{"jcr:primarytype":"nam:no-split"} /b/c/b|{"jcr:primarytype":"nam:split"} /c|{"jcr:primarytype":"nam:split"} /c/a|{"jcr:primarytype":"nam:no-split"} /c/a/a|{"jcr:primarytype":"nam:split"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/simple-split-with-parent.json # --- /a|{"jcr:primarytype":"nam:no-split"} /a/a|{"jcr:primarytype":"nam:split"} /a/b|{"jcr:primarytype":"nam:split"} /a/c|{"jcr:primarytype":"nam:split"} /b|{"jcr:primarytype":"nam:no-split"} /b/a|{"jcr:primarytype":"nam:split"} /b/b|{"jcr:primarytype":"nam:split"} /b/c|{"jcr:primarytype":"nam:split"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/simple-split.json # --- /a|{"jcr:primarytype":"nam:split"} /b|{"jcr:primarytype":"nam:split"} /c|{"jcr:primarytype":"nam:split"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/complex-split.json # --- /|{"jcr:primarytype":"nam:rep:root"} /bin|{"jcr:primarytype":"nam:nt:folder"} /conf|{"jcr:primarytype":"nam:sling:folder"} /conf/global|{"jcr:primarytype":"nam:sling:folder"} /conf/global/frontend|{"jcr:primarytype":"nam:sling:orderedfolder"} /conf/global/frontend/deployments|{"jcr:primarytype":"nam:sling:orderedfolder"} /conf/global/settings|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/cloudconfigs|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/dam|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/dam/assets-configurations|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/dam/assets-configurations/com.adobe.cq.assetcompute.impl.profile.watermarkingprofileserviceimpl|{"jcr:primarytype":"nam:cq:page"} /conf/global/settings/dam/assets-configurations/com.adobe.cq.assetcompute.impl.profile.watermarkingprofileserviceimpl/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /conf/global/settings/dam/import|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/dam/import/azure-jun|{"jcr:primarytype":"nam:cq:page"} /conf/global/settings/dam/import/azure-jun/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /conf/global/settings/dam/processing|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/dam/processing/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /conf/global/settings/dam/processing/profile-jun|{"jcr:primarytype":"nam:cq:page"} /conf/global/settings/dam/processing/profile-jun/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /conf/global/settings/dam/processing/profile-jun/watermark|{"jcr:primarytype":"nam:cq:page"} /conf/global/settings/dam/processing/profile-jun/watermark/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /conf/global/settings/dam/remotedam|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/dam/remotedam/localsites|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/inbox|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/inbox/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /conf/global/settings/inbox/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /conf/global/settings/inbox/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /conf/global/settings/stock|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/stock/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /conf/global/settings/stock/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /conf/global/settings/workflow|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/workflow/launcher|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/workflow/launcher/config|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/workflow/models|{"jcr:primarytype":"nam:sling:folder"} /conf/global/settings/workflow/models/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /conf/global/settings/workflow/models/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /conf/global/settings/workflow/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /conf/global/settings/workflow/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /conf/global/site-templates|{"jcr:primarytype":"nam:sling:folder"} /content|{"jcr:primarytype":"nam:sling:orderedfolder"} /content/campaigns|{"jcr:primarytype":"nam:sling:folder"} /content/campaigns/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/campaigns/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/campaigns/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /content/campaigns/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/cq:graphql|{"jcr:primarytype":"nam:nt:folder"} /content/cq:tags|{"jcr:primarytype":"nam:sling:folder"} /content/cq:tags/default|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/experience-fragments|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/experience-fragments/variation|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/experience-fragments/variation/facebook|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/experience-fragments/variation/pinterest|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/experience-fragments/variation/screens|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/experience-fragments/variation/web|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties/orientation|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties/orientation/landscape|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties/orientation/portrait|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties/orientation/square|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties/style|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties/style/color|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties/style/monochrome|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/properties/style/monochrome/grayscale|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/cq:tags/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /content/cq:tags/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/cq:tags/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /content/cq:tags/rep:policy/allow3|{"jcr:primarytype":"nam:rep:grantace"} /content/cq:tags/rep:policy/allow3/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /content/cq:tags/rep:policy/allow4|{"jcr:primarytype":"nam:rep:grantace"} /content/cq:tags/rep:policy/allow5|{"jcr:primarytype":"nam:rep:grantace"} /content/cq:tags/workflow|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/adobe-launch|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/dam|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/projects|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/projects/wcm|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/projects/wcm/email|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/projects/wcm/landingpage|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/projects/wcm/launch|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/system|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/wcm|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/wcm/translatelanguagecopy|{"jcr:primarytype":"nam:cq:tag"} /content/cq:tags/workflow/wcm/translation|{"jcr:primarytype":"nam:cq:tag"} /content/dam|{"jcr:primarytype":"nam:sling:folder"} /content/dam/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/test|{"jcr:primarytype":"nam:sling:folder"} /content/dam/test/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/appdata|{"jcr:primarytype":"nam:sling:folder"} /content/dam/appdata/metadataforms|{"jcr:primarytype":"nam:sling:folder"} /content/dam/appdata/metadataforms/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/appdata/metadataforms/sourcing form|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/appdata/metadataforms/sourcing form/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/appdata/metadataforms/sourcing form/jcr:content/tabs|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/appdata/metadataforms/sourcing form/jcr:content/tabs/li-0|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/appdata/metadataforms/sourcing form/jcr:content/tabs/li-0/fields|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/appdata/metadataforms/sourcing form/jcr:content/tabs/li-0/fields/li-0|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/assetinsights|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/assetinsights/embedcode|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/assetinsights/pagetracker|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/p|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/p/pbu_rblj8mx0y3fmd5fs|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/p/pbu_rblj8mx0y3fmd5fs/lightbox|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/p/pbu_rblj8mx0y3fmd5fs/lightbox/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/collections/p/pbu_rblj8mx0y3fmd5fs/lightbox/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/p/pbu_rblj8mx0y3fmd5fs/lightbox/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /content/dam/collections/p/pbu_rblj8mx0y3fmd5fs/lightbox/sling:members|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/zjun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/zjun/oxynwsdw3rs98p-ah4qi|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/zjun/oxynwsdw3rs98p-ah4qi/lightbox|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/zjun/oxynwsdw3rs98p-ah4qi/lightbox/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/collections/ims/zjun/oxynwsdw3rs98p-ah4qi/lightbox/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/ims/zjun/oxynwsdw3rs98p-ah4qi/lightbox/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /content/dam/collections/ims/zjun/oxynwsdw3rs98p-ah4qi/lightbox/sling:members|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/borl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/borl/mmbpqjkfrff-dgsloi2a|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/borl/mmbpqjkfrff-dgsloi2a/lightbox|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/borl/mmbpqjkfrff-dgsloi2a/lightbox/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/collections/ims/borl/mmbpqjkfrff-dgsloi2a/lightbox/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/ims/borl/mmbpqjkfrff-dgsloi2a/lightbox/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /content/dam/collections/ims/borl/mmbpqjkfrff-dgsloi2a/lightbox/sling:members|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/bupsq043ril6vj92xpjp|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/bupsq043ril6vj92xpjp/lightbox|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/bupsq043ril6vj92xpjp/lightbox/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/collections/ims/klco/bupsq043ril6vj92xpjp/lightbox/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/ims/klco/bupsq043ril6vj92xpjp/lightbox/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /content/dam/collections/ims/klco/bupsq043ril6vj92xpjp/lightbox/sling:members|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/icpikk8ofumrqxpalzxd|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/icpikk8ofumrqxpalzxd/lightbox|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/icpikk8ofumrqxpalzxd/lightbox/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/collections/ims/klco/icpikk8ofumrqxpalzxd/lightbox/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/ims/klco/icpikk8ofumrqxpalzxd/lightbox/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /content/dam/collections/ims/klco/icpikk8ofumrqxpalzxd/lightbox/sling:members|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/o0u88p76xbtl1ab65qzg|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/o0u88p76xbtl1ab65qzg/lightbox|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/ims/klco/o0u88p76xbtl1ab65qzg/lightbox/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/collections/ims/klco/o0u88p76xbtl1ab65qzg/lightbox/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/ims/klco/o0u88p76xbtl1ab65qzg/lightbox/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /content/dam/collections/ims/klco/o0u88p76xbtl1ab65qzg/lightbox/sling:members|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/public|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/collections/public/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/collections/public/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/collections/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/rep:policy/allow3|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/collections/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /content/dam/collections/rep:policy/deny/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /content/dam/dam:batch|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/projects|{"jcr:primarytype":"nam:sling:folder"} /content/dam/projects/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/projects/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/fog|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/forest|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/green|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/hill|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/mist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/mountain|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/mountains|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/outdoors|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/peak|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/scenics|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/snow|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/trees|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/view|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/volcano|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/ren-ran-hg5qx-gxv5a-unsplash.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /content/dam/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/rep:policy/allow3|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/rep:policy/allow4|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/rep:policy/allow5|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/rep:policy/allow6|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/rep:policy/allow7|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/rep:policy/allow8|{"jcr:primarytype":"nam:rep:grantace"} /content/dam/skylineassetsjun|{"jcr:primarytype":"nam:sling:orderedfolder"} /content/dam/skylineassetsjun/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/jcr:content/folderthumbnail|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/jcr:content/folderthumbnail/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/asset.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/skylineassetsjun/asset.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/metadata/xmpmm:derivedfrom|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/metadata/xmpmm:history|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/metadata/xmpmm:history/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /content/dam/skylineassetsjun/asset.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt|{"jcr:primarytype":"nam:dam:asset"} /content/dam/skylineassetsjun/skycli.txt/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/aem|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/blob_mongo|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/blob_mongo_segment|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/bookmark|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/bookmark_history|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/context|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/exec|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/history|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/history_ls_show|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/invalidate_blob|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/invalidate_blob_mongo|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/job|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/job_secret|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/job_secret_aem|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/logs|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/logs_exec|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/mongo|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/mongo_segment|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/release|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/release_use_bookmark|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/secret_aem|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/segment|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/show|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/show_tree|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/tree|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/update|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/url|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/url_logs|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/metadata/predictedtags/url_logs_exec|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.text.txt/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.text.txt/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/skylineassetsjun/skycli.txt/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/trainingmodels|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346|{"jcr:primarytype":"nam:sling:folder"} /content/dam/upload-1649463346/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/jcr:content/folderthumbnail|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/jcr:content/folderthumbnail/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 10.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 11.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 12.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 13.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 14.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 2.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 3.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 4.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 5.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 6.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 7.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 8.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy 9.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833 copy.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/beach|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/boulders|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/breakwater|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/cloud|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/coast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/coastline|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/horizon|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/lake|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/ocean|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/pebble|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/rock|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/rocks|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/sea|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/shore|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/stone|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/stones|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/travel|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/predictedtags/water|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_0833.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 10.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 11.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 12.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 13.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 14.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 2.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 3.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 4.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 5.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 6.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 7.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 8.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy 9.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044 copy.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/innocence|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1044.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 10.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 11.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 12.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 13.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 14.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 2.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 3.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 4.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 5.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 6.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 7.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 8.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy 9.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048 copy.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/bed|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/care|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/daughter|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/infant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/portrait|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1048.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 10.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 11.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 12.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 13.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 14.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 2.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 3.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 4.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 5.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 6.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 7.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 8.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy 9.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248 copy.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/computer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/internet|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/isolated|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/laptop|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/notebook|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/technology|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1248.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 10.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 11.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 12.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 13.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 14.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 2.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 3.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 4.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 5.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 6.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 7.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 8.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy 9.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252 copy.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/happiness|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/happy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/human|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/one|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/person|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1252.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 10.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 11.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 12.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 13.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 14.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 2.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 3.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 4.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 5.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 6.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 7.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 8.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy 9.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255 copy.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/adorable|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/cheerful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/children|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/education|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/fun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/learning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/play|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/playing|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/small|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/smiling|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/toddler|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/toy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/predictedtags/white|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/mwg-rs:regions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:appliedtodimensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:area|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/metadata/mwg-rs:regions/mwg-rs:regionlist/1/mwg-rs:extensions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1255.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 10.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 11.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 12.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 13.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 14.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 2.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 3.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 4.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 5.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 6.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 7.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 8.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy 9.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308 copy.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/attractive|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/baby|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/beautiful|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/bowl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/boy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/breakfast|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/caucasian|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/child|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/childhood|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/cute|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/eat|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/eating|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/face|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/female|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/food|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/girl|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/healthy|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/home|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/kid|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/kitchen|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/little|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/male|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/morning|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/people|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/predictedtags/young|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_1308.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/autumn|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/branch|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/branches|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/fall|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/forest|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/garden|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/grass|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/green|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/leaf|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/leaves|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/park|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/plant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/road|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/spring|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/sun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/tree|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/trees|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/predictedtags/yellow|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 10.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/autumn|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/branch|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/branches|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/fall|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/forest|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/garden|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/grass|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/green|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/leaf|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/leaves|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/park|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/plant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/road|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/spring|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/sun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/tree|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/trees|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/predictedtags/yellow|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 11.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/autumn|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/branch|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/branches|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/fall|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/forest|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/garden|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/grass|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/green|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/leaf|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/leaves|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/park|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/plant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/road|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/spring|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/sun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/tree|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/trees|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/predictedtags/yellow|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 12.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg|{"jcr:primarytype":"nam:dam:asset"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content|{"jcr:primarytype":"nam:dam:assetcontent"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/imagefeatures|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/autumn|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/background|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/blue|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/branch|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/branches|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/clouds|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/fall|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/forest|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/garden|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/grass|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/green|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/landscape|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/leaf|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/leaves|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/nature|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/park|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/plant|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/road|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/sky|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/spring|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/summer|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/sun|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/tree|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/trees|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/predictedtags/yellow|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/metadata/exif:flash|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions|{"jcr:primarytype":"nam:nt:folder"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/original|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/original/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.140.100.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.319.319.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.thumbnail.48.48.png/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.web.1280.1280.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cq5dam.zoom.2048.2048.jpeg/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.features.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.machine.metadata.tags.json/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml|{"jcr:primarytype":"nam:nt:file"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content|{"jcr:primarytype":"nam:oak:resource"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/renditions/cqdam.metadata.xml/jcr:content/metadata|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/dam:failedrenditions|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/dam:failedrenditions/cqdam.text.txt|{"jcr:primarytype":"nam:nt:unstructured"} /content/dam/upload-1649463346/img_2485 copy 13.jpg/jcr:content/related|{"jcr:primarytype":"nam:nt:unstructured"} /etc|{"jcr:primarytype":"nam:sling:folder"} /etc/blueprints|{"jcr:primarytype":"nam:sling:folder"} /etc/blueprints/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/blueprints/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/blueprints/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/clientcontext|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/campaign|{"jcr:primarytype":"nam:nt:folder"} /etc/clientcontext/campaign/content|{"jcr:primarytype":"nam:cq:page"} /etc/clientcontext/campaign/content/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/clientcontext/campaign/content/jcr:content/stores|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/content/jcr:content/stores/campaign|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/content/jcr:content/stores/campaignseed|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/content/jcr:content/stores/profiledata|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/contextstores|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/campaign/contextstores/activitystream|{"jcr:primarytype":"nam:cq:page"} /etc/clientcontext/campaign/contextstores/activitystream/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/contextstores/audiencemanager|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/campaign/contextstores/audiencemanager/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/contextstores/fbinterestsdata|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/campaign/contextstores/fbinterestsdata/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/contextstores/fbprofiledata|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/campaign/contextstores/fbprofiledata/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/contextstores/profiledata|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/campaign/contextstores/profiledata/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/contextstores/profiledata/resources|{"jcr:primarytype":"nam:nt:folder"} /etc/clientcontext/campaign/contextstores/profiledata/resources/birthday_cake.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/campaign/contextstores/profiledata/resources/birthday_cake.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/campaign/contextstores/socialgraph|{"jcr:primarytype":"nam:cq:page"} /etc/clientcontext/campaign/contextstores/socialgraph/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/campaign/contextstores/surferinfo|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/campaign/contextstores/surferinfo/resources|{"jcr:primarytype":"nam:nt:folder"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/chrome.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/chrome.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/firefox.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/firefox.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/ie.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/ie.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/opera.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/opera.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/safari.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/safari.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/ipad.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/ipad.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/iphone.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/campaign/contextstores/surferinfo/resources/iphone.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/campaign/contextstores/twitterprofiledata|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/campaign/contextstores/twitterprofiledata/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default|{"jcr:primarytype":"nam:nt:folder"} /etc/clientcontext/default/content|{"jcr:primarytype":"nam:cq:page"} /etc/clientcontext/default/content/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/clientcontext/default/content/jcr:content/stores|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/content/jcr:content/stores/campaign|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/content/jcr:content/stores/cart|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/content/jcr:content/stores/genericstorerenderer_0|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/content/jcr:content/stores/geolocation_0|{"thumbnail":"http://maps.googleapis.com/maps/api/staticmap?center=\\${/geolocation/latitude},\\${/geolocation/longitude}&zoom=4&size=80x80&sensor=false&markers=size:tiny|color:red|\\${/geolocation/latitude},\\${/geolocation/longitude}","jcr:created":"dat:2011-09-12t11:36:25.521+02:00","jcr:lastmodifiedby":"admin","jcr:createdby":"admin","sling:resourcetype":"cq/personalization/components/contextstores/geolocation","jcr:lastmodified":"dat:2011-10-13t17:21:20.440+02:00","jcr:primarytype":"nam:nt:unstructured","properties":["address/countrycode","address/country","address/region","latitude","longitude"]} /etc/clientcontext/default/content/jcr:content/stores/profiledata|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/content/jcr:content/stores/resolvedsegments|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/content/jcr:content/stores/socialgraph|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/content/jcr:content/stores/tagcloud|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/contextstores|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/default/contextstores/activitystream|{"jcr:primarytype":"nam:cq:page"} /etc/clientcontext/default/contextstores/activitystream/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/contextstores/fbinterestsdata|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/default/contextstores/fbinterestsdata/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/contextstores/fbprofiledata|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/default/contextstores/fbprofiledata/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/contextstores/profiledata|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/default/contextstores/profiledata/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/contextstores/profiledata/resources|{"jcr:primarytype":"nam:nt:folder"} /etc/clientcontext/default/contextstores/profiledata/resources/birthday_cake.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/profiledata/resources/birthday_cake.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/socialgraph|{"jcr:primarytype":"nam:cq:page"} /etc/clientcontext/default/contextstores/socialgraph/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/default/contextstores/surferinfo|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/default/contextstores/surferinfo/resources|{"jcr:primarytype":"nam:nt:folder"} /etc/clientcontext/default/contextstores/surferinfo/resources/chrome.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/surferinfo/resources/chrome.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/surferinfo/resources/edge.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/surferinfo/resources/edge.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/surferinfo/resources/firefox.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/surferinfo/resources/firefox.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/surferinfo/resources/ie.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/surferinfo/resources/ie.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/surferinfo/resources/opera.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/surferinfo/resources/opera.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/surferinfo/resources/safari.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/surferinfo/resources/safari.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/surferinfo/resources/ipad.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/surferinfo/resources/ipad.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/surferinfo/resources/iphone.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/default/contextstores/surferinfo/resources/iphone.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/default/contextstores/twitterprofiledata|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/default/contextstores/twitterprofiledata/loader|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/legacy/config|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/legacy/config/eventdata|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/eventdata/edit|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/eventdata/edit/newpropertynamefield|{"jcr:primarytype":"nam:cq:widget"} /etc/clientcontext/legacy/config/eventdata/edit/newpropertynamefield/options|{"jcr:primarytype":"nam:cq:widgetcollection"} /etc/clientcontext/legacy/config/eventdata/edit/newpropertynamefield/options/o1|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/eventdata/edit/newpropertynamefield/options/o2|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/eventdata/edit/newpropertynamefield/options/o3|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/eventdata/edit/newpropertynamefield/options/o4|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/eventdata/edit/newpropertynamefield/options/o5|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/eventdata/store|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/eventdata/ui|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/mouseposition|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/mouseposition/store|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/pagedata|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/pagedata/edit|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/pagedata/store|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/pagedata/ui|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile/edit|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile/edit/newpropertynamefield|{"jcr:primarytype":"nam:cq:widget"} /etc/clientcontext/legacy/config/profile/edit/newpropertynamefield/options|{"jcr:primarytype":"nam:cq:widgetcollection"} /etc/clientcontext/legacy/config/profile/edit/newpropertynamefield/options/o1|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile/edit/newpropertynamefield/options/o2|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile/edit/newpropertynamefield/options/o3|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile/edit/newpropertynamefield/options/o4|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile/edit/newpropertynamefield/options/o5|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile/store|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/profile/ui|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/segments|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/segments/ui|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/surferinfo|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/surferinfo/edit|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/surferinfo/store|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/surferinfo/ui|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/tagcloud|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/tagcloud/edit|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/legacy/config/tagcloud/edit/newpropertynamefield|{"jcr:primarytype":"nam:cq:widget"} /etc/clientcontext/legacy/config/tagcloud/ui|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/clientcontext/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/clientcontext/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/clientcontext/shared|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/shared/thumbnail|{"jcr:primarytype":"nam:sling:folder"} /etc/clientcontext/shared/thumbnail/content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/clientcontext/shared/thumbnail/resources|{"jcr:primarytype":"nam:nt:folder"} /etc/clientcontext/shared/thumbnail/resources/mask.gif|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/shared/thumbnail/resources/mask.gif/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientcontext/shared/thumbnail/resources/mask.png|{"jcr:primarytype":"nam:nt:file"} /etc/clientcontext/shared/thumbnail/resources/mask.png/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/clientlibs|{"jcr:primarytype":"nam:sling:folder"} /etc/clientlibs/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/clientlibs/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices|{"jcr:primarytype":"nam:sling:folder"} /etc/cloudservices/brightedge|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/brightedge/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/campaign|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/campaign/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/campaign/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/campaign/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/campaign/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/dmscene7|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/dmscene7/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/dmscene7/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/dmscene7/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/dmscene7/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/dmscene7/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/dmscene7/rep:policy/allow3|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/dmscene7/rep:policy/allow4|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/dmscene7/statistics|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/dmscene7/statistics/assets|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/dynamicmediaservices|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/dynamicmediaservices/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/dynamicmediaservices/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/dynamicmediaservices/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/dynamicmediaservices/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/dynamicmediaservices/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/marketingcloud|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/marketingcloud/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/mediaportal|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/mediaportal/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/proxy|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/proxy/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/proxy/ids|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/proxy/ids/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow1/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow2/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/rep:policy/allow3|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow4|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow5|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow5/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/rep:policy/allow6|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow6/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/rep:policy/allow7|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow7/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/rep:policy/allow8|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/rep:policy/allow8/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/rep:policy/allow9|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/scene7|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/scene7/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/scene7/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/scene7/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/scene7/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/scene7/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/scene7/rep:policy/allow3|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/scene7/rep:policy/allow4|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/scene7/statistics|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/scene7/statistics/assets|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/sitecatalyst|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/sitecatalyst/jcr:content|{"serviceurl":"https://www.adobe.com/marketing-cloud/web-analytics.html","description":"adobe analytics provides marketers actionable, real-time web analytics intelligence digital strategies marketing initiatives.","sling:resourcetype":"cq/cloudserviceconfigs/components/servicepage","jcr:title":"adobe analytics","pagereporturl":"https://sitecatalyst.omniture.com/sc15/reports/index.html?a=report.standard&switch_accnt={reportsuite}&r=report.pagesummary&sssession={session}&jpj={jpj}&rp=newpage|{pageid};page_type|;","inclusionrank":200,"selectablechildren":["/libs/cq/analytics/templates/framework"],"connectedwhen":"username","cq:lastmodifiedby":"admin","componentreference":"cq/analytics/components/sitecatalyst","cq:template":"/libs/cq/cloudserviceconfigs/templates/servicepage","jcr:created":"dat:2021-05-27t19:06:03.772z","serviceadminurl":"https://my.omniture.com","descriptionextended":"adobe analytics helps marketers quickly identify profitable paths website, segment traffic spot high-value web visitors, determine visitors navigating away site, identify critical success metrics online marketing campaigns. adobe analytics part adobe marketing cloud applications online business optimizations.","jcr:createdby":"admin","summarypanelpath":"/libs/cq/analytics/components/sitecatalystpage/panel","jcr:description":"actionable web analytics","cq:lastmodified":"dat:2011-09-26t13:32:11.677+02:00","thumbnailpath":"/libs/cq/analytics/templates/sitecatalyst/thumbnail.png","jcr:primarytype":"nam:cq:pagecontent","ranking":"20","category":"marketingcloud"} /etc/cloudservices/sitecatalyst/defaults|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/sitecatalyst/defaults/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/sitecatalyst/defaults/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/sitecatalyst/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/sitecatalyst/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/sitecatalyst/rep:policy/allow/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/sitecatalyst/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/sitecatalyst/rep:policy/allow1/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/sitecatalyst/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/sitecatalyst/rep:policy/allow3|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/sitecatalyst/statistics|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/sitecatalyst/statistics/configurations|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/sitecatalyst/statistics/frameworks|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/smarttagging|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/smarttagging/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/testandtarget|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/testandtarget/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/testandtarget/defaults|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/testandtarget/defaults/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/testandtarget/defaults/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/testandtarget/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/testandtarget/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/testandtarget/rep:policy/allow/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/cloudservices/testandtarget/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/testandtarget/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudservices/testandtarget/statistics|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/testandtarget/statistics/mbox|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/testandtarget/statistics/offer|{"jcr:primarytype":"nam:nt:unstructured"} /etc/cloudservices/youtube|{"jcr:primarytype":"nam:cq:page"} /etc/cloudservices/youtube/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/cloudservices/youtube/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudservices/youtube/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/cloudsettings|{"jcr:primarytype":"nam:sling:orderedfolder"} /etc/cloudsettings/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/cloudsettings/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/contentsync|{"jcr:primarytype":"nam:sling:folder"} /etc/contentsync/templates|{"jcr:primarytype":"nam:sling:folder"} /etc/contentsync/templates/default|{"jcr:primarytype":"nam:nt:unstructured"} /etc/contentsync/templates/default/defaultdesign|{"jcr:primarytype":"nam:nt:unstructured"} /etc/contentsync/templates/default/design|{"jcr:primarytype":"nam:nt:unstructured"} /etc/contentsync/templates/default/foundation.clientlibrarymanager.js|{"jcr:primarytype":"nam:nt:unstructured"} /etc/contentsync/templates/default/page|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/creativeratingconfig|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/dynamicmediaconfig|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/dynamicmediaconfig/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/dynamicmediaconfig/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/dynamicmediaconfig/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/imageserver|{"jcr:primarytype":"nam:nt:folder"} /etc/dam/imageserver/configuration|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/imageserver/configuration/jcr:content|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/imageserver/configuration/jcr:content/settings|{"jcr:primarytype":"nam:nt:folder"} /etc/dam/imageserver/configuration/jcr:content/settings/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/imageserver/configuration/jcr:content/settings/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/imageserver/macros|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/imageserver/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/imageserver/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/imageserver/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/metadataeditor|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/metadataeditor/mimetypemappings|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/avi|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/carouselset|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/dmvideo|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/flv|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/imageset|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/jpeg|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/mediaset|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/mov|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/mpeg4|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/pdf|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/metadataeditor/mimetypemappings/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/metadataeditor/mimetypemappings/spinset|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/tiff|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/mimetypemappings/wmv|{"jcr:primarytype":"nam:nt:unstructured"} /etc/dam/metadataeditor/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/metadataeditor/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/presets|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/presets/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/presets/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/presets/viewer|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/presets/viewer/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/presets/viewer/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/presets/viewer/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/video|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/video/dynamicmedia|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/video/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dam/video/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/video/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/dam/workflow|{"jcr:primarytype":"nam:nt:folder"} /etc/dam/workflow/notification|{"jcr:primarytype":"nam:nt:folder"} /etc/dam/workflow/notification/email|{"jcr:primarytype":"nam:nt:folder"} /etc/dam/workflow/notification/email/publishyoutube|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/workflow/notification/email/publishyoutube/complete|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/workflow/notification/email/publishyoutube/complete/en.txt|{"jcr:primarytype":"nam:nt:file"} /etc/dam/workflow/notification/email/publishyoutube/complete/en.txt/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/dam/workflow/notification/email/publishyoutube/failure|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/workflow/notification/email/publishyoutube/failure/en.txt|{"jcr:primarytype":"nam:nt:file"} /etc/dam/workflow/notification/email/publishyoutube/failure/en.txt/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/dam/workflow/notification/email/publishyoutube/start|{"jcr:primarytype":"nam:sling:folder"} /etc/dam/workflow/notification/email/publishyoutube/start/en.txt|{"jcr:primarytype":"nam:nt:file"} /etc/dam/workflow/notification/email/publishyoutube/start/en.txt/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/dashboards|{"jcr:primarytype":"nam:sling:folder"} /etc/dashboards/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/dashboards/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/dashboards/users|{"jcr:primarytype":"nam:sling:folder"} /etc/docs|{"jcr:primarytype":"nam:cq:page"} /etc/docs/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/docs/jcr:content/par|{"jcr:primarytype":"nam:nt:unstructured"} /etc/docs/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/docs/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/forms|{"jcr:primarytype":"nam:sling:folder"} /etc/importers|{"jcr:primarytype":"nam:sling:folder"} /etc/importers/bulkeditor|{"jcr:primarytype":"nam:sling:folder"} /etc/importers/bulkeditor/export|{"jcr:primarytype":"nam:nt:unstructured"} /etc/importers/bulkeditor/import|{"jcr:primarytype":"nam:nt:unstructured"} /etc/importers/bulkeditor/query|{"jcr:primarytype":"nam:nt:unstructured"} /etc/importers/bulkeditor/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/importers/bulkeditor/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/importers/bulkeditor/save|{"jcr:primarytype":"nam:nt:unstructured"} /etc/importers/offline|{"jcr:primarytype":"nam:sling:folder"} /etc/importers/offline/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/importers/offline/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/importers/polling|{"jcr:primarytype":"nam:sling:folder"} /etc/importers/polling/list|{"jcr:primarytype":"nam:nt:unstructured"} /etc/importers/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/importers/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/importers/rep:policy/allow/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/importers/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/importers/rep:policy/allow1/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/key|{"jcr:primarytype":"nam:sling:folder"} /etc/linkchecker|{"jcr:primarytype":"nam:sling:folder"} /etc/linkchecker/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/linkchecker/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/map|{"jcr:primarytype":"nam:sling:folder"} /etc/map/http|{"jcr:primarytype":"nam:sling:folder"} /etc/mobile|{"jcr:primarytype":"nam:sling:folder"} /etc/mobile/groups|{"jcr:primarytype":"nam:sling:folder"} /etc/mobile/groups/feature|{"jcr:primarytype":"nam:cq:page"} /etc/mobile/groups/feature/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/mobile/groups/feature/jcr:content/emulator|{"jcr:primarytype":"nam:nt:unstructured"} /etc/mobile/groups/feature/static.css|{"jcr:primarytype":"nam:nt:file"} /etc/mobile/groups/feature/static.css/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/mobile/groups/responsive|{"jcr:primarytype":"nam:cq:page"} /etc/mobile/groups/responsive/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/mobile/groups/responsive/jcr:content/emulator|{"jcr:primarytype":"nam:nt:unstructured"} /etc/mobile/groups/responsive/static.css|{"jcr:primarytype":"nam:nt:file"} /etc/mobile/groups/responsive/static.css/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/mobile/groups/smart|{"jcr:primarytype":"nam:cq:page"} /etc/mobile/groups/smart/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/mobile/groups/smart/jcr:content/emulator|{"jcr:primarytype":"nam:nt:unstructured"} /etc/mobile/groups/smart/static.css|{"jcr:primarytype":"nam:nt:file"} /etc/mobile/groups/smart/static.css/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/mobile/groups/touch|{"jcr:primarytype":"nam:cq:page"} /etc/mobile/groups/touch/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/mobile/groups/touch/jcr:content/emulator|{"jcr:primarytype":"nam:nt:unstructured"} /etc/mobile/groups/touch/static.css|{"jcr:primarytype":"nam:nt:file"} /etc/mobile/groups/touch/static.css/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/mobile/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/mobile/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/mobile/statistics|{"jcr:primarytype":"nam:sling:folder"} /etc/mobile/useragent-test|{"jcr:primarytype":"nam:sling:folder"} /etc/packages|{"jcr:primarytype":"nam:sling:folder"} /etc/packages/adobe|{"jcr:primarytype":"nam:nt:folder"} /etc/packages/adobe/granite|{"jcr:primarytype":"nam:nt:folder"} /etc/packages/adobe/granite/com.adobe.coralui.rte-cq5-5.12.8.zip|{"jcr:primarytype":"nam:nt:file"} /etc/packages/adobe/granite/com.adobe.coralui.rte-cq5-5.12.8.zip/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/packages/com.skylineassetsjun|{"jcr:primarytype":"nam:sling:folder"} /etc/packages/com.skylineassetsjun/aem-skylineassetsjun-project.ui.content-0.0.1-snapshot-cp2fm-converted.zip|{"jcr:primarytype":"nam:nt:file"} /etc/packages/com.skylineassetsjun/aem-skylineassetsjun-project.ui.content-0.0.1-snapshot-cp2fm-converted.zip/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/packages/com.skylineassetsjun/aem-skylineassetsjun-project.ui.content-0.0.1-snapshot-cp2fm-converted.zip/jcr:content/vlt:definition|{"jcr:primarytype":"nam:vlt:packagedefinition"} /etc/packages/com.skylineassetsjun/aem-skylineassetsjun-project.ui.content-0.0.1-snapshot-cp2fm-converted.zip/jcr:content/vlt:definition/filter|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/com.skylineassetsjun/aem-skylineassetsjun-project.ui.content-0.0.1-snapshot-cp2fm-converted.zip/jcr:content/vlt:definition/filter/f0|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/com.skylineassetsjun/aem-skylineassetsjun-project.ui.content-0.0.1-snapshot-cp2fm-converted.zip/jcr:content/vlt:definition/filter/f1|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/com.skylineassetsjun/aem-skylineassetsjun-project.ui.content-0.0.1-snapshot-cp2fm-converted.zip/jcr:content/vlt:definition/filter/f2|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/com.skylineassetsjun/aem-skylineassetsjun-project.ui.content-0.0.1-snapshot-cp2fm-converted.zip/jcr:content/vlt:definition/filter/f3|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/day|{"jcr:primarytype":"nam:sling:folder"} /etc/packages/my_packages|{"jcr:primarytype":"nam:sling:folder"} /etc/packages/my_packages/.snapshot|{"jcr:primarytype":"nam:sling:folder"} /etc/packages/my_packages/.snapshot/damassetelastic-7-custom-2-0.0.1.zip|{"jcr:primarytype":"nam:nt:file"} /etc/packages/my_packages/.snapshot/damassetelastic-7-custom-2-0.0.1.zip/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/packages/my_packages/.snapshot/damassetelastic-7-custom-2-0.0.1.zip/jcr:content/vlt:definition|{"jcr:primarytype":"nam:vlt:packagedefinition"} /etc/packages/my_packages/.snapshot/damassetelastic-7-custom-2-0.0.1.zip/jcr:content/vlt:definition/filter|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/my_packages/.snapshot/damassetelastic-7-custom-2-0.0.1.zip/jcr:content/vlt:definition/filter/f0|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/my_packages/damassetelastic-7-custom-2-0.0.1.zip|{"jcr:primarytype":"nam:nt:file"} /etc/packages/my_packages/damassetelastic-7-custom-2-0.0.1.zip/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/packages/my_packages/damassetelastic-7-custom-2-0.0.1.zip/jcr:content/vlt:definition|{"jcr:primarytype":"nam:vlt:packagedefinition"} /etc/packages/my_packages/damassetelastic-7-custom-2-0.0.1.zip/jcr:content/vlt:definition/filter|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/my_packages/damassetelastic-7-custom-2-0.0.1.zip/jcr:content/vlt:definition/filter/f0|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/my_packages/damassetlucene-7.zip|{"jcr:primarytype":"nam:nt:file"} /etc/packages/my_packages/damassetlucene-7.zip/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/packages/my_packages/damassetlucene-7.zip/jcr:content/vlt:definition|{"jcr:primarytype":"nam:vlt:packagedefinition"} /etc/packages/my_packages/damassetlucene-7.zip/jcr:content/vlt:definition/filter|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/my_packages/damassetlucene-7.zip/jcr:content/vlt:definition/filter/f0|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/my_packages/index.zip|{"jcr:primarytype":"nam:nt:file"} /etc/packages/my_packages/index.zip/jcr:content|{"jcr:primarytype":"nam:nt:resource"} /etc/packages/my_packages/index.zip/jcr:content/vlt:definition|{"jcr:primarytype":"nam:vlt:packagedefinition"} /etc/packages/my_packages/index.zip/jcr:content/vlt:definition/filter|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/my_packages/index.zip/jcr:content/vlt:definition/filter/f0|{"jcr:primarytype":"nam:nt:unstructured"} /etc/packages/sling|{"jcr:primarytype":"nam:nt:folder"} /etc/packages/sling/distribution|{"jcr:primarytype":"nam:sling:folder"} /etc/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow10|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow10/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow11|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow11/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow12|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow12/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow13|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow13/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow14|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow14/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow15|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow16|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow16/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow17|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow18|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow19|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow19/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow2/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow20|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow20/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow21|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow22|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow22/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow23|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow23/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow24|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow25|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow25/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow26|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow26/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow27|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow27/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow28|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow28/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow29|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow3|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow3/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow30|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow30/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow31|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow31/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow32|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow4|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow4/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow5|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow5/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow6|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow6/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow7|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow7/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow8|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow8/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/allow9|{"jcr:primarytype":"nam:rep:grantace"} /etc/rep:policy/allow9/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/rep:policy/deny1|{"jcr:primarytype":"nam:rep:denyace"} /etc/reports|{"jcr:primarytype":"nam:sling:folder"} /etc/reports/auditreport|{"jcr:primarytype":"nam:cq:page"} /etc/reports/auditreport/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/reports/auditreport/jcr:content/report|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/auditreport/jcr:content/report/columns|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/auditreport/jcr:content/report/columns/pagecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/auditreport/jcr:content/report/columns/pagecol/settings|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/auditreport/jcr:content/report/columns/timecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/auditreport/jcr:content/report/columns/typecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/auditreport/jcr:content/report/columns/usercol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/auditreport/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/reports/auditreport/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/reports/compreport|{"jcr:primarytype":"nam:cq:page"} /etc/reports/compreport/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/reports/compreport/jcr:content/report|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/compreport/jcr:content/report/columns|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/compreport/jcr:content/report/columns/authorcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/compreport/jcr:content/report/columns/comppathcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/compreport/jcr:content/report/columns/comptypecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/compreport/jcr:content/report/columns/lastmodcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/compreport/jcr:content/report/columns/pagecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/compreport/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/reports/compreport/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/reports/diskusage|{"jcr:primarytype":"nam:cq:page"} /etc/reports/diskusage/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/reports/healthcheck|{"jcr:primarytype":"nam:cq:page"} /etc/reports/healthcheck/jcr:content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/reports/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/reports/rep:policy/deny1|{"jcr:primarytype":"nam:rep:denyace"} /etc/reports/rep:policy/deny1/rep:restrictions|{"jcr:primarytype":"nam:rep:restrictions"} /etc/reports/userreport|{"jcr:primarytype":"nam:cq:page"} /etc/reports/userreport/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/reports/userreport/jcr:content/report|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/agecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/countrycol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/domaincol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/domaincol/settings|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/emailcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/familynamecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/familynamecol/settings|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/gendercol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/givennamecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/idcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/interestcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/languagecol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/jcr:content/report/columns/languagecol/settings|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/userreport/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/reports/userreport/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/reports/wfinstances|{"jcr:primarytype":"nam:cq:page"} /etc/reports/wfinstances/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/reports/wfinstances/jcr:content/report|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/wfinstances/jcr:content/report/columns|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/wfinstances/jcr:content/report/columns/durationcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/wfinstances/jcr:content/report/columns/endcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/wfinstances/jcr:content/report/columns/modelcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/wfinstances/jcr:content/report/columns/payloadcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/wfinstances/jcr:content/report/columns/startcol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/wfinstances/jcr:content/report/columns/statuscol|{"jcr:primarytype":"nam:nt:unstructured"} /etc/reports/wfinstances/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/reports/wfinstances/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/scaffolding|{"jcr:primarytype":"nam:cq:page"} /etc/scaffolding/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/scaffolding/jcr:content/cq:dialog|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic/items|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic/items/tags|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic/items/tags/datasource|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic/items/tags/options|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic/items/tags/values|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic/items/tags-delete|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic/items/tags-typehint|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/items/basic/items/title|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/cq:dialog/content/items/tabs/layout|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/jcr:content/dialog|{"jcr:primarytype":"nam:cq:dialog"} /etc/scaffolding/jcr:content/dialog/items|{"jcr:primarytype":"nam:cq:widgetcollection"} /etc/scaffolding/jcr:content/dialog/items/tab1|{"jcr:primarytype":"nam:cq:panel"} /etc/scaffolding/jcr:content/dialog/items/tab1/items|{"jcr:primarytype":"nam:cq:widgetcollection"} /etc/scaffolding/jcr:content/dialog/items/tab1/items/title|{"jcr:primarytype":"nam:cq:widget"} /etc/scaffolding/jcr:content/dialog/items/tab4|{"jcr:primarytype":"nam:cq:panel"} /etc/scaffolding/jcr:content/dialog/items/tab4/items|{"jcr:primarytype":"nam:cq:widgetcollection"} /etc/scaffolding/jcr:content/dialog/items/tab4/items/tags|{"jcr:primarytype":"nam:cq:widget"} /etc/scaffolding/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/scaffolding/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/scaffolding/resource|{"jcr:primarytype":"nam:cq:page"} /etc/scaffolding/resource/jcr:content|{"jcr:primarytype":"nam:cq:pagecontent"} /etc/scaffolding/resource/jcr:content/cq:dialog|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content/items|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content/items/tabs|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content/items/tabs/items|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content/items/tabs/items/basic|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content/items/tabs/items/basic/items|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content/items/tabs/items/basic/items/description|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content/items/tabs/items/basic/items/title|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/cq:dialog/content/items/tabs/layout|{"jcr:primarytype":"nam:nt:unstructured"} /etc/scaffolding/resource/jcr:content/dialog|{"jcr:primarytype":"nam:cq:dialog"} /etc/scaffolding/resource/jcr:content/dialog/items|{"jcr:primarytype":"nam:cq:widgetcollection"} /etc/scaffolding/resource/jcr:content/dialog/items/basic|{"jcr:primarytype":"nam:cq:panel"} /etc/scaffolding/resource/jcr:content/dialog/items/basic/items|{"jcr:primarytype":"nam:cq:widgetcollection"} /etc/scaffolding/resource/jcr:content/dialog/items/basic/items/description|{"jcr:primarytype":"nam:cq:widget"} /etc/scaffolding/resource/jcr:content/dialog/items/basic/items/title|{"jcr:primarytype":"nam:cq:widget"} /etc/security|{"jcr:primarytype":"nam:sling:folder"} /etc/segmentation|{"jcr:primarytype":"nam:sling:orderedfolder"} /etc/segmentation/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/segmentation/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/segmentation/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/segmentation/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /etc/tenants|{"jcr:primarytype":"nam:sling:folder"} /etc/truststore|{"jcr:primarytype":"nam:sling:folder"} /etc/truststore/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/truststore/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/versioning|{"jcr:primarytype":"nam:sling:folder"} /etc/versioning/purge|{"jcr:primarytype":"nam:sling:folder"} /etc/workflow|{"jcr:primarytype":"nam:sling:folder"} /etc/workflow/launcher|{"jcr:primarytype":"nam:sling:folder"} /etc/workflow/launcher/config|{"jcr:primarytype":"nam:sling:folder"} /etc/workflow/launcher/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/workflow/launcher/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/workflow/launcher/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /etc/workflow/models|{"jcr:primarytype":"nam:sling:folder"} /etc/workflow/models/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/workflow/models/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/workflow/models/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /etc/workflow/packages|{"jcr:primarytype":"nam:sling:folder"} /etc/workflow/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/workflow/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /etc/workflow/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /etc/workflow/scripts|{"jcr:primarytype":"nam:sling:folder"} /etc/workflow/scripts/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /etc/workflow/scripts/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /etc/workflow/wcm|{"jcr:primarytype":"nam:sling:folder"} /etc/workflow/wcm/templates|{"jcr:primarytype":"nam:sling:folder"} /system|{"jcr:primarytype":"nam:sling:folder"} /system/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /system/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /system/sling|{"jcr:primarytype":"nam:sling:folder"} /system/sling/installer|{"jcr:primarytype":"nam:sling:folder"} /system/sling/installer/jcr|{"jcr:primarytype":"nam:sling:folder"} /system/sling/installer/jcr/pauseinstallation|{"jcr:primarytype":"nam:sling:folder"} /system/sling/monitoring|{"jcr:primarytype":"nam:nt:folder"} /system/sling/monitoring/mbeans|{"jcr:primarytype":"nam:sling:folder"} /system/sling/monitoring/mbeans/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /system/sling/monitoring/mbeans/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /tmp|{"jcr:primarytype":"nam:sling:folder"} /tmp/content|{"jcr:primarytype":"nam:sling:orderedfolder"} /tmp/content/dam|{"jcr:primarytype":"nam:sling:orderedfolder"} /tmp/content/dam/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /tmp/content/dam/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /tmp/content/dam/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /tmp/content/dmsearch|{"jcr:primarytype":"nam:sling:orderedfolder"} /tmp/content/dmsearch/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /tmp/content/dmsearch/rep:policy/allow|{"jcr:primarytype":"nam:rep:grantace"} /tmp/content/dmsearch/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /tmp/rep:policy|{"jcr:primarytype":"nam:rep:acl"} /tmp/rep:policy/allow1|{"jcr:primarytype":"nam:rep:grantace"} /tmp/rep:policy/allow2|{"jcr:primarytype":"nam:rep:grantace"} /tmp/rep:policy/deny|{"jcr:primarytype":"nam:rep:denyace"} /tmp/versionhistory|{"jcr:primarytype":"nam:sling:folder"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/multiple-node-type-simple-split-with-nested-parent.json # --- /a|{"jcr:primarytype":"nam:no-split-1"} /a/a|{"jcr:primarytype":"nam:split"} /b|{"jcr:primarytype":"nam:no-split-2"} /b/a|{"jcr:primarytype":"nam:split"} /b/c/a|{"jcr:primarytype":"nam:no-split-3"} /b/c/b|{"jcr:primarytype":"nam:split"} /c|{"jcr:primarytype":"nam:split"} /c/a|{"jcr:primarytype":"nam:no-split-4"} /c/a/a|{"jcr:primarytype":"nam:split"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/unknown-no-split.json # --- /a|{} /a/a|{"jcr:primarytype":"not-for-split"} /a/b|{"jcr:primarytype":"vvbmftryiyofbsdfg7w0y8eru32qwhrfwsfjm;d"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/pipelined/merge-stage-1.json # --- /a|{"jcr:primarytype":"nam:merge-a"} /b|{"jcr:primarytype":"nam:merge-b"} /c|{"jcr:primarytype":"nam:merge-c"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/pipelined/merge-expected.json # --- /a|{"jcr:primarytype":"nam:merge-a"} /a/1|{"jcr:primarytype":"nam:merge-a-1"} /b|{"jcr:primarytype":"nam:merge-b"} /b/1|{"jcr:primarytype":"nam:merge-b-1"} /c|{"jcr:primarytype":"nam:merge-c"} /c/1|{"jcr:primarytype":"nam:merge-c-1"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-run-commons/src/test/resources/pipelined/merge-stage-2.json # --- /a/1|{"jcr:primarytype":"nam:merge-a-1"} /b/1|{"jcr:primarytype":"nam:merge-b-1"} /c/1|{"jcr:primarytype":"nam:merge-c-1"} # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-solr-core/src/test/resources/org/apache/jackrabbit/oak/jcr/query/test.txt # --- test jackrabbit full text indexing. following unique token included search index file indexed: ae502dbea2c411debd340ad156d89593 # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-solr-core/src/test/resources/org/apache/jackrabbit/oak/query/native_solr.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # # syntax: # * lines start spaces belong previous line # * lines starting "#" remarks. # * lines starting "select" queries, followed expected results empty line # * lines starting "explain" followed expected query plan empty line # * lines starting "sql1" run using sql1 language # * lines starting "xpath2sql" converted xpath sql2 # * lines committed microkernel (line line) # * new tests typically added top, syntax docs # * use ascii character commit / + "test": { "a": { "name": "hello" }, "b": { "name" : "world" }} xpath /jcr:root/test/a[rep:native('solr', 'name:(hello world)')] /test/a xpath //*[rep:native('solr', 'name:(hello world)')] /test/a /test/b select [jcr:path] [nt:base] native('solr', 'name:(hello world)') /test/a /test/b # streamlined via direct http call request handler select [jcr:path] [nt:base] native('solr', 'select?q=hello world') /test/a /test/b select [jcr:path] [nt:base] native(a, 'solr', 'path_child:\/test _val_:"recip(rord(name),1,2,3)"') /test/a /test/b select [jcr:path] [nt:base] native('solr', 'path_child:\/test _val_:"recip(rord(name),1,2,3)"') /test/a /test/b # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-solr-core/src/test/resources/solr/oak/conf/protwords.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-solr-core/src/test/resources/solr/oak/conf/synonyms.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-solr-core/src/test/resources/solr/oak/conf/stopwords.txt # --- # licensed apache software foundation (asf) one # contributor license agreements. see notice file distributed # work additional information regarding copyright ownership. # asf licenses file apache license, version 2.0 # (the "license"); may use file except compliance # license. may obtain copy license # # http://www.apache.org/licenses/license-2.0 # # unless required applicable law agreed writing, software # distributed license distributed "as is" basis, # without warranties conditions kind, either express implied. # see license specific language governing permissions # limitations license. # --- # filename: /users/aneacsu/dev/projects/test/jackrabbit-oak/oak-auth-external/readme.md # --- oak external authentication support =================================== license ------- (see top-level [license.txt](../license.txt) full license details) collective work: copyright 2012 apache software foundation. licensed apache software foundation (asf) one contributor license agreements. see notice file distributed work additional information regarding copyright ownership. asf licenses file apache license, version 2.0 (the "license"); may use file except compliance license. may obtain copy license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed writing, software distributed license distributed "as is" basis, without warranties conditions kind, either express implied. see license specific language governing permissions limitations license.